[{"docID": "t5_2fwo","qSentId": 29015,"question": "How I built a cheat bot to solve the GBA game Kuru Kuru Kururin","aSentId": 29016,"answer": "That shit was fucking beautiful. Great work OP, looking forward for the follow up! ","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29015,"question": "How I built a cheat bot to solve the GBA game Kuru Kuru Kururin","aSentId": 29018,"answer": "really interesting stuff! I've always wanted to write a bot for some of the games that I've played, but I never knew how to even read the state of the game and put it into a meaningful format for my program.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29015,"question": "How I built a cheat bot to solve the GBA game Kuru Kuru Kururin","aSentId": 29020,"answer": "Holy crud! I love Kuru Kuru Kururin! Super cool seeing a game I've spent so much time in getting love in other areas than just playing it. I'm also incredibly interested in how games of this era (and earlier) work, so this was a ridiculously cool read.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29021,"question": "Holy crud! I love Kuru Kuru Kururin! Super cool seeing a game I've spent so much time in getting love in other areas than just playing it. I'm also incredibly interested in how games of this era (and earlier) work, so this was a ridiculously cool read.","aSentId": 29022,"answer": "Yeah, not only was this a great read, but now I have to track down Kuru Kuru Kururin and play it again.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29031,"question": "Mildly interesting accomplishment. Now build a bot to cheat death.","aSentId": 29032,"answer": "It's probably quite easy once you manage to run the universe on an emulator.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29033,"question": "It's probably quite easy once you manage to run the universe on an emulator.","aSentId": 29034,"answer": "Quantum 'puters baby.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29036,"question": "The CS Handbook - My Free E-Book for Leaning Algorithms and Data Structures (First Draft)","aSentId": 29037,"answer": "Why are you writing this? ","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29038,"question": "Why are you writing this? ","aSentId": 29039,"answer": "It first started as my notes when I was learning CS which I then made into a small handbook for my CS club in high school. When I started university, I realized there were no good references that taught algorithms / data structures without using a lot of math jargon and symbols. So I decided to make my handbook bigger and better and help other people learn from it.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29038,"question": "Why are you writing this? ","aSentId": 29041,"answer": "Please don't downvote this. The goal of a project is interesting to know when providing feedback.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29036,"question": "The CS Handbook - My Free E-Book for Leaning Algorithms and Data Structures (First Draft)","aSentId": 29043,"answer": "My first impression is that you have lots of codes, but not much explanation of what is happening. This makes it kind of impossible to understand what is going on, especially if you do not know anything about algorithms yet","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29044,"question": "My first impression is that you have lots of codes, but not much explanation of what is happening. This makes it kind of impossible to understand what is going on, especially if you do not know anything about algorithms yet","aSentId": 29045,"answer": "Could you be more specific? Most of the code does contain an explanation.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29036,"question": "The CS Handbook - My Free E-Book for Leaning Algorithms and Data Structures (First Draft)","aSentId": 29047,"answer": "Listing algorithms with associated complexity doesn't help a student unless you actually explain what complexity is. I would have expected that in \"fundamentals\", which gives irrelevant information about computer architecture running time calculations.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29048,"question": "Listing algorithms with associated complexity doesn't help a student unless you actually explain what complexity is. I would have expected that in \"fundamentals\", which gives irrelevant information about computer architecture running time calculations.","aSentId": 29049,"answer": "If you clicked on [Runtime Analysis](http://localhost/wikialg/Runtime_and_Memory) in the Fundamentals section, you can see that I explained the complexities. ","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29051,"question": "Might help me with my interview prep. Thanks!","aSentId": 29052,"answer": "No problem!","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29054,"question": "The writing needs editing both for language and for content. \n\nSpecifically re the content: There tend to be sweeping statements that are not accurate, because they apply only to the subset you're writing about, but not other cases. For example, \"A hashing algorithm is an algorithm that takes an element and converts it to a smaller chunk called a hash.\" This is not correct. This is often true, but certainly not always. An item doesn't have to be longer than 128 bits for you to compute a 128 bit hash of it.\n\nAnd so forth. In a book like this, it's important that everything you write be strictly accurate.","aSentId": 29055,"answer": "As I put in the title, this is a first draft and there still needs a lot of editing to be done but thanks for your feedback! I will go through my content more throughly to check for inaccuracies.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29058,"question": "The Life of a PHP Developer","aSentId": 29059,"answer": "if someone thinks the fact that yahoo and Facebook use php for view logic validates php....its more an  indictment of how deeply both orgs are bound by legacy code. you should instead be looking at which and how many orgs are choosing it today when not bound by yesterdays mistakes","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29060,"question": "if someone thinks the fact that yahoo and Facebook use php for view logic validates php....its more an  indictment of how deeply both orgs are bound by legacy code. you should instead be looking at which and how many orgs are choosing it today when not bound by yesterdays mistakes","aSentId": 29061,"answer": "If you look at Facebook, it's actually a pretty good indictment of php.\n\nThey spent how much to build a better php compiler and a slightly better php-like language?","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29062,"question": "If you look at Facebook, it's actually a pretty good indictment of php.\n\nThey spent how much to build a better php compiler and a slightly better php-like language?","aSentId": 29063,"answer": "They built the compiler because of performance. PHP7 with OpCache enabled and a theoretical JIT should come close to the performance of HHVM. HHVM still runs standard PHP. One of the reasons Facebook built Hack was to add static features. PHP has static hinting for non-scalars, hinting for return types and as we speak the internal developers are voting on hinting and enforcement of scalar types.\n\nWhile it was not true when Facebook started HHVM, PHP now has more static features than any of it's competitors (Python, Ruby, JavaScript)\n\nYour point?","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29064,"question": "They built the compiler because of performance. PHP7 with OpCache enabled and a theoretical JIT should come close to the performance of HHVM. HHVM still runs standard PHP. One of the reasons Facebook built Hack was to add static features. PHP has static hinting for non-scalars, hinting for return types and as we speak the internal developers are voting on hinting and enforcement of scalar types.\n\nWhile it was not true when Facebook started HHVM, PHP now has more static features than any of it's competitors (Python, Ruby, JavaScript)\n\nYour point?","aSentId": 29065,"answer": "&gt; Your point?\n\ndidn't you just respond to that?","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29064,"question": "They built the compiler because of performance. PHP7 with OpCache enabled and a theoretical JIT should come close to the performance of HHVM. HHVM still runs standard PHP. One of the reasons Facebook built Hack was to add static features. PHP has static hinting for non-scalars, hinting for return types and as we speak the internal developers are voting on hinting and enforcement of scalar types.\n\nWhile it was not true when Facebook started HHVM, PHP now has more static features than any of it's competitors (Python, Ruby, JavaScript)\n\nYour point?","aSentId": 29067,"answer": "A lot of these things aren't around when the negative attitude toward PHP was shaped. Many of the cited articles came out when PHP was written like an imperative template language. PHP may have come a long way, but it's competition has evolved as well: check out Go, for example.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29068,"question": "A lot of these things aren't around when the negative attitude toward PHP was shaped. Many of the cited articles came out when PHP was written like an imperative template language. PHP may have come a long way, but it's competition has evolved as well: check out Go, for example.","aSentId": 29069,"answer": "I'm sorry, but Go is horrible. If I left PHP^^[1]  it would be for a compiled and static and SANE language, like C#. Python, although I use it for all scripting matters, offers me nothing in the web world that PHP doesn't me, on top of being actually slower and having a disrupted community. Ruby never really interested me. I better not state my opinion of Node.js for web work.\n\nI understand that the criticism came when PHP didn't have all of these things. That's the point. If you felt the need to leave PHP because you were forced to work with it in the PHP4 era (or even before 5.3) then I totally understand you, whatever language you choose. But don't come today pretending that we still have those issues because we don't.\n\nNamespaces. Autoloading. A de-facto package manager. A growing and glowing community. Being part of the communities of JavaScript, Python and PHP, the PHP one is the most newbie-friendly while still the one that pushes unit tests and good coding practices more than any of the other, where being clever with your code seems to be more valued.\n\nYou like OOP? We have interfaces, abstract classes, traits, late static binding, you name it. You like functional? We have anonymous functions, closures and higher order functions. Yes, really, we do.\n\n    function sayHello($person){\n       return function() use ($person){\n           echo \"Hello, $person\";\n       };\n    }\n    \n    $fun = sayHello(\"SosNapoleon\");\n    $fun(); // Hello, SosNapoleon\n\n-----\n\n[1] For web work, since I already use Python for scripting and C# for desktop apps","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29070,"question": "I'm sorry, but Go is horrible. If I left PHP^^[1]  it would be for a compiled and static and SANE language, like C#. Python, although I use it for all scripting matters, offers me nothing in the web world that PHP doesn't me, on top of being actually slower and having a disrupted community. Ruby never really interested me. I better not state my opinion of Node.js for web work.\n\nI understand that the criticism came when PHP didn't have all of these things. That's the point. If you felt the need to leave PHP because you were forced to work with it in the PHP4 era (or even before 5.3) then I totally understand you, whatever language you choose. But don't come today pretending that we still have those issues because we don't.\n\nNamespaces. Autoloading. A de-facto package manager. A growing and glowing community. Being part of the communities of JavaScript, Python and PHP, the PHP one is the most newbie-friendly while still the one that pushes unit tests and good coding practices more than any of the other, where being clever with your code seems to be more valued.\n\nYou like OOP? We have interfaces, abstract classes, traits, late static binding, you name it. You like functional? We have anonymous functions, closures and higher order functions. Yes, really, we do.\n\n    function sayHello($person){\n       return function() use ($person){\n           echo \"Hello, $person\";\n       };\n    }\n    \n    $fun = sayHello(\"SosNapoleon\");\n    $fun(); // Hello, SosNapoleon\n\n-----\n\n[1] For web work, since I already use Python for scripting and C# for desktop apps","aSentId": 29071,"answer": "&gt; I'm sorry, but go is horrible\nFeel free to support that statement.\n\nI left PHP shortly after it got OO features, but before anyone used them. Frankly, it was a pain to have to set up a whole *AMP stack (and learn how to configure it) just to get started. Besides that, it was still only used as a template language, mixing LOTS of logic with the HTML presentation. Besides that, there wasn't any support for parallelism or concurrency. Maybe the situation is better now, but I still need more information about why I should switch back to PHP from Go?\n\n&gt; But don't come today pretending that we still have those issues because we don't.\n\nWhere did I say anything remotely like that?","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29072,"question": "&gt; I'm sorry, but go is horrible\nFeel free to support that statement.\n\nI left PHP shortly after it got OO features, but before anyone used them. Frankly, it was a pain to have to set up a whole *AMP stack (and learn how to configure it) just to get started. Besides that, it was still only used as a template language, mixing LOTS of logic with the HTML presentation. Besides that, there wasn't any support for parallelism or concurrency. Maybe the situation is better now, but I still need more information about why I should switch back to PHP from Go?\n\n&gt; But don't come today pretending that we still have those issues because we don't.\n\nWhere did I say anything remotely like that?","aSentId": 29073,"answer": "I'm not talking about you, I'm talking about people who left PHP circa 2006-2007 and when they talk about PHP here they talk like we are still stuck with the last version they worked with.\n\nIf you were mixing HTML with PHP, there was a problem but it wasn't PHP the one who had it.\n\nI mean, there is no reason to switch from Go to PHP. With Go you gain performance, if that's what you're worried about. My point is that there is no reason to leave PHP for one of the dynamic competitors.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29074,"question": "I'm not talking about you, I'm talking about people who left PHP circa 2006-2007 and when they talk about PHP here they talk like we are still stuck with the last version they worked with.\n\nIf you were mixing HTML with PHP, there was a problem but it wasn't PHP the one who had it.\n\nI mean, there is no reason to switch from Go to PHP. With Go you gain performance, if that's what you're worried about. My point is that there is no reason to leave PHP for one of the dynamic competitors.","aSentId": 29075,"answer": "The idiom in the PHP community was to mix HTML and PHP. Bad practices were standard practice.\n\nYou should try Go sometime. It's so simple and fast to develop with. It's at least as easy to learn as PHP (having learned both) but it also has excellent performance, a great web server, and it's compiled. :)","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29076,"question": "The idiom in the PHP community was to mix HTML and PHP. Bad practices were standard practice.\n\nYou should try Go sometime. It's so simple and fast to develop with. It's at least as easy to learn as PHP (having learned both) but it also has excellent performance, a great web server, and it's compiled. :)","aSentId": 29077,"answer": "Does it have generics yet? :P","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29060,"question": "if someone thinks the fact that yahoo and Facebook use php for view logic validates php....its more an  indictment of how deeply both orgs are bound by legacy code. you should instead be looking at which and how many orgs are choosing it today when not bound by yesterdays mistakes","aSentId": 29079,"answer": "It's like pointing to old banking software written in COBAL as an example of how it's still used in mission critical implementations and is a great choice for the next version. ","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29060,"question": "if someone thinks the fact that yahoo and Facebook use php for view logic validates php....its more an  indictment of how deeply both orgs are bound by legacy code. you should instead be looking at which and how many orgs are choosing it today when not bound by yesterdays mistakes","aSentId": 29081,"answer": "PHP isn't quite as bad as a lot of people think but it is still lacking in a lot of ways. Sure it can do OOP as described in the article but it lacks some of the more advanced OO features found in other languages. Also, the builtin functions are for the most part not OO and don't follow any discernible pattern. I used to do a lot of PHP programming and I would always have to look up the various array and string functions because there was no easy way to recall them.\n\nThe article is pretty defensive and doesn't do a good job of rebutting some of the more reasonable criticisms of PHP.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29082,"question": "PHP isn't quite as bad as a lot of people think but it is still lacking in a lot of ways. Sure it can do OOP as described in the article but it lacks some of the more advanced OO features found in other languages. Also, the builtin functions are for the most part not OO and don't follow any discernible pattern. I used to do a lot of PHP programming and I would always have to look up the various array and string functions because there was no easy way to recall them.\n\nThe article is pretty defensive and doesn't do a good job of rebutting some of the more reasonable criticisms of PHP.","aSentId": 29083,"answer": "&gt; Sure it can do OOP as described in the article but it lacks some of the more advanced OO features found in other languages.\n&gt; \n\nLike what?","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29084,"question": "&gt; Sure it can do OOP as described in the article but it lacks some of the more advanced OO features found in other languages.\n&gt; \n\nLike what?","aSentId": 29085,"answer": "I would say the only real features it lacks compared to other OO languages are annotations and partial classes.  Annotations in PHP are the worst.  They are currently handled by the Doctrine Common library and are parsed out of the docblock comments, not a feature of the language itself.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29086,"question": "I would say the only real features it lacks compared to other OO languages are annotations and partial classes.  Annotations in PHP are the worst.  They are currently handled by the Doctrine Common library and are parsed out of the docblock comments, not a feature of the language itself.","aSentId": 29087,"answer": "What do you mean by partial classes? PHP has interfaces and abstract classes.\n\n","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29088,"question": "What do you mean by partial classes? PHP has interfaces and abstract classes.\n\n","aSentId": 29089,"answer": "Sorry - I guess this isn't as much of an OO feature, is it is specifically a C# feature.  It allows you to declare a class partial and split it across multiple files.  I don't find it particularly useful except when dealing with generated code (which the .NET stack has a lot of).","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29090,"question": "Sorry - I guess this isn't as much of an OO feature, is it is specifically a C# feature.  It allows you to declare a class partial and split it across multiple files.  I don't find it particularly useful except when dealing with generated code (which the .NET stack has a lot of).","aSentId": 29091,"answer": "A class is supposed to be a cohesive component of the application. Spreading it across multiple files is ridiculous.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29086,"question": "I would say the only real features it lacks compared to other OO languages are annotations and partial classes.  Annotations in PHP are the worst.  They are currently handled by the Doctrine Common library and are parsed out of the docblock comments, not a feature of the language itself.","aSentId": 29093,"answer": "PHP has traits.  Not the same as partial classes, but it's something.\nhttp://php.net/manual/es/language.oop5.traits.php","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29086,"question": "I would say the only real features it lacks compared to other OO languages are annotations and partial classes.  Annotations in PHP are the worst.  They are currently handled by the Doctrine Common library and are parsed out of the docblock comments, not a feature of the language itself.","aSentId": 29095,"answer": "You don't necessarily need annotations if you have overridable static and const members.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29084,"question": "&gt; Sure it can do OOP as described in the article but it lacks some of the more advanced OO features found in other languages.\n&gt; \n\nLike what?","aSentId": 29097,"answer": "Multiple inheritance,  to mention one.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29098,"question": "Multiple inheritance,  to mention one.","aSentId": 29099,"answer": "Multiple inheritance is a horrible thing. PHP has traits","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29082,"question": "PHP isn't quite as bad as a lot of people think but it is still lacking in a lot of ways. Sure it can do OOP as described in the article but it lacks some of the more advanced OO features found in other languages. Also, the builtin functions are for the most part not OO and don't follow any discernible pattern. I used to do a lot of PHP programming and I would always have to look up the various array and string functions because there was no easy way to recall them.\n\nThe article is pretty defensive and doesn't do a good job of rebutting some of the more reasonable criticisms of PHP.","aSentId": 29101,"answer": "The problem with PHP is not that it lacks features. It is that its features are badly designed and inconsistent.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29058,"question": "The Life of a PHP Developer","aSentId": 29103,"answer": "Instead of complaining about how the development community is attacking PHP and making PHP developers feel bad.   Tell us why PHP is still relevant.  Why is it still so popular?  How is it improving?  And why should developers learn it?","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29104,"question": "Instead of complaining about how the development community is attacking PHP and making PHP developers feel bad.   Tell us why PHP is still relevant.  Why is it still so popular?  How is it improving?  And why should developers learn it?","aSentId": 29105,"answer": "The author almost touches on this topic by mentioning that PHP has OOP, a package manager and testing frameworks. But that raises questions like: Is the OOP just as bad as the rest of the language? Is OOP useful for PHP, or is it more of an \"us too!\" feature? The other two things are just modern tools that show PHP developers are somewhat modernized. I wish the author said more in support of the language besides \"Come on guys, it's really not *that* bad!\"","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29106,"question": "The author almost touches on this topic by mentioning that PHP has OOP, a package manager and testing frameworks. But that raises questions like: Is the OOP just as bad as the rest of the language? Is OOP useful for PHP, or is it more of an \"us too!\" feature? The other two things are just modern tools that show PHP developers are somewhat modernized. I wish the author said more in support of the language besides \"Come on guys, it's really not *that* bad!\"","aSentId": 29107,"answer": "Yes, this article is pretty lacking in content. OOP in PHP is not bad and it's pretty useful. There are only few bad things I can think about:\n\n1. Absence of scalar type hints (You can typehint user-generated type or `DateTime`, but not `int` or `str`), hopefully this will be solved in PHP 7.\n\n2. Passing `null` to a typehinted argument is not possible. Unless you make it an optional argument and declare it as `DateTime $addedDate = null`. In this case it's perfectly okay to pass `null`. This is definitely going to be solved in PHP 7.\n\n3. Multiple inheritance. It just doesn't exist. PHP uses concept of [Traits](http://php.net/manual/en/language.oop5.traits.php) instead.\n\n\nThese are small things and they don't really hinder development much.\nResources like `phpsadness` and `lolphp` are mostly focused on obscure parts of the language nobody uses anymore.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29108,"question": "Yes, this article is pretty lacking in content. OOP in PHP is not bad and it's pretty useful. There are only few bad things I can think about:\n\n1. Absence of scalar type hints (You can typehint user-generated type or `DateTime`, but not `int` or `str`), hopefully this will be solved in PHP 7.\n\n2. Passing `null` to a typehinted argument is not possible. Unless you make it an optional argument and declare it as `DateTime $addedDate = null`. In this case it's perfectly okay to pass `null`. This is definitely going to be solved in PHP 7.\n\n3. Multiple inheritance. It just doesn't exist. PHP uses concept of [Traits](http://php.net/manual/en/language.oop5.traits.php) instead.\n\n\nThese are small things and they don't really hinder development much.\nResources like `phpsadness` and `lolphp` are mostly focused on obscure parts of the language nobody uses anymore.","aSentId": 29109,"answer": "&gt; Passing null to a typehinted argument is not possible.\n\nThis is a good thing.\n\n&gt; This is definitely going to be solved in PHP 7.\n\nI have not heard of any changes to this. Do you have more information? I promise you it can't be solved; it is one of too few things PHP gets unequivocally right.\n\n&gt; Multiple inheritance. It just doesn't exist.\n\nThis is also a good thing.\n\nPHP's support for OOP is much like a bastard child of Java's and C++'s. It gets enough right to not only be useful but to be strictly better than not having it, but it has some fundamental flaws that manifest every once in a while. Constructors, for instance, are a gigantic mess behind the scenes.\n\nWhen people say that 80% of the world's Web sites use PHP, they forget that 90% of everything is crap. The language is improving, no doubt about it, but there are only two reasons I would personally pick it for a new site: 1) Python and Ruby have too many issues of their own to bother with them, and 2) PHP is still the only language somebody else could pick up after me.\n\nMore than anything, that second reason is why PHP is still relevant.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29106,"question": "The author almost touches on this topic by mentioning that PHP has OOP, a package manager and testing frameworks. But that raises questions like: Is the OOP just as bad as the rest of the language? Is OOP useful for PHP, or is it more of an \"us too!\" feature? The other two things are just modern tools that show PHP developers are somewhat modernized. I wish the author said more in support of the language besides \"Come on guys, it's really not *that* bad!\"","aSentId": 29111,"answer": "considering phpsadnes has an oo section I gonna assume it's not great","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29112,"question": "considering phpsadnes has an oo section I gonna assume it's not great","aSentId": 29113,"answer": "Or you could give it a try instead of assuming.  Or shut up and use your language of choice.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29104,"question": "Instead of complaining about how the development community is attacking PHP and making PHP developers feel bad.   Tell us why PHP is still relevant.  Why is it still so popular?  How is it improving?  And why should developers learn it?","aSentId": 29115,"answer": "I haven't read the article, but I'll tackle some of your questions as a certified and nationally authorized PHP hater.\n\n&gt;...why PHP is still relevant.\n\nIt's still relevant because there are a lot of things done in PHP such as Wordpress, but the relevance comes from its popularity which comes from other reasons as I will explain.\n\n&gt;... Why is it still so popular?\n\nIt's popular for one of the same reasons Javascript is so damn popular.  Accessibility.  On most systems, you can have a PHP install running within minutes, and start serving up pages.  Take for instance Java, you have to get a Java install and then whoops, you downloaded the JRE, now go get the JDK.  Then you have to get a EE Server and configure it.  Now that you've got that done, you have to get your project and you may end up fighting with its dependencies since you aren't too knowledgeable about that shit either.  Finally, you can deploy,whoops, there is some more foolery and fuckery to be had with configuring some god damn thing.  Oh, and any time you want to change a page, you might have to recompile your app if the business logic changes and then deploy all over again.\n\nWith PHP and JS, you just hit F5 so the 'learners loop\" is pretty much the shortest out there.\n\n\n&gt;...How is it improving\n\nI don't have any background on this matter\n\n\n&gt;...And why should developers learn it?\n\n\nI would never suggest that a professional grade dev learn PHP.  But as I mentioned before, because the learners loop (learn -&gt; implement -&gt; observe changes) is so short and fool proof, I would recommend it to beginners because they won't get discouraged by the pitfalls that greet noobs in other languages.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29116,"question": "I haven't read the article, but I'll tackle some of your questions as a certified and nationally authorized PHP hater.\n\n&gt;...why PHP is still relevant.\n\nIt's still relevant because there are a lot of things done in PHP such as Wordpress, but the relevance comes from its popularity which comes from other reasons as I will explain.\n\n&gt;... Why is it still so popular?\n\nIt's popular for one of the same reasons Javascript is so damn popular.  Accessibility.  On most systems, you can have a PHP install running within minutes, and start serving up pages.  Take for instance Java, you have to get a Java install and then whoops, you downloaded the JRE, now go get the JDK.  Then you have to get a EE Server and configure it.  Now that you've got that done, you have to get your project and you may end up fighting with its dependencies since you aren't too knowledgeable about that shit either.  Finally, you can deploy,whoops, there is some more foolery and fuckery to be had with configuring some god damn thing.  Oh, and any time you want to change a page, you might have to recompile your app if the business logic changes and then deploy all over again.\n\nWith PHP and JS, you just hit F5 so the 'learners loop\" is pretty much the shortest out there.\n\n\n&gt;...How is it improving\n\nI don't have any background on this matter\n\n\n&gt;...And why should developers learn it?\n\n\nI would never suggest that a professional grade dev learn PHP.  But as I mentioned before, because the learners loop (learn -&gt; implement -&gt; observe changes) is so short and fool proof, I would recommend it to beginners because they won't get discouraged by the pitfalls that greet noobs in other languages.","aSentId": 29117,"answer": "if installing java is meaningful overhead for you, your project is too trivial to be worth discussing.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29116,"question": "I haven't read the article, but I'll tackle some of your questions as a certified and nationally authorized PHP hater.\n\n&gt;...why PHP is still relevant.\n\nIt's still relevant because there are a lot of things done in PHP such as Wordpress, but the relevance comes from its popularity which comes from other reasons as I will explain.\n\n&gt;... Why is it still so popular?\n\nIt's popular for one of the same reasons Javascript is so damn popular.  Accessibility.  On most systems, you can have a PHP install running within minutes, and start serving up pages.  Take for instance Java, you have to get a Java install and then whoops, you downloaded the JRE, now go get the JDK.  Then you have to get a EE Server and configure it.  Now that you've got that done, you have to get your project and you may end up fighting with its dependencies since you aren't too knowledgeable about that shit either.  Finally, you can deploy,whoops, there is some more foolery and fuckery to be had with configuring some god damn thing.  Oh, and any time you want to change a page, you might have to recompile your app if the business logic changes and then deploy all over again.\n\nWith PHP and JS, you just hit F5 so the 'learners loop\" is pretty much the shortest out there.\n\n\n&gt;...How is it improving\n\nI don't have any background on this matter\n\n\n&gt;...And why should developers learn it?\n\n\nI would never suggest that a professional grade dev learn PHP.  But as I mentioned before, because the learners loop (learn -&gt; implement -&gt; observe changes) is so short and fool proof, I would recommend it to beginners because they won't get discouraged by the pitfalls that greet noobs in other languages.","aSentId": 29119,"answer": "Your project has to get pretty damn big and long term before it'll ever recoup the additional setup and hosting investments.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29104,"question": "Instead of complaining about how the development community is attacking PHP and making PHP developers feel bad.   Tell us why PHP is still relevant.  Why is it still so popular?  How is it improving?  And why should developers learn it?","aSentId": 29121,"answer": "PHP programmer for almost 9 years here..\n\n&gt;Tell us why PHP is still relevant. Why is it still so popular?\n\nOnly because of the momentum it build during these years. Both in terms of applications and in terms of people who want to make web things with out spending much time learning programming.\n\n&gt;How is it improving? \n\nIt is not improving. It appears to be adding features, but most of these are broken or badly designed in some respect. Not surprising considering that most of these are implemented by novice programmers with only academic and no or very shallow real world experience. If you want proof, please take a look at the bug tracker to see comments by these guys.\n\nSo I would say that the 'improvements' that you see are a very dangerous farce. Because people might think things are being fixed with the language, but the real rotten core remains very much unchanged. And I suggest people to stay away from this language if possible..\n\n&gt;And why should developers learn it?\n\nOnly for the money. If you want to write correct/complex programs without much overhead, spend time and effort to learn something else. \n\n","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29058,"question": "The Life of a PHP Developer","aSentId": 29125,"answer": "I feel like it's a problem if you think of yourself as a \"&lt;language&gt; developer\", rather than \"a developer who knows &lt;language&gt;\".","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29127,"question": "I think that other languages have different variants of stigma attached to them. During my undergraduate study and final internship, anytime I mentioned concepts I had already know from Python--my professors and mentor/manager were very caustic about how Python wasn't \"really\" object oriented.  Especially considering that the version of Java we used didn't have primitive or function objects, it seemed very trivial. If you learned it first, all you'd want is candy and to not eat your vegetables...it's a scripting language is all etc., etc.","aSentId": 29128,"answer": "I've always felt that Python's objects were a bit awkward. The whole packaging in a directory containing an \"\\_\\_init__\" file or whatever it is just struck me as arcane. PHP's object-oriented features in the latest versions certainly feel closer to what you know from Java/C#/et al., with some of its own eccentricities (no multiple inheritance, traits, etc.)\n\nThis is another topic entirely, but maybe the object-oriented approach is not always the best one. Maybe the concept of chains of functions manipulating shared, semantically organized data structures really is a better and more maintainable approach. Unfortunately, the easy alignment of nouns to classes (this is a Car, it is a type of Vehicle) makes it feel so natural to slip into that mode of thinking, even when it leads to bloated, poorly decoupled, and difficult to maintain systems.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29129,"question": "I've always felt that Python's objects were a bit awkward. The whole packaging in a directory containing an \"\\_\\_init__\" file or whatever it is just struck me as arcane. PHP's object-oriented features in the latest versions certainly feel closer to what you know from Java/C#/et al., with some of its own eccentricities (no multiple inheritance, traits, etc.)\n\nThis is another topic entirely, but maybe the object-oriented approach is not always the best one. Maybe the concept of chains of functions manipulating shared, semantically organized data structures really is a better and more maintainable approach. Unfortunately, the easy alignment of nouns to classes (this is a Car, it is a type of Vehicle) makes it feel so natural to slip into that mode of thinking, even when it leads to bloated, poorly decoupled, and difficult to maintain systems.","aSentId": 29130,"answer": "&gt; Maybe the concept of chains of functions manipulating shared, semantically organized data structures really is a better and more maintainable approach.\n\nSounds interesting, where do I find more information?","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29129,"question": "I've always felt that Python's objects were a bit awkward. The whole packaging in a directory containing an \"\\_\\_init__\" file or whatever it is just struck me as arcane. PHP's object-oriented features in the latest versions certainly feel closer to what you know from Java/C#/et al., with some of its own eccentricities (no multiple inheritance, traits, etc.)\n\nThis is another topic entirely, but maybe the object-oriented approach is not always the best one. Maybe the concept of chains of functions manipulating shared, semantically organized data structures really is a better and more maintainable approach. Unfortunately, the easy alignment of nouns to classes (this is a Car, it is a type of Vehicle) makes it feel so natural to slip into that mode of thinking, even when it leads to bloated, poorly decoupled, and difficult to maintain systems.","aSentId": 29132,"answer": " &gt; I've always felt that Python's objects were a bit awkward. \n\nIt can be awkward but it's definitely consistent, which is very important.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29134,"question": "I love it. I love the hate everyone pours on PHP. \n\nI have a software company that works in PHP and we have clients bidding for our time. There is a lack of software engineer level developers willing to work in PHP despite a growing demand for them. And all that does for me is line my wallet. Plus I love the work. \n\nPHP is only part of what we do but it's what brings us the clients. \n\nSo long as ripping on PHP is the trendy thing to do I don't foresee that changing. \n\nEdit: to clarify in referring to the comments. I did rtfa. ","aSentId": 29135,"answer": "there will be decades of work for those willing to do maintenance on legacy code bases, and the work is often lucrative....the orgs have a hard req on keeping things going, even if the code is rotted and wrapped in duct tape...congrats, do enough of this work and you will be the critical path for any of these companies and you can just bleed them dry, which is what they deserve for choosing php","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29136,"question": "there will be decades of work for those willing to do maintenance on legacy code bases, and the work is often lucrative....the orgs have a hard req on keeping things going, even if the code is rotted and wrapped in duct tape...congrats, do enough of this work and you will be the critical path for any of these companies and you can just bleed them dry, which is what they deserve for choosing php","aSentId": 29137,"answer": "Not legacy work. New development. And we price things fairly. ","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29136,"question": "there will be decades of work for those willing to do maintenance on legacy code bases, and the work is often lucrative....the orgs have a hard req on keeping things going, even if the code is rotted and wrapped in duct tape...congrats, do enough of this work and you will be the critical path for any of these companies and you can just bleed them dry, which is what they deserve for choosing php","aSentId": 29139,"answer": "If you thin the language is the determining factor on code quality and maintainability, you aren't a good programmer in any language.  Being short sighted only serves to magnify your own insecurities and show your skill level to real developers who realize all languages have strengths and weaknesses.  Use the right tool for the job, which may often include Php in the possible options.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29140,"question": "If you thin the language is the determining factor on code quality and maintainability, you aren't a good programmer in any language.  Being short sighted only serves to magnify your own insecurities and show your skill level to real developers who realize all languages have strengths and weaknesses.  Use the right tool for the job, which may often include Php in the possible options.","aSentId": 29141,"answer": "Language is *a* determining factor in code quality and maintainability. A non-trivial factor that gets larger as projects get larger.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29140,"question": "If you thin the language is the determining factor on code quality and maintainability, you aren't a good programmer in any language.  Being short sighted only serves to magnify your own insecurities and show your skill level to real developers who realize all languages have strengths and weaknesses.  Use the right tool for the job, which may often include Php in the possible options.","aSentId": 29143,"answer": "Huh?  What?  So we are going to just up and say that some technologies don't suck?  Do you use miner lamps in your home for lighting?  Do you go to work in a horse and carriage?  The fact of the matter is that languages can fall behind in the market place due to competition, and in some cases, they can stay in the lead for reasons that have nothing to do with the raw tech.  In any case, it doesn't mean that the tech doesn't suck.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29140,"question": "If you thin the language is the determining factor on code quality and maintainability, you aren't a good programmer in any language.  Being short sighted only serves to magnify your own insecurities and show your skill level to real developers who realize all languages have strengths and weaknesses.  Use the right tool for the job, which may often include Php in the possible options.","aSentId": 29145,"answer": "&gt; If you thin the language is the determining factor on code quality and maintainability, you aren't a good programmer in any language\n\nwhile the bad craftsman may blame his tools, that does not mean there are not rotten and inappropriate tools, or that all tools can be expected to deliver equivalent results\n\nyour line of reasoning is trotted out by those who have painted themselves into a corner by clinging to a dull tool past its sell-by date. sorry, not all tools are created equal.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29136,"question": "there will be decades of work for those willing to do maintenance on legacy code bases, and the work is often lucrative....the orgs have a hard req on keeping things going, even if the code is rotted and wrapped in duct tape...congrats, do enough of this work and you will be the critical path for any of these companies and you can just bleed them dry, which is what they deserve for choosing php","aSentId": 29147,"answer": "What about us who start new projects in the language with modern tools and coding practices?","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29148,"question": "What about us who start new projects in the language with modern tools and coding practices?","aSentId": 29149,"answer": "you only think you are using modern tools and practices\n\nconcurrency and parallelism? nope. will never happen either. can't.\n\nmodern typesystem? will never happen.\n\ntrue optimization? not until every c extension is wiped out, until then the optimization story is unchanged - you put sensitive code into brittle, distro-dependent c libs\n\n","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29134,"question": "I love it. I love the hate everyone pours on PHP. \n\nI have a software company that works in PHP and we have clients bidding for our time. There is a lack of software engineer level developers willing to work in PHP despite a growing demand for them. And all that does for me is line my wallet. Plus I love the work. \n\nPHP is only part of what we do but it's what brings us the clients. \n\nSo long as ripping on PHP is the trendy thing to do I don't foresee that changing. \n\nEdit: to clarify in referring to the comments. I did rtfa. ","aSentId": 29151,"answer": "If you love the hate then what do you have to say about the non-dickish criticisms of PHP?","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29152,"question": "If you love the hate then what do you have to say about the non-dickish criticisms of PHP?","aSentId": 29153,"answer": "I'm mostly indifferent to them. \n\nJavascript at its core was a fairly terrible language and yet today it's accepted with open arms because of excellent libraries and frameworks and the Node platform. \n\nSo the API is inconsistent (naming of functions and methods, order of parameters for similar functions). Don't really care. I don't depend on assuming I know the order of things or that I should assume what functions should be named. I know the API. I use it. Doesn't affect me. I use solid and consistent frameworks almost always anyway, just like the world if javascript and ruby. \n\nBad or dangerous default configurations - yeah well I'm a professional and when I setup a server for a client I make sure to have every setting the way it should be. Every single system in the world has suffered from this at one point or another. I recall when we found out that many (thousands? Even GitHub) deployed rails applications were vulnerable because people left their settings for some obscure ORM feature at default. \n\nShitty code written by shitty developers - yeah it's everywhere and I just avoid it. The nice thing with PHP is that I can see all the code (as opposed to Java or .NET or other compiled languages) so I can determine if a library is shitty without using a decompiler. Also I refuse to use any code that is encrypted or obfuscated (worked at PreEmptive Solutions in a past life. They make Dotfuscator and Dash-O. Most obfuscations are a joke to me but I find it usually means the code was written by terrible Devs who think too highly of their work)\n\nPerformance - PHP isn't fast. It isn't the worst but for what we use it for it doesn't matter. Running the way it does it provides a unique way of scaling applications. Just adding more hardware. Without any code state between requests I don't have to worry much about the complexities of going from one web server to two. If I have cached then I switch them from file based to database or Redis or memcached (thanks to Zend framework). Same applies to session information. And because the only sane use for PHP is in rendering web pages and handling web requests it lends itself very well to reverse proxy systems like Varnish and Squid. Plus with the PHP Next and the compiled PHP engine that facebook put out we are going to have some serious performance gains not unlike the Javascript performance  revolution that happened a few years ago. \n\n\nAnd for all the faults that people throw out there, nobody mentions the unique things that I feel really make PHP shine. It isn't the things that you can do that I like. It's the things you can't do. \n\nNo threads! I love it. Outside of their use at the request handling stage, almost every use of threads that I have encountered only served to increase the complexity and decrease the reliability of applications. I swear people think that threads are the solution to poorly written algorithms. \n\nNo monkey patching! The thing that really turned me off of Ruby was all the monkey patching that went on. It's also why I loath the Prototype JavaScript library, which I think was made by Ruby people. \n\nIt, to me, falls into the problem of having an inability to reason out how a program is working. I'm no Ruby expert. Only toyed with it a dozen or so times, but each time it would follow a similar patterns. Following guides I would say \"I need library X (active record I think is a common one)\" so I load it. Without knowing I have now changed some function. Replacing it with a different one. Monkey patching it. Now I don't see this because it's inside of a Gem. I just go about my day. Later I think \"I need this other library\" and it monkey patched that same function! Now the first library no longer works and I don't know why. I didn't even realize anything was changed. \n\nNow, before pitchforks and torches, I'm sure there is a solution to knowing that. I just don't know it. But I just feel safer in my code knowing that stuff can't happen. The code I see is the code I run. It doesn't change at runtime. \n\nBecause of this I feel I can be more confident with my clients when I say I can support them in any situation that comes up. \n\nPHP does have magic methods, so I suppose some of that insanity found be achieved, but I'd rather just do without it. \n\nAnyway, if there are any specific criticisms you would like me to address, or if you feel my answers here are invalid or wrong please let me know. \n\nI really would like to continue to discuss this. After all, I could just be suffering from Stockholm syndrome here. I've professionally developed in Java, C#, perl, c++, and PHP and they all have their merits. I just found a nice niche with PHP and really enjoy writing in it. ","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29154,"question": "I'm mostly indifferent to them. \n\nJavascript at its core was a fairly terrible language and yet today it's accepted with open arms because of excellent libraries and frameworks and the Node platform. \n\nSo the API is inconsistent (naming of functions and methods, order of parameters for similar functions). Don't really care. I don't depend on assuming I know the order of things or that I should assume what functions should be named. I know the API. I use it. Doesn't affect me. I use solid and consistent frameworks almost always anyway, just like the world if javascript and ruby. \n\nBad or dangerous default configurations - yeah well I'm a professional and when I setup a server for a client I make sure to have every setting the way it should be. Every single system in the world has suffered from this at one point or another. I recall when we found out that many (thousands? Even GitHub) deployed rails applications were vulnerable because people left their settings for some obscure ORM feature at default. \n\nShitty code written by shitty developers - yeah it's everywhere and I just avoid it. The nice thing with PHP is that I can see all the code (as opposed to Java or .NET or other compiled languages) so I can determine if a library is shitty without using a decompiler. Also I refuse to use any code that is encrypted or obfuscated (worked at PreEmptive Solutions in a past life. They make Dotfuscator and Dash-O. Most obfuscations are a joke to me but I find it usually means the code was written by terrible Devs who think too highly of their work)\n\nPerformance - PHP isn't fast. It isn't the worst but for what we use it for it doesn't matter. Running the way it does it provides a unique way of scaling applications. Just adding more hardware. Without any code state between requests I don't have to worry much about the complexities of going from one web server to two. If I have cached then I switch them from file based to database or Redis or memcached (thanks to Zend framework). Same applies to session information. And because the only sane use for PHP is in rendering web pages and handling web requests it lends itself very well to reverse proxy systems like Varnish and Squid. Plus with the PHP Next and the compiled PHP engine that facebook put out we are going to have some serious performance gains not unlike the Javascript performance  revolution that happened a few years ago. \n\n\nAnd for all the faults that people throw out there, nobody mentions the unique things that I feel really make PHP shine. It isn't the things that you can do that I like. It's the things you can't do. \n\nNo threads! I love it. Outside of their use at the request handling stage, almost every use of threads that I have encountered only served to increase the complexity and decrease the reliability of applications. I swear people think that threads are the solution to poorly written algorithms. \n\nNo monkey patching! The thing that really turned me off of Ruby was all the monkey patching that went on. It's also why I loath the Prototype JavaScript library, which I think was made by Ruby people. \n\nIt, to me, falls into the problem of having an inability to reason out how a program is working. I'm no Ruby expert. Only toyed with it a dozen or so times, but each time it would follow a similar patterns. Following guides I would say \"I need library X (active record I think is a common one)\" so I load it. Without knowing I have now changed some function. Replacing it with a different one. Monkey patching it. Now I don't see this because it's inside of a Gem. I just go about my day. Later I think \"I need this other library\" and it monkey patched that same function! Now the first library no longer works and I don't know why. I didn't even realize anything was changed. \n\nNow, before pitchforks and torches, I'm sure there is a solution to knowing that. I just don't know it. But I just feel safer in my code knowing that stuff can't happen. The code I see is the code I run. It doesn't change at runtime. \n\nBecause of this I feel I can be more confident with my clients when I say I can support them in any situation that comes up. \n\nPHP does have magic methods, so I suppose some of that insanity found be achieved, but I'd rather just do without it. \n\nAnyway, if there are any specific criticisms you would like me to address, or if you feel my answers here are invalid or wrong please let me know. \n\nI really would like to continue to discuss this. After all, I could just be suffering from Stockholm syndrome here. I've professionally developed in Java, C#, perl, c++, and PHP and they all have their merits. I just found a nice niche with PHP and really enjoy writing in it. ","aSentId": 29155,"answer": "Great answer.  From time to time a leader developer appears that suffered the shortcomings of PHP and write a legitimate piece of criticism, but the rest of the haters are just trolls that feel they are good programmers if they bash others.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29152,"question": "If you love the hate then what do you have to say about the non-dickish criticisms of PHP?","aSentId": 29157,"answer": "It will probably be something along the lines of \"all languages have issues\", while not addressing why PHP has them and they continue to be a problem.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29158,"question": "It will probably be something along the lines of \"all languages have issues\", while not addressing why PHP has them and they continue to be a problem.","aSentId": 29159,"answer": "See my response to the question. Feel free to bring up any specific issues and I will gladly respond as best as I can. You sound very confident in your judgement of me so let's see how on point you are. :)","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29161,"question": "OK, so everyone ITT is hating on PHP for being legitimately horrible. I code in PHP but am willing to switch my Linux box to something else. Seriously, what language/framework should I consider? ","aSentId": 29162,"answer": " I code in PHP for my personal project and Java ee at work. I'm seriously considering moving the whole project to Java because of how much better it is to work in a statically typed language and the number of bugs I run into, but I'm not sure how I will like recompiling all the time and I'm certainly not paying for Jrebel","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29163,"question": " I code in PHP for my personal project and Java ee at work. I'm seriously considering moving the whole project to Java because of how much better it is to work in a statically typed language and the number of bugs I run into, but I'm not sure how I will like recompiling all the time and I'm certainly not paying for Jrebel","aSentId": 29164,"answer": "Have you tried Play?","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29163,"question": " I code in PHP for my personal project and Java ee at work. I'm seriously considering moving the whole project to Java because of how much better it is to work in a statically typed language and the number of bugs I run into, but I'm not sure how I will like recompiling all the time and I'm certainly not paying for Jrebel","aSentId": 29166,"answer": "Isn't this more an argument in favor of static typing than an argument against a particular dynamically typed language?","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29163,"question": " I code in PHP for my personal project and Java ee at work. I'm seriously considering moving the whole project to Java because of how much better it is to work in a statically typed language and the number of bugs I run into, but I'm not sure how I will like recompiling all the time and I'm certainly not paying for Jrebel","aSentId": 29168,"answer": "You should check out Grails.  Groovy is super easy to pick, it's so close to Java and runs on the jvm.  And you'll be right at home with it's more dynamic elements too.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29169,"question": "You should check out Grails.  Groovy is super easy to pick, it's so close to Java and runs on the jvm.  And you'll be right at home with it's more dynamic elements too.","aSentId": 29170,"answer": "Didn't both projects lose their founding a week ago?","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29161,"question": "OK, so everyone ITT is hating on PHP for being legitimately horrible. I code in PHP but am willing to switch my Linux box to something else. Seriously, what language/framework should I consider? ","aSentId": 29174,"answer": "Python and Django/Flask/Pyramid.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29161,"question": "OK, so everyone ITT is hating on PHP for being legitimately horrible. I code in PHP but am willing to switch my Linux box to something else. Seriously, what language/framework should I consider? ","aSentId": 29176,"answer": "Anyone answering you without asking what you do is probably just as biased. In general, it's probably not a good idea to accept answers from people who only use one thing.\n\nFor larger projects, I like to use Scala and the Play Framework, or, for an embedded HTTP API, Spray.\n\nFor smaller things I want to knock out quickly, I like Python and Flask.\n\nActually, the latter less and less these days as it's hard to leave a good static type system.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29181,"question": "So the author says that bashing PHP makes PHP developers sad and makes them consider switching to other languages?\n\nThis makes me really happy and means that bashing PHP online and real world discussions does make the world a better place.","aSentId": 29182,"answer": "Makes me happy too. I don't want bandwagoners in my community that jump ship upon the first sign of disapproval from their peers and go to the next hot shit to feel like they are part of the new awesome fullstack webscale engineers super secret group to feel cool.\n\n\n\nIf you could do more of what you do to keep them out of PHP, we as a community will be very grateful :)","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29184,"question": "the amount of arrogant newbies that didnt even work with morden php or framework is staggering. 6 years of php experience here. starting with version 4 ending with current. with symfony 2 and php 5.4 it finally happened: yes, you can deliver polished web projects with stylish code (easy to read, write and change) and full test coverage. finally i can see how only bad php developers talk shit about php. they are ignorant and don't know better.\n\nhowever! while php is now semi elegent language, ruby has everyting php has and more. but the core difference is little, and each php release shows that it is being seriously taken. php has incomplete test coverage? how bad, but wait! php has never let any of my e-commerce projects down :O cherry picking trash to say much?\n\nlet's get real guys. it is developer's responsibility to deliver DRY, SOLID tested code, not language's. so, if you use php and see shitty code, i swear - it's developed by inexperienced, ignorant developer that loves crying more than lowering cyclomatic complexity for his/her code. but if you don't care - you are a perfect candidate for trashing php language. let me guess - you also trash any other language except your favorite one? what a clich\u00e9.","aSentId": 29185,"answer": "sorry, but until php disallows in-situ declaration of variables, it cannot be taken seriously\n\ni.e.\n\n&lt;?php if ($i == 0) { print \"what? where did i come from?\"; } ?&gt;\n\n","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29184,"question": "the amount of arrogant newbies that didnt even work with morden php or framework is staggering. 6 years of php experience here. starting with version 4 ending with current. with symfony 2 and php 5.4 it finally happened: yes, you can deliver polished web projects with stylish code (easy to read, write and change) and full test coverage. finally i can see how only bad php developers talk shit about php. they are ignorant and don't know better.\n\nhowever! while php is now semi elegent language, ruby has everyting php has and more. but the core difference is little, and each php release shows that it is being seriously taken. php has incomplete test coverage? how bad, but wait! php has never let any of my e-commerce projects down :O cherry picking trash to say much?\n\nlet's get real guys. it is developer's responsibility to deliver DRY, SOLID tested code, not language's. so, if you use php and see shitty code, i swear - it's developed by inexperienced, ignorant developer that loves crying more than lowering cyclomatic complexity for his/her code. but if you don't care - you are a perfect candidate for trashing php language. let me guess - you also trash any other language except your favorite one? what a clich\u00e9.","aSentId": 29187,"answer": "&gt; let's get real guys. it is developer's responsibility to deliver DRY, SOLID tested code, not language's. \n\nYour fine doing that with an unstable base? That might be good for you, but I prefer building solutions with languages that are stable. The lower you go, the more tested and stable the code should be, otherwise its just one big rube Goldberg machine.\n\n&gt; so, if you use php and see shitty code, i swear - it's developed by inexperienced, ignorant developer that loves crying more than lowering cyclomatic complexity for his/her code.\n\nThis is a silly claim to make, the fact is that our tools affect how we can express solutions, in turn affecting our entire thought process.\n\n","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29199,"question": "Programmer IS A Career Path, Thank You","aSentId": 29200,"answer": "&gt; Why is it okay . . . for an ambitious lawyer to say, \u201cI just want to be a lawyer\u201d\n\nActually I'm pretty sure that if you want to make partner, you usually need to be good at non-lawyer or meta-lawyer things, like sales, managing, or mentoring. And that's true for accountants and engineers too. So I think it's fine to expect that of highly-promoted programmers. Of course in law and in programming there is also a place for people who are world-class experts in their niche, who attend conferences and publish articles (or blog posts or OSS code). But part of why those people are partners is because their renown brings in work for the firm, and I think even those achievements require a higher level of thinking than just getting your work done.\n\nLater the poster seems to acknowledge the need for non-technical skills when he talks about programmers self-managing. If people on the team don't know about project management and communication, how is that going to happen? Personally I am trying to carve out a place for myself as a \"partner-level\" programmer, where I still get to code a lot, but also do spec'ing and sales and project management. I'd love to see that role become a more normal thing.\n\n","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29201,"question": "&gt; Why is it okay . . . for an ambitious lawyer to say, \u201cI just want to be a lawyer\u201d\n\nActually I'm pretty sure that if you want to make partner, you usually need to be good at non-lawyer or meta-lawyer things, like sales, managing, or mentoring. And that's true for accountants and engineers too. So I think it's fine to expect that of highly-promoted programmers. Of course in law and in programming there is also a place for people who are world-class experts in their niche, who attend conferences and publish articles (or blog posts or OSS code). But part of why those people are partners is because their renown brings in work for the firm, and I think even those achievements require a higher level of thinking than just getting your work done.\n\nLater the poster seems to acknowledge the need for non-technical skills when he talks about programmers self-managing. If people on the team don't know about project management and communication, how is that going to happen? Personally I am trying to carve out a place for myself as a \"partner-level\" programmer, where I still get to code a lot, but also do spec'ing and sales and project management. I'd love to see that role become a more normal thing.\n\n","aSentId": 29202,"answer": "Yeah, I saw that as an example being used in *favor* of the author's argument and thought \"wait a minute....\"\n\nPartners (at least at sizable firms) more often than not are running the firm. Do they still practice law? Of course, but it's not necessarily where they're spending the majority of their time, at least not the same way that they did as a fresh graduate out of law school. They have associates to do the leg work and they take care of the higher level aspects (client management, case management, handling the major court appearances, etc). They're often not the ones sitting there writing and responding to briefs and information requests. Additionally, they usually have some share in the actual management of the firm - budgets, hiring, etc.\n\nIn my mind that was a really bad example of what the author was trying to get at (or maybe the author isn't quite sure what they wanted to get at...)","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29201,"question": "&gt; Why is it okay . . . for an ambitious lawyer to say, \u201cI just want to be a lawyer\u201d\n\nActually I'm pretty sure that if you want to make partner, you usually need to be good at non-lawyer or meta-lawyer things, like sales, managing, or mentoring. And that's true for accountants and engineers too. So I think it's fine to expect that of highly-promoted programmers. Of course in law and in programming there is also a place for people who are world-class experts in their niche, who attend conferences and publish articles (or blog posts or OSS code). But part of why those people are partners is because their renown brings in work for the firm, and I think even those achievements require a higher level of thinking than just getting your work done.\n\nLater the poster seems to acknowledge the need for non-technical skills when he talks about programmers self-managing. If people on the team don't know about project management and communication, how is that going to happen? Personally I am trying to carve out a place for myself as a \"partner-level\" programmer, where I still get to code a lot, but also do spec'ing and sales and project management. I'd love to see that role become a more normal thing.\n\n","aSentId": 29204,"answer": "As a non-USian, there's something I don't understand: Why do lawyers in particular have this obscure system of \"partners\" instead of the normal structures seen in other corporations? Is there anything particularly different about law practice that mandates a different structure, or is this just purely because \"we've always done it this way?\"","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29205,"question": "As a non-USian, there's something I don't understand: Why do lawyers in particular have this obscure system of \"partners\" instead of the normal structures seen in other corporations? Is there anything particularly different about law practice that mandates a different structure, or is this just purely because \"we've always done it this way?\"","aSentId": 29206,"answer": "In the US, law firms must be owned only by lawyers who participate in providing legal services. The reason for this is to prevent conflicts of interest. As a result law firms can't raise money and spread out risk through public funding. That leaves partnership as the next best option.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29207,"question": "In the US, law firms must be owned only by lawyers who participate in providing legal services. The reason for this is to prevent conflicts of interest. As a result law firms can't raise money and spread out risk through public funding. That leaves partnership as the next best option.","aSentId": 29208,"answer": "Thanks, this seems to be the most accurate answer, as it indeed *does* mandate a different structure for law firms.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29205,"question": "As a non-USian, there's something I don't understand: Why do lawyers in particular have this obscure system of \"partners\" instead of the normal structures seen in other corporations? Is there anything particularly different about law practice that mandates a different structure, or is this just purely because \"we've always done it this way?\"","aSentId": 29210,"answer": "That's a good question. :-) Anyone starting a law practice is free to organize it as a regular corporation if they like, so it must be attractive. In fact it is used here not just for law but also accounting, engineering, architecture, business consulting, even medical and dental practices---basically professional services in general.\n\nThe advantages I see are that you can easily invite new partners into the practice, which is a good way to motivate associates. It's sort of like how stock options are used in startups to motivate employees, except making partner is actually worth something. Also I think in many firms, each partner is very autonomous re clients etc., so things aren't run the same way as a corp with an org chart.\n\n\n\n","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29211,"question": "That's a good question. :-) Anyone starting a law practice is free to organize it as a regular corporation if they like, so it must be attractive. In fact it is used here not just for law but also accounting, engineering, architecture, business consulting, even medical and dental practices---basically professional services in general.\n\nThe advantages I see are that you can easily invite new partners into the practice, which is a good way to motivate associates. It's sort of like how stock options are used in startups to motivate employees, except making partner is actually worth something. Also I think in many firms, each partner is very autonomous re clients etc., so things aren't run the same way as a corp with an org chart.\n\n\n\n","aSentId": 29212,"answer": "&gt; Anyone starting a law practice is free to organize it as a regular corporation if they like, so it must be attractive.\n\nActually, I think in all 50 states, legal services firms that take outside clients must be either nonprofit or be 100% lawyer-owned. You can be a corporation that employs lawyers, but those lawyers aren't allowed to represent anyone except for the corporation itself.\n\nSo no, you won't see a law firm that is a corporation, because the shares would only be transferable to other lawyers. Legal ethics rules also seriously restrict the transferability, so the partnership model is really the only one that makes sense for firms with multiple lawyers.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29205,"question": "As a non-USian, there's something I don't understand: Why do lawyers in particular have this obscure system of \"partners\" instead of the normal structures seen in other corporations? Is there anything particularly different about law practice that mandates a different structure, or is this just purely because \"we've always done it this way?\"","aSentId": 29214,"answer": "It's not just lawyers. Accounting firms and management consultancies do the same thing. All three of those are highly specialized roles and firms within the industries focus on solely the specific service. That might have something to do with it.\n\nEdit: Pjungwirth beat me to it, yeah.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29201,"question": "&gt; Why is it okay . . . for an ambitious lawyer to say, \u201cI just want to be a lawyer\u201d\n\nActually I'm pretty sure that if you want to make partner, you usually need to be good at non-lawyer or meta-lawyer things, like sales, managing, or mentoring. And that's true for accountants and engineers too. So I think it's fine to expect that of highly-promoted programmers. Of course in law and in programming there is also a place for people who are world-class experts in their niche, who attend conferences and publish articles (or blog posts or OSS code). But part of why those people are partners is because their renown brings in work for the firm, and I think even those achievements require a higher level of thinking than just getting your work done.\n\nLater the poster seems to acknowledge the need for non-technical skills when he talks about programmers self-managing. If people on the team don't know about project management and communication, how is that going to happen? Personally I am trying to carve out a place for myself as a \"partner-level\" programmer, where I still get to code a lot, but also do spec'ing and sales and project management. I'd love to see that role become a more normal thing.\n\n","aSentId": 29218,"answer": "I love when the top comment on a Reddit thread is consumed with the logic of a throwaway-hypothetical.   ","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29219,"question": "I love when the top comment on a Reddit thread is consumed with the logic of a throwaway-hypothetical.   ","aSentId": 29220,"answer": "I think it's because when the entire premise of the article/post is \"other industries do it; why can't we?,\" it is very relevant to point out that other industries *don't* do it.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29221,"question": "I think it's because when the entire premise of the article/post is \"other industries do it; why can't we?,\" it is very relevant to point out that other industries *don't* do it.","aSentId": 29222,"answer": "Other industries indeed do it, even the author's contested example. Partners at law firms can still practice, whether or not they have to. Just like architects work on their own designs, plumbers can still work on site even if they own their business. I know an electrical engineer who's constantly getting pulled out of retirement not ply his trade.\n","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29223,"question": "Other industries indeed do it, even the author's contested example. Partners at law firms can still practice, whether or not they have to. Just like architects work on their own designs, plumbers can still work on site even if they own their business. I know an electrical engineer who's constantly getting pulled out of retirement not ply his trade.\n","aSentId": 29224,"answer": "Partners can (and often must) still practice, but they usually cannot \"opt out\" of the management aspect of their position.  Partners manage their cases and clients and farm out work to their associates.  If a lawyer does not to do that, many firms have a terminal \"of Counsel\" position (just keep billing), but don't fool yourself into thinking the pay or respect of that position is on par with partnership.\n\nTo be honest it's something I don't understand about the law firm model.  Partners have to share with other partners; they'd much rather have a low partner:associate ratio so the pyramid scheme of a law firm can get the most profits at the top.  And yet, associates are pretty strongly discouraged from the \"of counsel\" track.  Essentialy, \"if you're not here to make partner, there's the door.\"  Then \"of Counsel\" is offered as a consolation prize when it would be embarrassing to fire a 45 year old associate.  I speculate it's because without the carrot of partnership, associates are less willing to accept the stick of 80+ hour workweeks, etc.\n\nRegardless, whether it should be the case, it is.  And when the author's entire thesis is based on what appears to be a mistaken assumption about how other fields operate, I'd say it's pretty relevant.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29199,"question": "Programmer IS A Career Path, Thank You","aSentId": 29228,"answer": "We need the culture shift from managers being treated as managers to being treated as agents.\n\nAn agent (in sports and entertainment) does all the work same work a \"manager\" would, the difference being the agent is supporting the talent rather than the talent supporting the manager.\n\nThe most frustrating statement I've ever heard from my workplace is \"being a senior developer is more than just about coding, it's about managing a team\". So as I advance in my development skills, I can never advance in my career unless I give up and take on other career. What this tells me is that if I want to advance **my** career, the only option is to move to another company. If I'm twice as productive and valuable 5 years from now, I should have the salary and position to show that.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29229,"question": "We need the culture shift from managers being treated as managers to being treated as agents.\n\nAn agent (in sports and entertainment) does all the work same work a \"manager\" would, the difference being the agent is supporting the talent rather than the talent supporting the manager.\n\nThe most frustrating statement I've ever heard from my workplace is \"being a senior developer is more than just about coding, it's about managing a team\". So as I advance in my development skills, I can never advance in my career unless I give up and take on other career. What this tells me is that if I want to advance **my** career, the only option is to move to another company. If I'm twice as productive and valuable 5 years from now, I should have the salary and position to show that.","aSentId": 29230,"answer": "Just so you know, while there are a lot of companies that insist you should be on the management track to advance, there are a lot out there (including my current employer, Knewton) that don't do that.  We split things into \"individual contributor\" and management roles.  They're parallel structures: until you hit the CxO level, you can go just as high (including compensation) on one path as on the other, and while individual contributors are expected to mentor and help train, they're emphatically not expected to manage.  The situation was largely identical at my last employer.  So if you want a company like that, please go find one.  They do exist.\n\nThat said, a sports agent and a proper manager do not do the same things.  There's absolutely some overlap\u2014both, for example, serve as your career guidance counselor, and usually as your advocate\u2014but there's also a lot of management that that an agent doesn't do, because the agent is all about *you*, and good organizational management is about *everyone*.  Managers have to figure out how much to pay people, factoring in how much money they actually have to pay the team collectively.  They have to handle that Larry xeroxed his butt at the Christmas party.  They have to resolve the fact that Beth and Jim are having an insane fight that is dragging the entire team down.  They have to figure out how to handle Matt underperforming, how to create an opportunity for Sara to try her hand at project coordination, and so on.  This *is* supporting the talent; it's just supporting *all* the talent, not just you, because the manager's client is the company, and the agent's client is you.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29231,"question": "Just so you know, while there are a lot of companies that insist you should be on the management track to advance, there are a lot out there (including my current employer, Knewton) that don't do that.  We split things into \"individual contributor\" and management roles.  They're parallel structures: until you hit the CxO level, you can go just as high (including compensation) on one path as on the other, and while individual contributors are expected to mentor and help train, they're emphatically not expected to manage.  The situation was largely identical at my last employer.  So if you want a company like that, please go find one.  They do exist.\n\nThat said, a sports agent and a proper manager do not do the same things.  There's absolutely some overlap\u2014both, for example, serve as your career guidance counselor, and usually as your advocate\u2014but there's also a lot of management that that an agent doesn't do, because the agent is all about *you*, and good organizational management is about *everyone*.  Managers have to figure out how much to pay people, factoring in how much money they actually have to pay the team collectively.  They have to handle that Larry xeroxed his butt at the Christmas party.  They have to resolve the fact that Beth and Jim are having an insane fight that is dragging the entire team down.  They have to figure out how to handle Matt underperforming, how to create an opportunity for Sara to try her hand at project coordination, and so on.  This *is* supporting the talent; it's just supporting *all* the talent, not just you, because the manager's client is the company, and the agent's client is you.","aSentId": 29232,"answer": "Amazon does this too.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29233,"question": "Amazon does this too.","aSentId": 29234,"answer": "So does our company, Intuit.  The Engineer path parallels the Architect and Manager path all the way up to the VP level.  ","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29233,"question": "Amazon does this too.","aSentId": 29236,"answer": "Amazon does this all the way to the VP level, as does Microsoft. I think Google does also.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29237,"question": "Amazon does this all the way to the VP level, as does Microsoft. I think Google does also.","aSentId": 29238,"answer": "I'm jealous, I'm at this exact point where I'm topped out as senior architect and have to go management to get paid better.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29239,"question": "I'm jealous, I'm at this exact point where I'm topped out as senior architect and have to go management to get paid better.","aSentId": 29240,"answer": "Jump ship. Amazon and Google are hiring like mad.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29241,"question": "Jump ship. Amazon and Google are hiring like mad.","aSentId": 29242,"answer": "Oh, just grab a job at Google.  NBD.  ","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29243,"question": "Oh, just grab a job at Google.  NBD.  ","aSentId": 29244,"answer": "Newton's Backward Distribution?......\n\nOh, No Big Deal. Shit, I've been on too much math.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29245,"question": "Newton's Backward Distribution?......\n\nOh, No Big Deal. Shit, I've been on too much math.","aSentId": 29246,"answer": "Math.  Not even |i^(2)|.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29241,"question": "Jump ship. Amazon and Google are hiring like mad.","aSentId": 29248,"answer": "Or you could join Apple. Then just wait to be poached so you get that signing bonus C: \n\nEdit: I might be dyslexic because I stared at signing for the longest time and tried to make sure I didn't type singing instead. ","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29249,"question": "Or you could join Apple. Then just wait to be poached so you get that signing bonus C: \n\nEdit: I might be dyslexic because I stared at signing for the longest time and tried to make sure I didn't type singing instead. ","aSentId": 29250,"answer": "Er... Sorry dude, it *DOES* say singing.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29251,"question": "Er... Sorry dude, it *DOES* say singing.","aSentId": 29252,"answer": "A singing bonus would make the difference, though.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29251,"question": "Er... Sorry dude, it *DOES* say singing.","aSentId": 29254,"answer": "you guys are so mean... :C ","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29255,"question": "you guys are so mean... :C ","aSentId": 29256,"answer": "I'm really sorry, I truly am. I feel such a horrible, tremendous guilt. But I couldn't NOT take that one.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29241,"question": "Jump ship. Amazon and Google are hiring like mad.","aSentId": 29258,"answer": "What if you don't want to move to Seattle?","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29259,"question": "What if you don't want to move to Seattle?","aSentId": 29260,"answer": "Both companies have offices around the world. Google is headquartered in the San Francisco area.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29261,"question": "Both companies have offices around the world. Google is headquartered in the San Francisco area.","aSentId": 29262,"answer": "Oh. Derp. Was thinking Microsoft","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29259,"question": "What if you don't want to move to Seattle?","aSentId": 29264,"answer": "I mean, I shouldn't really be summoning more software engineers to this corner of the world, but... why not? I work out of the Google Seattle office (although as BiggestDickInTheRoom points out, our HQ is down in Mountain View); it's a pretty sweet deal. Lower cost of living than the bay by a wide margin, similar compensation, short commute, etc. That said, we are on our tenth or so day of rain in a row.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29265,"question": "I mean, I shouldn't really be summoning more software engineers to this corner of the world, but... why not? I work out of the Google Seattle office (although as BiggestDickInTheRoom points out, our HQ is down in Mountain View); it's a pretty sweet deal. Lower cost of living than the bay by a wide margin, similar compensation, short commute, etc. That said, we are on our tenth or so day of rain in a row.","aSentId": 29266,"answer": "I love it in Minnesota and don't want to uproot my family","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29237,"question": "Amazon does this all the way to the VP level, as does Microsoft. I think Google does also.","aSentId": 29268,"answer": "Amazon SDE 3s (senior SDEs) are the same level as managers, but the next level from SDE 3 is Principal SDE and there are a lot more senior managers than those.\n\nThen there are a lot more directors (the level above sr mgr) than senior principals.  I don't think my org even has one of those, and we have a few directors plus a VP.\n\nLikewise there are other more senior/principal PMs and TPMs.\n","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29269,"question": "Amazon SDE 3s (senior SDEs) are the same level as managers, but the next level from SDE 3 is Principal SDE and there are a lot more senior managers than those.\n\nThen there are a lot more directors (the level above sr mgr) than senior principals.  I don't think my org even has one of those, and we have a few directors plus a VP.\n\nLikewise there are other more senior/principal PMs and TPMs.\n","aSentId": 29270,"answer": "Yep. It's way harder to be upper level IC than it is manager. There are only a couple distinguished engineers (Lvl 10, same as VP) in the whole company.\n\nAnd don't talk about Amazon if you work there from any account that can be doxxed. PR and HR have no tolerance.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29271,"question": "Yep. It's way harder to be upper level IC than it is manager. There are only a couple distinguished engineers (Lvl 10, same as VP) in the whole company.\n\nAnd don't talk about Amazon if you work there from any account that can be doxxed. PR and HR have no tolerance.","aSentId": 29272,"answer": "&gt; And don't talk about Amazon if you work there from any account that can be doxxed. PR and HR have no tolerance.\n\nI keep telling people this but they don't believe me.  There was a guy on Reddit a few years ago that gave a quick how-to to buy Diablo III (I think) and he was immediately fired.  There was a glitch on the site or something that was causing a problem with those orders.  I don't even think he identified himself as a employee.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29271,"question": "Yep. It's way harder to be upper level IC than it is manager. There are only a couple distinguished engineers (Lvl 10, same as VP) in the whole company.\n\nAnd don't talk about Amazon if you work there from any account that can be doxxed. PR and HR have no tolerance.","aSentId": 29274,"answer": "Why are they so strict?  I could understand if someone devalues the company, but getting fired for simply talking about employment?  Is it really that harsh?","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29275,"question": "Why are they so strict?  I could understand if someone devalues the company, but getting fired for simply talking about employment?  Is it really that harsh?","aSentId": 29276,"answer": "It's not THAT bad, but you'll get fired for pointing out glitches to thousands of customers, hoping that they will take advantage for it. \n\nAnything that breaks the NDA is a no-no. Employees signed it and know the rules.  We learn at orientation that some innocent comments on reddit can cost Amazon a ton of money. ","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29237,"question": "Amazon does this all the way to the VP level, as does Microsoft. I think Google does also.","aSentId": 29278,"answer": "As did IBM in the 60s.  ","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29233,"question": "Amazon does this too.","aSentId": 29280,"answer": "Ditto Rackspace, although we're still figuring out the highest levels (nobody is on the highest tier yet, which is the VP equivalent one).","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29281,"question": "Ditto Rackspace, although we're still figuring out the highest levels (nobody is on the highest tier yet, which is the VP equivalent one).","aSentId": 29282,"answer": "While we're at it, we should probably figure out that whole \"software development\" thing, too. Our Waterfall-disguised-as-Agile methodology and non-technical middle management dictating software design is killing us.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29231,"question": "Just so you know, while there are a lot of companies that insist you should be on the management track to advance, there are a lot out there (including my current employer, Knewton) that don't do that.  We split things into \"individual contributor\" and management roles.  They're parallel structures: until you hit the CxO level, you can go just as high (including compensation) on one path as on the other, and while individual contributors are expected to mentor and help train, they're emphatically not expected to manage.  The situation was largely identical at my last employer.  So if you want a company like that, please go find one.  They do exist.\n\nThat said, a sports agent and a proper manager do not do the same things.  There's absolutely some overlap\u2014both, for example, serve as your career guidance counselor, and usually as your advocate\u2014but there's also a lot of management that that an agent doesn't do, because the agent is all about *you*, and good organizational management is about *everyone*.  Managers have to figure out how much to pay people, factoring in how much money they actually have to pay the team collectively.  They have to handle that Larry xeroxed his butt at the Christmas party.  They have to resolve the fact that Beth and Jim are having an insane fight that is dragging the entire team down.  They have to figure out how to handle Matt underperforming, how to create an opportunity for Sara to try her hand at project coordination, and so on.  This *is* supporting the talent; it's just supporting *all* the talent, not just you, because the manager's client is the company, and the agent's client is you.","aSentId": 29284,"answer": "In every company with an \"individual contributor path\" each individual contributor pay level corresponds to a management pay level. The interesting thing is that there are at least 10x if not more managers than engineers at each level, except for levels that make less than the lowest level of management. I wonder why.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29285,"question": "In every company with an \"individual contributor path\" each individual contributor pay level corresponds to a management pay level. The interesting thing is that there are at least 10x if not more managers than engineers at each level, except for levels that make less than the lowest level of management. I wonder why.","aSentId": 29286,"answer": "You need more grunts than management and less high level engineers than management?  Makes sense to me","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29287,"question": "You need more grunts than management and less high level engineers than management?  Makes sense to me","aSentId": 29288,"answer": "I think his point is that, if you need ten times the number of managers as principal engineers, but you compensate principals identically, then you may be undercompensating your developers or overcompensating managers.  And while I wish he were wrong, I suspect he's right, and I think it has to do with something really straightforward: as a manager, it's really, really emotionally difficult to have someone working for you who is making more than you.  That's not \"right,\" and that shouldn't be a factor, but people are people, and it is.  So a result is that the management pay brackets are geared higher than the IC brackets *in practice*, even if the org doc gives lip service to that not being the case.\n\nJust to give my background here, I've been both an IC and a manager multiple times, so I've been on both sides of this one, and while I'm proud that *in my particular case* I've not had any problem with a subordinate making more than I am, I also know that this is a real problem.  Solutions welcome; if you have a sane one, you'll make millions on the book sales alone.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29289,"question": "I think his point is that, if you need ten times the number of managers as principal engineers, but you compensate principals identically, then you may be undercompensating your developers or overcompensating managers.  And while I wish he were wrong, I suspect he's right, and I think it has to do with something really straightforward: as a manager, it's really, really emotionally difficult to have someone working for you who is making more than you.  That's not \"right,\" and that shouldn't be a factor, but people are people, and it is.  So a result is that the management pay brackets are geared higher than the IC brackets *in practice*, even if the org doc gives lip service to that not being the case.\n\nJust to give my background here, I've been both an IC and a manager multiple times, so I've been on both sides of this one, and while I'm proud that *in my particular case* I've not had any problem with a subordinate making more than I am, I also know that this is a real problem.  Solutions welcome; if you have a sane one, you'll make millions on the book sales alone.","aSentId": 29290,"answer": "&gt;as a manager, it's really, really emotionally difficult to have someone working for you who is making more than you\n\nI think the notion is that the high level engineer doesn't work for you; you work for him.  From that perspective shouldn't the high level engineer make more?","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29291,"question": "&gt;as a manager, it's really, really emotionally difficult to have someone working for you who is making more than you\n\nI think the notion is that the high level engineer doesn't work for you; you work for him.  From that perspective shouldn't the high level engineer make more?","aSentId": 29292,"answer": "Yes, but to someone accustomed to being above engineers that's a big shift to deal with.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29293,"question": "Yes, but to someone accustomed to being above engineers that's a big shift to deal with.","aSentId": 29294,"answer": "Let's get a psychologist for the team then and pay people accordingly","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29295,"question": "Let's get a psychologist for the team then and pay people accordingly","aSentId": 29296,"answer": "...but where does this psychologist fit into the payscale? /s","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29293,"question": "Yes, but to someone accustomed to being above engineers that's a big shift to deal with.","aSentId": 29298,"answer": "I'm inclined to say \"boo-fucking-hoo\". A job title gets undue preferential treatment at the expense of someone else and your argument for not correcting it is \"It hurts their fee-fees\"?\n\nThat's pretty telling of why Corporate America is so infuriating to work for.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29291,"question": "&gt;as a manager, it's really, really emotionally difficult to have someone working for you who is making more than you\n\nI think the notion is that the high level engineer doesn't work for you; you work for him.  From that perspective shouldn't the high level engineer make more?","aSentId": 29300,"answer": "Yeah, i know someone who pretty much said just that. He considers project managers to be serving under him, instead of the other way around. Though, to be fair, he has around 30 years of experience designing and implementing one very specific type of hardware. He has his own tiny museum where you can see every iteration he ever worked on.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29301,"question": "Yeah, i know someone who pretty much said just that. He considers project managers to be serving under him, instead of the other way around. Though, to be fair, he has around 30 years of experience designing and implementing one very specific type of hardware. He has his own tiny museum where you can see every iteration he ever worked on.","aSentId": 29302,"answer": "I would hope project managers do serve below him.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29291,"question": "&gt;as a manager, it's really, really emotionally difficult to have someone working for you who is making more than you\n\nI think the notion is that the high level engineer doesn't work for you; you work for him.  From that perspective shouldn't the high level engineer make more?","aSentId": 29304,"answer": "That's an engineer-centric mindset though. While it may be the case that software is the core product of a company, that software doesn't run the company itself and engineers are notoriously bad at doing all the necessary business stuff that actually makes a company money. \n\nThe real problem is that there's too much micro-management in business software and this belief that a bunch of people without any specific software expertise should manage a group of software engineers. Engineers need general direction from a requirements and product design perspective but they generally do not need project managers tracking every little detail in MS Project or whatever. \n\nCan't count how many times I've had a PM show me this ludicrous 6 month timeline for a project and asked me to accurately estimate every single task in there in order for their little blocks to line up to an arbitrary deadline and please their superiors. Fortunately I don't work in that kind of place anymore. \n\nManagement should exist to help get engineers unstuck and provide the tools necessary to complete the job. ","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29305,"question": "That's an engineer-centric mindset though. While it may be the case that software is the core product of a company, that software doesn't run the company itself and engineers are notoriously bad at doing all the necessary business stuff that actually makes a company money. \n\nThe real problem is that there's too much micro-management in business software and this belief that a bunch of people without any specific software expertise should manage a group of software engineers. Engineers need general direction from a requirements and product design perspective but they generally do not need project managers tracking every little detail in MS Project or whatever. \n\nCan't count how many times I've had a PM show me this ludicrous 6 month timeline for a project and asked me to accurately estimate every single task in there in order for their little blocks to line up to an arbitrary deadline and please their superiors. Fortunately I don't work in that kind of place anymore. \n\nManagement should exist to help get engineers unstuck and provide the tools necessary to complete the job. ","aSentId": 29306,"answer": "This is why I quite like the situation at my place, even though it's quite strange. At my workplace, we have a network of managers and a network of competent techs. However, beyond that, we have a number of very close and synergizing items of manager and techie, like one of our senior admins and the IT lead, or the lead development tooling and me.\n\nThis results in a very potent and quite interesting situation. If we techs decide we want something done and need someone to do a lot of coordination, or to get all departments on board, we get our 1 or 2 trusted managers on board. If managers decide they need something, they figure out one of the trusted techies to ask, and then the techie figures out the other necessary techies. \n\nWith this, we have a lot of freedom on the tech side and our management has a very, very reliable infrastructure team to build on. Most of the times the stuff other people need is already done anway. ","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29287,"question": "You need more grunts than management and less high level engineers than management?  Makes sense to me","aSentId": 29308,"answer": "What do you think happens when upper managements says the truth, what you just said, instead of \"We have an equal path for individual contributors.\"","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29285,"question": "In every company with an \"individual contributor path\" each individual contributor pay level corresponds to a management pay level. The interesting thing is that there are at least 10x if not more managers than engineers at each level, except for levels that make less than the lowest level of management. I wonder why.","aSentId": 29310,"answer": "As far as I can tell, because managers are worth more to the company than most engineers, except for those two that the company could never afford to lose.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29231,"question": "Just so you know, while there are a lot of companies that insist you should be on the management track to advance, there are a lot out there (including my current employer, Knewton) that don't do that.  We split things into \"individual contributor\" and management roles.  They're parallel structures: until you hit the CxO level, you can go just as high (including compensation) on one path as on the other, and while individual contributors are expected to mentor and help train, they're emphatically not expected to manage.  The situation was largely identical at my last employer.  So if you want a company like that, please go find one.  They do exist.\n\nThat said, a sports agent and a proper manager do not do the same things.  There's absolutely some overlap\u2014both, for example, serve as your career guidance counselor, and usually as your advocate\u2014but there's also a lot of management that that an agent doesn't do, because the agent is all about *you*, and good organizational management is about *everyone*.  Managers have to figure out how much to pay people, factoring in how much money they actually have to pay the team collectively.  They have to handle that Larry xeroxed his butt at the Christmas party.  They have to resolve the fact that Beth and Jim are having an insane fight that is dragging the entire team down.  They have to figure out how to handle Matt underperforming, how to create an opportunity for Sara to try her hand at project coordination, and so on.  This *is* supporting the talent; it's just supporting *all* the talent, not just you, because the manager's client is the company, and the agent's client is you.","aSentId": 29312,"answer": "&gt; but there's also a lot of management that that an agent doesn't do\n\nYes this is true, and I'm not trying to demean any managers in any way. But we need to start thinking of managers as supporting the talent (which would consist of the entire team) rather than the team being a tool which the manager uses. A client or higher up should never say \"Thanks Manager X for getting this done\", because Manager X didn't do it. Their team did. The manager is a crucial part of the team, but they are not the reason it got done.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29313,"question": "&gt; but there's also a lot of management that that an agent doesn't do\n\nYes this is true, and I'm not trying to demean any managers in any way. But we need to start thinking of managers as supporting the talent (which would consist of the entire team) rather than the team being a tool which the manager uses. A client or higher up should never say \"Thanks Manager X for getting this done\", because Manager X didn't do it. Their team did. The manager is a crucial part of the team, but they are not the reason it got done.","aSentId": 29314,"answer": "The best managers deflect praise and accept criticism for their team. If the team does well it should be \"We worked together to accomplish this, my team did great work.\" If there are issues, it should be \"I take full responsibility for this, and we'll do better next time.\"","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29315,"question": "The best managers deflect praise and accept criticism for their team. If the team does well it should be \"We worked together to accomplish this, my team did great work.\" If there are issues, it should be \"I take full responsibility for this, and we'll do better next time.\"","aSentId": 29316,"answer": "And the usual manager plays the politics game, reaps all the rewards and moves up the ladder. In Uruguay we have a saying that roughly translates to \"it's not the fault of the pig but of he who scratches its back\", meaning that the system is whack and of course money-achievement-driven people are going to choose to better their lives rather than do their job properly and benefit their team.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29315,"question": "The best managers deflect praise and accept criticism for their team. If the team does well it should be \"We worked together to accomplish this, my team did great work.\" If there are issues, it should be \"I take full responsibility for this, and we'll do better next time.\"","aSentId": 29318,"answer": "And then they get fired.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29319,"question": "And then they get fired.","aSentId": 29320,"answer": "They get fired if their team doesn't perform. They don't have the leeway of others who are able to scapegoat someone on their team for things. This makes it very important for this type of manager to cultivate a good team through hiring/firing/transferring their direct reports. The issue, though, is that the type of manager who works this way tends to be nicer and more caring. Thus you have a weird juxtaposition where the manager must be very supportive and caring of his/her team, but also must be fairly ruthless in terms of acquiring talent for the team and cutting the dead weight.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29313,"question": "&gt; but there's also a lot of management that that an agent doesn't do\n\nYes this is true, and I'm not trying to demean any managers in any way. But we need to start thinking of managers as supporting the talent (which would consist of the entire team) rather than the team being a tool which the manager uses. A client or higher up should never say \"Thanks Manager X for getting this done\", because Manager X didn't do it. Their team did. The manager is a crucial part of the team, but they are not the reason it got done.","aSentId": 29322,"answer": "&gt; Their team dead.\n\nOuch.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29323,"question": "&gt; Their team dead.\n\nOuch.","aSentId": 29324,"answer": "Lol. Mobile keyboards duck","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29325,"question": "Lol. Mobile keyboards duck","aSentId": 29326,"answer": "From my experience you tried to say\n\n&gt;  mobile keyboards fuck.\n\nWhich is much more interesting.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29327,"question": "From my experience you tried to say\n\n&gt;  mobile keyboards fuck.\n\nWhich is much more interesting.","aSentId": 29328,"answer": "It's a constant struggle with Android. Android does really want to learn from you. Android knows that I want to type fuck. It really understands. But it doesn't want to let me. It wants to pretend that I'm just using duck. I wanna duck you so hard baby.\n\nI always find it's so back and forth. Some days it'll totally let me write fuck all I want. Other days it'll try so hard, and it'll be in the list of words to correct to like \"well.... if you really want to say that.... then okay I guess....\"","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29329,"question": "It's a constant struggle with Android. Android does really want to learn from you. Android knows that I want to type fuck. It really understands. But it doesn't want to let me. It wants to pretend that I'm just using duck. I wanna duck you so hard baby.\n\nI always find it's so back and forth. Some days it'll totally let me write fuck all I want. Other days it'll try so hard, and it'll be in the list of words to correct to like \"well.... if you really want to say that.... then okay I guess....\"","aSentId": 29330,"answer": "my android google keyboard tried its hardest to never let me curse. i'd precisely swipe from f-u-c-k, each letter clearly highlighted by the keyboard, and when i lift my finger it comes out duck. likewise for suck, although i use it less frequently.\n\none day, i discovered the user dictionary in android. and that if you put swear words in it, google keyboard will be much more likely to autocorrect to them. oh, what a dream come true! i could fuck and suck as much as i wanted to! except...\n\nnow when i swipe duck, it comes out as fuck or suck instead. likewise for the myriad of other dirty words i put in the dictionary. regular safe-for-work discussions now autocorrect to be much dirtier than i intend.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29325,"question": "Lol. Mobile keyboards duck","aSentId": 29332,"answer": "Not sure if intentional. ","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29333,"question": "Not sure if intentional. ","aSentId": 29334,"answer": "yes lol","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29313,"question": "&gt; but there's also a lot of management that that an agent doesn't do\n\nYes this is true, and I'm not trying to demean any managers in any way. But we need to start thinking of managers as supporting the talent (which would consist of the entire team) rather than the team being a tool which the manager uses. A client or higher up should never say \"Thanks Manager X for getting this done\", because Manager X didn't do it. Their team did. The manager is a crucial part of the team, but they are not the reason it got done.","aSentId": 29336,"answer": "Possibly a better way to phrase this is \"the manager should not be the BOSS\". Ideally in the world of software development, the manager for a team should be a peer who handles their own domain, not the authority that gives the rest of the team (who are generally WAY more expert in the work being done) marching orders.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29338,"question": "I think you've just had bad managers. Only one manager that I've worked with did this and the team turned on him quickly. It didn't end well for him.","aSentId": 29339,"answer": "Actually funnily enough, most of the bad managers I've had were developers raised to managers. It's almost like when someone trains their entire life for one career, and then switches to another, they aren't as good as someone who trained for the other one.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29340,"question": "Actually funnily enough, most of the bad managers I've had were developers raised to managers. It's almost like when someone trains their entire life for one career, and then switches to another, they aren't as good as someone who trained for the other one.","aSentId": 29341,"answer": "The skills that make someone an outstanding developer don't help a whole lot as a manager.  It's an entirely different set of challenges that require skills that are of low value when programming.\n\nBut I will say that the engineers who develop great management skills are pretty fearsome in what they can accomplish.  ","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29340,"question": "Actually funnily enough, most of the bad managers I've had were developers raised to managers. It's almost like when someone trains their entire life for one career, and then switches to another, they aren't as good as someone who trained for the other one.","aSentId": 29343,"answer": "That was the case here. I think you have to be very careful and very good to be able to rise from developer to managing the same team. Same reason you typically have to be reassigned in Government when you are promoted.\n\nI managed to do it but I bust my ass keeping up on everything. Spend my weekends keeping my dev skills up. It ain't easy, but development is my passion so I can't say it's that painful.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29344,"question": "That was the case here. I think you have to be very careful and very good to be able to rise from developer to managing the same team. Same reason you typically have to be reassigned in Government when you are promoted.\n\nI managed to do it but I bust my ass keeping up on everything. Spend my weekends keeping my dev skills up. It ain't easy, but development is my passion so I can't say it's that painful.","aSentId": 29345,"answer": "&gt; *rise* from developer to managing\n\nheh\n\n&gt; I managed to do it\n\nchecks out","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29348,"question": "I think you underestimate what managers bring to the table. It's like you said the bricklayers built the empire state building and the formen, architects etc didn't get it done. (Take the spirit of the metaphor, not the minutiae) ","aSentId": 29349,"answer": "I'm not trying to underestimate what a manager does, they are a very critical part of the team, but they don't perform the actual work, they coordinate it. It's a skill set I don't have, and a very different one then I'd ever want. It does take a lot of skill to deal with a team, and coordinate and manage them, and I respect that. But a lot of workplaces treat it as \"that's bill lumbergh's team over there\", when the developers are just as crucial a part of the team as a manager.\n\nA good manager realizes the talent of a developer, and does everything they can to get everything out of their way and make things happen. And the work would get done very slowly without them, but the work wasn't done solely because of them. (I've seen a manager actually physically shoo away people who've had unrelated problems, or problems that could be handled by junior developers, in order to make sure the developer didn't loose their momentum).","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29350,"question": "I'm not trying to underestimate what a manager does, they are a very critical part of the team, but they don't perform the actual work, they coordinate it. It's a skill set I don't have, and a very different one then I'd ever want. It does take a lot of skill to deal with a team, and coordinate and manage them, and I respect that. But a lot of workplaces treat it as \"that's bill lumbergh's team over there\", when the developers are just as crucial a part of the team as a manager.\n\nA good manager realizes the talent of a developer, and does everything they can to get everything out of their way and make things happen. And the work would get done very slowly without them, but the work wasn't done solely because of them. (I've seen a manager actually physically shoo away people who've had unrelated problems, or problems that could be handled by junior developers, in order to make sure the developer didn't loose their momentum).","aSentId": 29351,"answer": "Then we're in agreement.\n\nThere are a lot of folks in /r/programming who seem to act like all managers are literally Hitler and are unnecessary. Perhaps they are blissfully isolated from the myriad issues that prop up when managing people/projects and only notice when things go wrong.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29352,"question": "Then we're in agreement.\n\nThere are a lot of folks in /r/programming who seem to act like all managers are literally Hitler and are unnecessary. Perhaps they are blissfully isolated from the myriad issues that prop up when managing people/projects and only notice when things go wrong.","aSentId": 29353,"answer": "There are a lot of really bad managers out there, and some of the managers are worse than having no-one, so I can understand when some people get frustrated. I've sat through sprint end meetings where the manager (department manager, not team) simply questioned the titles of backlog items, and said we need to have more descriptive ones, despite the fact that the suggestion was barely any different (The backlog item was \"log-in page\" and he wanted to change it to \"create log-in page\"). It was a total waste of an hour. I've sat through a sprint kick-off meeting where the entire meeting was simply a debate about whether tasks that have been finished by not tested should be \"resolved\" or \"closed\" (this was a kick-off meeting, so last sprint's board shouldn't even have been open really). When we ran out of time in the meeting we literally had no tasks on the sprint board and we spent an entire sprint just making up our own tasks. I've had a manager tell me to \"plan out my tasks\" for 3 separate team projects, where my tasks consisted of following a given checklist of setup for the project, and each took a couple hours at most to do. In all those situations management did more harm than good.\n\nA bad manager can bring the team down just as much as a good manager can bring it up. It should come as no surprise that all of those bad manager moments I've experienced all came from developers raised to management, and all the good experiences came from managers who went to school and worked their career towards management.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29355,"question": "Hell  I work for a dying financial, arguably one of the most traditionally rigid structures out there, and we're the same way.  Individual contributors make very similar salaries to managers because we are equally skilled in different fields and enable eachother to succeed. \n\nManagers are shit umbrellas and cheerleaders and Sr engineers deal with design and implementation.  without one half the other suffers.... frankly, beyond any hippie ideology or 'what I want',  it's just good business. ","aSentId": 29356,"answer": "Meanwhile, execs and shareholders are siphoning away all the income that is enabled by the engineer/manager team.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29229,"question": "We need the culture shift from managers being treated as managers to being treated as agents.\n\nAn agent (in sports and entertainment) does all the work same work a \"manager\" would, the difference being the agent is supporting the talent rather than the talent supporting the manager.\n\nThe most frustrating statement I've ever heard from my workplace is \"being a senior developer is more than just about coding, it's about managing a team\". So as I advance in my development skills, I can never advance in my career unless I give up and take on other career. What this tells me is that if I want to advance **my** career, the only option is to move to another company. If I'm twice as productive and valuable 5 years from now, I should have the salary and position to show that.","aSentId": 29364,"answer": "That's why I try to see myself more as a coordinator than as a supervisor. My job is to support my guys to help them get the job done, not the other way around.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29365,"question": "That's why I try to see myself more as a coordinator than as a supervisor. My job is to support my guys to help them get the job done, not the other way around.","aSentId": 29366,"answer": "Yes this is the way to think. ","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29367,"question": "Yes this is the way to think. ","aSentId": 29368,"answer": "Tell me more about how I should think.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29369,"question": "Tell me more about how I should think.","aSentId": 29370,"answer": "..... I was basically saying good job to /u/salgat for seeing her/his job as helping to get the job done, rather than seeing them as tools.... ","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29229,"question": "We need the culture shift from managers being treated as managers to being treated as agents.\n\nAn agent (in sports and entertainment) does all the work same work a \"manager\" would, the difference being the agent is supporting the talent rather than the talent supporting the manager.\n\nThe most frustrating statement I've ever heard from my workplace is \"being a senior developer is more than just about coding, it's about managing a team\". So as I advance in my development skills, I can never advance in my career unless I give up and take on other career. What this tells me is that if I want to advance **my** career, the only option is to move to another company. If I'm twice as productive and valuable 5 years from now, I should have the salary and position to show that.","aSentId": 29372,"answer": "I think this is part of why consulting is such a big thing right now.  In consulting, the business people really *are* you're agents.  The company gets bids because they have the talent (i.e., devs), not because they have the best management (though that can sometimes help).  Management's job because providing materials to the devs and securing future payment and positions.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29373,"question": "I think this is part of why consulting is such a big thing right now.  In consulting, the business people really *are* you're agents.  The company gets bids because they have the talent (i.e., devs), not because they have the best management (though that can sometimes help).  Management's job because providing materials to the devs and securing future payment and positions.","aSentId": 29374,"answer": "Exactly this, I contract as a programmer specifically because it allowed me to get out of my management roles and do what I want at an acceptable pay grade.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29373,"question": "I think this is part of why consulting is such a big thing right now.  In consulting, the business people really *are* you're agents.  The company gets bids because they have the talent (i.e., devs), not because they have the best management (though that can sometimes help).  Management's job because providing materials to the devs and securing future payment and positions.","aSentId": 29376,"answer": "Well... I've always heard there's 2 career paths for senior programmers - management or consulting. If you don't pick one you'll get replaced by a younger, cheaper developer.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29377,"question": "Well... I've always heard there's 2 career paths for senior programmers - management or consulting. If you don't pick one you'll get replaced by a younger, cheaper developer.","aSentId": 29378,"answer": "That really only happens in shitty companies. Or old programmers aren't as good as they think they are. Age is not justification for a higher salary.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29383,"question": "\"Changing jobs\", ie going into management, is pretty much how it works in every profession; programming is not unique here.","aSentId": 29384,"answer": "That's only true of jobs where there is a limit to productivity. Manual labour being the biggest one.\n\nJobs where its intellectually based, or creativity allow for quite a lot of growth without being forced into management. Lawyers being the example in the article, musicians and actors being an obvious one. Researchers can keep growing without being forced to manage other researchers (well they get RAs, but they don't need to become chair people or anything). Teachers. Investors. Real estate agents. ","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29385,"question": "That's only true of jobs where there is a limit to productivity. Manual labour being the biggest one.\n\nJobs where its intellectually based, or creativity allow for quite a lot of growth without being forced into management. Lawyers being the example in the article, musicians and actors being an obvious one. Researchers can keep growing without being forced to manage other researchers (well they get RAs, but they don't need to become chair people or anything). Teachers. Investors. Real estate agents. ","aSentId": 29386,"answer": "Those jobs that do not require management track usually have equal but distinct issues.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29385,"question": "That's only true of jobs where there is a limit to productivity. Manual labour being the biggest one.\n\nJobs where its intellectually based, or creativity allow for quite a lot of growth without being forced into management. Lawyers being the example in the article, musicians and actors being an obvious one. Researchers can keep growing without being forced to manage other researchers (well they get RAs, but they don't need to become chair people or anything). Teachers. Investors. Real estate agents. ","aSentId": 29388,"answer": "Many of those are jobs without a real management system, ie lawyers and real estate agents. They basically start at the top, or the bottom, and move up as far as they can move themselves.\n\nI'd argue that teachers fall into the management promotion path, their only option is to remain a teacher and gain seniority, or move into administration like being a principal.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29389,"question": "Many of those are jobs without a real management system, ie lawyers and real estate agents. They basically start at the top, or the bottom, and move up as far as they can move themselves.\n\nI'd argue that teachers fall into the management promotion path, their only option is to remain a teacher and gain seniority, or move into administration like being a principal.","aSentId": 29390,"answer": "For teachers it depends. Primary school yeah, but secondary teachers do get raises based on their professional development. And post secondary can always improve without having to be administration","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29391,"question": "For teachers it depends. Primary school yeah, but secondary teachers do get raises based on their professional development. And post secondary can always improve without having to be administration","aSentId": 29392,"answer": "Sure but as a programmer, I also get raises based on time and professional development. \n\nTeachers cap out eventually, and so will I, unless I pursue management, same as them.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29393,"question": "Sure but as a programmer, I also get raises based on time and professional development. \n\nTeachers cap out eventually, and so will I, unless I pursue management, same as them.","aSentId": 29394,"answer": "Again it depends. Professors don't usually have a cap, mostly they just stop caring after a certain point in time. Secondary school teachers depends on whether it's public/private, and whether it's run by a union or run by intelligent people.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29385,"question": "That's only true of jobs where there is a limit to productivity. Manual labour being the biggest one.\n\nJobs where its intellectually based, or creativity allow for quite a lot of growth without being forced into management. Lawyers being the example in the article, musicians and actors being an obvious one. Researchers can keep growing without being forced to manage other researchers (well they get RAs, but they don't need to become chair people or anything). Teachers. Investors. Real estate agents. ","aSentId": 29396,"answer": "&gt; Researchers can keep growing without being forced to manage other researchers\n\nNope. Coming from academia, I can guarantee you that if you don't get a professorship, you are out. (you are out even if you get a professorship and can't find funds because your field went out of fashion, but that's another story)","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29399,"question": "&gt;If I'm twice as productive and valuable 5 years from now, I should have the salary and position to show that.\n\nExcept, if you become a good manager (mentor) you can bring other programmers up to the level you were at and make a larger impact in the company. \n\nSo on your current track in 5 years you double your productivity, but if you can transition into management and coach a team of 5 people for 5 years to the same level of productivity the company gains 5x instead of 2x.\n","aSentId": 29400,"answer": "&gt; a good manager (mentor) \n\nThese are different jobs. I don't mind mentoring, and I don't mind training (well I do mind training at things below my job level, like how to use our system, that should be handled by non-developers). I absolutely love mentoring other developers that are trying to improve their skills and I want to do that.\n\nWhat I don't want to do is lead a team. Is sit in meetings with clients or higher ups and plan out the schedule of a project. I don't want to make decisions about which features are most valuable to the user, I want to help provide information for that, but ultimately that's someone else's skill set.\n\n&gt; the company gains 5x instead of 2x.\n\nAnd if that occurred then the company should be paying said manager 5x the original pay. But the only time I should ever be at the cap for my position/skills should be when my skills are actually at maximum. \n\nI also strongly disagree with the statement that managers can increase productivity more than individual developers. I've developed internal tools/build processes that have decreased time to do common tasks from days to minutes. Those tools are used by the entire team. Developers that find productivity tips not only help themselves, but they help the whole team (so long as they share with others).","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29401,"question": "&gt; a good manager (mentor) \n\nThese are different jobs. I don't mind mentoring, and I don't mind training (well I do mind training at things below my job level, like how to use our system, that should be handled by non-developers). I absolutely love mentoring other developers that are trying to improve their skills and I want to do that.\n\nWhat I don't want to do is lead a team. Is sit in meetings with clients or higher ups and plan out the schedule of a project. I don't want to make decisions about which features are most valuable to the user, I want to help provide information for that, but ultimately that's someone else's skill set.\n\n&gt; the company gains 5x instead of 2x.\n\nAnd if that occurred then the company should be paying said manager 5x the original pay. But the only time I should ever be at the cap for my position/skills should be when my skills are actually at maximum. \n\nI also strongly disagree with the statement that managers can increase productivity more than individual developers. I've developed internal tools/build processes that have decreased time to do common tasks from days to minutes. Those tools are used by the entire team. Developers that find productivity tips not only help themselves, but they help the whole team (so long as they share with others).","aSentId": 29402,"answer": "&gt;but ultimately that's someone else's skill set.  \n\nFor most companies in order to grow in your career you need to make it yours. Managers aren't born and the best dev managers are developers.\n\n&gt;I've developed internal tools/build processes that have decreased time to do common tasks from days to minutes.\n\nSo have I and so have thousands of other developers. As much as I hate saying it (I'm a developer), developers are not special. Just like any other individual contributor role they are looking for you to foster that same level of expertise and skill in other people.\n","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29403,"question": "&gt;but ultimately that's someone else's skill set.  \n\nFor most companies in order to grow in your career you need to make it yours. Managers aren't born and the best dev managers are developers.\n\n&gt;I've developed internal tools/build processes that have decreased time to do common tasks from days to minutes.\n\nSo have I and so have thousands of other developers. As much as I hate saying it (I'm a developer), developers are not special. Just like any other individual contributor role they are looking for you to foster that same level of expertise and skill in other people.\n","aSentId": 29404,"answer": "&gt; Managers aren't born and the best dev managers are developers.\n\nSome of the absolute worst are/were developers as well. I get it that if you have the interpersonal skills to do it and you're looking to get get experience and be promoted, it absolutely makes sense to take on more managing tasks. Some other developers though, they don't have any of those skills but still get promoted because that's what other people think should happen and they're not objecting because they get very nice pay bump. Don't be that guy because it doesn't work for anybody involved.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29399,"question": "&gt;If I'm twice as productive and valuable 5 years from now, I should have the salary and position to show that.\n\nExcept, if you become a good manager (mentor) you can bring other programmers up to the level you were at and make a larger impact in the company. \n\nSo on your current track in 5 years you double your productivity, but if you can transition into management and coach a team of 5 people for 5 years to the same level of productivity the company gains 5x instead of 2x.\n","aSentId": 29406,"answer": "I don't think this necessarily works out the way the author or you are puttting it in software. \n\nIf instead of saying \"twice as productive\" or \"twice as valuable\" a better statement might be \"twice a knowledgeable or talented at programming\". Someone twice as good at programming can easily be worth more than 5x it term of value or productivity. The nature of software is that a peice of code can be more valuable than a group of people who are good at writing code. ","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29415,"question": "The difference is in who does the hiring and firing. Artists hire their own agents, and thus have the power to fire them. The power structure is reversed. \n\nI'm having a hard time imagining a structure in which programmers hire their own managers. It would take a radical change in corporate structure at most companies. I'm not really sure how it would work.","aSentId": 29416,"answer": "I can guarantee that there are programmers who hold enough wait that the company would (or at least should) consider firing a manager the programming didn't find worked for them.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29418,"question": "If you are actually more valuable, yes. But it may well be the case that for many organizations the value of a coder maxes out at a certain level of skill. ","aSentId": 29419,"answer": "10 years of experience, or 1 year of experience 10 times.  It's a scary thing how subjective these things are.\n\n","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29420,"question": "10 years of experience, or 1 year of experience 10 times.  It's a scary thing how subjective these things are.\n\n","aSentId": 29421,"answer": "That's not exactly what I'm saying. That's not actually even remotely what I'm saying. There are (a lot of) software products for which there is a diminishing marginal benefit for developer skill. Take an extreme example: Donald Knuth is probably over qualified to be the lead developer for an affiliate marketing web page for reptile pet food. \n\nYou don't get paid for your knowledge or skill, you get paid for your value. And that's a function both of your knowledge and skill and the product itself (among other things). ","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29418,"question": "If you are actually more valuable, yes. But it may well be the case that for many organizations the value of a coder maxes out at a certain level of skill. ","aSentId": 29423,"answer": "Genuinely curious, how does transitioning to management bring *more* value to the table? ","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29424,"question": "Genuinely curious, how does transitioning to management bring *more* value to the table? ","aSentId": 29425,"answer": "Well, it doesn't always. There's risk involved. There is no guarantee that anyone will develop into a good manager.\n\nThe way you generate value is through productivity gains. A good manager can drive much more productivity than a single developer can. So a good manager can be very valuable to the organization. \n\nA bad manager, of course, has the opposite effect.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29426,"question": "Well, it doesn't always. There's risk involved. There is no guarantee that anyone will develop into a good manager.\n\nThe way you generate value is through productivity gains. A good manager can drive much more productivity than a single developer can. So a good manager can be very valuable to the organization. \n\nA bad manager, of course, has the opposite effect.","aSentId": 29427,"answer": "In many situations automating something brings far more value than anything a middle manager could do in an equivalent amount of time.\n","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29428,"question": "In many situations automating something brings far more value than anything a middle manager could do in an equivalent amount of time.\n","aSentId": 29429,"answer": "That isn't a counterpoint. Part of the task of good management is identifying what can and should be automated. And prioritizing that against a thousand other possible uses of everyone's talents and time and interests. \n\nGood management is about maximizing the productivity of a team and setting optimal priorities. ","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29430,"question": "That isn't a counterpoint. Part of the task of good management is identifying what can and should be automated. And prioritizing that against a thousand other possible uses of everyone's talents and time and interests. \n\nGood management is about maximizing the productivity of a team and setting optimal priorities. ","aSentId": 29431,"answer": "Yes, I agree.\n\nAt least half of management isn't good management though. They don't really understand the low level stuff well enough to know what can and should be automated and how to do that. People that started at the bottom and happen to be good at management are a rare bread. Professional MBA types who don't have any experience of anything but management are rarely good managers.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29432,"question": "Yes, I agree.\n\nAt least half of management isn't good management though. They don't really understand the low level stuff well enough to know what can and should be automated and how to do that. People that started at the bottom and happen to be good at management are a rare bread. Professional MBA types who don't have any experience of anything but management are rarely good managers.","aSentId": 29433,"answer": "Isn't this an argument in favor of companies creating an incentive for good coders to move to management?","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29434,"question": "Isn't this an argument in favor of companies creating an incentive for good coders to move to management?","aSentId": 29435,"answer": "Certainly not! It's an argument in favor of creating an incentive for good coders who would also be good managers to move to management. Good coders who would make bad managers should never get moved to management, they should be valued as coders instead.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29436,"question": "Certainly not! It's an argument in favor of creating an incentive for good coders who would also be good managers to move to management. Good coders who would make bad managers should never get moved to management, they should be valued as coders instead.","aSentId": 29437,"answer": "Well, essentially no one who moves into management for the first time will be good at it. As with anything else, it takes time and practice. It's hard to predict who'll pan out. \n\nYou create the incentives and then people will compete for the role, providing you the opportunity to pick the ones who, in your best estimation, will be good. ","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29199,"question": "Programmer IS A Career Path, Thank You","aSentId": 29440,"answer": "I must be honest, I've never actually encountered this attitude in any place I or my husband has worked. In all cases, there have been options for people to move into management positions but also \"guru\" positions (which are equally respected, but different). For those who want to program forever, the option has always been there in my places of work. You just go from being a lowly code monkey to the resident code wizard.\n\nIt sounds like a culture problem in certain companies. Or maybe I've just been really lucky.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29441,"question": "I must be honest, I've never actually encountered this attitude in any place I or my husband has worked. In all cases, there have been options for people to move into management positions but also \"guru\" positions (which are equally respected, but different). For those who want to program forever, the option has always been there in my places of work. You just go from being a lowly code monkey to the resident code wizard.\n\nIt sounds like a culture problem in certain companies. Or maybe I've just been really lucky.","aSentId": 29442,"answer": "Nope, that sounds like my place as well. :)","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29443,"question": "Nope, that sounds like my place as well. :)","aSentId": 29444,"answer": "It's kind of just what happens. If you stay there long enough, you become the 'code wizard' because you know the system. Everybody else going through turnover is just a constant brain-drain.. but management does it for some reason.\n\nSo you start as 'the new guy', eventually give in to the insanity of whatever legacy system they have, and become the 'resident code wizard' because you know the special magic words and symbols to make the runes of sketchy-software-service starting.\n","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29441,"question": "I must be honest, I've never actually encountered this attitude in any place I or my husband has worked. In all cases, there have been options for people to move into management positions but also \"guru\" positions (which are equally respected, but different). For those who want to program forever, the option has always been there in my places of work. You just go from being a lowly code monkey to the resident code wizard.\n\nIt sounds like a culture problem in certain companies. Or maybe I've just been really lucky.","aSentId": 29446,"answer": "Yeah, exactly. My title was changed to \"something something Architect\" a few years ago, and now I spend about half my time doing architect-y / management-y things, but I still spend about equal time writing code... and there's no pressure to do otherwise because I'm recognized as a \"guru\" who's more valuable mentoring and designing and guiding than JUST writing code... but because I'm generally more productive than any straight programmer by double or more, I still get to code. \n\nA few years ago I thought I wanted and even HAD to go down the management path, but that's no longer true... given my experience, I *could* if I ever decide to, but I feel like I'm where I fit best now and I don't see that changing. I can be influential and I get a ton of respect, and I even get to play manager a bit, but I'm still hacking bits, so it's the best of both worlds. ","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29441,"question": "I must be honest, I've never actually encountered this attitude in any place I or my husband has worked. In all cases, there have been options for people to move into management positions but also \"guru\" positions (which are equally respected, but different). For those who want to program forever, the option has always been there in my places of work. You just go from being a lowly code monkey to the resident code wizard.\n\nIt sounds like a culture problem in certain companies. Or maybe I've just been really lucky.","aSentId": 29448,"answer": "I suspect it may be partially regional, eg. you &amp; your hubby have been lucky in regards to *where* you have worked in addition to *who*.  \n  \nWhere I live/work (greater Cincinnati area) it's the norm, with a few exceptions here &amp; there.  \n  \nAs an added twist, there is a strong consultant/staff-aug element here, in which case encouragement exists to graduate from programming into sales.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29450,"question": "yeah I've seriously never seen this","aSentId": 29451,"answer": "Youve been unlucky.  Even game companies are doing this now.  Every place Ive been have had Principle &lt;blah&gt; positions for programmers with lots of experience.  ","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29452,"question": "Youve been unlucky.  Even game companies are doing this now.  Every place Ive been have had Principle &lt;blah&gt; positions for programmers with lots of experience.  ","aSentId": 29453,"answer": "oh sorry, I meant I've never seen it where they force you into management or architect paths.  ","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29454,"question": "oh sorry, I meant I've never seen it where they force you into management or architect paths.  ","aSentId": 29455,"answer": "Ohhh!  Yeah, me neither.  I dont believe *Architect* is a viable job.  As in someone that plans but doesnt program.  \n\nSadly, I heard of one job where a guy had *Architect*s that threw designs at programmers.  Ha!  I say.  Hah!.  ","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29456,"question": "Ohhh!  Yeah, me neither.  I dont believe *Architect* is a viable job.  As in someone that plans but doesnt program.  \n\nSadly, I heard of one job where a guy had *Architect*s that threw designs at programmers.  Ha!  I say.  Hah!.  ","aSentId": 29457,"answer": "I've worked where we had architects and I gotta say, some of them were absolutely shitty programmers.  we were using Java and they would put all of a class's business logic inside the constructor, thus making it impossible to unit test later on during a maintenance project I was working on.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29459,"question": "I have two points:\n\n1. When you advance in *any* field (be it tech, science, anything) you progress more and more towards a management role. If you're making high level decisions you have less time for details. Go ask some professors how much time they spend in their lab doing benchwork versus how much time they spend in their office sending emails and attending meetings (hint: It's mostly the latter). This is just a fact of life, and has nothing to do with programming in particular.\n\n2. There seems to be this attitude that management are simply overly-compensated placeholders that don't contribute anything tangible. I have no idea where that comes from, but that's a pretty toxic attitude. Take this except for example:\n\n&gt;Caught off guard, you panic momentarily as you feel that you have about 5 seconds to decide whether your long term future involves lots of UML diagrams and flow charts or whether it involves lots of Power Point presentations and demanding TPS reports from underlings.\n\nI think it's pretty ridiculous to compare managers in general with their caricature from a comedy movie. Someone could just easily turn that example around \"caught off guard you imagine your future involves a lot  pecking away at your keyboard, drinking Mountain Dew and eating Doritos, like Denis Nedry in Jurassic Park.\"\n\nI'm sure /r/programming would be up in arms if a manager described programmers that way. But we're quick to do the same thing to managers, no problem.","aSentId": 29460,"answer": "That's a very narrow-sight generalization. Tending to management cannot be the only path to evolve professionally in programming (or any other career). Why? We would be drowning in managers at every company.\n\nThere will always be programmers who have pure management as their career path, but I suspect it's mainly because management being so overrated and overpaid nowadays. Some of us are happy if we get stuck at the team leading role to keep getting our hands dirty.\n\nTech work got devaluated without a real reason. They say \"software factories\" (hate that name, so consulting-ish) in countries like India are cheaper, but I've worked with said factories and I can tell you code quality is pretty low. Nothing replaces a well experienced programmer.\n\nThat also explain why software produced with said methods (sending the specs overseas and receiving low cost code back) is usually crappy, over bloated and non maintainable.\n\nI challenge you to create an ssh (just an example) replacement with said perverted methods.\n\nIt's just a cheap fallacy for removing experienced techies with underpaid kids right out of the college. Period.\n\nWasting a really experienced coder that way should be seen as what it is: throwing company's assets away.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29461,"question": "That's a very narrow-sight generalization. Tending to management cannot be the only path to evolve professionally in programming (or any other career). Why? We would be drowning in managers at every company.\n\nThere will always be programmers who have pure management as their career path, but I suspect it's mainly because management being so overrated and overpaid nowadays. Some of us are happy if we get stuck at the team leading role to keep getting our hands dirty.\n\nTech work got devaluated without a real reason. They say \"software factories\" (hate that name, so consulting-ish) in countries like India are cheaper, but I've worked with said factories and I can tell you code quality is pretty low. Nothing replaces a well experienced programmer.\n\nThat also explain why software produced with said methods (sending the specs overseas and receiving low cost code back) is usually crappy, over bloated and non maintainable.\n\nI challenge you to create an ssh (just an example) replacement with said perverted methods.\n\nIt's just a cheap fallacy for removing experienced techies with underpaid kids right out of the college. Period.\n\nWasting a really experienced coder that way should be seen as what it is: throwing company's assets away.","aSentId": 29462,"answer": "&gt; Tech work got devaluated without a real reason. They say \"software factories\" (hate that name, so consulting-ish) in countries like India are cheaper, but I've worked with said factories and I can tell you code quality is pretty low. \n\nConsultant here. If an interviewer described their company or their partners as \"software factories\", I would walk out. Outsourcing your core domain software is a surefire way to bog your developers down in tedious hand-holding and low quality code.\n\nNot all consultants are leeches that aim to increase (personal) profits through lowering costs by any means. Some of us actually give a damn about software quality.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29463,"question": "&gt; Tech work got devaluated without a real reason. They say \"software factories\" (hate that name, so consulting-ish) in countries like India are cheaper, but I've worked with said factories and I can tell you code quality is pretty low. \n\nConsultant here. If an interviewer described their company or their partners as \"software factories\", I would walk out. Outsourcing your core domain software is a surefire way to bog your developers down in tedious hand-holding and low quality code.\n\nNot all consultants are leeches that aim to increase (personal) profits through lowering costs by any means. Some of us actually give a damn about software quality.","aSentId": 29464,"answer": "And I'm fucking glad. Sorry again for the generalization","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29465,"question": "And I'm fucking glad. Sorry again for the generalization","aSentId": 29466,"answer": "No hard feelings here :)","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29463,"question": "&gt; Tech work got devaluated without a real reason. They say \"software factories\" (hate that name, so consulting-ish) in countries like India are cheaper, but I've worked with said factories and I can tell you code quality is pretty low. \n\nConsultant here. If an interviewer described their company or their partners as \"software factories\", I would walk out. Outsourcing your core domain software is a surefire way to bog your developers down in tedious hand-holding and low quality code.\n\nNot all consultants are leeches that aim to increase (personal) profits through lowering costs by any means. Some of us actually give a damn about software quality.","aSentId": 29468,"answer": "Working for a fairly competent consulting company, with meticulous hiring practices, I agree that there are high-quality consultants.\n\nThat said, there are also many shitty consulting companies out there as well; and having to often work with them is painful!","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29459,"question": "I have two points:\n\n1. When you advance in *any* field (be it tech, science, anything) you progress more and more towards a management role. If you're making high level decisions you have less time for details. Go ask some professors how much time they spend in their lab doing benchwork versus how much time they spend in their office sending emails and attending meetings (hint: It's mostly the latter). This is just a fact of life, and has nothing to do with programming in particular.\n\n2. There seems to be this attitude that management are simply overly-compensated placeholders that don't contribute anything tangible. I have no idea where that comes from, but that's a pretty toxic attitude. Take this except for example:\n\n&gt;Caught off guard, you panic momentarily as you feel that you have about 5 seconds to decide whether your long term future involves lots of UML diagrams and flow charts or whether it involves lots of Power Point presentations and demanding TPS reports from underlings.\n\nI think it's pretty ridiculous to compare managers in general with their caricature from a comedy movie. Someone could just easily turn that example around \"caught off guard you imagine your future involves a lot  pecking away at your keyboard, drinking Mountain Dew and eating Doritos, like Denis Nedry in Jurassic Park.\"\n\nI'm sure /r/programming would be up in arms if a manager described programmers that way. But we're quick to do the same thing to managers, no problem.","aSentId": 29470,"answer": "That argument would hold a lot better if companies like Valve weren't demonstrably and profitably implenting flat management hierarchies. Top down hierarchies are put in place to compensate for lack of aptitude and vision. The attitude that they are indispensable is also toxic. But your first point stands. ","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29471,"question": "That argument would hold a lot better if companies like Valve weren't demonstrably and profitably implenting flat management hierarchies. Top down hierarchies are put in place to compensate for lack of aptitude and vision. The attitude that they are indispensable is also toxic. But your first point stands. ","aSentId": 29472,"answer": "Valve is not a great example of a functioning flat management hierarchy. Do you really want to work somewhere that the high school clique can vote you off of the island? Trust me, it'll have nothing to do with your skill level and everything to do with how well you get along with the invisible management structure.\n\nProgramming front line managers shield you from more B.S. than you can imagine. They motivate those that have very little self motivation, which from my experience is most programmers. The good managers get rid of the unmotivatable programmers and hopefully hire ones that improve the project going forward. They act as a sounding board, a mentor, a career guide. Most of the good ones I know still actively program and have years of programming experience. The really good ones recognize the programmers who are self motivated and help them prioritize what the company needs to work on next.\n\nOf course their are bad managers, ones who don't know how to code, but you know you always have an option of voting yourself out and finding a better place to work. I've done that myself a few times. But in the thirty years I've been coding for a living, I've only had a couple of bad managers. Most of the managers I've worked with help me get my job done, which is ultimately what they are there for. So from my perspective, front line programming mangers are indeed indispensable.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29473,"question": "Valve is not a great example of a functioning flat management hierarchy. Do you really want to work somewhere that the high school clique can vote you off of the island? Trust me, it'll have nothing to do with your skill level and everything to do with how well you get along with the invisible management structure.\n\nProgramming front line managers shield you from more B.S. than you can imagine. They motivate those that have very little self motivation, which from my experience is most programmers. The good managers get rid of the unmotivatable programmers and hopefully hire ones that improve the project going forward. They act as a sounding board, a mentor, a career guide. Most of the good ones I know still actively program and have years of programming experience. The really good ones recognize the programmers who are self motivated and help them prioritize what the company needs to work on next.\n\nOf course their are bad managers, ones who don't know how to code, but you know you always have an option of voting yourself out and finding a better place to work. I've done that myself a few times. But in the thirty years I've been coding for a living, I've only had a couple of bad managers. Most of the managers I've worked with help me get my job done, which is ultimately what they are there for. So from my perspective, front line programming mangers are indeed indispensable.","aSentId": 29474,"answer": "Why would you really care if you worked somewhere where people could vote you off the island?  It's not like they have to vote someone off at the end of every episode.  If you managed to get into a situation where the majority of people no longer want to work with you, then either the company is fucked or you are and you're probably better off parting ways.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29475,"question": "Why would you really care if you worked somewhere where people could vote you off the island?  It's not like they have to vote someone off at the end of every episode.  If you managed to get into a situation where the majority of people no longer want to work with you, then either the company is fucked or you are and you're probably better off parting ways.","aSentId": 29476,"answer": "Why? I'd rather have my value judged by my work performance and impact on profitability than on how popular I am with certain cliques (no majority needed at Valve). If your ideal is to return to the fun you had while in high school, no matter what your grades, then perhaps Valve is the place for you. Me, I'll stick with being a responsible adult.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29471,"question": "That argument would hold a lot better if companies like Valve weren't demonstrably and profitably implenting flat management hierarchies. Top down hierarchies are put in place to compensate for lack of aptitude and vision. The attitude that they are indispensable is also toxic. But your first point stands. ","aSentId": 29478,"answer": "Valve is also notorious for taking forever to ship anything, so that approach isn't without its downsides.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29459,"question": "I have two points:\n\n1. When you advance in *any* field (be it tech, science, anything) you progress more and more towards a management role. If you're making high level decisions you have less time for details. Go ask some professors how much time they spend in their lab doing benchwork versus how much time they spend in their office sending emails and attending meetings (hint: It's mostly the latter). This is just a fact of life, and has nothing to do with programming in particular.\n\n2. There seems to be this attitude that management are simply overly-compensated placeholders that don't contribute anything tangible. I have no idea where that comes from, but that's a pretty toxic attitude. Take this except for example:\n\n&gt;Caught off guard, you panic momentarily as you feel that you have about 5 seconds to decide whether your long term future involves lots of UML diagrams and flow charts or whether it involves lots of Power Point presentations and demanding TPS reports from underlings.\n\nI think it's pretty ridiculous to compare managers in general with their caricature from a comedy movie. Someone could just easily turn that example around \"caught off guard you imagine your future involves a lot  pecking away at your keyboard, drinking Mountain Dew and eating Doritos, like Denis Nedry in Jurassic Park.\"\n\nI'm sure /r/programming would be up in arms if a manager described programmers that way. But we're quick to do the same thing to managers, no problem.","aSentId": 29480,"answer": "&gt;I have two points:\n\n&gt;1. When you advance in *any* field (be it tech, science, anything) you progress more and more towards a management role. If you're making high level decisions you have less time for details.\n\nTrue, but there may be a distinct point in your lifetime where you have the choice to make a switch that will turn your career into stereotypical management. Sometimes, there's not much grey area in between management and development.\n\nGood friend of mine, principal software engineer at a large company for decades, was eventually offered a management position. I believe his boss left.\n\nWhat does he do? He hires his own boss, a friend that is qualified that he trusts. He stays the Principal SE and codes all the fucking time, designing, debugging, etc. He's invaluable to the company.\n\nHe absolutely abhors the idea of being a manager, even though he'd probably be making almost half a mil. He's paid very well... But I imagine he'd be paid a lot more if he took the role. It's not that he detests managers, he detests having to do shit they do. As much or a stereotype it sounds like it is, every upper/lower management person I've known has disappeared from their desk for full days on end, only to arrive back for one hour of the day, exasperated because of constant meetings.\n\nI would be too, at least at this point in my life. I imagine I will feel the same in twenty years but I can't say for sure.\n\nI have had a ton of awesome managers and I know how hard they work, at things that would frustrate the hell out of me. I respect them for doing it just like I respect other people who take care of essential business matters that I don't want any part in. At least they get paid bank. I can't say that for all managers I've met but a lot for sure.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29483,"question": "Managers aren't productive.  Engineers are productive.  It's a completely misguided effort to try to take somebody productive and put them in a role where they are not productive.  You said it yourself: \"sending emails and attending meetings\".  That's not being productive.  Why would you want a talented person to waste time doing things that are not productive?\n\n\nManagers are a necessary evil in a company that's too big for engineers to self-manage.  (At a small company, non-coding managers do nothing but get in the way.)  Managers have an inferior ability to look at the technology and judge whether or not the coders are doing their job right.  The manager has an EXTREMELY abstract understanding of what's going on in the code.\n\n\nThis is UNIQUE to SOFTWARE ENGINEERING.  A manager of a construction crew has a very good understanding of why every nut and bolt is important, and how it fits into the big picture.  A sales manager knows how every sales call fits into the big plan.  A landscaping manager has knowledge that supersedes everybody who is hammering away at wooden stakes.\n\n\nEngineers need to code.  Managers need to get out of the way and let the engineers code.  These are 2 different positions.  Drawing a line from one to the other makes no sense whatsoever.","aSentId": 29484,"answer": "&gt;Managers aren't productive. Engineers are productive... Managers are a necessary evil in a company that's too big for engineers to self-manage.\n\nWhat exactly is your definition of productivity?\n\nObviously the software engineers write the code. They produce it. But they're not going to be doing a whole lot of coding if their product can't get to market, or their project isn't funded. Things like that are hugely important.\n\nCalling managers a \"necessary evil\" I think is a disservice to them.\n\nAlso I don't know why you think this issue is unique to software engineering. You think that managers in other fields all have a deep knowledge of the work, but in software engineering they don't. I think there are managers of both types in all fields.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29485,"question": "&gt;Managers aren't productive. Engineers are productive... Managers are a necessary evil in a company that's too big for engineers to self-manage.\n\nWhat exactly is your definition of productivity?\n\nObviously the software engineers write the code. They produce it. But they're not going to be doing a whole lot of coding if their product can't get to market, or their project isn't funded. Things like that are hugely important.\n\nCalling managers a \"necessary evil\" I think is a disservice to them.\n\nAlso I don't know why you think this issue is unique to software engineering. You think that managers in other fields all have a deep knowledge of the work, but in software engineering they don't. I think there are managers of both types in all fields.","aSentId": 29486,"answer": "I think you just answered your own question.  Productive is a derivative of the word \"produce\".\n\n\nExecutives do marketing and get funding.  They can also hire sales and marketing managers.  My comments were only related to Engineering managers.  Of course I recognize the need for non-technical tasks at a company.\n\n\nA construction manager can make an intelligent decision about whether to use a plastic part or a metal part.  An engineering manager is not in any position to decide things like ERB or HAML.  Only the programmers know how this will effect the product.\n\n\nWhen you hire a manager, you end up getting a lot more process, which really slows things down.  It's necessary, but it will ultimately become an evil in your company, as you grow to the point where you have to spend a million dollars just to add a few basic features to your software, because of how complicated things become, both technically and politically.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29487,"question": "I think you just answered your own question.  Productive is a derivative of the word \"produce\".\n\n\nExecutives do marketing and get funding.  They can also hire sales and marketing managers.  My comments were only related to Engineering managers.  Of course I recognize the need for non-technical tasks at a company.\n\n\nA construction manager can make an intelligent decision about whether to use a plastic part or a metal part.  An engineering manager is not in any position to decide things like ERB or HAML.  Only the programmers know how this will effect the product.\n\n\nWhen you hire a manager, you end up getting a lot more process, which really slows things down.  It's necessary, but it will ultimately become an evil in your company, as you grow to the point where you have to spend a million dollars just to add a few basic features to your software, because of how complicated things become, both technically and politically.","aSentId": 29488,"answer": "\"Producing\" what though? Pretty much the only thing that a company is (or at least should be) interested in is whether you're producing value.\n\nProducing large amounts of code isn't, on its own, going to produce value. I've produced copious amounts of code in my spare time, and not one bit of that's produced any direct financial value to anyone. The value comes out of your code meeting a defined business need. Depending on the nature of your business, that could either be selling it to other companies or putting it into the hands of the end-users in your company that need it.\n\n&gt;An engineering manager is not in any position to decide things like ERB or HAML. Only the programmers know how this will effect the product.\n\nThe manager may be able to decide that, depending on their background, but in reality that's highly unlikely to be the most critical decision that's going to be made. What's likely to be far more important is going to be decisions like whether getting your engineers to focus on automating inbound email handling or setting up the website to launch your next product is going to have the biggest impact on your revenues this quarter.\n\nDon't get me wrong - skilled developers are still a hugely important part of any successful IT team. I spent many years being a developer, and I've seen how under-rated the job has historically been. But don't be fooled into thinking that a programmer spending their head down in code all day long is going to be delivering much value to the business without someone guiding where their efforts are spent. ","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29490,"question": "Never abandon your technical skills for soft skills! Managers eventually get the axe and then find themselves unemployable if they have not kept up with the changes in technology. You'll never go hungry again if you know how to code.","aSentId": 29491,"answer": "Better variant of this advice:  Always be the source of income for your company.  Because then when the cuts happen, it'll be a no brainer to keep you immune.\n\nMaintenance projects are where tech and business employees alike get laid off.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29492,"question": "Better variant of this advice:  Always be the source of income for your company.  Because then when the cuts happen, it'll be a no brainer to keep you immune.\n\nMaintenance projects are where tech and business employees alike get laid off.","aSentId": 29493,"answer": "I thoroughly enjoy your advice.\n\nQuick clarification though - rarely do I produce, or assist (AND GET CREDIT), for a product my company directly gets compensated for. More often I either create \"value added\" functionality for our customers or our staff. Sometimes I create pivotal pieces in production (and profitable) software and get ~ok~ no credit for it - so I'm done helping the idiots in my firm, as it's only going to get me fired. \n\nKind of went off on a rant there, but am I correct or crazy? Thanks","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29494,"question": "I thoroughly enjoy your advice.\n\nQuick clarification though - rarely do I produce, or assist (AND GET CREDIT), for a product my company directly gets compensated for. More often I either create \"value added\" functionality for our customers or our staff. Sometimes I create pivotal pieces in production (and profitable) software and get ~ok~ no credit for it - so I'm done helping the idiots in my firm, as it's only going to get me fired. \n\nKind of went off on a rant there, but am I correct or crazy? Thanks","aSentId": 29495,"answer": "I'd say keep doing what you've been doing, especially with the important ones, and make sure you document all of your projects briefly like for a resume. You only need one really simple line like 'I lead the team for building X functionality' or 'I solved Y problem for company Z'. If you have something to go off of, it's much easier to remember what it was that you did.\n\nRegardless of if you stay or go, it's good to keep track of your accomplishments, because:\n\n* Probably no one else will keep track of that for you. \n\n* If you need to justify why you should stay, you already have that on hand. Even if you don't get credit for it publicly, you'll be able to bring it up to your manager/HR/whatever and show that it was done thanks to your help.\n\n* If you have/are forced to leave, you already have proof that you can perform in important projects and won't need as much time to get your resume ready. Plus in situations like that, it's good to be able to look at your past work and know that there are companies that need your skills (+ you've got some quick places to check for openings)\n\nHaving the credit taken from you is shitty, but if you keep helping others you'll still be in those key roles if you ever need to justify why you should stay.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29492,"question": "Better variant of this advice:  Always be the source of income for your company.  Because then when the cuts happen, it'll be a no brainer to keep you immune.\n\nMaintenance projects are where tech and business employees alike get laid off.","aSentId": 29497,"answer": "along these lines, prefer to work where the engineers rule the company, not where they are overhead (hospitals, non tech business)","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29492,"question": "Better variant of this advice:  Always be the source of income for your company.  Because then when the cuts happen, it'll be a no brainer to keep you immune.\n\nMaintenance projects are where tech and business employees alike get laid off.","aSentId": 29499,"answer": "Pretty much. Though I have seen companies who were bleeding money lay off teams that had been making cash hand over fist with no end in sight. Of course, the decision makers were shown the door not too long after, but once damage is done...","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29501,"question": "my last few jobs beg to differ. I know more than 5 programming languages, hundreds of tools and stay up to date on the latest trends.","aSentId": 29502,"answer": "Respond to the wrong comment or something? ","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29503,"question": "Respond to the wrong comment or something? ","aSentId": 29504,"answer": "nope got the AX and wasnt working on maintenance. ","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29505,"question": "nope got the AX and wasnt working on maintenance. ","aSentId": 29506,"answer": "Lean times companies often cancel new projects,  especially long term ones. ","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29507,"question": "Lean times companies often cancel new projects,  especially long term ones. ","aSentId": 29508,"answer": "indeed. the most difficult money for a company to spend is its own.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29505,"question": "nope got the AX and wasnt working on maintenance. ","aSentId": 29510,"answer": "I didn't say maintenance was the *only* thing to get the shaft.  It was one example.\n\nWhat I did say was to be part of a department that creates revenue.  New experimental project?  That's just as likely to be cut as a maintenance budget.\n\nThe safe areas are projects that already create an income and have potential to grow.  You still need to actually be good at contributing to the project, though.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29505,"question": "nope got the AX and wasnt working on maintenance. ","aSentId": 29512,"answer": "Yes, maintenance is sometimes a money maker.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29501,"question": "my last few jobs beg to differ. I know more than 5 programming languages, hundreds of tools and stay up to date on the latest trends.","aSentId": 29514,"answer": "&gt;  I know more than 5 programming languages\n\nLOL. Is that supposed to be a lot or something? \n","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29515,"question": "&gt;  I know more than 5 programming languages\n\nLOL. Is that supposed to be a lot or something? \n","aSentId": 29516,"answer": "Welcome to high school? What can you do with them and why do you know them.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29517,"question": "Welcome to high school? What can you do with them and why do you know them.","aSentId": 29518,"answer": "To work on web I had to learn JS and PHP. After that it was JS and C#. And HTML and CSS was given. And also, people wanted flash banners and shit, so I had to pick up some ActionScript. All that was in the span of like two years. I already knew Java, and when a client came that wanted an app with his website, I had to pick up ObjC so that I could work on both his Android and iOS apps.\n\nAll this is after something like 3-4 years of experience. How some people think that picking up 5 languages during your career is amazing is laughable.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29519,"question": "To work on web I had to learn JS and PHP. After that it was JS and C#. And HTML and CSS was given. And also, people wanted flash banners and shit, so I had to pick up some ActionScript. All that was in the span of like two years. I already knew Java, and when a client came that wanted an app with his website, I had to pick up ObjC so that I could work on both his Android and iOS apps.\n\nAll this is after something like 3-4 years of experience. How some people think that picking up 5 languages during your career is amazing is laughable.","aSentId": 29520,"answer": "Two of those are not programming languages, and two of them are programming languages specifically designed to be usable by novices...","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29521,"question": "Two of those are not programming languages, and two of them are programming languages specifically designed to be usable by novices...","aSentId": 29522,"answer": "&gt; Two of those are not programming languages,\n\nAnd I din't say they were. But you still have to learn them.\n\n&gt; and two of them are programming languages specifically designed to be usable by novices...\n\nHuh? Which ones would that be?\n\nAlso, nothing you said has anything to do with the subject here. What is your point? Do you even have one?","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29524,"question": "[Not programming related, but relevant to this comment] Unfortunately, this is not always the case. My dad does highly technical work for a large company that is well known at what they do and he is abnormally good at his job. He IS the sole source for millions of dollars for the company and the only one who knows the product inside and out while blindfolded. They pretty much keep him as the only person working on it and overwork him to the bone, they throw incompetent people his way as if to ease the weight of the project which they are not keen on doing away with, yet they continue to mess things up and leave him with even more work (for clarity's sake: the last person they hired was a 70 year old lady who had zilch for experience in a technical production environment and it became clear she lied on her resume within days of starting). The kicker of it is he's done this same type of work his whole life and knows exactly the kind of person to bring in to actually help him yet they won't let him sit in on interviews or even see candidates to pick competent people, and also they do not fire the people dragging things down.\n\nEven though he is the whole reason keeping the product line afloat at all, let alone bringing in millions each year, they keep wanting to cut his meager salary and now they are looking at a high chance of laying him off with a bunch of others.","aSentId": 29525,"answer": "Then honestly, he's not playing it right.\n\nHe should leave, and leave contact details for when they need his consulting services.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29526,"question": "Then honestly, he's not playing it right.\n\nHe should leave, and leave contact details for when they need his consulting services.","aSentId": 29527,"answer": "That is horribly naive advice and a good way to ruin your image when you go around elsewhere. Not every industry allows you to just leave because you don't like something and then expect them to come crawling back to you.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29528,"question": "That is horribly naive advice and a good way to ruin your image when you go around elsewhere. Not every industry allows you to just leave because you don't like something and then expect them to come crawling back to you.","aSentId": 29529,"answer": "If Akayllin's dad is as essential to the business as described, then their dad does have that option. If it is a really niche field, his the dad may not have too many options to move... but his employer has ZERO options to replace him.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29528,"question": "That is horribly naive advice and a good way to ruin your image when you go around elsewhere. Not every industry allows you to just leave because you don't like something and then expect them to come crawling back to you.","aSentId": 29531,"answer": "Uh, nobody is going to react negatively to you leaving your contact information and saying you're open to working on a contract basis in the future when you resign.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29524,"question": "[Not programming related, but relevant to this comment] Unfortunately, this is not always the case. My dad does highly technical work for a large company that is well known at what they do and he is abnormally good at his job. He IS the sole source for millions of dollars for the company and the only one who knows the product inside and out while blindfolded. They pretty much keep him as the only person working on it and overwork him to the bone, they throw incompetent people his way as if to ease the weight of the project which they are not keen on doing away with, yet they continue to mess things up and leave him with even more work (for clarity's sake: the last person they hired was a 70 year old lady who had zilch for experience in a technical production environment and it became clear she lied on her resume within days of starting). The kicker of it is he's done this same type of work his whole life and knows exactly the kind of person to bring in to actually help him yet they won't let him sit in on interviews or even see candidates to pick competent people, and also they do not fire the people dragging things down.\n\nEven though he is the whole reason keeping the product line afloat at all, let alone bringing in millions each year, they keep wanting to cut his meager salary and now they are looking at a high chance of laying him off with a bunch of others.","aSentId": 29533,"answer": "Anecdotal stories from heavily biased people aren't worth much.  ","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29534,"question": "Anecdotal stories from heavily biased people aren't worth much.  ","aSentId": 29535,"answer": "My bias in the matter is irrelevant, it doesn't make the fact that it is happening any less true.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29536,"question": "My bias in the matter is irrelevant, it doesn't make the fact that it is happening any less true.","aSentId": 29537,"answer": "Maybe. Or maybe your dad just talks constantly about how valuable he is while in reality he hasn't contributed anything of value in years and has a reputation for constantly complaining about his coworkers and being disruptive and rude in group settings like interviews. We wouldn't know, because anecdotes are unreliable, especially when told by biased parties.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29538,"question": "Maybe. Or maybe your dad just talks constantly about how valuable he is while in reality he hasn't contributed anything of value in years and has a reputation for constantly complaining about his coworkers and being disruptive and rude in group settings like interviews. We wouldn't know, because anecdotes are unreliable, especially when told by biased parties.","aSentId": 29539,"answer": "You might be right if I haven't been to his workplace many times and seen the things he describes for myself. Biased, I suppose, I was merely presenting my contrary experience against the commented claim that you are guaranteed security just for being useful. You can take it or leave it as you wish but I would appreciate if you didn't make comments that come off as arrogant and intentionally callous when you don't personally know the parties involved.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29540,"question": "You might be right if I haven't been to his workplace many times and seen the things he describes for myself. Biased, I suppose, I was merely presenting my contrary experience against the commented claim that you are guaranteed security just for being useful. You can take it or leave it as you wish but I would appreciate if you didn't make comments that come off as arrogant and intentionally callous when you don't personally know the parties involved.","aSentId": 29541,"answer": "And I would appreciate it if you would get it through your head that your bias is extremely relevant when it comes to whether or not people are inclined to believe your frankly unlikely claims. 'My biases are irrelevant' is the only arrogant claim here, not anything I said.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29542,"question": "And I would appreciate it if you would get it through your head that your bias is extremely relevant when it comes to whether or not people are inclined to believe your frankly unlikely claims. 'My biases are irrelevant' is the only arrogant claim here, not anything I said.","aSentId": 29543,"answer": "The I suppose it is a good thing that your belief (or obvious lack there of) means absolutely nothing. \u201cThe good thing about science is that it's true whether or not you believe in it.\u201d","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29544,"question": "The I suppose it is a good thing that your belief (or obvious lack there of) means absolutely nothing. \u201cThe good thing about science is that it's true whether or not you believe in it.\u201d","aSentId": 29545,"answer": "Ugh, I need to stop talking to freshman CS majors on reddit.....","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29546,"question": "Ugh, I need to stop talking to freshman CS majors on reddit.....","aSentId": 29547,"answer": "You could just not be an arrogant prick that wrongly assumes i'm a \"freshman CS major\" and keeps up the horribly snobby, elitist, good-old-boys-club computer nerd stereotype.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29524,"question": "[Not programming related, but relevant to this comment] Unfortunately, this is not always the case. My dad does highly technical work for a large company that is well known at what they do and he is abnormally good at his job. He IS the sole source for millions of dollars for the company and the only one who knows the product inside and out while blindfolded. They pretty much keep him as the only person working on it and overwork him to the bone, they throw incompetent people his way as if to ease the weight of the project which they are not keen on doing away with, yet they continue to mess things up and leave him with even more work (for clarity's sake: the last person they hired was a 70 year old lady who had zilch for experience in a technical production environment and it became clear she lied on her resume within days of starting). The kicker of it is he's done this same type of work his whole life and knows exactly the kind of person to bring in to actually help him yet they won't let him sit in on interviews or even see candidates to pick competent people, and also they do not fire the people dragging things down.\n\nEven though he is the whole reason keeping the product line afloat at all, let alone bringing in millions each year, they keep wanting to cut his meager salary and now they are looking at a high chance of laying him off with a bunch of others.","aSentId": 29549,"answer": "They won't lay him off. Their using the \"rumors\" so he won't complain or insist on being involved in hiring the (more expensive) proper candidates.\n\nHe needs to shop around for a new job, possibly with one of their clients. Either use that as leverage to get what he actually needs or jump ship from that toxic environment.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29550,"question": "They won't lay him off. Their using the \"rumors\" so he won't complain or insist on being involved in hiring the (more expensive) proper candidates.\n\nHe needs to shop around for a new job, possibly with one of their clients. Either use that as leverage to get what he actually needs or jump ship from that toxic environment.","aSentId": 29551,"answer": "The \"rumors\" aren't rumors when it is actively happening, they aren't going to pay candidates he agrees with more money; they all come in at the same rate, and the companies' clients use what his company makes they do not make their own tools. his skill set has no use in the client companies.\n\nI feel your assertions are misplaced. I was merely stating a counterpoint to the commenter who wrote as if usefulness always guarantees security, of which I have seen first hand that that is now always the case.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29490,"question": "Never abandon your technical skills for soft skills! Managers eventually get the axe and then find themselves unemployable if they have not kept up with the changes in technology. You'll never go hungry again if you know how to code.","aSentId": 29555,"answer": "Technical skills go stale faster than soft skills, which are fairly universal.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29556,"question": "Technical skills go stale faster than soft skills, which are fairly universal.","aSentId": 29557,"answer": "Depends which skills you are talking about. The likes of Angular.js, Hibernate, or Boost? Those go stale fast, because much of that knowledge is not transferable.\n\nBut lambda calculus, category theory, automata theory, discrete mathematics, algorithms, data structures\u2026 Those last much longer, because they're simply more fundamental. They're stones of the bedrock everything else leans on.\n\nMy only problem with those, is, they don't look good on your resume. Someone who knows type theory won't get hired the way someone who demonstrates Node.js experience will. Employers don't care if you can write static analysis tools that will find bugs across all the JavaScript code of the entire company.  They just want you to write production code _right now_.\n","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29558,"question": "Depends which skills you are talking about. The likes of Angular.js, Hibernate, or Boost? Those go stale fast, because much of that knowledge is not transferable.\n\nBut lambda calculus, category theory, automata theory, discrete mathematics, algorithms, data structures\u2026 Those last much longer, because they're simply more fundamental. They're stones of the bedrock everything else leans on.\n\nMy only problem with those, is, they don't look good on your resume. Someone who knows type theory won't get hired the way someone who demonstrates Node.js experience will. Employers don't care if you can write static analysis tools that will find bugs across all the JavaScript code of the entire company.  They just want you to write production code _right now_.\n","aSentId": 29559,"answer": "This totally depends on the company, and (at companies without strong interviewing standards) the individual interviewer.\n\nI just started a job at a company where they asked hard algorithmic questions and didn't care what language I solved them with, as long as the interviewer could follow my code.  It was a fun interviewing process.  (Stressful, because some of the questions were hard, but I guess they graded on a curve.)","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29556,"question": "Technical skills go stale faster than soft skills, which are fairly universal.","aSentId": 29561,"answer": "I picture a fat man screaming \"I'm good with people\" like in the film Office Space.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29562,"question": "I picture a fat man screaming \"I'm good with people\" like in the film Office Space.","aSentId": 29563,"answer": "I picture the 60 year old assembly language programmer I ran into who had been out of work for several years.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29564,"question": "I picture the 60 year old assembly language programmer I ran into who had been out of work for several years.","aSentId": 29565,"answer": "surely there must be some demand for assembly language programmers? embedded systems programming? kernel/driver development? maintenance of legacy code?","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29566,"question": "surely there must be some demand for assembly language programmers? embedded systems programming? kernel/driver development? maintenance of legacy code?","aSentId": 29567,"answer": "Maybe not in the city, state or country that he lives.  Adding to the OP's statement I'd say technical skills go stale faster in certain parts of the world than soft skills.  Doubly so for older workers.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29568,"question": "Maybe not in the city, state or country that he lives.  Adding to the OP's statement I'd say technical skills go stale faster in certain parts of the world than soft skills.  Doubly so for older workers.","aSentId": 29569,"answer": "Why are we making the assumption that both are mutually exclusive?","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29566,"question": "surely there must be some demand for assembly language programmers? embedded systems programming? kernel/driver development? maintenance of legacy code?","aSentId": 29571,"answer": "It's obviously not the same as assembly but the company I work for could really use a Powerbuilder developer or two. ","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29572,"question": "It's obviously not the same as assembly but the company I work for could really use a Powerbuilder developer or two. ","aSentId": 29573,"answer": "Better grow your own talent on that front.  Your other best option is to use extremely expensive independent contractors.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29564,"question": "I picture the 60 year old assembly language programmer I ran into who had been out of work for several years.","aSentId": 29575,"answer": "He probably would have a tough time no matter what skills he had at that age.  Ageism is illegal of course...but that doesn't really mean anything...but i get your original point...","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29576,"question": "He probably would have a tough time no matter what skills he had at that age.  Ageism is illegal of course...but that doesn't really mean anything...but i get your original point...","aSentId": 29577,"answer": " In business related roles, age doesn't end up hindering you *as* much. Old greying men in suits aren't exactly uncommon.\n","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29576,"question": "He probably would have a tough time no matter what skills he had at that age.  Ageism is illegal of course...but that doesn't really mean anything...but i get your original point...","aSentId": 29579,"answer": "Yeah, companies do all sorts of things to eliminate older workers in ways that make it tough to accuse them of ageism. Buyouts based on years of experience, using the review system, etc.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29576,"question": "He probably would have a tough time no matter what skills he had at that age.  Ageism is illegal of course...but that doesn't really mean anything...but i get your original point...","aSentId": 29581,"answer": "Yeah it's got nothing to do with the lack of assembly jobs...","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29582,"question": "Yeah it's got nothing to do with the lack of assembly jobs...","aSentId": 29583,"answer": "Insert any other full time job aside from assembly programmer and they'd still have a hard time at 60","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29564,"question": "I picture the 60 year old assembly language programmer I ran into who had been out of work for several years.","aSentId": 29585,"answer": "Assembly is in high demand for embedded systems. ","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29556,"question": "Technical skills go stale faster than soft skills, which are fairly universal.","aSentId": 29587,"answer": "Depends what area you work in. I feel that skills for lower level programming don't age nearly as quickly. I work on a compiler team, and very little ever goes stale, except for architecture specific knowledge that some people would have built up for things like IA-64 or PowerPC.\n\nThere is of course innovation, notably JIT has been making a lot of progress in recent years, but all of the innovation is additive -- very rarely does something new make an old method fundamentally obsolete.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29589,"question": "I guess that's why all English majors and Communications grads make crazy money while the STEM crowd makes them lattes.. or wait","aSentId": 29590,"answer": "Except neither English nor Communication grads train for business-related jobs like management. A more apt comparison would be with Economics/Finance/etc., who end up doing pretty well. Not better than CS, AFAIK, but that's because CS people can always go into management. Finance kids aren't going to exactly swoop that principal engineer position.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29589,"question": "I guess that's why all English majors and Communications grads make crazy money while the STEM crowd makes them lattes.. or wait","aSentId": 29592,"answer": "There will always be jealous haters. They only see the result and not the struggle.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29490,"question": "Never abandon your technical skills for soft skills! Managers eventually get the axe and then find themselves unemployable if they have not kept up with the changes in technology. You'll never go hungry again if you know how to code.","aSentId": 29594,"answer": "A good manager can be worth as much, or more, to a company as any coder. Employees will always need to be managed, and good people with those skills are rare, and can act as a true productivity multiplier for this employees.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29595,"question": "A good manager can be worth as much, or more, to a company as any coder. Employees will always need to be managed, and good people with those skills are rare, and can act as a true productivity multiplier for this employees.","aSentId": 29596,"answer": "They can, indeed. Though the product *does* need to actually be made. Productivity multiplier is actually a good analogy because multiplication by 0 is still 0.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29597,"question": "They can, indeed. Though the product *does* need to actually be made. Productivity multiplier is actually a good analogy because multiplication by 0 is still 0.","aSentId": 29598,"answer": "whether the zero is expressed in the multiplier, multiplicand, or both.\n","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29595,"question": "A good manager can be worth as much, or more, to a company as any coder. Employees will always need to be managed, and good people with those skills are rare, and can act as a true productivity multiplier for this employees.","aSentId": 29600,"answer": "The issue is that a lot of managers suck and shmooze their way up the corporate ladder. While never really helping that much.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29601,"question": "The issue is that a lot of managers suck and shmooze their way up the corporate ladder. While never really helping that much.","aSentId": 29602,"answer": "Yeah, you never see incompetent hacks calling themselves programmers.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29603,"question": "Yeah, you never see incompetent hacks calling themselves programmers.","aSentId": 29604,"answer": "If you use GitHub or any kind of source control it's really easy to weed out shitty programmers. With managers it is much harder.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29605,"question": "If you use GitHub or any kind of source control it's really easy to weed out shitty programmers. With managers it is much harder.","aSentId": 29606,"answer": "You can determine bad managers by results too but both groups of bad employees are often able to stick around for other reasons. ","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29607,"question": "You can determine bad managers by results too but both groups of bad employees are often able to stick around for other reasons. ","aSentId": 29608,"answer": "But what if they were on a project that was a genius idea from the start. Like flappy birds. Or a shit idea. Then a good manager could give bad results and vice versa.\n\nBut if you look through someone's commits you can see exactly what they contributed.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29595,"question": "A good manager can be worth as much, or more, to a company as any coder. Employees will always need to be managed, and good people with those skills are rare, and can act as a true productivity multiplier for this employees.","aSentId": 29610,"answer": "A good manager manages....\n\n* scope creep\n* clients - In such a way that I don't have to manage the client.\n* meetings - keeps me out of unnecessary meetings.\n* environment - such as distractions, hardware, software.  Ensures I have what I need to get my job done.\n* morale\n* work-load\n* dependencies - gets me what I need, when I need it.\n\n...and more.\n\n&gt;  true productivity multiplier\n\n Is productivity 'multiplied?'  IMO, the formula looks something more like the following...\n\n     productivity - (antiProductivity * teamProductiveCapacity)\n\nIf a manager enables a team to do their best work, then antiProductivity approaches zero.  A manger can add to productivity, such as testing, getting resources for devs, or similar tasks.\n\nOf course a lack of a manager might shift the anti-productivity burden onto devs, but I have yet to see these 'multipliers' you speak of.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29612,"question": "Got a new job ad a pure dev shop. No HR, no real managers.\n\nI make more money than my previous manager at my old dev gig now.\n\nDevelopers run the world, managers take the credit.","aSentId": 29613,"answer": "Then you've never had a good manager :(","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29614,"question": "Then you've never had a good manager :(","aSentId": 29615,"answer": "Isn't that the standard?","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29616,"question": "Isn't that the standard?","aSentId": 29617,"answer": "Obligatory \"10x programmer/manager\" reference in 3...2...1...","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29612,"question": "Got a new job ad a pure dev shop. No HR, no real managers.\n\nI make more money than my previous manager at my old dev gig now.\n\nDevelopers run the world, managers take the credit.","aSentId": 29619,"answer": "They can have the damn credit as long as they leave me the hell alone.  ","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29623,"question": "It's also good to diversify rather than specialize. So many more opportunities if you can do, say, full-stack web, games, mobile and desktop applications.","aSentId": 29624,"answer": "It is difficult to master all those skills. I know two full-stack web stacks and desktop applications. But I don't have the time to get into games or mobile. Currently I'm studying .NET components which requires advanced programming. I'll have to read two thick books just to begin to understand it.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29625,"question": "It is difficult to master all those skills. I know two full-stack web stacks and desktop applications. But I don't have the time to get into games or mobile. Currently I'm studying .NET components which requires advanced programming. I'll have to read two thick books just to begin to understand it.","aSentId": 29626,"answer": "It's not that it is difficult as much as it just takes a lot of time. But if you plan on programming for decades, you will have plenty of time. [Specifics deleted]. At this point, I'm getting very well paid to learn new shit. I also can't go two days without someone on LinkedIn offering me work. It is a good spot to be in and doesn't require management or not coding.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29627,"question": "It's not that it is difficult as much as it just takes a lot of time. But if you plan on programming for decades, you will have plenty of time. [Specifics deleted]. At this point, I'm getting very well paid to learn new shit. I also can't go two days without someone on LinkedIn offering me work. It is a good spot to be in and doesn't require management or not coding.","aSentId": 29628,"answer": "I enjoy doing contracts so that I can cover a lot of different areas for my own sake, but if working for a single company I'm not going to be making games, mobile apps, business apps and server code at the same time. Experts at certain fields will have much more demand than a jack of all trade. I've done a ton of different shit, but the company is filling a role for a specific type of developer so the person who spent 6 years doing that, instead of me who might have spent 4 years plus a bunch of irrelevent shit, is going to get the gig over me. \n\nSo if high paying work and being in demand is what you want.. I'd always recommend focusing on one thing and becoming an expert over jumping all over the place. I just personally get bored staying in one field for too long.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29629,"question": "I enjoy doing contracts so that I can cover a lot of different areas for my own sake, but if working for a single company I'm not going to be making games, mobile apps, business apps and server code at the same time. Experts at certain fields will have much more demand than a jack of all trade. I've done a ton of different shit, but the company is filling a role for a specific type of developer so the person who spent 6 years doing that, instead of me who might have spent 4 years plus a bunch of irrelevent shit, is going to get the gig over me. \n\nSo if high paying work and being in demand is what you want.. I'd always recommend focusing on one thing and becoming an expert over jumping all over the place. I just personally get bored staying in one field for too long.","aSentId": 29630,"answer": "If making as much money as possible is most important to you, then I agree. However, I know a number of guys that did that and ended up either having to uproot their families or starting near the bottom in a lateral move once their niche is obsoleted/commodotized. There is also value in knowing how to execute almost anything you would ever want to do, should the right opportunity arise. \n\nIn the end, it's mostly that I'm like you and just want to keep learning new stuff, but I also like the ability to pick and choose from many opportunities rather than a few very specialized ones, even if it means I get paid less. To each his own I suppose.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29625,"question": "It is difficult to master all those skills. I know two full-stack web stacks and desktop applications. But I don't have the time to get into games or mobile. Currently I'm studying .NET components which requires advanced programming. I'll have to read two thick books just to begin to understand it.","aSentId": 29632,"answer": "Meh, I've written a full stack and several individuals games and apps. It's not that hard but it takes a lot of time.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29623,"question": "It's also good to diversify rather than specialize. So many more opportunities if you can do, say, full-stack web, games, mobile and desktop applications.","aSentId": 29634,"answer": "&gt;It's also good to diversify rather than specialize.\n\nAs someone who considers myself a generalist, you absolutely can't give this as universal advise.\n\nI consider myself a good fit for things like:\n\n* You need someone who can jump between writing their own scripts for data analysis and reading patent descriptions with a physicist's mind.\n* You need someone who can act as a a bridge between the programmers and the non-programmers (I'd like to think that I have a decent sense of what's feasible, what's not, and what may be but might take a long time or be hard to estimate a timeline on, even if I know I couldn't do it and may not know everything that's involved in the programming).\n\nBut fuck me, I couldn't be involved with programming The Witcher 2, and I'd be the first to tell you so.\n\nOr to give a purely programming example, if you're handy with something like Fortran and don't mind being subject to a government security clearance, you can make plenty of money programming *only* knowing something like Fortran because plenty of government computer systems (e.g. the nuclear launch systems) aren't going to be upgraded because they know for a fact that the Fortran code isn't going to accidentally launch the nukes and thus aren't going to be willing to port it.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29638,"question": "So in short: http://programming-motherfucker.com/\n\n","aSentId": 29639,"answer": "&gt; [become.html](http://programming-motherfucker.com/become.html)","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29638,"question": "So in short: http://programming-motherfucker.com/\n\n","aSentId": 29641,"answer": "This is awesome","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29638,"question": "So in short: http://programming-motherfucker.com/\n\n","aSentId": 29643,"answer": "My eyes are bleeding.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29645,"question": "This obsession with \"career development\" for the sake of career development is pretty gross. Figure out what you want to do with your life first - and make it something important - then figure out the steps to get there.","aSentId": 29646,"answer": "The point of \"career development\" is for people who already know what they like to get more autonomy and more money.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29645,"question": "This obsession with \"career development\" for the sake of career development is pretty gross. Figure out what you want to do with your life first - and make it something important - then figure out the steps to get there.","aSentId": 29648,"answer": "Naw man. You gotta work more to make more money so you can buy a nicer car to drive to work. Get your priorities straight.\n\n","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29651,"question": "I got into programming because it was interesting. Back then it wasn't known as a high paying thing. It ending up that way was somewhat luck.. but not entirely. You get paid for doing what others can't or won't. I figured out early on that most people can't or won't program, but the internet was only going to grow.\n\nAfter a while, the actual programming part becomes a relatively minor part anyway. Improving some algorithm in the code is ridiculously easy compared to navigating the social structures and processes we've invented around it.\n\nComputers and programming are simple.\n\nIt's PEOPLE that are complicated.\n","aSentId": 29652,"answer": "IME everything is hard. It makes me wonder what you've been programming. Improving an algorithm can be worth a PhD, or cement your post-doctoral career.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29653,"question": "IME everything is hard. It makes me wonder what you've been programming. Improving an algorithm can be worth a PhD, or cement your post-doctoral career.","aSentId": 29654,"answer": "&gt; It makes me wonder what you've been programming\n\n\nSo many of us just push pixels, write CRUD apps, and duct tape libraries together.  And make a solid living doing it.  I'm not really ashamed.  I create value, even if I'm not inventing bleeding edge algorithms.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29655,"question": "&gt; It makes me wonder what you've been programming\n\n\nSo many of us just push pixels, write CRUD apps, and duct tape libraries together.  And make a solid living doing it.  I'm not really ashamed.  I create value, even if I'm not inventing bleeding edge algorithms.","aSentId": 29656,"answer": "Absolutely nothing wrong with that: creating value as you say is at the end of the day the reason we have computers around. If they weren't useful and valuable for customers there wouldn't be many reasons for people to be working on algorithms at all!","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29653,"question": "IME everything is hard. It makes me wonder what you've been programming. Improving an algorithm can be worth a PhD, or cement your post-doctoral career.","aSentId": 29658,"answer": "I think you misinterpreted what I wrote.\n\nI'm not saying designing a brand new algorithm that improves on all other algorithms is easy.\n\nI'm saying changing code to use a new algorithm is vastly VASTLY simpler than dealing with all the company-processes/social-issues you eventually face.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29659,"question": "I think you misinterpreted what I wrote.\n\nI'm not saying designing a brand new algorithm that improves on all other algorithms is easy.\n\nI'm saying changing code to use a new algorithm is vastly VASTLY simpler than dealing with all the company-processes/social-issues you eventually face.","aSentId": 29660,"answer": "Seriously.  I've had multiple meetings and a full QA -&gt; UAT pipeline that took up dozens of hours across multiple people for the sake of changing a UI display value from \"create date\" to \"last changed date.\"","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29661,"question": "Seriously.  I've had multiple meetings and a full QA -&gt; UAT pipeline that took up dozens of hours across multiple people for the sake of changing a UI display value from \"create date\" to \"last changed date.\"","aSentId": 29662,"answer": "That sounds dysfunctional.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29663,"question": "That sounds dysfunctional.","aSentId": 29664,"answer": "Yep","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29663,"question": "That sounds dysfunctional.","aSentId": 29666,"answer": "On both ends.\n\nOn the non-technical end, for getting obsessive about a fucking label.\n\nAnd on the technical end, whoever was in charge of interfacing with the non-technical people should have been able to realize \"this is dumb, but it doesn't really matter because it's just a fucking label, so if that's the only thing they're freaking out about, we may as well just change it.\"","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29659,"question": "I think you misinterpreted what I wrote.\n\nI'm not saying designing a brand new algorithm that improves on all other algorithms is easy.\n\nI'm saying changing code to use a new algorithm is vastly VASTLY simpler than dealing with all the company-processes/social-issues you eventually face.","aSentId": 29668,"answer": "That is strictly dependent on the company in case.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29659,"question": "I think you misinterpreted what I wrote.\n\nI'm not saying designing a brand new algorithm that improves on all other algorithms is easy.\n\nI'm saying changing code to use a new algorithm is vastly VASTLY simpler than dealing with all the company-processes/social-issues you eventually face.","aSentId": 29670,"answer": "Sure, but a paragraph like: \n\n&gt; Computers and programming are simple.\n\nis far too broad a brush to be using I think. \n\nI think you're saying that in your experience lots of programming is simple and lots of people-problems are hard. I've experienced a lot of the opposite: excruciatingly hard problems to solve, and nothing but people around me to help. Of course, most of us experience something that meanders around the mean. However, I don't believe there is anything inherently hard or easy about programming or dealing with people:\n\n* Updating an existing sorting algorithm to use a list instead of a vector - easy\n* Writing a new algorithm 1000x faster than current best heuristic solution to TSP - not that easy \n* Getting your manager to sign off on a 40 hour experiment - easy\n* Solving all the diplomatic issues involved in a nuclear weapons reduction treat - not that easy (I guess!) \n\nAs a manager I view my role as franticly clearing shit out of the road so that the junior developers never have to take their feet off the gas.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29673,"question": "I'll agree with this. It can be hard to make the jump from thinking of an algorithm that gets the job done to thinking of an algorithm that gets the job done faster (or at least understanding why the new algorithm is faster), but if you don't have people skills, you just don't have them.\n\nI wouldn't say I'm an expert at people skills, but playing Diplomacy has undoubtedly made me better at it than I would be otherwise. Especially when things go sour, like I'm not sure if I could have handled a boss deciding on two separate occasions to start screaming at me in the office if I wasn't a Diplomacy player. (Long story short, I handled it calmly enough that it actually wound up on my performance review as a note about my ability to handle such situations well.)\n\nAnd on a more neutral note, the skills involved in lying to someone about why you didn't actually just stab them in Diplomacy translate quite naturally into handling why you don't have done what they're hoping you'd have done in the workplace (in the latter case, presumably not lying about it, and at worst, telling a white lie about it).","aSentId": 29674,"answer": "I don't know why you were downvoted for that.\n\nSocial skills are definitely a programmer skill. It can take years in the trenches to realize that though.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29675,"question": "I don't know why you were downvoted for that.\n\nSocial skills are definitely a programmer skill. It can take years in the trenches to realize that though.","aSentId": 29676,"answer": "If nothing else, you need the social skills for managing expectations.\n\nNo social skills? Have fun interminably jumping between impossible deadlines.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29653,"question": "IME everything is hard. It makes me wonder what you've been programming. Improving an algorithm can be worth a PhD, or cement your post-doctoral career.","aSentId": 29679,"answer": "Most commercial code isn't really coded to some lofty standard.  Most programmers aren't really that good.  Even if they guy who wrote the code the first time was better than you, you have a pretty good advantage being the second guy looking at the code.  You can probably improve it.  \n\nThe algorithms people write papers about have probably been studied by 100s or 1000s or people.  It is very hard to improve those.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29651,"question": "I got into programming because it was interesting. Back then it wasn't known as a high paying thing. It ending up that way was somewhat luck.. but not entirely. You get paid for doing what others can't or won't. I figured out early on that most people can't or won't program, but the internet was only going to grow.\n\nAfter a while, the actual programming part becomes a relatively minor part anyway. Improving some algorithm in the code is ridiculously easy compared to navigating the social structures and processes we've invented around it.\n\nComputers and programming are simple.\n\nIt's PEOPLE that are complicated.\n","aSentId": 29681,"answer": "I agree with that last statement.  Some code misbehaves then I just delete it and don't have to worry about it returning with a 9mm","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29651,"question": "I got into programming because it was interesting. Back then it wasn't known as a high paying thing. It ending up that way was somewhat luck.. but not entirely. You get paid for doing what others can't or won't. I figured out early on that most people can't or won't program, but the internet was only going to grow.\n\nAfter a while, the actual programming part becomes a relatively minor part anyway. Improving some algorithm in the code is ridiculously easy compared to navigating the social structures and processes we've invented around it.\n\nComputers and programming are simple.\n\nIt's PEOPLE that are complicated.\n","aSentId": 29683,"answer": "&gt; It's PEOPLE that are complicated.\n\nAmen. I hate *people* because of this.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29686,"question": "Relevant Koan: http://thecodelesscode.com/case/145","aSentId": 29687,"answer": "I know this is /r/programming, but I'm always happy to see a codeless code reference on reddit.  I very much enjoy the series.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29689,"question": "ITT: Buttload of managers\n\n&gt;We need the culture shift from managers being treated as managers to being treated as agents.  \n\nWhat about managers knowing something about programming?","aSentId": 29690,"answer": "When it comes to managing technical teams (IE software development teams) you encounter a couple of situations:\n\n1. Managers from a general management background interested in management for its own sake, likely with career ambitions to move up to Senior Manager, Associate VP, or other higher-up positions\n\n2. Managers from a technical background interested in managing a technical team for the sake of contributing to their area of expertise in a management capacity\n\n3.  Managers from a technical background interested in a career change to general management\n\n\nI'm of the opinion that a manager of a software team with zero software experience can be a *successful* manager from the perspective of his or her own personal career growth, but may not necessarily be a good manager for the health of the team or the software products they develop. \n\nMy manager is one of those guys.  Managing my team is just a stopgap for him on his journey to becoming a Senior Manager or an Associate VP.  To his credit he *tries* to make good decisions but he very much steers the direction of the team to benefit his own career growth.  As the team lead I push back where I can but ultimately he has the right of last refusal if I want to do something for the health of my team. \n\nWith that being said, I've had managers who were okay programmers but terrible managers.  The best managers always seem to be the ones who have accomplished everything they want from a development perspective and are legitimately interested in management, rather than simply being pulled into management.  Unfortunately there aren't always a lot of these people available when positions open up. ","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29689,"question": "ITT: Buttload of managers\n\n&gt;We need the culture shift from managers being treated as managers to being treated as agents.  \n\nWhat about managers knowing something about programming?","aSentId": 29692,"answer": "Programmer here.  I upvoted you back to 1.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29694,"question": "I disagree with the article. Programming (or writing code) is just a tool for the job. People hire programmers to solve problems, not to code.\n\nSo yes, you do want to advance to an architect -- someone who has written enough code in his/her life time to know the pros and cons of each approach. That allows the architect to have a view of the big pictures and make key decisions on what path your projects/teams want to follow. And trust me, this architect needs to know what is latest and greatest, and also know what these latest things are built upon, and their pros and cons.\n\nIf you have the same responsibility after 20 years, your scope of problem solving has not changed.\n\nThink of a professor who is the dean of his department. Every year he has to approve the lesson plans of the other teachers. He has enough experience to know which lessons should go first. It is much more valuable and scalable for him to approve lesson plans like this rather than writing out lesson plans for each class and just have people teach it. \n\nThat is what an architect does. Oversees and approve without having to micro manage.","aSentId": 29695,"answer": "There's a difference between being able to architect a solution and having it be your entire job. As the most experienced developer on the front end at my company, I'm often called on to architect the front end portion of our client's apps. Once the architecture is in place, and the other team members understand it, I end up being just another developer on the project. I enjoy that. I would not like going from project to project just laying out architecture for other people to implement which is exactly what architects at some companies do.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29698,"question": "I would say, programming is generally not a career.  It is a fine job though.    Advancement and personnel development separate out jobs and careers.\n\nUnfortunately many places seem to think an old programmer is a failure.  This is a ridiculous notion.  You would not hire a plumber who was fresh out of school, cheap, and using the newest untrusted technology would you.","aSentId": 29699,"answer": "many places do. There are a lot of places that do not. I've worked for a lot of companies that subscribed to that disheartening notion that management is where advancement happens and programming is a dead end. \n\nI'm lucky to have landed in a company that actually values programmers a great deal. There is no upper bound to a programmer's salary here. Don't expect CEO pay, but it's not like other places i've worked where they will say, $75k is the most we will pay you. if you want more, you have to be a manager.\n\nIt's perfectly acceptable to simply spend your career becoming the seniorist of senior programmers. There is no ageism. I'm 44 and I'm far from the oldest on my team. we have several people in their 50s and a few in their 60s.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29700,"question": "many places do. There are a lot of places that do not. I've worked for a lot of companies that subscribed to that disheartening notion that management is where advancement happens and programming is a dead end. \n\nI'm lucky to have landed in a company that actually values programmers a great deal. There is no upper bound to a programmer's salary here. Don't expect CEO pay, but it's not like other places i've worked where they will say, $75k is the most we will pay you. if you want more, you have to be a manager.\n\nIt's perfectly acceptable to simply spend your career becoming the seniorist of senior programmers. There is no ageism. I'm 44 and I'm far from the oldest on my team. we have several people in their 50s and a few in their 60s.","aSentId": 29701,"answer": "At your company, is a jr developer's direct supervisor a typical manager type or a technical lead/manager?  At my job (and probably a lot of places) project manager is synonymous with people manager.  Then come performance reviews the non-technical manager is supposed to gage your success at your technical work.  How is that even supposed to work?","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29702,"question": "At your company, is a jr developer's direct supervisor a typical manager type or a technical lead/manager?  At my job (and probably a lot of places) project manager is synonymous with people manager.  Then come performance reviews the non-technical manager is supposed to gage your success at your technical work.  How is that even supposed to work?","aSentId": 29703,"answer": "At my company, I have three people above me. Resource manager, project manager, and team lead. *Resource manager* moves around resources like me onto projects. *Project manager* interfaces between the developers and the client and the different projects for the client (We have a hand full of semi-independent parts/projects for a single client). And the *team lead* is the leads the engineering effort, and in my experience they  get plenty of coding time.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29704,"question": "At my company, I have three people above me. Resource manager, project manager, and team lead. *Resource manager* moves around resources like me onto projects. *Project manager* interfaces between the developers and the client and the different projects for the client (We have a hand full of semi-independent parts/projects for a single client). And the *team lead* is the leads the engineering effort, and in my experience they  get plenty of coding time.","aSentId": 29705,"answer": "I have 3 bosses, Bob.\n\n3 bosses?\n\nThat sounds potentially reasonable as long as the direct supervisor (assuming a hierarchical structure) is the one with the most day to day interaction.  My direct supervisor used to be the PM of my project, but now doesn't even work on the project anymore.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29702,"question": "At your company, is a jr developer's direct supervisor a typical manager type or a technical lead/manager?  At my job (and probably a lot of places) project manager is synonymous with people manager.  Then come performance reviews the non-technical manager is supposed to gage your success at your technical work.  How is that even supposed to work?","aSentId": 29707,"answer": "I don't know about all the managers. i think there have been some mba manager types, but my direct manager, his manager, and his manager's manager all used to be engineers. They all recognize that they have not been writing code for a while though and are not responsible for code reviews or anything. That's the responsibility of myself and other senior engineers. What my management does know is what our needs are and how to align the expectations of the pure mba business side of the company with the realities of software production. \nit's not perfect by any means, but it is the best situation i've found myself in.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29700,"question": "many places do. There are a lot of places that do not. I've worked for a lot of companies that subscribed to that disheartening notion that management is where advancement happens and programming is a dead end. \n\nI'm lucky to have landed in a company that actually values programmers a great deal. There is no upper bound to a programmer's salary here. Don't expect CEO pay, but it's not like other places i've worked where they will say, $75k is the most we will pay you. if you want more, you have to be a manager.\n\nIt's perfectly acceptable to simply spend your career becoming the seniorist of senior programmers. There is no ageism. I'm 44 and I'm far from the oldest on my team. we have several people in their 50s and a few in their 60s.","aSentId": 29709,"answer": "I honestly don't know any software engineers that aren't straight out of college that would even get out of bed in the morning for $75k. That is a laughably small salary in this business and only suitable for entry level. ","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29710,"question": "I honestly don't know any software engineers that aren't straight out of college that would even get out of bed in the morning for $75k. That is a laughably small salary in this business and only suitable for entry level. ","aSentId": 29711,"answer": "I'm guessing you live in a high cost of living area.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29712,"question": "I'm guessing you live in a high cost of living area.","aSentId": 29713,"answer": "Or is a troll.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29712,"question": "I'm guessing you live in a high cost of living area.","aSentId": 29715,"answer": "Moderately high. Not New York high or anything.\n\nI haven't made that little since the mid 90's when I had next to no experience though.... and inflation!","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29716,"question": "Moderately high. Not New York high or anything.\n\nI haven't made that little since the mid 90's when I had next to no experience though.... and inflation!","aSentId": 29717,"answer": "Money means different things in different areas. In Buffalo, NY, $75k is a really nice salary. $50k would be a reasonable starting salary for a programmer with a BS/BA.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29710,"question": "I honestly don't know any software engineers that aren't straight out of college that would even get out of bed in the morning for $75k. That is a laughably small salary in this business and only suitable for entry level. ","aSentId": 29719,"answer": "it depends on where you are. 8 - 10 years ago when i lived in the midwest, that's what people got.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29710,"question": "I honestly don't know any software engineers that aren't straight out of college that would even get out of bed in the morning for $75k. That is a laughably small salary in this business and only suitable for entry level. ","aSentId": 29721,"answer": "Mmhm. \n\nI've made 65 in an inexpensive area and 75 in a capital city. I may go to cutting about in half to work in another city in a different country and that's fine. \n\nIt's not about 'omg I'm 22 and require an offer of 150k'","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29722,"question": "Mmhm. \n\nI've made 65 in an inexpensive area and 75 in a capital city. I may go to cutting about in half to work in another city in a different country and that's fine. \n\nIt's not about 'omg I'm 22 and require an offer of 150k'","aSentId": 29723,"answer": "That seems really low, but at 22 you are still pretty entry level. If you were making 150 you would have to be pretty hot shit at that age. But I think 80-90 is reasonable.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29724,"question": "That seems really low, but at 22 you are still pretty entry level. If you were making 150 you would have to be pretty hot shit at that age. But I think 80-90 is reasonable.","aSentId": 29725,"answer": "I'm curious on what metro area you live by?  That seems very high for fresh out of school and no experience for most of the country.  I might be wrong though (and if so severely underpaid!)","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29724,"question": "That seems really low, but at 22 you are still pretty entry level. If you were making 150 you would have to be pretty hot shit at that age. But I think 80-90 is reasonable.","aSentId": 29727,"answer": "I'm 25 now and I'd gladly make 40k in Europe as opposed to 100k in SF. It's just not the kind of lifestyle I want. \n\nIt's just sad that oceania is cheaper than San Fran. ","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29698,"question": "I would say, programming is generally not a career.  It is a fine job though.    Advancement and personnel development separate out jobs and careers.\n\nUnfortunately many places seem to think an old programmer is a failure.  This is a ridiculous notion.  You would not hire a plumber who was fresh out of school, cheap, and using the newest untrusted technology would you.","aSentId": 29729,"answer": "I'm a 40 plus year old programmer and I work with 50 year old programmers.\n\nThe devs that I've seen age out all fit the same profile. Crusty jerks, that stubbornly hold on to old tech. Or Devs that move to management.\n\nDev's who work at a bank for 20+ years, never learning beyond their own corporate systems. Then they lose their jobs and are SOL. Mainly because they just try to get same kind of job they used to have.\n\nJust being open to learning new tech is enough. But some just are not.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29730,"question": "I'm a 40 plus year old programmer and I work with 50 year old programmers.\n\nThe devs that I've seen age out all fit the same profile. Crusty jerks, that stubbornly hold on to old tech. Or Devs that move to management.\n\nDev's who work at a bank for 20+ years, never learning beyond their own corporate systems. Then they lose their jobs and are SOL. Mainly because they just try to get same kind of job they used to have.\n\nJust being open to learning new tech is enough. But some just are not.","aSentId": 29731,"answer": "Banks are among the worst I've seen for IT related fields. At one point I was interviewing sysadmin candidates and most of the time when I saw several years of experience at a bank on the resume, question of the form \"how would you go about debugging X behavior\" would be answered with \"what does the runbook say?\". I concluded that I needed to find out who was writing the run book and interview them - they were never the ones looking for jobs, though.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29698,"question": "I would say, programming is generally not a career.  It is a fine job though.    Advancement and personnel development separate out jobs and careers.\n\nUnfortunately many places seem to think an old programmer is a failure.  This is a ridiculous notion.  You would not hire a plumber who was fresh out of school, cheap, and using the newest untrusted technology would you.","aSentId": 29733,"answer": "As a 30 year career programmer, the worst companies in the world to interview at are the ones managed by people who believe I am looking for a job.\n\n\nI am never looking for a job, and I'm never interested in working under somebody who thinks they know software well enough to tell me exactly what to do.\n\n\nProgrammers are experts.  The right client for me is somebody who seeks my advice, not just a fruition of their pre-conceived ideas.  Typically, I see myself as an extension of the management team.  I come forward with technical opportunities that the stakeholders never knew about, and we develop software plans together.\n\n\nYet nobody works \"under\" me.  I'm not a manager.  I have no place on a corporate ladder.  I don't \"deal\" with difficult employees, or approve some schmoe's vacation days.  I don't have direct power over another person's fate on the job.  I don't motivate a team that seems unhappy by planning a morale-boosting trip to the ballpark.  That has nothing to do with the value that I bring to a company.  For those things to be the only metric that determines whether I have a job or a career is kinda dumb.\n","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29735,"question": "I have to agree with this. I also see programming more as a great job than a career.\n\nIf you are a programmer long enough and are any good at what you do, you'll eventually become senior, especially as those around you become younger as the next generation comes into the work force.\n\nAt some point you have to make the decision if you want to lead/mentor less senior developers or if you want to stay solely as an independent contributor.  \n\nThere is absolutely nothing wrong with being an IC for the entirety of your working life. I do think it is important to recognize though that from an organizational perspective, you are the brick layer not the one envisioning the future or leading the organization.","aSentId": 29736,"answer": "You can remain an IC and go further. Higher up though you will be writing less code though. It's a matter of scalability. No matter how good you are, you can only write/debug so much code in a week. If you know what code you are going to write, it is just more efficient to explain to an army of sr. engineers what to write and have them do it for you. Sure, you may then go sit down at your emacs terminal and code up the couple of pieces you have doubts can be written by anyone else on the team, but most of the code should be handed off to others.\n\nIf you are a world class engineer and you are ever writing some run of the mill business logic code, then you are doing it wrong. You should be writing that concurrency backend, or optimizing compiler, or whatever truly hard stuff needs to be done and leave the rest to the standard engineers.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29737,"question": "You can remain an IC and go further. Higher up though you will be writing less code though. It's a matter of scalability. No matter how good you are, you can only write/debug so much code in a week. If you know what code you are going to write, it is just more efficient to explain to an army of sr. engineers what to write and have them do it for you. Sure, you may then go sit down at your emacs terminal and code up the couple of pieces you have doubts can be written by anyone else on the team, but most of the code should be handed off to others.\n\nIf you are a world class engineer and you are ever writing some run of the mill business logic code, then you are doing it wrong. You should be writing that concurrency backend, or optimizing compiler, or whatever truly hard stuff needs to be done and leave the rest to the standard engineers.","aSentId": 29738,"answer": "&gt; If you know what code you are going to write, it is just more efficient to explain to an army of sr. engineers what to write and have them do it for you.\n\nYou basically described what it means to be a software architect and proved my point at the same time. The article took the position that one did not need to become a manager or architect to consider programming a career. My statement is that at some point you are faced with the choice of becoming a leader/architect/guy who tells a bunch of other devs what to code or you are the tech equivalent of a brick layer. There is nothing wrong with that, but that is a job, not a career.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29739,"question": "&gt; If you know what code you are going to write, it is just more efficient to explain to an army of sr. engineers what to write and have them do it for you.\n\nYou basically described what it means to be a software architect and proved my point at the same time. The article took the position that one did not need to become a manager or architect to consider programming a career. My statement is that at some point you are faced with the choice of becoming a leader/architect/guy who tells a bunch of other devs what to code or you are the tech equivalent of a brick layer. There is nothing wrong with that, but that is a job, not a career.","aSentId": 29740,"answer": "Why is it not a career?\n\n&gt;ca\u00b7reer\nk\u0259\u02c8rir/\nnoun an occupation undertaken for a significant period of a person's life and with opportunities for progress.\n\nProgramming fits that description. ","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29739,"question": "&gt; If you know what code you are going to write, it is just more efficient to explain to an army of sr. engineers what to write and have them do it for you.\n\nYou basically described what it means to be a software architect and proved my point at the same time. The article took the position that one did not need to become a manager or architect to consider programming a career. My statement is that at some point you are faced with the choice of becoming a leader/architect/guy who tells a bunch of other devs what to code or you are the tech equivalent of a brick layer. There is nothing wrong with that, but that is a job, not a career.","aSentId": 29742,"answer": "I work in a company that doesn't have architects - we also don't have programmers. The job title is \"Software Engineer\". What I've seen at various levels is that the scope of work grows, and so does the abstraction. Starting out, you may be designing and building a fairly isolated component of a bigger system, many of the decisions have been made.\n\nAs you move up, you're doing lots of your own design work - the specifications get more abstract, the components get bigger, the boundaries of the systems get more interesting. Eventually you're working on things where, even if you could build them all, you don't have time - so you carve off a chunk and say \"I need this implemented\" and hand it to someone else, while you do the chunk of work that you found most interesting. And then you're dealing with more and more pieces, solving more interesting problems, advising other engineers on details of their systems, etc.\n\nIt's a pretty natural progression. There's certainly value in being the person who can implement anything and get it done quickly, but as time goes on, promotions come because the problems get larger in scope and more abstract. You only go so far on just getting faster.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29735,"question": "I have to agree with this. I also see programming more as a great job than a career.\n\nIf you are a programmer long enough and are any good at what you do, you'll eventually become senior, especially as those around you become younger as the next generation comes into the work force.\n\nAt some point you have to make the decision if you want to lead/mentor less senior developers or if you want to stay solely as an independent contributor.  \n\nThere is absolutely nothing wrong with being an IC for the entirety of your working life. I do think it is important to recognize though that from an organizational perspective, you are the brick layer not the one envisioning the future or leading the organization.","aSentId": 29744,"answer": "I don't think I realized this until it was too late.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29747,"question": "&gt; You would not hire a plumber who was fresh out of school, cheap, and using the newest untrusted technology would you.\n\nPlumbing doesn't completely reinvent itself in the course of 20 years.\n\nThe main reason old programmers become managers is because keeping up with the practical \"how to do\" knowledge of programming is *hard*.  But the big picture doesn't change nearly as quickly or dramatically.  As a result, a good place to show your experience is by dictating how the high-level flow should go, and how to adequately allocate resources, two things that are pretty much impossible to do well without a tech background.","aSentId": 29748,"answer": "&gt; Plumbing doesn't completely reinvent itself in the course of 20 years.\n\nNeither does programming. We just rediscover stuff that was invented in the 60s, and then port it to JavaScript.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29749,"question": "&gt; Plumbing doesn't completely reinvent itself in the course of 20 years.\n\nNeither does programming. We just rediscover stuff that was invented in the 60s, and then port it to JavaScript.","aSentId": 29750,"answer": "Ain't that the truth!  Yesterday I Learned: Promises were invented in the late 60's!  Mind: Blown.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29749,"question": "&gt; Plumbing doesn't completely reinvent itself in the course of 20 years.\n\nNeither does programming. We just rediscover stuff that was invented in the 60s, and then port it to JavaScript.","aSentId": 29752,"answer": "some day someone should just write lisp support into firefox and save everyone the trouble.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29753,"question": "some day someone should just write lisp support into firefox and save everyone the trouble.","aSentId": 29754,"answer": "Check out ClojureScript :)","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29747,"question": "&gt; You would not hire a plumber who was fresh out of school, cheap, and using the newest untrusted technology would you.\n\nPlumbing doesn't completely reinvent itself in the course of 20 years.\n\nThe main reason old programmers become managers is because keeping up with the practical \"how to do\" knowledge of programming is *hard*.  But the big picture doesn't change nearly as quickly or dramatically.  As a result, a good place to show your experience is by dictating how the high-level flow should go, and how to adequately allocate resources, two things that are pretty much impossible to do well without a tech background.","aSentId": 29756,"answer": "I don't believe this. Except for Haskell and it's ilk, I haven't seen a mainstream technology that was significantly different enough to not be able to pick up in a weekend for anyone who was a programmer in the 80's.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29757,"question": "I don't believe this. Except for Haskell and it's ilk, I haven't seen a mainstream technology that was significantly different enough to not be able to pick up in a weekend for anyone who was a programmer in the 80's.","aSentId": 29758,"answer": "Sure, you can get the basics of a new lanuage or tech over the course of a weekend, but you're not going to pick up all the do's &amp; don't, subtleties, and best practices.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29759,"question": "Sure, you can get the basics of a new lanuage or tech over the course of a weekend, but you're not going to pick up all the do's &amp; don't, subtleties, and best practices.","aSentId": 29760,"answer": "True, but you don't change technology stacks that often. You will be productive in a weekend and proficient within 2 weeks. Best practices generally carry over across technologies, as do most \"don'ts\".","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29757,"question": "I don't believe this. Except for Haskell and it's ilk, I haven't seen a mainstream technology that was significantly different enough to not be able to pick up in a weekend for anyone who was a programmer in the 80's.","aSentId": 29762,"answer": "You can pick up basics of C# in a week, but to properly master only a single library like LINQ, and learn all the intricacies will take you months. And that is literally a single library.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29763,"question": "You can pick up basics of C# in a week, but to properly master only a single library like LINQ, and learn all the intricacies will take you months. And that is literally a single library.","aSentId": 29764,"answer": "Linq is one of those \"Haskell and it's ilk\" things though :) Most libraries don't need a mental leap.\n\nAssuming though that an 80's dude knew Prolog and Lisp, LINQ wouldn't be all that tough.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29763,"question": "You can pick up basics of C# in a week, but to properly master only a single library like LINQ, and learn all the intricacies will take you months. And that is literally a single library.","aSentId": 29766,"answer": "Well it depends. I think it'll be way easier to get a feel for LINQ if you already have experience with map/reduce, generators, etc. I know for me, learning LINQ later helped to learn parts of underscore.js, Python and even Scala and Haskell.\n\nSure the ins and outs of lesser-used parts takes longer but honestly many of those I have to look up anyway since I use them infrequently.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29747,"question": "&gt; You would not hire a plumber who was fresh out of school, cheap, and using the newest untrusted technology would you.\n\nPlumbing doesn't completely reinvent itself in the course of 20 years.\n\nThe main reason old programmers become managers is because keeping up with the practical \"how to do\" knowledge of programming is *hard*.  But the big picture doesn't change nearly as quickly or dramatically.  As a result, a good place to show your experience is by dictating how the high-level flow should go, and how to adequately allocate resources, two things that are pretty much impossible to do well without a tech background.","aSentId": 29768,"answer": "Really? Look at what typical plumbing was like 20 years ago, and look at the new techniques and materials available today.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29772,"question": "While for plumber I can see that but the analogy really isn't that great. \n\nWould you go for a doctor who insists on doing things like they did in the 1960s? How about a civil engineer who refuses to use computers to stress test bridges? I think in many professions there is a balance to be struct between experience and adaptability. Younger (and subsequently cheaper) professionals are often more willing to embrace optimization and improvements to their workflow at the cost of lower reliability. Older professionals tend to sacrifice flexibility and adaptability in the name of proven reliability. Both routes are flawed. Ideally you'd want (just like in most engineering disciplines) and older experienced programmer there to sanity check what the younger ones are doing. It helps make the older one more flexible to keep up with the tools the younger ones are doing and makes the younger ones more reliable to live up to the older ones quality demands. ","aSentId": 29773,"answer": "&gt; Would you go for a doctor who insists on doing things like they did in the 1960s?\n\nNo, your analogy fell apart right there. Just because a programmer has a lot of experience, doesn't mean he is not following the latest and greatest in the industry. It simply means he is more experienced and knows what works.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29774,"question": "&gt; Would you go for a doctor who insists on doing things like they did in the 1960s?\n\nNo, your analogy fell apart right there. Just because a programmer has a lot of experience, doesn't mean he is not following the latest and greatest in the industry. It simply means he is more experienced and knows what works.","aSentId": 29775,"answer": "I was just going along with tw77's comment about \"You would not hire a plumber who was fresh out of school, cheap, and using the **newest untrusted technology** would you.\"\n\nAnd there is a tendency for people to become more set in their ways and less open to change as they age. And if you bothered to read my comment you'd have realized my point is that \"more experienced and knows what works\" comes at a cost of risk taking and that an employer really needs a balance of younger riskier programmers willing to go down a new route and more experienced ones who can ensure that everything is still sane.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29777,"question": "On our yearly goal-setting setting we have to at my job, I have been saying \"I have no desire to go into management\" on my career plan for about 10 years.  I don't think I've ever had a manager argue that plan, but I'm still not afraid to tell them that management isn't what I want to do.\n\nThe powers-that-be thankfully recognize my technical skill and accept that moving me out of the role I'm in into something more manager-like would be a detriment to the team.  That's not to say I haven't picked up some management-like tasks such as assisting with schedules and personnel, but it's not a remotely-significant part of my work day and I'm not going to be stuck doing Powerpoint and Excel all day.","aSentId": 29778,"answer": "I sometimes feel bad for having 7 years of career experience but never once having to manage or oversee less experienced programmers. I don't know if I should call myself a senior programmer now, because that label seems so arbitrary. I was offered a promotion for Project Manager, just in my first year in my first job. But I turned it down because I knew being a PM entails less technical problem solving as I would rather be an architect. So I decided I should be a programmer at least for a few more years. \n\nThe person who took my potential PM role eventually moved up to Executive Director. But that's okay with me because the company never really had any hierarchy with their (local) programmers, and I would rather work for a company that offers architect as a choice for vertical career movement.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29777,"question": "On our yearly goal-setting setting we have to at my job, I have been saying \"I have no desire to go into management\" on my career plan for about 10 years.  I don't think I've ever had a manager argue that plan, but I'm still not afraid to tell them that management isn't what I want to do.\n\nThe powers-that-be thankfully recognize my technical skill and accept that moving me out of the role I'm in into something more manager-like would be a detriment to the team.  That's not to say I haven't picked up some management-like tasks such as assisting with schedules and personnel, but it's not a remotely-significant part of my work day and I'm not going to be stuck doing Powerpoint and Excel all day.","aSentId": 29780,"answer": "You're very fortunate.  I took a senior dev / team lead job and my manager has constantly been pushing me to step away from almost *all* technical responsibility and become a pseudo-project manager who should simply delegate and co-ordinate developer work.\n\nI took a team lead job because I'm interested in mentoring junior/intermediate developers, and specifically interested in removing technical debt and overhauling our SDLC.\n\nMy boss is one of those general management types though.  Managing this team is a stepping stone for him to become a Senior Manager and perhaps one day an associate VP.  He has no programming background and as such spends most of his time selling the team's value to the enterprise and playing the politics game for his own career advancement.  It happens a lot in enterprises.  ","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29782,"question": "At my company a Software Engineer IV or Hardware Engineer IV is on the same pay grade as a director.","aSentId": 29783,"answer": "tada! there are hardly any engineer IV's at your company and directors get huge stock bonuses that aren't part of the grading.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29785,"question": "This is a big problem throughout industry\n\nAn engineer chooses the profession because (s)he has a talent and passion for it\n\nThen, the system forces them into management, which they may have no talent or passion for\n\nThis results in a company run by shitty, incompetent managers (who hate their job/life), managing inexperienced engineers\n\nSome companies see beyond this silliness and create positions like \"engineer emeritus\" to allow experienced engineers to continue doing the job they are good at while advancing in pay and benefits","aSentId": 29786,"answer": "No one is forcing anyone into management.  You are letting it happen.  If they try to force you to do something you don't want to do, you should definitely leave.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29787,"question": "No one is forcing anyone into management.  You are letting it happen.  If they try to force you to do something you don't want to do, you should definitely leave.","aSentId": 29788,"answer": "&gt;No one is forcing anyone into management\n\nSomewhat agreed. It's not \"forcing\"\n\nBut, in some companies the assumption is that career advancement requires moving into management. Engineers who refuse are treated as lazy, unmotivated or just strange\n\nMany companies have rigid rules that say the pay grade for engineers cannot ever exceed some value. If you want (or need) more money, the only choice is management\n\n\n&gt;You are letting it happen\n\nMe personally..still an engineer at 61\n\n","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29789,"question": "&gt;No one is forcing anyone into management\n\nSomewhat agreed. It's not \"forcing\"\n\nBut, in some companies the assumption is that career advancement requires moving into management. Engineers who refuse are treated as lazy, unmotivated or just strange\n\nMany companies have rigid rules that say the pay grade for engineers cannot ever exceed some value. If you want (or need) more money, the only choice is management\n\n\n&gt;You are letting it happen\n\nMe personally..still an engineer at 61\n\n","aSentId": 29790,"answer": "Ha ya I didn't necessarily mean you directly, more like the royal you.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29792,"question": "Uhhhh... good managers often write a lot of code.  You don't have to choose one or the other.  But it would be helpful to choose a company where what I just said is true.","aSentId": 29793,"answer": "It's just a shame there's not as many people there to appreciate them.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29795,"question": "I like the Yoda model of career development.  Do the same thing for 800 years until you're the best in the galaxy.","aSentId": 29796,"answer": "Congratulations. There's a job for a single person. So what about all others?","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29797,"question": "Congratulations. There's a job for a single person. So what about all others?","aSentId": 29798,"answer": "Others?  That's my personal career plan.  Other people can do what they want.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29795,"question": "I like the Yoda model of career development.  Do the same thing for 800 years until you're the best in the galaxy.","aSentId": 29800,"answer": "Yoda was the supermanager of the entire Jedi order at some point, then career-transitioned into army general, and eventually ended up an unemployable old schmuck in a swamp.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29801,"question": "Yoda was the supermanager of the entire Jedi order at some point, then career-transitioned into army general, and eventually ended up an unemployable old schmuck in a swamp.","aSentId": 29802,"answer": "Good point.  Yoda may be a bad example.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29804,"question": "I am not sure I understand the point of this post. How is programming any different than any other career out there? Pretty much any career out there has advancement to a management or architect position that reduces or eliminates the job you were doing before.\n\nIs there something different about programming that I am missing?","aSentId": 29805,"answer": "Is there anything wrong with wanting to do what you are doing indefinitely? I agree that maybe programming isn't so unique. It's a general problem that people get promoted until they are mediocre.\n\nI have seen fantastic programmers get 'promoted' to be shitty managers. One of my managers even demoted himself last year. A company I used to work for had an issue where everyone was on the management track so, as the workforce matured, they ended up with a bunch of managers and hardly any engineers. They then created a engineering-forcused track so that essentially you could get paid more money for doing the same sort of job. It's stuff like this which makes it seem a bit particular of an issue for programming. Engineering management is different than being an engineer but it isn't really more important.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29804,"question": "I am not sure I understand the point of this post. How is programming any different than any other career out there? Pretty much any career out there has advancement to a management or architect position that reduces or eliminates the job you were doing before.\n\nIs there something different about programming that I am missing?","aSentId": 29807,"answer": "a lot of programming management requires lots of time managing people and schedules.  However, with programming you have Programmers that are technical geniuses and can write the code of 40 people or figure out things that no one else can.  Keeping these people on some type of technical ladder career path makes sense and I see it in action first hand.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29804,"question": "I am not sure I understand the point of this post. How is programming any different than any other career out there? Pretty much any career out there has advancement to a management or architect position that reduces or eliminates the job you were doing before.\n\nIs there something different about programming that I am missing?","aSentId": 29809,"answer": "I guess the difference is some people just want to code at \"low\" levels? There's not necessarily anything wrong with that, but that really isn't career advancement. You're doing the same thing - yes, it might be with different tools and you might be learning new things, but are you really taking on more responsibility? Are you teaching new people how to do the work?\n\nThink of it this way: would you look at a consulting analyst kind of weird if they said all they want to do for the rest of their life is to build slide decks?\n\nAt some point the theory is that you get good enough at your craft (whatever it is - programming, consulting, law, etc) that you can see the big picture items (which take a lot more time and energy then I think a lot of new programmers generally want to admit) and can be trusted to handle them. At that point you leave the \"grunt\" work to the newer people so they can learn just like you did. It can be a hard change to make and maybe it isn't for everyone - in some cases it's easier because the \"grunt\" work is awful and no one really wants to do it (think first year associate in a giant law firm) but in some cases (hardly all) in programming people really like what they're doing in the first place. Problem is, you're going to want to keep being paid as if you're advancing and taking on more importance when in reality there is a point where you're really not. Yes, you might be the best person there in terms of overall knowledge, but eventually it's just not worth it to pay you the same as someone running a division because you're not *that* much better than an intermediate programmer.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29811,"question": "You're absolutely right.  I don't think the problem is that people look down on old programmers.  I think the problem is that programmers want to make more money over time without having to change to work that doesn't involve programming.  \n\nThe fact is, being a manager may not be a harder job, but in many ways it is more stressful and requires certain skills.  Programmers don't like that managers, who may even suck at programming, make more money than the programmers they're managing.\n\nThis is all just about whiney programmers, IMO.","aSentId": 29812,"answer": "You used the word \"money\" as if it's the end game.  Nobody is talking about money.  When you have a career, it's more about what you want to be spending your time doing during the day.  For the sake of argument, I would say that the money opportunity is exactly the same whether you have 10 years management experience or 10 years programming experience.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29814,"question": "I worked with a jr developer when I first moved to NYC.  When I mentioned about improving certain aspects of her abilities so it would help her career, she said \"it's not a career, just a job\"   If I had the authority, I would have fired her on the stop.  Her coding was HORRIBLE and this was the last straw.  After that i refused to help her.","aSentId": 29815,"answer": "Different people have different motivating factor for their careers.\n\nWhereas people like you and I may be interested in technical competence and being the best at our craft that we can be, someone like that just saw programming as a means to an end for making money.\n","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29816,"question": "Different people have different motivating factor for their careers.\n\nWhereas people like you and I may be interested in technical competence and being the best at our craft that we can be, someone like that just saw programming as a means to an end for making money.\n","aSentId": 29817,"answer": "&gt; Different people have different motivating factor for their careers.\n\nYes, and that's fine...  I am **ONLY** saying that I don't want to work with those types of people, and I have spent too much of my career working with/for people like that.\n\nSo yea, I completely agree with your point.  To each their own path.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29818,"question": "&gt; Different people have different motivating factor for their careers.\n\nYes, and that's fine...  I am **ONLY** saying that I don't want to work with those types of people, and I have spent too much of my career working with/for people like that.\n\nSo yea, I completely agree with your point.  To each their own path.","aSentId": 29819,"answer": "I agree with you, and quite frankly if I was one of those \"run out the clock\" type people who were just there to collect a paycheque I wouldn't want to draw attention to it the way she did too.\n\nI've dealt with my fair share of lousy co-workers too, and it's a grind.  When I was a junior there was one intermediate guy who would always just play on his phone during meetings and resisted change to the point of trying to sabotage anyone who suggested change in order to minimize the amount of work he had to do.  He was a hell of a nice guy outside of that and I actually still play sports with him today, but man what an asshole he was as a co-worker. \n\nI love software and I want to go to a place that at least makes a half-hearted effort to do it well.  I almost jumped ship to a software company this year but I've decided to stay put in the name of a 20 minute commute and using that time to work on my health. ","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29820,"question": "I agree with you, and quite frankly if I was one of those \"run out the clock\" type people who were just there to collect a paycheque I wouldn't want to draw attention to it the way she did too.\n\nI've dealt with my fair share of lousy co-workers too, and it's a grind.  When I was a junior there was one intermediate guy who would always just play on his phone during meetings and resisted change to the point of trying to sabotage anyone who suggested change in order to minimize the amount of work he had to do.  He was a hell of a nice guy outside of that and I actually still play sports with him today, but man what an asshole he was as a co-worker. \n\nI love software and I want to go to a place that at least makes a half-hearted effort to do it well.  I almost jumped ship to a software company this year but I've decided to stay put in the name of a 20 minute commute and using that time to work on my health. ","aSentId": 29821,"answer": "Best of luck to you.  I would be lucky to work with someone with half your enthusiasm.\n\n","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29832,"question": "Wait, is it actually not okay to say you don't want to be a manager? Or does the author just work at some weird company?","aSentId": 29833,"answer": "No company has a problem with someone not wanting to become management (well, I wouldn't think there would be).  The point being that he'd not be able to advance his career any further and have a stunted salary.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29850,"question": "whats the difference between a developer and a programmer?","aSentId": 29851,"answer": "About $50/hour.\n\nSeriously, there's no difference.  \"Developer\" just sounds cooler.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29850,"question": "whats the difference between a developer and a programmer?","aSentId": 29853,"answer": "A hell of a lot.   \n  A programmer is generally on the bottom rung, just starting out while a developer is someone who knows many technologies and how to use them for particular scenarios, knows many systems (including CMS such as Sharepoint/Kentico etc).   \n   Basically someone you can go to and say I need this system and they can develop it, knowing exactly the right technology and language needed.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29857,"question": "Tag All The Things - A performance analysis of different approaches to modelling \"tagging\" in PostgreSQL","aSentId": 29858,"answer": "An m3.large AWS server just for testing.  That's what caught my eye in the write up.  Seems excessive.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29860,"question": "Linux kernel booting process. Part 4.","aSentId": 29861,"answer": "Enjoying this series quite a bit, keep it up!","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29863,"question": "Writing Multithreaded Applications in C++ (the right way)","aSentId": 29864,"answer": "Horrible example of \"the right way\". \nThe consumer needlessly spinning on on the mutex until something happens causes all kinds of problems (e.g. priority inversion).\n\nEither you have a proper synchronization between producer and consumer or you should use a queue.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29865,"question": "Horrible example of \"the right way\". \nThe consumer needlessly spinning on on the mutex until something happens causes all kinds of problems (e.g. priority inversion).\n\nEither you have a proper synchronization between producer and consumer or you should use a queue.","aSentId": 29866,"answer": "The point is library usage (i.e. getting away from pthreads and Win32 threads) and catching people up from C++98 and C++03 (the majority of existing C++ code). For the first example it is also stated that it is contrived. In that case, the example itself is less useful as the post is intended for people who already know about threads and asynchronicity.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29867,"question": "The point is library usage (i.e. getting away from pthreads and Win32 threads) and catching people up from C++98 and C++03 (the majority of existing C++ code). For the first example it is also stated that it is contrived. In that case, the example itself is less useful as the post is intended for people who already know about threads and asynchronicity.","aSentId": 29868,"answer": "Anyone who's doing threads and doesn't know about this really need to rethink how they work. This article is really nearly devoid of information. As stated the examples aren't that great, and the article might have as well been condensed to \"use the STL\".","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29863,"question": "Writing Multithreaded Applications in C++ (the right way)","aSentId": 29870,"answer": "I'm still using boost::thread because I couldn't find any mechanism for interrupting a std::thread.  At least not in c++11","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29871,"question": "I'm still using boost::thread because I couldn't find any mechanism for interrupting a std::thread.  At least not in c++11","aSentId": 29872,"answer": "What do you need interruption for?  Serious question, I had always treated interruption as something you don't really want to do since it makes it pretty easy to leak resources (be that memory, acquired locks, what have you).","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29873,"question": "What do you need interruption for?  Serious question, I had always treated interruption as something you don't really want to do since it makes it pretty easy to leak resources (be that memory, acquired locks, what have you).","aSentId": 29874,"answer": "It also only interrupts in interruption points. Not really sure what the use for it is either.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29863,"question": "Writing Multithreaded Applications in C++ (the right way)","aSentId": 29876,"answer": "Doing it the right way would be to just use [Golang](https://golang.org/).","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29877,"question": "Doing it the right way would be to just use [Golang](https://golang.org/).","aSentId": 29878,"answer": "I'll say the right way is any method that uses CSP, on which Go's processes are based.  There are several libraries to use them in C++, which I see as a requirement of the title - your suggestion (while good) doesn't meet the \"in C++\" constraint, which may be imposed by other considerations.\n\nThreads, regardless of standards support, are just a mess!","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29879,"question": "I'll say the right way is any method that uses CSP, on which Go's processes are based.  There are several libraries to use them in C++, which I see as a requirement of the title - your suggestion (while good) doesn't meet the \"in C++\" constraint, which may be imposed by other considerations.\n\nThreads, regardless of standards support, are just a mess!","aSentId": 29880,"answer": "Then again, aren't threads just CSP without static checking?","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29882,"question": "Whenever you have to deal with threads directly (not using high level, maximally safe abstractions )  it's code smell. \nException can be made for critical performance sections. ","aSentId": 29883,"answer": "Sometimes a thread is the right high level abstraction. And sometimes the right high level abstraction isn't known yet. It all depends upon what you're doing.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29884,"question": "Sometimes a thread is the right high level abstraction. And sometimes the right high level abstraction isn't known yet. It all depends upon what you're doing.","aSentId": 29885,"answer": "Obviously - there are cases when using raw threads is OK. But good rule of thumb is to avoid dealing with raw threads unless it's absolutely neccesary. \nRaw threads (especially these with shared, mutable state) are source of limitless buggy behavior. ","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29887,"question": "you've got a mutex: that's (by definition) the wrongest way possible.","aSentId": 29888,"answer": "I don't think you understand what \"(by definition)\" means.\n","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29890,"question": "Introduction to the Common Language Runtime (CLR)","aSentId": 29891,"answer": "wow... this is so detailed... learned quite a lot of  things!","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29890,"question": "Introduction to the Common Language Runtime (CLR)","aSentId": 29893,"answer": "Interesting... is MS moving MSDN to GitHub?\n\nWhen I get some time, I'm going to try and get some .net code running on my Ubuntu VMs. C#, as a language, is so much nicer than Java... It would be nice to see a real ecosystem build-up around the OSS .Net stuff.\n","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29894,"question": "Interesting... is MS moving MSDN to GitHub?\n\nWhen I get some time, I'm going to try and get some .net code running on my Ubuntu VMs. C#, as a language, is so much nicer than Java... It would be nice to see a real ecosystem build-up around the OSS .Net stuff.\n","aSentId": 29895,"answer": "No, this was previously internal only documentation that they're making available.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29890,"question": "Introduction to the Common Language Runtime (CLR)","aSentId": 29897,"answer": "Interesting that it made no mention of the Java virtual machine. I'd love to see a comparison of the different approaches taken by the JVM and CLR, and their respective advantages and disadvantages. \n\nFrom what I can gather, the CLR has better (reified) generics, but the system is less flexible, in the sense that it makes implementing higher-kinded types harder, hence why Scala has them and F# doesn't.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29898,"question": "Interesting that it made no mention of the Java virtual machine. I'd love to see a comparison of the different approaches taken by the JVM and CLR, and their respective advantages and disadvantages. \n\nFrom what I can gather, the CLR has better (reified) generics, but the system is less flexible, in the sense that it makes implementing higher-kinded types harder, hence why Scala has them and F# doesn't.","aSentId": 29899,"answer": "It definitely mentioned Java runtime ","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29898,"question": "Interesting that it made no mention of the Java virtual machine. I'd love to see a comparison of the different approaches taken by the JVM and CLR, and their respective advantages and disadvantages. \n\nFrom what I can gather, the CLR has better (reified) generics, but the system is less flexible, in the sense that it makes implementing higher-kinded types harder, hence why Scala has them and F# doesn't.","aSentId": 29901,"answer": "The problem with reified generics is that they bake the variance model into the runtime (e.g. the relationship between `List&lt;String&gt;` and `List&lt;Object&gt;`), while it is perfectly reasonable for different languages to adopt different variance models; for example, Java, Scala, and Kotlin all have different variance models, while C# and VB must have the same one.  This is just one reason why I am of the opinion that even when the JVM gets specialized generics, their public interface (i.e. public method arguments and return types) should be erased, and rely on JVM improvements in eliding boxing.\n\nWhile this has been a happy coincidence for the JVM (that adopted erasure for backwards compatibility reasons, rather than forward compatibility with future languages), it does exemplify one difference between the JVM and CLR design differences. The JVM tries to limit its surface area, and rely as much as possible on hidden JVM capabilities (escape analysis, etc.), while the CLR exposes more to allow finer-grained tinkering. The CLR's approach offers gains in the short term, at the expense of limiting maneuvering room in the future. \n\nAs usual, there is no \"right\" approach, but a set of tradeoffs you need to make. The philosophy behind this approach in the JVM seems to be that this is a runtime that will last for decades, while that of the CLR is tries to do the best with the tools at our disposal today. Of course, the difference isn't so black-and-white, but much more nuanced, and the two platforms are a lot more similar than they are different.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29902,"question": "The problem with reified generics is that they bake the variance model into the runtime (e.g. the relationship between `List&lt;String&gt;` and `List&lt;Object&gt;`), while it is perfectly reasonable for different languages to adopt different variance models; for example, Java, Scala, and Kotlin all have different variance models, while C# and VB must have the same one.  This is just one reason why I am of the opinion that even when the JVM gets specialized generics, their public interface (i.e. public method arguments and return types) should be erased, and rely on JVM improvements in eliding boxing.\n\nWhile this has been a happy coincidence for the JVM (that adopted erasure for backwards compatibility reasons, rather than forward compatibility with future languages), it does exemplify one difference between the JVM and CLR design differences. The JVM tries to limit its surface area, and rely as much as possible on hidden JVM capabilities (escape analysis, etc.), while the CLR exposes more to allow finer-grained tinkering. The CLR's approach offers gains in the short term, at the expense of limiting maneuvering room in the future. \n\nAs usual, there is no \"right\" approach, but a set of tradeoffs you need to make. The philosophy behind this approach in the JVM seems to be that this is a runtime that will last for decades, while that of the CLR is tries to do the best with the tools at our disposal today. Of course, the difference isn't so black-and-white, but much more nuanced, and the two platforms are a lot more similar than they are different.","aSentId": 29903,"answer": "Thanks for your insights, never thought of it like that.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29905,"question": "Does the CLR build on OS X yet?","aSentId": 29906,"answer": "Yes, changes for Mac OSX were merged last night.\n\nhttps://github.com/dotnet/coreclr/pull/117","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29908,"question": "well there's some obvious bullshit in this...","aSentId": 29909,"answer": "I have read halfway through and have not yet found\n\n&gt; obvious bullshit\n\nCare to share some details of your thinking? I'd love some founded reasoning too! ;)","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29911,"question": "Convert ARM Neon to x86 SSE by just including a header file.","aSentId": 29912,"answer": "I've been using this header for examples to do the opposite.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29913,"question": "I've been using this header for examples to do the opposite.","aSentId": 29914,"answer": "Yeah I have been looking for an SSE to Neon solution as well so I don't have to rewrite a bunch of code. I haven't found one but I was also thinking of using this to do it.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29915,"question": "Yeah I have been looking for an SSE to Neon solution as well so I don't have to rewrite a bunch of code. I haven't found one but I was also thinking of using this to do it.","aSentId": 29916,"answer": "Yes honestly I don't know the size of your codebase and if I'm in a position to give advice, but I ended up just rewriting the critical pieces - nothing else worked. I also went from SSE to plain C to neon to test the correctness of the implementation since I didn't have a native neon emulator (windows phone). Which is cool since now I have this verification mode in the software that I can turn on with a define to help whenever there's a hairy bug (this was for a piece of code that would run a statistical model, so testing all possible inputs is difficult/impossible). ","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29920,"question": "BitlyBot - Minimal Telepresense Robot","aSentId": 29921,"answer": "That's really cool. I also like the comparisons you made with existing products. :) I have the pi and multiple types of arduinos so I am always on the lookout for a new project (something that inspires me).","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29923,"question": "Mathematical Analysis of Chutes and Ladders","aSentId": 29924,"answer": "I think I have to disagree with your Defensive Coding section.  Unless you've written your game simulation recursively, there is no need for a \"breakout\" condition check.  Is it a good idea in principle?  Sure.  But honestly, there are only 79 positions that matter (100, minus 10 chutes, minus 9 ladders, minus square 100, and minus square 99, from which it is impossible to go backwards).  In a simulation repeated a billion times, you're bound to end up in all of these positions.  If some of them result in a high probability of looping, that's relevant data.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29925,"question": "I think I have to disagree with your Defensive Coding section.  Unless you've written your game simulation recursively, there is no need for a \"breakout\" condition check.  Is it a good idea in principle?  Sure.  But honestly, there are only 79 positions that matter (100, minus 10 chutes, minus 9 ladders, minus square 100, and minus square 99, from which it is impossible to go backwards).  In a simulation repeated a billion times, you're bound to end up in all of these positions.  If some of them result in a high probability of looping, that's relevant data.","aSentId": 29926,"answer": "One likely reason for looping is because your PRNG isn't very good.  \n  \nIt's better to catch this sort of 'relevant' data programmatically and log it out with enough data to analyze it later, rather than just locking up.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29931,"question": "Thoughts on the Technical Track","aSentId": 29932,"answer": "&gt; **Technical Track Promotions are Post-Hoc**\n\nI would say this falls under the broader category of employee loyalty being penalized. Sure, you can do a higher level job for the same title and pay. Maybe if your boss wants to spend more money on nothing he'll give you a raise.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29931,"question": "Thoughts on the Technical Track","aSentId": 29934,"answer": "This is a problem of how to get the most value out of the company's resources (viz. human capital). Seems to me for this to happen either (1) management has to be able to find work for you, (2) you have to find work, or (3) the organization cannot well support advanced technical positions. In the article, there was \"the ability to work on any project I wanted\". Even though it did not work out, it still seems fundamentally sound. It looks like an opportunity to be both entrepreneur and consultant within the company. It may be that that takes a bit of skilling up to do that effectively, but once you get there it will be worth it.\n","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29937,"question": "Cutting Down on Code Telepathy","aSentId": 29938,"answer": "Couldn't agree more.\n\nI do a fair amount of PHP (yeah yeah, I've heard it all before) these days and see a lot of\n\n    public function someFoo($arg1, $arg2, $barArray)\n\nthen reams of checking to see what is in $barArray and I hate it, the function signature no longer tells you about what it does and you end up trawling through lots of code to figure out what it actually does.\n\n\n\n\n\n","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29940,"question": "Git 2.3 has been released","aSentId": 29941,"answer": "Meanwhile, Git for Windows is still on version 1.9.5 or something like that. :/","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29942,"question": "Meanwhile, Git for Windows is still on version 1.9.5 or something like that. :/","aSentId": 29943,"answer": "So? Debian's main git package is on 1.7.10.4","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29944,"question": "So? Debian's main git package is on 1.7.10.4","aSentId": 29945,"answer": "Actually, it's on 1.9.1 for stable (via backports), and 2.1.4 for jessie and above (which is very soon to be the new stable).","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29946,"question": "Actually, it's on 1.9.1 for stable (via backports), and 2.1.4 for jessie and above (which is very soon to be the new stable).","aSentId": 29947,"answer": "&gt; 1.9.1 \n\ndoesn't have the fix for catching repos that pwn your machine when checked out on case insensitive filesystems.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29948,"question": "&gt; 1.9.1 \n\ndoesn't have the fix for catching repos that pwn your machine when checked out on case insensitive filesystems.","aSentId": 29949,"answer": "Debian (ext4) by default is case sensitive, so it doesn't really matter; I'd be surprised if Debian didn't cherry pick the commit that fixed it too.  I don't use Windows at all either.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29950,"question": "Debian (ext4) by default is case sensitive, so it doesn't really matter; I'd be surprised if Debian didn't cherry pick the commit that fixed it too.  I don't use Windows at all either.","aSentId": 29951,"answer": "You can mount case sensitive filesystems on debian and you can pass the bad repo through your machine and have a mac or windows user clone from you and get pwned. Saying the default install of debian is unaffected so it doesn't matter is not very nice.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29944,"question": "So? Debian's main git package is on 1.7.10.4","aSentId": 29953,"answer": "The topic of packages is one part of Linux I don't have much experience with. Could some else explain why the apt-get packages are frequently very outdated? I can understand not having the absolute latest version and not wanting to update immediately, but being months behind seems like a terrible idea.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29954,"question": "The topic of packages is one part of Linux I don't have much experience with. Could some else explain why the apt-get packages are frequently very outdated? I can understand not having the absolute latest version and not wanting to update immediately, but being months behind seems like a terrible idea.","aSentId": 29955,"answer": "Generally speaking, if you're running a whole load of servers you don't want to have to test every single package that comes out to ensure it still works nicely with your configuration files, maintains backwards compatibility etc before updating. Debian (and to a slightly lesser extent Ubuntu) do this in the main repositories by basically locking packages to whatever the most recent tested version is at the time of that version of the OS being released. They do take any security updates and backport them to these earlier releases (while the OS itself is still supported), so that you're not running insecure software, but you won't get any significant new features and such until a newer version of the OS comes out, because they can't guarantee backwards compatibility between major release versions. It does mean, however, that you can pretty safely run an apt-get upgrade and not break stuff.\n\nIf you're not using the official distribution repositories, of course, anything goes. I run a network monitoring system called OpenNMS. It is available in the official repos, but it's an *ancient* version, and I needed newer features. So I have a repo configured that is run by the OpenNMS developers themselves. They test and run on older (but still supported) versions of Debian and Ubuntu, so I know it'll *work*, but I do have to check all the release notes and edit configuration files pretty much every time I do an update.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29954,"question": "The topic of packages is one part of Linux I don't have much experience with. Could some else explain why the apt-get packages are frequently very outdated? I can understand not having the absolute latest version and not wanting to update immediately, but being months behind seems like a terrible idea.","aSentId": 29957,"answer": "In the case of Debian-stable, the whole point of it is that it doesn't change, except for fixes for security vulnerabilities and serious bugs, which get backported.  New versions mean new features that might affect how your server functions, and require manual testing and recertification, which can be a lot of work.  In an environment where you have a working server, you generally don't want to change anything unless you have to.\n\nTaken to the extreme, consider RHEL.  Their support lifetimes are enormous.  RHEL4 for example shipped in February 2005, and is available under Extended Lifecycle support (at extra cost) until March 2017.  There are companies that will conceivably be using gcc 3.4, Python 2.3, PHP 4.3, Apache 2.0, etc. in 2017 because those are all what were current when the distribution was stabilized leading up to that February 2005 release.  The current release, RHEL7, will likely be available under Extended Lifecycle support until at least 2027, possibly later.  (The official end of production is ten years after release, which is June 2024, and then after that for paying customers the extended phase has generally lasted 3 to 5 years.)","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29958,"question": "In the case of Debian-stable, the whole point of it is that it doesn't change, except for fixes for security vulnerabilities and serious bugs, which get backported.  New versions mean new features that might affect how your server functions, and require manual testing and recertification, which can be a lot of work.  In an environment where you have a working server, you generally don't want to change anything unless you have to.\n\nTaken to the extreme, consider RHEL.  Their support lifetimes are enormous.  RHEL4 for example shipped in February 2005, and is available under Extended Lifecycle support (at extra cost) until March 2017.  There are companies that will conceivably be using gcc 3.4, Python 2.3, PHP 4.3, Apache 2.0, etc. in 2017 because those are all what were current when the distribution was stabilized leading up to that February 2005 release.  The current release, RHEL7, will likely be available under Extended Lifecycle support until at least 2027, possibly later.  (The official end of production is ten years after release, which is June 2024, and then after that for paying customers the extended phase has generally lasted 3 to 5 years.)","aSentId": 29959,"answer": "I see. That makes sense. Is there an option  for developers who want any backwards compatible upgrades? In particular, software like Web browsers, editors, and I guess everything that isn't a library, I want the latest version of at all times. \n\nI guess my ideal world would have everyone using semantic versioning so that I know when upgrades are safe and for ease of separation (eg, I have Python 2.x and 3.x both installed and know that I can always upgrade the 3.x program). ","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29960,"question": "I see. That makes sense. Is there an option  for developers who want any backwards compatible upgrades? In particular, software like Web browsers, editors, and I guess everything that isn't a library, I want the latest version of at all times. \n\nI guess my ideal world would have everyone using semantic versioning so that I know when upgrades are safe and for ease of separation (eg, I have Python 2.x and 3.x both installed and know that I can always upgrade the 3.x program). ","aSentId": 29961,"answer": "That basically boils down to which distribution you choose.  Ubuntu for instance makes a new release every 6 months, and so if you want to be sure you always have the latest stuff available, you'd have to be willing to constantly upgrade, as each release generally goes into unsupported mode about halfway into the next cycle.  The exception is every four releases there's a long-term support (LTS) release that's supported for 5 years, but you're not really going to be getting new versions there, other than bug fixes, security vulnerabilities, new hardware support, etc. It's there for people who want things to not change and to not have to upgrade every 6 months.\n\nOther distros like Arch or Gentoo don't really have releases at all, there's just whatever is current.  (Some people use Debian unstable for this.)  You certainly get the latest versions that way, but there are considerable downsides.  As there's essentially no integration testing, it comes down to you to make sure everything continues working.  (I mean, obviously, common problems will be identified by the community and fixes made; but you're personally much more a part of that than you are with something like Debian stable.)  This is pretty much the exact opposite of what you'd want on a server, because there's no backporting of security fixes, so every update carries with it a dice roll for a partially broken system\u200a\u2014\u200athere's no separation of new features from fixes (other than whatever upstream provides), in other words.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29954,"question": "The topic of packages is one part of Linux I don't have much experience with. Could some else explain why the apt-get packages are frequently very outdated? I can understand not having the absolute latest version and not wanting to update immediately, but being months behind seems like a terrible idea.","aSentId": 29963,"answer": "&gt; I can understand not having the absolute latest version and not wanting to update immediately, but being months behind seems like a terrible idea.\n\nUsually the distros with packages that are \"months behind\" will backport security patches, so it's not such a bad idea after all. They do it this way to gain stability at the expense of features without losing out on security.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29944,"question": "So? Debian's main git package is on 1.7.10.4","aSentId": 29965,"answer": "And that's the way I like it!\n\nSeriously, have there been any significant changes for someone like me who mostly just commits/pushes/pulls and plays with only 1-2 parallel branches?","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29966,"question": "And that's the way I like it!\n\nSeriously, have there been any significant changes for someone like me who mostly just commits/pushes/pulls and plays with only 1-2 parallel branches?","aSentId": 29967,"answer": "In terms of features, if you\u2019re happy with what you\u2019ve got then there doesn\u2019t seem to be a need to update.\n\nDo be aware of [recent security issues](https://github.com/blog/1938-vulnerability-announced-update-your-git-clients) and make sure you\u2019re patched against those, though.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29968,"question": "In terms of features, if you\u2019re happy with what you\u2019ve got then there doesn\u2019t seem to be a need to update.\n\nDo be aware of [recent security issues](https://github.com/blog/1938-vulnerability-announced-update-your-git-clients) and make sure you\u2019re patched against those, though.","aSentId": 29969,"answer": "Only affects NTFS and HFS+ as far as I know. Debian is unaffected. ","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29970,"question": "Only affects NTFS and HFS+ as far as I know. Debian is unaffected. ","aSentId": 29971,"answer": "I only run Debian on NTFS ^^^^/s","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29972,"question": "I only run Debian on NTFS ^^^^/s","aSentId": 29973,"answer": "Your actually safe. NTFS uses capitalization but the windows virtual file system ignores this. So NTFS on linux shouldn't exhibit the same error NTFS on windows does. ","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29972,"question": "I only run Debian on NTFS ^^^^/s","aSentId": 29975,"answer": "If you did, you would probably never notice the difference. Unless you like to use \\* or ? in your file names.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29966,"question": "And that's the way I like it!\n\nSeriously, have there been any significant changes for someone like me who mostly just commits/pushes/pulls and plays with only 1-2 parallel branches?","aSentId": 29977,"answer": "Some changes in default push behaviour, so not really.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29966,"question": "And that's the way I like it!\n\nSeriously, have there been any significant changes for someone like me who mostly just commits/pushes/pulls and plays with only 1-2 parallel branches?","aSentId": 29979,"answer": "Well, I enjoy [writing `@` instead of `HEAD`](https://github.com/git/git/blob/v1.8.5/Documentation/RelNotes/1.8.5.txt#L100-101), for example. It sounds minor, but it\u2019s really quite pleasant, and I imagine I\u2019d be annoyed if I had to go back to a version without it.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29980,"question": "Well, I enjoy [writing `@` instead of `HEAD`](https://github.com/git/git/blob/v1.8.5/Documentation/RelNotes/1.8.5.txt#L100-101), for example. It sounds minor, but it\u2019s really quite pleasant, and I imagine I\u2019d be annoyed if I had to go back to a version without it.","aSentId": 29981,"answer": "How did I miss this?!","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29982,"question": "How did I miss this?!","aSentId": 29983,"answer": "@{u} is another good one, for the upstream of whatever HEAD is.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29987,"question": "`--ff-only` (IIRC) is now `--no-ff`, as of 2.0. Which is a big deal if you try to make your fellow developers use `git pull` correctly.","aSentId": 29988,"answer": "The default `--ff` means fast-forward-if-possible. `--no-ff` is the logical opposite and means always-merge-commit. `--ff-only` is fast-forward-or-fail and has more in common with `--rebase` than the other two options. I'm not clear on what the practical differences between `pull --ff-only` and `pull --rebase` are to the end user but both seem fine *at a glance*.\n\nOne catch is that you can change `pull`'s default behaviour in a configuration file, and to override that with `--ff-only` you might have to actually use `pull --ff --ff-only`. I've been using `--rebase` until now but I'm going to see if I can learn more.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29989,"question": "The default `--ff` means fast-forward-if-possible. `--no-ff` is the logical opposite and means always-merge-commit. `--ff-only` is fast-forward-or-fail and has more in common with `--rebase` than the other two options. I'm not clear on what the practical differences between `pull --ff-only` and `pull --rebase` are to the end user but both seem fine *at a glance*.\n\nOne catch is that you can change `pull`'s default behaviour in a configuration file, and to override that with `--ff-only` you might have to actually use `pull --ff --ff-only`. I've been using `--rebase` until now but I'm going to see if I can learn more.","aSentId": 29990,"answer": "Oh, I wrote it wrong, what I meant to say that before 2.0 you had to specify `--no-ff-only` when you wanted to do an actual merge and had `--ff-only` configured globally like a conscientious user. At around 2.0 `--no-ff-only` was gone and `--no-ff` was to be used instead.\n\n&gt;  I'm not clear on what the practical differences between `pull --ff-only` and `pull --rebase` are to the end user\n\nYou can't rebase public branches.\n\nWhen you're all committing directly to `master` (or whatever branch you do development on), sure, you should have `--ff-only` specified globally and `git pull --rebase` aliased as `git up`, then if you just want to get up to date with the current `master` git fast-forwards you, and if you have some local changes you want to commit right afterwards it rebases them. Note that merging would do __the wrong thing__ in that situation, because logically you'd want to merge your changes into remote master, not vice-versa, unless you want your history to look like a snakes' wedding.\n\nHowever if you take a more cautious approach of doing development in feature branches and merging them back only after testing, you can't rebase one on master before merging because it's visible to other people. In fact you wouldn't be able to push a rebased version to your central repository unless you have forced pushes allowed.\n\nSo in that case you still want `--ff-only` to prevent accidental wrong-way merges and you still want `pull --rebase` aliased as `git up` for merging small changes or for collaborating on your feature branches, but when merging them into master (or when you need to pull changes from master) you'll have to do an actual `merge --no-ff`.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29942,"question": "Meanwhile, Git for Windows is still on version 1.9.5 or something like that. :/","aSentId": 29993,"answer": "I got errors when I upgraded to 1.9.5 on windows. I had to downgrade to 1.9.4. ","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29994,"question": "I got errors when I upgraded to 1.9.5 on windows. I had to downgrade to 1.9.4. ","aSentId": 29995,"answer": "Did you report the errors upstream?","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29996,"question": "Did you report the errors upstream?","aSentId": 29997,"answer": "No. I was deep into a project at the time and didn't have time. I might try to repro it now and report it . ","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29942,"question": "Meanwhile, Git for Windows is still on version 1.9.5 or something like that. :/","aSentId": 29999,"answer": "Cygwin has git-2.1.4","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 30000,"question": "Cygwin has git-2.1.4","aSentId": 30001,"answer": "Unfortunately cygwin's git is terribly slow compared to msysgit because of git's heavy use of forking.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 30002,"question": "Unfortunately cygwin's git is terribly slow compared to msysgit because of git's heavy use of forking.","aSentId": 30003,"answer": "I don't see that much of a difference. ./configure scripts are terribly slow on Cygwin and even building via make and gcc is slow, but git performance is okay.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 30005,"question": "Unpopular opinion: You shouldn't be developing on Windows.","aSentId": 30006,"answer": "I'm biting. Why? Is it because 'micro$oft'?","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 30007,"question": "I'm biting. Why? Is it because 'micro$oft'?","aSentId": 30008,"answer": "If you develop for windows, do it on windows. If youre dev-ing for unix, use unix. Everything else is asking for pain.\n\nAlso I find it way easier and convinient to install stuff through apt get or brew","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 30009,"question": "If you develop for windows, do it on windows. If youre dev-ing for unix, use unix. Everything else is asking for pain.\n\nAlso I find it way easier and convinient to install stuff through apt get or brew","aSentId": 30010,"answer": "And if you're developing for cross platform?","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 30011,"question": "And if you're developing for cross platform?","aSentId": 30012,"answer": "osx :)","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 30011,"question": "And if you're developing for cross platform?","aSentId": 30014,"answer": "Then use Linux mate. ","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 30015,"question": "Then use Linux mate. ","aSentId": 30016,"answer": "&gt; Then use Linux MATE.\n\nor\n\n&gt; Then use Linux, mate.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 30009,"question": "If you develop for windows, do it on windows. If youre dev-ing for unix, use unix. Everything else is asking for pain.\n\nAlso I find it way easier and convinient to install stuff through apt get or brew","aSentId": 30018,"answer": "There's [chocolatey](https://chocolatey.org/) for windows","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 30019,"question": "There's [chocolatey](https://chocolatey.org/) for windows","aSentId": 30020,"answer": "And in Windows 10 they've basically built it in! It's called OneGet.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 30021,"question": "And in Windows 10 they've basically built it in! It's called OneGet.","aSentId": 30022,"answer": "They missed a golden opportunity of calling it \"app-get\".","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 30023,"question": "They missed a golden opportunity of calling it \"app-get\".","aSentId": 30024,"answer": "I am disappointed at the lost opportunity, but they made the right choice. Windows is trying to sell its operating systems, so everything needs to have a cool markety name. app-get still sounds like a \"hacker tool\" -- OneGet sounds like a premium service. ","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 30021,"question": "And in Windows 10 they've basically built it in! It's called OneGet.","aSentId": 30026,"answer": "I haven't heard about that, that's awesome!","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 30019,"question": "There's [chocolatey](https://chocolatey.org/) for windows","aSentId": 30028,"answer": "Chcocolatey is kinda forced though. Windows is not built to work with package managers","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 30029,"question": "Chcocolatey is kinda forced though. Windows is not built to work with package managers","aSentId": 30030,"answer": "&gt; Windows is not built to work with package managers\n\nWhat on earth is this supposed to mean?!","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 30031,"question": "&gt; Windows is not built to work with package managers\n\nWhat on earth is this supposed to mean?!","aSentId": 30032,"answer": "It means that people now have to resort to baseless statements to try to discredit Windows and people who develop on it. I'd say it's a win.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 30005,"question": "Unpopular opinion: You shouldn't be developing on Windows.","aSentId": 30034,"answer": "More like stupid opinion.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 30036,"question": "Using Git on Windows in pretty bad idea: limited support from upstream and terrible performance. Switch to Mercurial.","aSentId": 30037,"answer": "Git works fine on windows. please","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 30036,"question": "Using Git on Windows in pretty bad idea: limited support from upstream and terrible performance. Switch to Mercurial.","aSentId": 30039,"answer": "`hg clone https://github.com/dotnet/coreclr`\n\noh wait","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 30040,"question": "`hg clone https://github.com/dotnet/coreclr`\n\noh wait","aSentId": 30041,"answer": "fortunately bitbucket or rhodecode work on both :-)","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 30036,"question": "Using Git on Windows in pretty bad idea: limited support from upstream and terrible performance. Switch to Mercurial.","aSentId": 30043,"answer": "Not to mention TortoiseHg blows most other vcs guis out of the water, has great command line invocation, and is cross platform. ","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 30044,"question": "Not to mention TortoiseHg blows most other vcs guis out of the water, has great command line invocation, and is cross platform. ","aSentId": 30045,"answer": "No. TortoiseGit works fine on Windows. In any case, the commandline is superior.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 30046,"question": "No. TortoiseGit works fine on Windows. In any case, the commandline is superior.","aSentId": 30047,"answer": "I didn't write this, but I swear by it: https://github.com/dahlbyk/posh-git\n\nI owe this guy a beer.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 30046,"question": "No. TortoiseGit works fine on Windows. In any case, the commandline is superior.","aSentId": 30049,"answer": "I've yet to hear a persuasive case as to how branch management, log review, and staging per-hunk commits is better done through a purely commandline interface, given that it's an innately visual task.  Flatly stating it's superior is not particularly convincing. \n\nTortoiseGit works *ok* on windows.  The last time I used it though, it lacked quite a lot of features which git has, while TortoiseHg exposes pretty all of Mercurial, and then some.  More importantly ... tortoisegit *only* works under windows, whereas TortoiseHg is written in pyqt... I can type \"thg ci\" on the command line, and get the same commit dialog popping up under windows, linux, or os x.  \n\nWhich was my original point... I wish TortoiseGit or something similar *was* as well rounded, it's a deficiency I think is sorely lacking in Git.  Instead, responses like your \"everything is fine, your way is inferior, downvote\" seem to be typical, and not very constructive in advancing the tools we all have to work with.  ","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 30050,"question": "I've yet to hear a persuasive case as to how branch management, log review, and staging per-hunk commits is better done through a purely commandline interface, given that it's an innately visual task.  Flatly stating it's superior is not particularly convincing. \n\nTortoiseGit works *ok* on windows.  The last time I used it though, it lacked quite a lot of features which git has, while TortoiseHg exposes pretty all of Mercurial, and then some.  More importantly ... tortoisegit *only* works under windows, whereas TortoiseHg is written in pyqt... I can type \"thg ci\" on the command line, and get the same commit dialog popping up under windows, linux, or os x.  \n\nWhich was my original point... I wish TortoiseGit or something similar *was* as well rounded, it's a deficiency I think is sorely lacking in Git.  Instead, responses like your \"everything is fine, your way is inferior, downvote\" seem to be typical, and not very constructive in advancing the tools we all have to work with.  ","aSentId": 30051,"answer": "Branch management, assuming you mean listing, merging, creating and rebasing branches (or similar types of operations) works very well on the commandline. Viewing characters in a terminal instead of pixels in a window does not make it any less visual. For viewing logs, tig works great. It's for the terminal, but it shows the branches and log messages in a nice way. Call it innately visual, if you like. I agree that merging can be nicer in an application like meld or kdiff, but this is not part of git, but is merely a configuration option for which tool git should launch.\n\nIf TortoiseGit lacked quite a lot of features last time you tried it, it sounds like you used an old version. And if using version control in a cross platform way is a goal, I think it weakens the argument for using any type of GUI likec TortoiseGit. Once you are familiar with the commandline, you get the advantage of working seamlessly on a remote computer, continuing where you left off (assuming the usage of ie tmux and mosh).\n\nAlso, with the commandline you can use aliases, shell functions, prompts with information about the index, stash and tag. It works on almost any OS, works very well remotely and supports having sessions where you can continue exactly where you left off. Also, it's the ultimate in power. No GUI will ever be able to do more things with git than git on the commandline. \n\nAvoiding the commandline really avoids using several more powerful tools.\n\nYes, GUIs are inferior. ","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29940,"question": "Git 2.3 has been released","aSentId": 30053,"answer": "I discovered and installed Git Extensions recently. I found it to be the best client so far after using the official Git gui, TortoiseGit, and SourceTree.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 30054,"question": "I discovered and installed Git Extensions recently. I found it to be the best client so far after using the official Git gui, TortoiseGit, and SourceTree.","aSentId": 30055,"answer": "As far as I'm concerned, the best git client is git.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 30056,"question": "As far as I'm concerned, the best git client is git.","aSentId": 30057,"answer": "I don't know. I'm all about the command line and understanding the underlying mechanisms, but sometimes you just want to see the tree as an actual tree.\n\nThat's why I installed tig.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 30058,"question": "I don't know. I'm all about the command line and understanding the underlying mechanisms, but sometimes you just want to see the tree as an actual tree.\n\nThat's why I installed tig.","aSentId": 30059,"answer": "Is gitk not suffcient for your needs ?","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 30060,"question": "Is gitk not suffcient for your needs ?","aSentId": 30061,"answer": "I also love gitk. Very handy and powerful. Give it a chance.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 30060,"question": "Is gitk not suffcient for your needs ?","aSentId": 30063,"answer": "Apparently I don't have whatever gitk needs to run:\n\n    /usr/bin/gitk: line 3: exec: wish: not found\n\nBut, I don't claim to be a git expert- gitk might be good enough, but I found tig pretty early in my gitting and I like it quite a bit.\n\nEDIT: Okay, gitk is pretty cool. I had to install tk, because gitk is a GUI. I'm going to have to spend some time with this.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 30058,"question": "I don't know. I'm all about the command line and understanding the underlying mechanisms, but sometimes you just want to see the tree as an actual tree.\n\nThat's why I installed tig.","aSentId": 30065,"answer": "I agree, but `git log --all --graph --decorate` does go a long way.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 30066,"question": "I agree, but `git log --all --graph --decorate` does go a long way.","aSentId": 30067,"answer": "&gt; git log --all --graph --decorate\n\nThis is my main complaint when using git. Why does the most basic of functions --always --require --several --switches? Aliases are just a crutch.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 30068,"question": "&gt; git log --all --graph --decorate\n\nThis is my main complaint when using git. Why does the most basic of functions --always --require --several --switches? Aliases are just a crutch.","aSentId": 30069,"answer": "To be fair, turning the commit log into a graph is not basic functionality.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 30070,"question": "To be fair, turning the commit log into a graph is not basic functionality.","aSentId": 30071,"answer": "It's not, because it requires a ton of switches... If it would be something like `git prettygraph` it would be a basic functionality. I'm claiming chicken/egg here because a graph is more than useful.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 30072,"question": "It's not, because it requires a ton of switches... If it would be something like `git prettygraph` it would be a basic functionality. I'm claiming chicken/egg here because a graph is more than useful.","aSentId": 30073,"answer": "No, it's not basic functionality because the main use-case, and the intended use, of git-log is to give you a log of commits.\n\nIt can also be used to give you a graph. And, yes, a command line graph can be useful, which is why git-log can be used to produce a graph, but the main use is for a log, not a graph.\n\nI'm not sure why aliases are a problem. I mean, if you know the exact arguments you want to use to produce the type of graph you like, why not just throw them into an alias? They aren't going to change (at least, not without a $MAJOR_VERSION bump).","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 30072,"question": "It's not, because it requires a ton of switches... If it would be something like `git prettygraph` it would be a basic functionality. I'm claiming chicken/egg here because a graph is more than useful.","aSentId": 30075,"answer": "Git allows aliasing of commands so why is there a need for every single functionality to be built in?\n\n`git log` is meant to display the commits in a _log_, not a graph. So in this case, a graph is extended functionality and so belong behind a switch.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 30070,"question": "To be fair, turning the commit log into a graph is not basic functionality.","aSentId": 30077,"answer": "I don't know.  \"History is a DAG\" is a pretty core part of git, so I think it's reasonable to call viewing the history as a graph basic functionality.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 30068,"question": "&gt; git log --all --graph --decorate\n\nThis is my main complaint when using git. Why does the most basic of functions --always --require --several --switches? Aliases are just a crutch.","aSentId": 30079,"answer": "All my aliases are in a git repository.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 30066,"question": "I agree, but `git log --all --graph --decorate` does go a long way.","aSentId": 30081,"answer": "That's fair. I didn't know about that one.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 30082,"question": "That's fair. I didn't know about that one.","aSentId": 30083,"answer": "I have these in my `~/.gitconfig`:\n\n    la = log --oneline --graph --all --decorate\n    lb = log --oneline --graph --decorate\n\nI also have this script on my path as `git-las`:\n\n    #!/bin/bash\n    \n    height=$(tput lines)\n    height=$((height / 3))\n    git la -$height\n\nI tried to do that as an alias, as a function alias, and with the help of #git and /r/git, but nothing doing. It needs to be a script, apparently. I also have a `git-lass` version that changes the 3 to a 6. Basically I can do `git la` (list all) to get a full [possibly paged] output, or `git las` (list all short) to fire off the script and get the same thing truncated to roughly 1/3rd of my terminal height, or `git lass` (list all super short) for about 1/6th the height. I `git las` instantly and all day long. It's not exact, because branches and merges add in a fluctuating number of extra lines between the `--oneline` output, but it's good enough for me. I work on a variety of monitors, from zoomed-in laptop terminals with 30 lines, to my 24\" vertical work monitor with well over 100 lines, and having these things in my dotfiles means I get nice behavior everywhere. I can see existing output, along with some commit oneliner info.\n\nI also have `git-lbs` and `git-lbss` (b for 'branch'), but basically never use any of the `git lb*` aliases and scripts. I seem to always want to see everything. I've used git for 2 years to great effect, and I've never used one of the UIs. I find they tie my hands. Look into fugitive (for Vim) and magit (for Emacs), too. They make git ridiculously speedy to work with, and eliminate a lot of the need for the terminal uses, especially if you have a host of mappings (Vim), as I do:\n\n    nnoremap &lt;Leader&gt;gs :Gstatus&lt;CR&gt;\n    nnoremap &lt;Leader&gt;gd :Gvdiff&lt;CR&gt;\n    nnoremap &lt;Leader&gt;gD :Gsdiff&lt;CR&gt;\n    nnoremap &lt;Leader&gt;gb :Gblame&lt;CR&gt;\n    nnoremap &lt;Leader&gt;gB :Git checkout -b&lt;Space&gt;\n    nnoremap &lt;Leader&gt;gf :Git fetch&lt;CR&gt;\n    nnoremap &lt;Leader&gt;gL :exe ':!cd ' . expand('%:p:h') . '; git la'&lt;CR&gt;\n    nnoremap &lt;Leader&gt;gl :exe ':!cd ' . expand('%:p:h') . '; git las'&lt;CR&gt;\n    nnoremap &lt;Leader&gt;gm :Git merge&lt;CR&gt;\n    nnoremap &lt;Leader&gt;gh :Silent Glog&lt;CR&gt;\n    nnoremap &lt;Leader&gt;gH :Silent Glog&lt;CR&gt;:set nofoldenable&lt;CR&gt;\n    nnoremap &lt;Leader&gt;gr :Gread&lt;CR&gt;\n    nnoremap &lt;Leader&gt;gw :Gwrite&lt;CR&gt;\n    nnoremap &lt;Leader&gt;gp :Git push&lt;CR&gt;\n    nnoremap &lt;Leader&gt;g- :Silent Git stash&lt;CR&gt;:e&lt;CR&gt;\n    nnoremap &lt;Leader&gt;g+ :Silent Git stash pop&lt;CR&gt;:e&lt;CR&gt;\n    nnoremap &lt;Leader&gt;gu :GitGutterRevertHunk&lt;CR&gt;\n    nnoremap &lt;Leader&gt;ct :Git ctags&lt;CR&gt;\n\nThat last one is based on [this](http://tbaggery.com/2011/08/08/effortless-ctags-with-git.html), which took a bit of finessing to get set up right, but has made ctags a completely automated thing for me for a long time now.\n\nI also use git-gutter (Vim) constantly/passively to show me where my changes are, and to `]c` and `[c` hop between them, and vim-gitv very occasionally to see the graph, but my `,gl` alias (Vim, above), which prints out the output of `git las` for me, and `,gL`, which does `git la` are usually more than enough to get an instant idea of what's going on with my branches and commits. The UIs are *so* much slower.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 30084,"question": "I have these in my `~/.gitconfig`:\n\n    la = log --oneline --graph --all --decorate\n    lb = log --oneline --graph --decorate\n\nI also have this script on my path as `git-las`:\n\n    #!/bin/bash\n    \n    height=$(tput lines)\n    height=$((height / 3))\n    git la -$height\n\nI tried to do that as an alias, as a function alias, and with the help of #git and /r/git, but nothing doing. It needs to be a script, apparently. I also have a `git-lass` version that changes the 3 to a 6. Basically I can do `git la` (list all) to get a full [possibly paged] output, or `git las` (list all short) to fire off the script and get the same thing truncated to roughly 1/3rd of my terminal height, or `git lass` (list all super short) for about 1/6th the height. I `git las` instantly and all day long. It's not exact, because branches and merges add in a fluctuating number of extra lines between the `--oneline` output, but it's good enough for me. I work on a variety of monitors, from zoomed-in laptop terminals with 30 lines, to my 24\" vertical work monitor with well over 100 lines, and having these things in my dotfiles means I get nice behavior everywhere. I can see existing output, along with some commit oneliner info.\n\nI also have `git-lbs` and `git-lbss` (b for 'branch'), but basically never use any of the `git lb*` aliases and scripts. I seem to always want to see everything. I've used git for 2 years to great effect, and I've never used one of the UIs. I find they tie my hands. Look into fugitive (for Vim) and magit (for Emacs), too. They make git ridiculously speedy to work with, and eliminate a lot of the need for the terminal uses, especially if you have a host of mappings (Vim), as I do:\n\n    nnoremap &lt;Leader&gt;gs :Gstatus&lt;CR&gt;\n    nnoremap &lt;Leader&gt;gd :Gvdiff&lt;CR&gt;\n    nnoremap &lt;Leader&gt;gD :Gsdiff&lt;CR&gt;\n    nnoremap &lt;Leader&gt;gb :Gblame&lt;CR&gt;\n    nnoremap &lt;Leader&gt;gB :Git checkout -b&lt;Space&gt;\n    nnoremap &lt;Leader&gt;gf :Git fetch&lt;CR&gt;\n    nnoremap &lt;Leader&gt;gL :exe ':!cd ' . expand('%:p:h') . '; git la'&lt;CR&gt;\n    nnoremap &lt;Leader&gt;gl :exe ':!cd ' . expand('%:p:h') . '; git las'&lt;CR&gt;\n    nnoremap &lt;Leader&gt;gm :Git merge&lt;CR&gt;\n    nnoremap &lt;Leader&gt;gh :Silent Glog&lt;CR&gt;\n    nnoremap &lt;Leader&gt;gH :Silent Glog&lt;CR&gt;:set nofoldenable&lt;CR&gt;\n    nnoremap &lt;Leader&gt;gr :Gread&lt;CR&gt;\n    nnoremap &lt;Leader&gt;gw :Gwrite&lt;CR&gt;\n    nnoremap &lt;Leader&gt;gp :Git push&lt;CR&gt;\n    nnoremap &lt;Leader&gt;g- :Silent Git stash&lt;CR&gt;:e&lt;CR&gt;\n    nnoremap &lt;Leader&gt;g+ :Silent Git stash pop&lt;CR&gt;:e&lt;CR&gt;\n    nnoremap &lt;Leader&gt;gu :GitGutterRevertHunk&lt;CR&gt;\n    nnoremap &lt;Leader&gt;ct :Git ctags&lt;CR&gt;\n\nThat last one is based on [this](http://tbaggery.com/2011/08/08/effortless-ctags-with-git.html), which took a bit of finessing to get set up right, but has made ctags a completely automated thing for me for a long time now.\n\nI also use git-gutter (Vim) constantly/passively to show me where my changes are, and to `]c` and `[c` hop between them, and vim-gitv very occasionally to see the graph, but my `,gl` alias (Vim, above), which prints out the output of `git las` for me, and `,gL`, which does `git la` are usually more than enough to get an instant idea of what's going on with my branches and commits. The UIs are *so* much slower.","aSentId": 30085,"answer": "    la = log --oneline --graph --all --decorate\n    las = \"!git la -$(($(tput lines) / 3))\"\n    lasf = \"!f() { git la -$(($(tput lines) / 3)); } &amp;&amp; f\"\n\n?\n\nThe only log alias I have is\n\n    lg = log --graph --pretty=format:'%Cred%h%Creset -%C(auto)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset'\n\nwhich is mostly a custom format of\n\n    log --oneline --decorate --graph","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 30086,"question": "    la = log --oneline --graph --all --decorate\n    las = \"!git la -$(($(tput lines) / 3))\"\n    lasf = \"!f() { git la -$(($(tput lines) / 3)); } &amp;&amp; f\"\n\n?\n\nThe only log alias I have is\n\n    lg = log --graph --pretty=format:'%Cred%h%Creset -%C(auto)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset'\n\nwhich is mostly a custom format of\n\n    log --oneline --decorate --graph","aSentId": 30087,"answer": "Sweet. It seemed crazy to me that there wasn't a way to do this. I wish you were around when I was asking about this [here](http://stackoverflow.com/questions/24546428/git-alias-using-lines-2?noredirect=1), and on #git. Thanks!","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 30088,"question": "Sweet. It seemed crazy to me that there wasn't a way to do this. I wish you were around when I was asking about this [here](http://stackoverflow.com/questions/24546428/git-alias-using-lines-2?noredirect=1), and on #git. Thanks!","aSentId": 30089,"answer": "You're welcome. I experimented a little further and got\n\n    lasv = \"!f() { git la -$(($(tput lines) / ${1:-3})); } &amp;&amp; f\"\n\nfor\n\n    $ git lasv 24 # denominator is 24\n    $ git lasv    # denominator defaults to 3\n\nDidn't find a way to expand `$LINES`, though.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 30084,"question": "I have these in my `~/.gitconfig`:\n\n    la = log --oneline --graph --all --decorate\n    lb = log --oneline --graph --decorate\n\nI also have this script on my path as `git-las`:\n\n    #!/bin/bash\n    \n    height=$(tput lines)\n    height=$((height / 3))\n    git la -$height\n\nI tried to do that as an alias, as a function alias, and with the help of #git and /r/git, but nothing doing. It needs to be a script, apparently. I also have a `git-lass` version that changes the 3 to a 6. Basically I can do `git la` (list all) to get a full [possibly paged] output, or `git las` (list all short) to fire off the script and get the same thing truncated to roughly 1/3rd of my terminal height, or `git lass` (list all super short) for about 1/6th the height. I `git las` instantly and all day long. It's not exact, because branches and merges add in a fluctuating number of extra lines between the `--oneline` output, but it's good enough for me. I work on a variety of monitors, from zoomed-in laptop terminals with 30 lines, to my 24\" vertical work monitor with well over 100 lines, and having these things in my dotfiles means I get nice behavior everywhere. I can see existing output, along with some commit oneliner info.\n\nI also have `git-lbs` and `git-lbss` (b for 'branch'), but basically never use any of the `git lb*` aliases and scripts. I seem to always want to see everything. I've used git for 2 years to great effect, and I've never used one of the UIs. I find they tie my hands. Look into fugitive (for Vim) and magit (for Emacs), too. They make git ridiculously speedy to work with, and eliminate a lot of the need for the terminal uses, especially if you have a host of mappings (Vim), as I do:\n\n    nnoremap &lt;Leader&gt;gs :Gstatus&lt;CR&gt;\n    nnoremap &lt;Leader&gt;gd :Gvdiff&lt;CR&gt;\n    nnoremap &lt;Leader&gt;gD :Gsdiff&lt;CR&gt;\n    nnoremap &lt;Leader&gt;gb :Gblame&lt;CR&gt;\n    nnoremap &lt;Leader&gt;gB :Git checkout -b&lt;Space&gt;\n    nnoremap &lt;Leader&gt;gf :Git fetch&lt;CR&gt;\n    nnoremap &lt;Leader&gt;gL :exe ':!cd ' . expand('%:p:h') . '; git la'&lt;CR&gt;\n    nnoremap &lt;Leader&gt;gl :exe ':!cd ' . expand('%:p:h') . '; git las'&lt;CR&gt;\n    nnoremap &lt;Leader&gt;gm :Git merge&lt;CR&gt;\n    nnoremap &lt;Leader&gt;gh :Silent Glog&lt;CR&gt;\n    nnoremap &lt;Leader&gt;gH :Silent Glog&lt;CR&gt;:set nofoldenable&lt;CR&gt;\n    nnoremap &lt;Leader&gt;gr :Gread&lt;CR&gt;\n    nnoremap &lt;Leader&gt;gw :Gwrite&lt;CR&gt;\n    nnoremap &lt;Leader&gt;gp :Git push&lt;CR&gt;\n    nnoremap &lt;Leader&gt;g- :Silent Git stash&lt;CR&gt;:e&lt;CR&gt;\n    nnoremap &lt;Leader&gt;g+ :Silent Git stash pop&lt;CR&gt;:e&lt;CR&gt;\n    nnoremap &lt;Leader&gt;gu :GitGutterRevertHunk&lt;CR&gt;\n    nnoremap &lt;Leader&gt;ct :Git ctags&lt;CR&gt;\n\nThat last one is based on [this](http://tbaggery.com/2011/08/08/effortless-ctags-with-git.html), which took a bit of finessing to get set up right, but has made ctags a completely automated thing for me for a long time now.\n\nI also use git-gutter (Vim) constantly/passively to show me where my changes are, and to `]c` and `[c` hop between them, and vim-gitv very occasionally to see the graph, but my `,gl` alias (Vim, above), which prints out the output of `git las` for me, and `,gL`, which does `git la` are usually more than enough to get an instant idea of what's going on with my branches and commits. The UIs are *so* much slower.","aSentId": 30091,"answer": "&gt; nnoremap &lt;Leader&gt;gs :Gstatus&lt;CR&gt;\n\nI'm having difficulty getting this to work, is there a trick to it?","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 30092,"question": "&gt; nnoremap &lt;Leader&gt;gs :Gstatus&lt;CR&gt;\n\nI'm having difficulty getting this to work, is there a trick to it?","aSentId": 30093,"answer": "Do you have [fugitive](https://github.com/tpope/vim-fugitive) installed? That's where all the `:G&lt;thing&gt;` commands come from.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 30094,"question": "Do you have [fugitive](https://github.com/tpope/vim-fugitive) installed? That's where all the `:G&lt;thing&gt;` commands come from.","aSentId": 30095,"answer": "Yep, :Gstatus works on git files, but I can't seem to get the nnoremap to work for that command. It works for simple commands, for example, my .vimrc has:\n\n    nnoremap &lt;leader&gt;gs :Gstatus&lt;CR&gt;\n    nnoremap Y y$\n \nand the second one works, but the first one does not. This is the first time I've attempted to modify my vimrc (I just got vundle set up and some git and golang plugins setup), so I'm probably missing something simple.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 30082,"question": "That's fair. I didn't know about that one.","aSentId": 30097,"answer": "I also add `--oneline`.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 30066,"question": "I agree, but `git log --all --graph --decorate` does go a long way.","aSentId": 30099,"answer": "Set alias \"gl\" and watch them pretty lines! ^^^mmmph..!","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 30056,"question": "As far as I'm concerned, the best git client is git.","aSentId": 30101,"answer": "Partial file staging is why I use a gui.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 30102,"question": "Partial file staging is why I use a gui.","aSentId": 30103,"answer": "git add -p is easy enough.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 30104,"question": "git add -p is easy enough.","aSentId": 30105,"answer": "I use that one all the time. Every once in a while, though, I have adjacent but unrelated changes, and then I love being able to do it line-by-line with [fugitive](https://github.com/tpope/vim-fugitive).","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 30106,"question": "I use that one all the time. Every once in a while, though, I have adjacent but unrelated changes, and then I love being able to do it line-by-line with [fugitive](https://github.com/tpope/vim-fugitive).","aSentId": 30107,"answer": "Use \"e\" (like \"edit\") when asked whether you want to stage a hunk and remove the new lines you don't want to stage and add the old lines that you don't want removed in that commit.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 30108,"question": "Use \"e\" (like \"edit\") when asked whether you want to stage a hunk and remove the new lines you don't want to stage and add the old lines that you don't want removed in that commit.","aSentId": 30109,"answer": "Fuck knows how it wants me to adjust those line numbers though. Why can't the commit editor just deal with it.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 30110,"question": "Fuck knows how it wants me to adjust those line numbers though. Why can't the commit editor just deal with it.","aSentId": 30111,"answer": "You can mostly ignore them!\n\n* Anything can be added as a `+` line.\n* Any `+` line can be removed or moved anywhere else in the hunk.\n* Any `-` line can be changed to a [` `] line.\n* Most [` `] lines can be changed to `-` lines. [` `] lines supply the context Git needs to apply patches, and a missing or non-existent [` `] are often the cause of a patch failure.\n\nThis works without touching the patch line numbers at all.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 30102,"question": "Partial file staging is why I use a gui.","aSentId": 30113,"answer": "Which gui do you use and does it support the \"e (edit)\" command when partially staging?","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 30114,"question": "Which gui do you use and does it support the \"e (edit)\" command when partially staging?","aSentId": 30115,"answer": "I'm using magit as my git GUI. I know git add patch is nice an all. But using magit to add a hunk or edit it is so much easier.  ","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 30056,"question": "As far as I'm concerned, the best git client is git.","aSentId": 30117,"answer": "Well, now there are 2 of us.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 30119,"question": "Agreed, I find the CLI to be much easier to use than any GUI.","aSentId": 30120,"answer": "This is a really hard thing to get when first starting to use git. Coming from a mainly windows developer with a lot of experience in Linux, I still tended to use something like source tree. However, overtime, I really found the power to be in knowing the command line. It really did just become faster than clicking around. Coupled with adding aliases and shortcuts and I can't imagine using a GUI for git. \n\nThis is exactly why I have a hard time suggesting git. It's clearly meant for power users. But getting setup coming from something like tortoise svn plain old sucks. I held onto source tree for like 2 years before realizing I was doing 50/50 and decided to quit source tree. ","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 30121,"question": "This is a really hard thing to get when first starting to use git. Coming from a mainly windows developer with a lot of experience in Linux, I still tended to use something like source tree. However, overtime, I really found the power to be in knowing the command line. It really did just become faster than clicking around. Coupled with adding aliases and shortcuts and I can't imagine using a GUI for git. \n\nThis is exactly why I have a hard time suggesting git. It's clearly meant for power users. But getting setup coming from something like tortoise svn plain old sucks. I held onto source tree for like 2 years before realizing I was doing 50/50 and decided to quit source tree. ","aSentId": 30122,"answer": "There are still very, very good GUIs out there for git. I mean, heck, TortoiseGit is a thing, if I recall correctly -- Assuming someone can install software, there's no reason their first taste of git needs to be the command line.\n\nI mean, it should be the command line.\n\nGiven that GUI clients are literally devil-spawn.\n\nBut it doesn't *have* to be.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 30119,"question": "Agreed, I find the CLI to be much easier to use than any GUI.","aSentId": 30124,"answer": "The same way I found sticking my dick in a hornet's nest much better than sticking it in a running garbage disposal.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 30125,"question": "The same way I found sticking my dick in a hornet's nest much better than sticking it in a running garbage disposal.","aSentId": 30126,"answer": "wat","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 30054,"question": "I discovered and installed Git Extensions recently. I found it to be the best client so far after using the official Git gui, TortoiseGit, and SourceTree.","aSentId": 30128,"answer": "SmartGit is also very good and worth checking out.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 30129,"question": "SmartGit is also very good and worth checking out.","aSentId": 30130,"answer": "I'm not crazy having to open two windows to both view the history and the current changes.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 30054,"question": "I discovered and installed Git Extensions recently. I found it to be the best client so far after using the official Git gui, TortoiseGit, and SourceTree.","aSentId": 30132,"answer": "I like SourceTree on the Mac. The Windows version has some missing features and performance issues. On Windows my favorite is (not free but worth it) SmartGitHg. It's cross platform too. ","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 30134,"question": "I *love* the git integration in VS2013/2015. It's made everything so damn easy.","aSentId": 30135,"answer": "It's also buggy as hell :-/","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 30138,"question": "Real men use command line and fix conflicts on vim. ","aSentId": 30139,"answer": "vim? You scrub. **Real men** use ed.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 30140,"question": "vim? You scrub. **Real men** use ed.","aSentId": 30141,"answer": "    ^C\n    ?\n    ^C\n    ?\n","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 30140,"question": "vim? You scrub. **Real men** use ed.","aSentId": 30143,"answer": "No real programmers use a magnetic needle and a steady hand.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 30144,"question": "No real programmers use a magnetic needle and a steady hand.","aSentId": 30145,"answer": "xkcd sucks","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 30140,"question": "vim? You scrub. **Real men** use ed.","aSentId": 30147,"answer": "...on teletype.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 30151,"question": "GitHub for Windows is my favourite. At least for your own projects.","aSentId": 30152,"answer": "Really? GitHub for Windows is nice as a Metro-looking app, but it's shit for actually doing anything. Better to use SourceTree or (best) the command line.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 30153,"question": "Really? GitHub for Windows is nice as a Metro-looking app, but it's shit for actually doing anything. Better to use SourceTree or (best) the command line.","aSentId": 30154,"answer": "Yes. I quite like it. It's also nice to have nice tools.\n\nIf I want to do something more advanced though I switch to the command line.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 29940,"question": "Git 2.3 has been released","aSentId": 30157,"answer": "Yes! Can push to server repo now!\n\nBut how does it work, exactly? Like, if I pushed from my repo on my laptop, do I need to setup the repo clone on my server so that it pulls? Or is that now handled?","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 30158,"question": "Yes! Can push to server repo now!\n\nBut how does it work, exactly? Like, if I pushed from my repo on my laptop, do I need to setup the repo clone on my server so that it pulls? Or is that now handled?","aSentId": 30159,"answer": "Yes and read the article for details.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 30158,"question": "Yes! Can push to server repo now!\n\nBut how does it work, exactly? Like, if I pushed from my repo on my laptop, do I need to setup the repo clone on my server so that it pulls? Or is that now handled?","aSentId": 30161,"answer": "I've got really mixed feelings about this one. I'd almost call it an anti-feature, because except for very simple websites like a personal page this is usually a bad idea.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 30162,"question": "I've got really mixed feelings about this one. I'd almost call it an anti-feature, because except for very simple websites like a personal page this is usually a bad idea.","aSentId": 30163,"answer": "Oh yeah, definitely. Companies I've worked at tend to use svn, so I've never even thought for that. For my own personal work, it's a nice feature.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 30165,"question": "I have never seen so heavily downvoted posts as in programming subs. Programmers are fucking violent when it comes to different opinions. ","aSentId": 30166,"answer": "No we're not! Fuck off!","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 30167,"question": "No we're not! Fuck off!","aSentId": 30168,"answer": "vi is the best and will always be the best.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 30169,"question": "vi is the best and will always be the best.","aSentId": 30170,"answer": "Dynamic typing sucks.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 30171,"question": "Dynamic typing sucks.","aSentId": 30172,"answer": "Java is stale horse shite","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 30169,"question": "vi is the best and will always be the best.","aSentId": 30174,"answer": "sorry vi is too old school, it's only hip these days to code in a web browser, that's why we're making Atom run on the desktop. That's where the cool kids are.  \n  \n/s (barf)","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 30165,"question": "I have never seen so heavily downvoted posts as in programming subs. Programmers are fucking violent when it comes to different opinions. ","aSentId": 30176,"answer": "Wanna see them get violent? State an opinion about PHP.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 30177,"question": "Wanna see them get violent? State an opinion about PHP.","aSentId": 30178,"answer": "*State a positive opinion about PHP","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 30177,"question": "Wanna see them get violent? State an opinion about PHP.","aSentId": 30180,"answer": "State an opinion about Vi or EMACS.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 30181,"question": "State an opinion about Vi or EMACS.","aSentId": 30182,"answer": "That war has been won in favor of VI AND NOONE CAN TELL ME ANY DIFFERENT.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 30165,"question": "I have never seen so heavily downvoted posts as in programming subs. Programmers are fucking violent when it comes to different opinions. ","aSentId": 30184,"answer": "Downvotes are not the end of the world. It is a major function of how reddit works. The same with upvotes. I dont get why some people appear to be outraged at downvotes. Downvoting is one of the most passive, non confrontational, and convenient ways of expressing your opinion. The same with upvotes, but no one complains about upvotes. Some subs even go a far as to make rules and skins that are against downvoting. If you are against downvotes, then why be on reddit?","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 30185,"question": "Downvotes are not the end of the world. It is a major function of how reddit works. The same with upvotes. I dont get why some people appear to be outraged at downvotes. Downvoting is one of the most passive, non confrontational, and convenient ways of expressing your opinion. The same with upvotes, but no one complains about upvotes. Some subs even go a far as to make rules and skins that are against downvoting. If you are against downvotes, then why be on reddit?","aSentId": 30186,"answer": "Downvotes are supposed to target spam and other worthless contributions, not disagreement. I get it, that ship has sailed, but it's still the truth.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 30187,"question": "Downvotes are supposed to target spam and other worthless contributions, not disagreement. I get it, that ship has sailed, but it's still the truth.","aSentId": 30188,"answer": "Regardless of intentions, general human nature was never going to allow that definition. :-\\ ","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 30191,"question": "Is there any good resource out there for learning to use git?  I've tried about 4 times, and always say \"fuck it\" and go back to using subversion.","aSentId": 30192,"answer": "The problem is that you're giving up. You have to have the mindset that you will do something you set out to accomplish, and that giving up is not an option. Why give up? It's definitely not because it's not possible. Because you find it hard? So what? Just learn a little a time. \n\nI recommend the book \"Pro Git\". The first 4-5 chapters are enough to use git in real world (e.g., workplace) projects.\n\nAlso, learn about \"git-flow\", and use it as a crutch to make git easier at first. It's a workflow you can read about online, and there are a set of scripts you can install that implement it. After a while you will start to use git without git-flow and abandon the git flow scripts, but probably keep the workflow concepts. This is what I did. \n\nEDIT: [Here](http://nvie.com/posts/a-successful-git-branching-model/) is the description of git-flow that I initially found useful. I haven't read it since, so I'm not sure what my take on it would be at this point. But the graphics are better than what you get on the Atlassian site, which is the first google result when you google \"git-flow\". ","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 30193,"question": "The problem is that you're giving up. You have to have the mindset that you will do something you set out to accomplish, and that giving up is not an option. Why give up? It's definitely not because it's not possible. Because you find it hard? So what? Just learn a little a time. \n\nI recommend the book \"Pro Git\". The first 4-5 chapters are enough to use git in real world (e.g., workplace) projects.\n\nAlso, learn about \"git-flow\", and use it as a crutch to make git easier at first. It's a workflow you can read about online, and there are a set of scripts you can install that implement it. After a while you will start to use git without git-flow and abandon the git flow scripts, but probably keep the workflow concepts. This is what I did. \n\nEDIT: [Here](http://nvie.com/posts/a-successful-git-branching-model/) is the description of git-flow that I initially found useful. I haven't read it since, so I'm not sure what my take on it would be at this point. But the graphics are better than what you get on the Atlassian site, which is the first google result when you google \"git-flow\". ","aSentId": 30194,"answer": "Definitely agree there, I guess I give up on it because it's not a necessity for what I do (I already have something that works for my purposes).  Grabbing pro git for kindle now and I'll check out git-flow too.  Appreciate the suggestions!  (everyone elses suggestions too)","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 30195,"question": "Definitely agree there, I guess I give up on it because it's not a necessity for what I do (I already have something that works for my purposes).  Grabbing pro git for kindle now and I'll check out git-flow too.  Appreciate the suggestions!  (everyone elses suggestions too)","aSentId": 30196,"answer": "Note that git-flow has some administrative overhead. I vastly prefer the [GitHub Flow](http://scottchacon.com/2011/08/31/github-flow.html) variant for most personal projects. My colleagues are less disciplined with version control and frequently push half commits, so for work I fall back to a lightweight variant of git-flow that doesn't use release branches.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 30197,"question": "Note that git-flow has some administrative overhead. I vastly prefer the [GitHub Flow](http://scottchacon.com/2011/08/31/github-flow.html) variant for most personal projects. My colleagues are less disciplined with version control and frequently push half commits, so for work I fall back to a lightweight variant of git-flow that doesn't use release branches.","aSentId": 30198,"answer": "Yup, i gravitated towards a github flow like workflow after i gave up git-flow. Git-flow was a good learning crutch early on though. ","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 30193,"question": "The problem is that you're giving up. You have to have the mindset that you will do something you set out to accomplish, and that giving up is not an option. Why give up? It's definitely not because it's not possible. Because you find it hard? So what? Just learn a little a time. \n\nI recommend the book \"Pro Git\". The first 4-5 chapters are enough to use git in real world (e.g., workplace) projects.\n\nAlso, learn about \"git-flow\", and use it as a crutch to make git easier at first. It's a workflow you can read about online, and there are a set of scripts you can install that implement it. After a while you will start to use git without git-flow and abandon the git flow scripts, but probably keep the workflow concepts. This is what I did. \n\nEDIT: [Here](http://nvie.com/posts/a-successful-git-branching-model/) is the description of git-flow that I initially found useful. I haven't read it since, so I'm not sure what my take on it would be at this point. But the graphics are better than what you get on the Atlassian site, which is the first google result when you google \"git-flow\". ","aSentId": 30200,"answer": "I have no idea how git is considered easier when you have to jump through a lot more hoops for every change. \n \nI'm used to SVN, where once I'm done with the changes I simply add the files and commit. Then they're in the server. One step. \n\nWith Git I have to add, commit, then push, but hey, it for some insane reason didn't detect the changes in files that were already added, so I have to re-add them (?), but then the other dev never pulls, so when he pushes, there are lots of incompatibility issues because for some reason git doesn't check this simple and important detail.\n\nAlso, I guess I'll never understand how a \"local repository\" that forces you to do every operation twice is different from a folder.\n\nFinally, for something so used by so many developers, I have yet to find a simple git interface. It's always either git's CLI or some clusterfuck like Atlassian's Sourcetree.\n\nSorry about the rant. I guess it's pretty negative, but I'm working with git right now and it frustrates me immensely, and I just wish I could move over to SVN where whatever I want to do is done in under a minute rather than 30.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 30201,"question": "I have no idea how git is considered easier when you have to jump through a lot more hoops for every change. \n \nI'm used to SVN, where once I'm done with the changes I simply add the files and commit. Then they're in the server. One step. \n\nWith Git I have to add, commit, then push, but hey, it for some insane reason didn't detect the changes in files that were already added, so I have to re-add them (?), but then the other dev never pulls, so when he pushes, there are lots of incompatibility issues because for some reason git doesn't check this simple and important detail.\n\nAlso, I guess I'll never understand how a \"local repository\" that forces you to do every operation twice is different from a folder.\n\nFinally, for something so used by so many developers, I have yet to find a simple git interface. It's always either git's CLI or some clusterfuck like Atlassian's Sourcetree.\n\nSorry about the rant. I guess it's pretty negative, but I'm working with git right now and it frustrates me immensely, and I just wish I could move over to SVN where whatever I want to do is done in under a minute rather than 30.","aSentId": 30202,"answer": "&gt; With Git I have to add, commit, then push, but hey, it for some insane reason didn't detect the changes in files that were already added, so I have to re-add them\n\nJust do \"commit -a\" if you want to skip that step. The staging area (the reason you need to \"re-add\") is not really needed for simple tasks. But it becomes super useful if you ever want to do something complicated, like split one giant commit into smaller logical commits.\n\n&gt; but then the other dev never pulls, so when he pushes, there are lots of incompatibility issues because for some reason git doesn't check this simple and important detail.\n\nThis is the equivalent of doing \"svn commit\" before getting latest with \"svn up\". In other words.. it won't let you do that. Not sure what happened when that guy did it.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 30201,"question": "I have no idea how git is considered easier when you have to jump through a lot more hoops for every change. \n \nI'm used to SVN, where once I'm done with the changes I simply add the files and commit. Then they're in the server. One step. \n\nWith Git I have to add, commit, then push, but hey, it for some insane reason didn't detect the changes in files that were already added, so I have to re-add them (?), but then the other dev never pulls, so when he pushes, there are lots of incompatibility issues because for some reason git doesn't check this simple and important detail.\n\nAlso, I guess I'll never understand how a \"local repository\" that forces you to do every operation twice is different from a folder.\n\nFinally, for something so used by so many developers, I have yet to find a simple git interface. It's always either git's CLI or some clusterfuck like Atlassian's Sourcetree.\n\nSorry about the rant. I guess it's pretty negative, but I'm working with git right now and it frustrates me immensely, and I just wish I could move over to SVN where whatever I want to do is done in under a minute rather than 30.","aSentId": 30204,"answer": "I feel the opposite, and hate using svn now. I got my team interested in git, we agreed to read the first four chapters of Pro Git, even one of the team members was in his first year out of school, and had and easy time switching and loves it way more than svn.\n\nThe thing I love about git is branching and merging. I also used mercurial for about a year before learning git, and I liked it much better than svn, also because of easy branching and merging that *just worked*. I never ha e to worry about annoying .svn folders, doing \"svn clean\" all the time. And renaming or moving files was always annoying with svn. \n\nI think Joel Spoelskis post about dvcs/Git summarizes pretty well why people like it.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 30201,"question": "I have no idea how git is considered easier when you have to jump through a lot more hoops for every change. \n \nI'm used to SVN, where once I'm done with the changes I simply add the files and commit. Then they're in the server. One step. \n\nWith Git I have to add, commit, then push, but hey, it for some insane reason didn't detect the changes in files that were already added, so I have to re-add them (?), but then the other dev never pulls, so when he pushes, there are lots of incompatibility issues because for some reason git doesn't check this simple and important detail.\n\nAlso, I guess I'll never understand how a \"local repository\" that forces you to do every operation twice is different from a folder.\n\nFinally, for something so used by so many developers, I have yet to find a simple git interface. It's always either git's CLI or some clusterfuck like Atlassian's Sourcetree.\n\nSorry about the rant. I guess it's pretty negative, but I'm working with git right now and it frustrates me immensely, and I just wish I could move over to SVN where whatever I want to do is done in under a minute rather than 30.","aSentId": 30206,"answer": "You can \"add\" and \"commit\" with a single command: \"git commit -a\"","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 30193,"question": "The problem is that you're giving up. You have to have the mindset that you will do something you set out to accomplish, and that giving up is not an option. Why give up? It's definitely not because it's not possible. Because you find it hard? So what? Just learn a little a time. \n\nI recommend the book \"Pro Git\". The first 4-5 chapters are enough to use git in real world (e.g., workplace) projects.\n\nAlso, learn about \"git-flow\", and use it as a crutch to make git easier at first. It's a workflow you can read about online, and there are a set of scripts you can install that implement it. After a while you will start to use git without git-flow and abandon the git flow scripts, but probably keep the workflow concepts. This is what I did. \n\nEDIT: [Here](http://nvie.com/posts/a-successful-git-branching-model/) is the description of git-flow that I initially found useful. I haven't read it since, so I'm not sure what my take on it would be at this point. But the graphics are better than what you get on the Atlassian site, which is the first google result when you google \"git-flow\". ","aSentId": 30209,"answer": "Forgive me, but CHAPTERS? I had a 3-hour presentation about Mercurial, a cheatsheet with 10 commands and I was ready. I did my own research for an hour and learned about queues and I was ready. On the other hand, I've been using git for a couple of months now (I tried it before, too) and I still don't dare go beyond commit/push/pull and whenever I run into a problem (be it the first time or the tenth), I read several forums, I find several solutions and I read them repeatedly and then I do some more searches to make sure that I'm doing the right thing and eventually I end up with some cryptic command that happens to work and I will never understand how.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 30210,"question": "Forgive me, but CHAPTERS? I had a 3-hour presentation about Mercurial, a cheatsheet with 10 commands and I was ready. I did my own research for an hour and learned about queues and I was ready. On the other hand, I've been using git for a couple of months now (I tried it before, too) and I still don't dare go beyond commit/push/pull and whenever I run into a problem (be it the first time or the tenth), I read several forums, I find several solutions and I read them repeatedly and then I do some more searches to make sure that I'm doing the right thing and eventually I end up with some cryptic command that happens to work and I will never understand how.","aSentId": 30211,"answer": "I never found mercurial queues to be intuitive. I liked mercurial when I used it, before I learned git. I still think Hg is good but prefer git now. \n\nThe chapters aren't that long. If you like mercurial I don't see much reason to hate on git, they are more similar than different. ","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 30191,"question": "Is there any good resource out there for learning to use git?  I've tried about 4 times, and always say \"fuck it\" and go back to using subversion.","aSentId": 30213,"answer": "Do you have a solid CS background? The article [git for computer scientists](http://eagain.net/articles/git-for-computer-scientists/) made it all finally click for me. The key I was missing is that a git repo -- or even the collection of instances of the same git repo on multiple people's machines -- is just a directed acyclic graph. And git commands manipulate that graph.\n\nOnce I understood that, I *instantly* knew how to do fairly fancy things such as merging previously separate repositories.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 30191,"question": "Is there any good resource out there for learning to use git?  I've tried about 4 times, and always say \"fuck it\" and go back to using subversion.","aSentId": 30215,"answer": "Because there's not much to learn honestly. \n\nI find it easier than subversion. At least, the workflow easier anyway. It's pretty simple to make a branch do your thing then merge the branch with the trunk. It only takes like 4 commands to do all of that.\n\nEDIT: Ok, you said resource not reason. Sorry.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 30216,"question": "Because there's not much to learn honestly. \n\nI find it easier than subversion. At least, the workflow easier anyway. It's pretty simple to make a branch do your thing then merge the branch with the trunk. It only takes like 4 commands to do all of that.\n\nEDIT: Ok, you said resource not reason. Sorry.","aSentId": 30217,"answer": "I think most of the difficulty is trying to do tasks that are \"optional\" (ie, not needed for ideal usage of the program, but you will need at some time). For example, how do I stop git from making my scripts non-executable? Fortunately, there's absolutely no reason to remember (learn) these kinds of things. Just google when you need them. I still haven't memorized the syntax to restore a single file from an older commit, but I know where to find the command when I need it.\n\nPretty much all you need to memorize is:\n\n1. Cloning (getting a new repo from the internet)\n2. Checkout (switching branches)\n3. Pulling (getting changes from remote repo)\n4. Pushing (adding your changes to the remote repo)\n5. Diffing (viewing changes you've made, or changes between commits, branches, etc)\n6. Checking the status (to see which files are changed, etc)\n7. Adding (staging files to commit)\n8. Commiting (creating a revision with staged files)\n9. Branching (creating a new branch)\n\nMy advice when going from SVN to git is to FORGET EVERYTHING ABOUT SVN! If you try and apply existing knowledge about SVN to git, it will bite you in the ass. So don't assume that because you're competent with SVN that you know anything about git. This will stop misconceptions from hindering your learning.\n\nAs for a resource, [the official tutorial is great](http://git-scm.com/docs/gittutorial). They also have a [well written book](http://git-scm.com/book/en/v2) for when you need more details.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 30218,"question": "I think most of the difficulty is trying to do tasks that are \"optional\" (ie, not needed for ideal usage of the program, but you will need at some time). For example, how do I stop git from making my scripts non-executable? Fortunately, there's absolutely no reason to remember (learn) these kinds of things. Just google when you need them. I still haven't memorized the syntax to restore a single file from an older commit, but I know where to find the command when I need it.\n\nPretty much all you need to memorize is:\n\n1. Cloning (getting a new repo from the internet)\n2. Checkout (switching branches)\n3. Pulling (getting changes from remote repo)\n4. Pushing (adding your changes to the remote repo)\n5. Diffing (viewing changes you've made, or changes between commits, branches, etc)\n6. Checking the status (to see which files are changed, etc)\n7. Adding (staging files to commit)\n8. Commiting (creating a revision with staged files)\n9. Branching (creating a new branch)\n\nMy advice when going from SVN to git is to FORGET EVERYTHING ABOUT SVN! If you try and apply existing knowledge about SVN to git, it will bite you in the ass. So don't assume that because you're competent with SVN that you know anything about git. This will stop misconceptions from hindering your learning.\n\nAs for a resource, [the official tutorial is great](http://git-scm.com/docs/gittutorial). They also have a [well written book](http://git-scm.com/book/en/v2) for when you need more details.","aSentId": 30219,"answer": "    \n&gt; \n&gt; My advice when going from SVN to git is to FORGET EVERYTHING ABOUT SVN! \n\nGuess that is why I never managed to understand git\n\nBut I am too lazy to learn it and just use Mercurial","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 30220,"question": "    \n&gt; \n&gt; My advice when going from SVN to git is to FORGET EVERYTHING ABOUT SVN! \n\nGuess that is why I never managed to understand git\n\nBut I am too lazy to learn it and just use Mercurial","aSentId": 30221,"answer": "Git is very similar to mercurial! (At least from my perspective).","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 30220,"question": "    \n&gt; \n&gt; My advice when going from SVN to git is to FORGET EVERYTHING ABOUT SVN! \n\nGuess that is why I never managed to understand git\n\nBut I am too lazy to learn it and just use Mercurial","aSentId": 30223,"answer": "Mercurial's a perfectly good choice, and is very similar to git and has most of the same advantages git does over older tools like svn.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 30218,"question": "I think most of the difficulty is trying to do tasks that are \"optional\" (ie, not needed for ideal usage of the program, but you will need at some time). For example, how do I stop git from making my scripts non-executable? Fortunately, there's absolutely no reason to remember (learn) these kinds of things. Just google when you need them. I still haven't memorized the syntax to restore a single file from an older commit, but I know where to find the command when I need it.\n\nPretty much all you need to memorize is:\n\n1. Cloning (getting a new repo from the internet)\n2. Checkout (switching branches)\n3. Pulling (getting changes from remote repo)\n4. Pushing (adding your changes to the remote repo)\n5. Diffing (viewing changes you've made, or changes between commits, branches, etc)\n6. Checking the status (to see which files are changed, etc)\n7. Adding (staging files to commit)\n8. Commiting (creating a revision with staged files)\n9. Branching (creating a new branch)\n\nMy advice when going from SVN to git is to FORGET EVERYTHING ABOUT SVN! If you try and apply existing knowledge about SVN to git, it will bite you in the ass. So don't assume that because you're competent with SVN that you know anything about git. This will stop misconceptions from hindering your learning.\n\nAs for a resource, [the official tutorial is great](http://git-scm.com/docs/gittutorial). They also have a [well written book](http://git-scm.com/book/en/v2) for when you need more details.","aSentId": 30225,"answer": "To be fair SVN and git are literally the same thing.  Different implementations, but they do the same thing.  If you understand conceptually how one works, you can probably figure out the other pretty easily by doing some reading on it.\n\nI use SVN at work, but recently started using git for personal projects.  It took me about a week to get used to git, but only to learn what commands I needed to use and when - basically I had to learn what to use that is the equivalent to the SVN command.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 30226,"question": "To be fair SVN and git are literally the same thing.  Different implementations, but they do the same thing.  If you understand conceptually how one works, you can probably figure out the other pretty easily by doing some reading on it.\n\nI use SVN at work, but recently started using git for personal projects.  It took me about a week to get used to git, but only to learn what commands I needed to use and when - basically I had to learn what to use that is the equivalent to the SVN command.","aSentId": 30227,"answer": "They're very different actually. Most svn users that move to git make this mistake at the beginning and end up using git the same way they used svn. When you understand how easy and powerful branching and merging is in git, you'll never want to go back to svn.\n\nI would literally refuse to use svn for any new project. If someone I worked with forced me to (for a new project, so there being no legacy reason to use it) and I couldn't convince them otherwise, I would start looking for a new job. You simply can't have as good a workflow in svn as you can in git, and being forced to use something inferior would drive me mad.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 30216,"question": "Because there's not much to learn honestly. \n\nI find it easier than subversion. At least, the workflow easier anyway. It's pretty simple to make a branch do your thing then merge the branch with the trunk. It only takes like 4 commands to do all of that.\n\nEDIT: Ok, you said resource not reason. Sorry.","aSentId": 30229,"answer": "&gt;  It's pretty simple to make a branch do your thing then merge the branch with the trunk. \n\nWhy would you want that? Then you only get a mess of far too many branches","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 30230,"question": "&gt;  It's pretty simple to make a branch do your thing then merge the branch with the trunk. \n\nWhy would you want that? Then you only get a mess of far too many branches","aSentId": 30231,"answer": "    git checkout -b cool_feature    \n\nmake some changes\n\n    git add -A\n    git commit -m \"I made some changes\"\n\nrepeat until feature is done.\n\n    git checkout master\n    git merge cool_feature\n    git push origin master\n\nYou don't have to push the branch, it just makes it simple to work separately on a feature.\n","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 30232,"question": "    git checkout -b cool_feature    \n\nmake some changes\n\n    git add -A\n    git commit -m \"I made some changes\"\n\nrepeat until feature is done.\n\n    git checkout master\n    git merge cool_feature\n    git push origin master\n\nYou don't have to push the branch, it just makes it simple to work separately on a feature.\n","aSentId": 30233,"answer": "    git branch -d cool_feature","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 30234,"question": "    git branch -d cool_feature","aSentId": 30235,"answer": "If you don't want to collect dead branches, sure.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 30236,"question": "If you don't want to collect dead branches, sure.","aSentId": 30237,"answer": "I just did that for /u/sirin3's sake.\n\n&gt; Why would you want that? Then you only get a mess of far too many branches","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 30238,"question": "I just did that for /u/sirin3's sake.\n\n&gt; Why would you want that? Then you only get a mess of far too many branches","aSentId": 30239,"answer": "I also think /u/sirin3 is not very familiar with git workflow.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 30236,"question": "If you don't want to collect dead branches, sure.","aSentId": 30241,"answer": "git branch -d local_branch after you merged it.\n\nNo more dead branch","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 30242,"question": "git branch -d local_branch after you merged it.\n\nNo more dead branch","aSentId": 30243,"answer": "Which is the joke. ","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 30230,"question": "&gt;  It's pretty simple to make a branch do your thing then merge the branch with the trunk. \n\nWhy would you want that? Then you only get a mess of far too many branches","aSentId": 30245,"answer": "Where I work, literally every line of code is written on branches. Each feature has a branch. Nobody ever commits directly to master. We only merge tested code that had passed code review into master. Works brilliantly. Merge conflicts are very rare and you get to use version control, committing every step of the way even for half finished pieces of work.\n\nThe thought of only committing finished, working code into version control sounds horrible...","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 30230,"question": "&gt;  It's pretty simple to make a branch do your thing then merge the branch with the trunk. \n\nWhy would you want that? Then you only get a mess of far too many branches","aSentId": 30247,"answer": "That has to be the worst argument against branching I've heard yet. \n\nIt's trivial to prune old branches, and if they've been deleted upstream you can even do it in one command.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 30250,"question": "Just try mercurial instead. Much friendlier to svn brains, with all the decentralisation you could want.","aSentId": 30251,"answer": "I've heard this suggestion before, but my motivation to learn git is so I can use and contribute to projects on github, and potentially use it for my own projects if it offers me any benefits (which people are telling me it does).  ","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 30252,"question": "I've heard this suggestion before, but my motivation to learn git is so I can use and contribute to projects on github, and potentially use it for my own projects if it offers me any benefits (which people are telling me it does).  ","aSentId": 30253,"answer": "Both Mercurial and Git have adequate bridges for each other, and are conceptually so similar that it really makes little difference in the end. But I started with Mercurial, and now firmly believe both that Git's model is saner and that Mercurial's UI mostly isn't any better than Git's.\n\nI also believe DVCS to be strictly superior to CVCS for *most* things but there are issues inherent to DVCS that lead to problem areas. Undiffable files are a prime example, so, for instance, artists, would not likely benefit from DVCS at all. But for source control, DVCS do everything Subversion does, only better and faster.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 30252,"question": "I've heard this suggestion before, but my motivation to learn git is so I can use and contribute to projects on github, and potentially use it for my own projects if it offers me any benefits (which people are telling me it does).  ","aSentId": 30255,"answer": "I started with Mercurial before learning Git and I felt like Mercurial was an easy transition from SVN while still giving me a good grasp on the concepts needed to understand Git. http://hginit.com/ is a really good place to understand Mercurial. Maybe even just reading through that and then learning Git would be enough to get you there?","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 30252,"question": "I've heard this suggestion before, but my motivation to learn git is so I can use and contribute to projects on github, and potentially use it for my own projects if it offers me any benefits (which people are telling me it does).  ","aSentId": 30257,"answer": "There are two big things to adjust to when switching from svn to git.\n\nThe first is the decentralized model.  You should learn Mercurial because the command set it uses is *way way more sane* when coming from svn.  Learning Mercurial will help you get comfortable with the distributed workflow with a relatively low barrier to entry from svn.\n\nThe second is git's command set.  It's schizophrenic and a good number of the commands have names that are unexpected given what they do and what many other tools call the same operation.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 30250,"question": "Just try mercurial instead. Much friendlier to svn brains, with all the decentralisation you could want.","aSentId": 30260,"answer": "You should definitely still learn how to use git regardless, considering that's what everybody else uses.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 30261,"question": "You should definitely still learn how to use git regardless, considering that's what everybody else uses.","aSentId": 30262,"answer": "Actually, I pretty much only work on my own projects, so I get to live in this little bubble where my tools actually are made to work for me.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 30263,"question": "Actually, I pretty much only work on my own projects, so I get to live in this little bubble where my tools actually are made to work for me.","aSentId": 30264,"answer": "I don't think you could avoid ever running into a time where you need to use git to work on a project, unless you literally never work with other people or work on an existing project.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 30265,"question": "I don't think you could avoid ever running into a time where you need to use git to work on a project, unless you literally never work with other people or work on an existing project.","aSentId": 30266,"answer": "To be fair, the bridges between the two are pretty good these days.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 30265,"question": "I don't think you could avoid ever running into a time where you need to use git to work on a project, unless you literally never work with other people or work on an existing project.","aSentId": 30268,"answer": "Plenty of instances of people needing to write little scripts or mini-programs that only they'll ever see nowadays, especially in non-CS STEM fields.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 30272,"question": "People still use subversion??","aSentId": 30273,"answer": "Dude, we still use CVS for some of our stuff.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 30274,"question": "Dude, we still use CVS for some of our stuff.","aSentId": 30275,"answer": "I use RCS on one project.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 30276,"question": "I use RCS on one project.","aSentId": 30277,"answer": "I just have boxes full of punched tape.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 30278,"question": "I just have boxes full of punched tape.","aSentId": 30279,"answer": "Reverting code must be a bitch to do.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 30272,"question": "People still use subversion??","aSentId": 30281,"answer": "A lot of companies also use it. Or some hybrid of git/svn.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 30272,"question": "People still use subversion??","aSentId": 30283,"answer": "We're still using SourceSafe :(","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 30284,"question": "We're still using SourceSafe :(","aSentId": 30285,"answer": "Here, have a pity upvote. I feel ya.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 30287,"question": "Universities still teach subversion.","aSentId": 30288,"answer": "Mine teaches Git.\n\nEspecially so now that Visual Studio can use git instead of TFS.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 30289,"question": "Mine teaches Git.\n\nEspecially so now that Visual Studio can use git instead of TFS.","aSentId": 30290,"answer": "Last year there was a push to use git instead, but the guy behind it is no longer co-ordinating the relevant courses so it's back to subversion.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 30289,"question": "Mine teaches Git.\n\nEspecially so now that Visual Studio can use git instead of TFS.","aSentId": 30292,"answer": "Even TFS can use git.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 30293,"question": "Even TFS can use git.","aSentId": 30294,"answer": "Didn't know that, I assumed TFS was its own VCS entity entirely.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 30295,"question": "Didn't know that, I assumed TFS was its own VCS entity entirely.","aSentId": 30296,"answer": "Until recently, TFS was TFVC. Last year they added Git support to TFS a la how Bitbucket and GitHub support alternative formats. I *believe* the formats are incompatible.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 30295,"question": "Didn't know that, I assumed TFS was its own VCS entity entirely.","aSentId": 30298,"answer": "You're thinking about TFCV. You can use TFS with either Git or TFVC nowadays.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 30299,"question": "You're thinking about TFCV. You can use TFS with either Git or TFVC nowadays.","aSentId": 30300,"answer": "Which explains Team Explorer in VS supporting git. It seems I'm mixing up my terms and acronyms. Thanks for clearing up the difference.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 30287,"question": "Universities still teach subversion.","aSentId": 30302,"answer": "That doesn't mean it's relevant. I was taught Occam Pi, I've never even heard of it outside university","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 30287,"question": "Universities still teach subversion.","aSentId": 30304,"answer": "Thankfully not mine.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 30308,"question": "Can we stop talking about tech like it's fashion?\n\n(I use git   BTW, but that's irrelevant)","aSentId": 30309,"answer": "You think tech doesn't have fashions? That it's not subject to cyclical and sometimes arbitrary trends?","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 30308,"question": "Can we stop talking about tech like it's fashion?\n\n(I use git   BTW, but that's irrelevant)","aSentId": 30311,"answer": "To be fair, tech does go \"out of style\", typically when developers come to conclude that some tech is worse than its competitors and there's a significant number of programmers using the new tech. It helps when there's so many tools to convert SVN repos to git.\n\nIn the case of SVN, my experience with it has made me conclude that it's inferior in workflow and usage to technologies like git and mercurial. Note, however, that the fact that git is newer has nothing to do with SVN going \"out of fashion\". ","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 30308,"question": "Can we stop talking about tech like it's fashion?\n\n(I use git   BTW, but that's irrelevant)","aSentId": 30313,"answer": "This sentiment becomes popular every 12 years or so.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 30315,"question": "SVN has a more sane merging story.\nGit creates a commit for every merge, even if the file was changed by only one person.\nI understand the philosophy behind this, but at the bottom line, it clutters the log.\n\nRebase is not a solution, but yet the beginning of another problem.\n\nSvn lacks a local repo, which is a huge plus on the git side, but other than that it's a decent SC tool.\n\n(I'll still use Git, though :))","aSentId": 30316,"answer": "&gt; Git creates a commit for every merge\n\nBy default, Git doesn't do this. It prefers to fast-forward whenever possible, and if it isn't possible, you can rebase to make it possible.\n\nI prefer to make all my commits fast-forwardable, and then to force merge-commits for feature branches.\n\n&gt; at the bottom line, it clutters the log.\n\n    git log --no-merges\n\n&gt; [SVN]'s a decent SC tool.\n\nIt is! If you won't invest the time in *learning* Git, you will be better off just using Subversion, and if you *need* CVCS functionality, Git will fight you.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 30315,"question": "SVN has a more sane merging story.\nGit creates a commit for every merge, even if the file was changed by only one person.\nI understand the philosophy behind this, but at the bottom line, it clutters the log.\n\nRebase is not a solution, but yet the beginning of another problem.\n\nSvn lacks a local repo, which is a huge plus on the git side, but other than that it's a decent SC tool.\n\n(I'll still use Git, though :))","aSentId": 30318,"answer": "If you just need an uncluttered log in this case, use `git log --no-merges`. `--topo-order` is sometimes useful as well.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 30315,"question": "SVN has a more sane merging story.\nGit creates a commit for every merge, even if the file was changed by only one person.\nI understand the philosophy behind this, but at the bottom line, it clutters the log.\n\nRebase is not a solution, but yet the beginning of another problem.\n\nSvn lacks a local repo, which is a huge plus on the git side, but other than that it's a decent SC tool.\n\n(I'll still use Git, though :))","aSentId": 30320,"answer": "Rebase is perfect if you use the github model of forks and pull requests where upstream master is sacred.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 30332,"question": "Is it possible to use \"push to deploy\"  feature to keep master branch synced across all developers locally? \n\n","aSentId": 30333,"answer": "But... this would be horrible. Would you want your working directory be overwritten by someone else?\n\nPushing to the developer's repositories works (also in earlier Git versions), e.g. over SSH, but it would be tedious to set up. It is usually much better to have the developers fetch from some designated master repository and merge/rebase on a regular basis.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 30334,"question": "But... this would be horrible. Would you want your working directory be overwritten by someone else?\n\nPushing to the developer's repositories works (also in earlier Git versions), e.g. over SSH, but it would be tedious to set up. It is usually much better to have the developers fetch from some designated master repository and merge/rebase on a regular basis.","aSentId": 30335,"answer": "I think the idea is that doing work in local branches rather than master would be agreed upon and that people wouldn't have to pull master when they want to merge its changes to theirs. I'm not sure this setup would save much work except in the case of very forgetful developers.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 30336,"question": "I think the idea is that doing work in local branches rather than master would be agreed upon and that people wouldn't have to pull master when they want to merge its changes to theirs. I'm not sure this setup would save much work except in the case of very forgetful developers.","aSentId": 30337,"answer": "But git will actually complain if you then attempt to push code that isn't beyond origin HEAD\n\nSo there's no way to forget unless you always do force push (and why are you doing that)","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 30334,"question": "But... this would be horrible. Would you want your working directory be overwritten by someone else?\n\nPushing to the developer's repositories works (also in earlier Git versions), e.g. over SSH, but it would be tedious to set up. It is usually much better to have the developers fetch from some designated master repository and merge/rebase on a regular basis.","aSentId": 30339,"answer": "I don't have too much experience with git, but this seems to be how git is designed to be used. Your local and remote are supposed to be synced at your command, allowing you to keep an autonomous workspace until you decide to synchronize the two together. This appears to be unlike P4 or TFS in my experience, which will let you know right away if something is different locally.\n\nThe way I see it, is version control like p4 and TFS encourage a \"keep your local synced as soon as remote changes\" while git has a more flexible \"keep local synced with remote when you feel appropriate\". Both have their ups and downs.\n\nPlease correct me if I'm wrong. Unfortunately my experience with version control overall is not extensive.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 30340,"question": "I don't have too much experience with git, but this seems to be how git is designed to be used. Your local and remote are supposed to be synced at your command, allowing you to keep an autonomous workspace until you decide to synchronize the two together. This appears to be unlike P4 or TFS in my experience, which will let you know right away if something is different locally.\n\nThe way I see it, is version control like p4 and TFS encourage a \"keep your local synced as soon as remote changes\" while git has a more flexible \"keep local synced with remote when you feel appropriate\". Both have their ups and downs.\n\nPlease correct me if I'm wrong. Unfortunately my experience with version control overall is not extensive.","aSentId": 30341,"answer": "P4 and TFS only give you the illusion of being up to date.  If you can't connect to the server then you won't get updates.  Git is designed for this to be the main use case.\n\nAnd you still need to checkout and merge changes in p4 etc.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 30334,"question": "But... this would be horrible. Would you want your working directory be overwritten by someone else?\n\nPushing to the developer's repositories works (also in earlier Git versions), e.g. over SSH, but it would be tedious to set up. It is usually much better to have the developers fetch from some designated master repository and merge/rebase on a regular basis.","aSentId": 30343,"answer": "It overwrites only if there are no local changes. Why wouldn't you have your working directory as up-to-date as possible before you begin changing stuff?","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 30344,"question": "It overwrites only if there are no local changes. Why wouldn't you have your working directory as up-to-date as possible before you begin changing stuff?","aSentId": 30345,"answer": "A sane merge later is much easier than code changing under you.  On no I made some changes and it doesn't compile....better check if something was pushed to my machine.  That would be awful.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 30332,"question": "Is it possible to use \"push to deploy\"  feature to keep master branch synced across all developers locally? \n\n","aSentId": 30347,"answer": "This question clearly indicates, that you clearly miss the point of a distributed VCS. \n\nA better fitting question would be: \"How do my developers get notified on any updates of a remote repository?\"","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 30332,"question": "Is it possible to use \"push to deploy\"  feature to keep master branch synced across all developers locally? \n\n","aSentId": 30349,"answer": "As I read it, it will fail if there are local changes. \n\nSo probably not.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 30351,"question": "Sounds like an idea only someone who's really not used to working with git would find useful. ","aSentId": 30352,"answer": "So explain why instead of being condescending. It's insane that a legitimate question, though misguided, is downvoted and a backhanded comment like yours is not.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 30353,"question": "So explain why instead of being condescending. It's insane that a legitimate question, though misguided, is downvoted and a backhanded comment like yours is not.","aSentId": 30354,"answer": "Look I tried for 10 minutes to explain why it's pointless but to be honest, it makes so little sense that I simply can't. Keeping the \"master branch synced across all developers locally\" makes no sense. I can't even imagine how that could be of any use to anyone. No developer is going to have the master branch checked out, except maybe very briefly before creating a new branch, and then what would be the point of having it magically update itself without warning? ","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 30355,"question": "Look I tried for 10 minutes to explain why it's pointless but to be honest, it makes so little sense that I simply can't. Keeping the \"master branch synced across all developers locally\" makes no sense. I can't even imagine how that could be of any use to anyone. No developer is going to have the master branch checked out, except maybe very briefly before creating a new branch, and then what would be the point of having it magically update itself without warning? ","aSentId": 30356,"answer": "Imagine this scenario:\n\nThere is a woodworking club where everyone gets together and talks about stuff they make out of wood. One day a new guy comes to a club meeting and asks, \"I just bought a table saw -- is it possible for me to use my saw to cut sheet metal on my saw in addition to wood?\"\n\nTo a member of the woodworking club, and experienced carpenter, this is a question that makes absolutely no sense. A saw is used for wood only, you'll ruin the blade, it's dangerous, etc. There are condescending ways to address this question like:\n\n\"Sounds like something someone not used to using a table saw would cut with a table saw.\"\n\nThen you'd chuckle to your friends about how much you know about woodworking and what an idiot this guy is for asking such a silly question.\n\nBut if you're actually interested in helping someone at your club you'd respond in a completely different way:\n\n\"Oh gosh, you should really only be using your saw to cut wood. Cutting metal is dangerous and may cause damage to your saw. If you need to cut sheet metal you should probably get yourself tin-snips or a sheer, which are good tools to have anyway.\"\n\nThe tone is completely different and shows empathy for someone obviously new to something.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 30357,"question": "Imagine this scenario:\n\nThere is a woodworking club where everyone gets together and talks about stuff they make out of wood. One day a new guy comes to a club meeting and asks, \"I just bought a table saw -- is it possible for me to use my saw to cut sheet metal on my saw in addition to wood?\"\n\nTo a member of the woodworking club, and experienced carpenter, this is a question that makes absolutely no sense. A saw is used for wood only, you'll ruin the blade, it's dangerous, etc. There are condescending ways to address this question like:\n\n\"Sounds like something someone not used to using a table saw would cut with a table saw.\"\n\nThen you'd chuckle to your friends about how much you know about woodworking and what an idiot this guy is for asking such a silly question.\n\nBut if you're actually interested in helping someone at your club you'd respond in a completely different way:\n\n\"Oh gosh, you should really only be using your saw to cut wood. Cutting metal is dangerous and may cause damage to your saw. If you need to cut sheet metal you should probably get yourself tin-snips or a sheer, which are good tools to have anyway.\"\n\nThe tone is completely different and shows empathy for someone obviously new to something.","aSentId": 30358,"answer": "&gt; \"I just bought a table saw -- is it possible for me to use my saw to cut sheet metal on my saw in addition to wood?\"\n\nHere's a better analogy: \n\n\"I just bought a table saw -- is it possible for me to use my saw to watch television upside down while brushing my teeth?\" \n\n","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 30359,"question": "&gt; \"I just bought a table saw -- is it possible for me to use my saw to cut sheet metal on my saw in addition to wood?\"\n\nHere's a better analogy: \n\n\"I just bought a table saw -- is it possible for me to use my saw to watch television upside down while brushing my teeth?\" \n\n","aSentId": 30360,"answer": "We get it man, you're being a dick.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 30366,"question": "Git should use semver like v2.3.0 because semver is web standard like npm modules and semver is known for web scale ready certified. \n\nWithout semver, there's no way to force mac osx fullstack css developers into git. Already many are moving to bitbucket because bitbucket is hipster and semver.","aSentId": 30367,"answer": "Someone should make a text generator that creates statements like this.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 30368,"question": "Someone should make a text generator that creates statements like this.","aSentId": 30369,"answer": "Unrelated question, what do you think of volt?","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 30366,"question": "Git should use semver like v2.3.0 because semver is web standard like npm modules and semver is known for web scale ready certified. \n\nWithout semver, there's no way to force mac osx fullstack css developers into git. Already many are moving to bitbucket because bitbucket is hipster and semver.","aSentId": 30371,"answer": "What is funny is that semver\u2122 is actually just a codification of existing versioning practice that dates back to the seventies. Heralding semver\u2122 as the best thing since sliced bread is just idiotic. It's neither new nor revloutionary. It's just that people don't know.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 30374,"question": "Are static typing and functional programming winning?","aSentId": 30375,"answer": "I would say more deterministic/predictable patterns are winning. More upfront contracts. Fewer side affect styles of coding (e.g. functional.) I think as these languages are used for larger projects, such things evolve. ","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 30374,"question": "Are static typing and functional programming winning?","aSentId": 30377,"answer": "I think that functional programming is being integrated into many languages/libraries, but don't think that it will replace OOP. Rather, both will be available as aspects of the same languages. Domains that are naturally stateful, such as UI and games, will continue to be best modelled by OOP. \n\nIn terms of types, I am hoping that we will prefer stronger type systems rather than weaker ones, and it does look like languages are moving in that direction. I personally think that's a good thing.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 30378,"question": "I think that functional programming is being integrated into many languages/libraries, but don't think that it will replace OOP. Rather, both will be available as aspects of the same languages. Domains that are naturally stateful, such as UI and games, will continue to be best modelled by OOP. \n\nIn terms of types, I am hoping that we will prefer stronger type systems rather than weaker ones, and it does look like languages are moving in that direction. I personally think that's a good thing.","aSentId": 30379,"answer": "UI is much better represented by immutable state IMO. Look at how well it works with React. Immutable allows you to determine if anything changed very cheaply (just a pointer comparison).","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 30380,"question": "UI is much better represented by immutable state IMO. Look at how well it works with React. Immutable allows you to determine if anything changed very cheaply (just a pointer comparison).","aSentId": 30381,"answer": "I haven't looked into react much yet and I'm not sure when I'll get to that.... but if I have a slider, say, how am I to think about it? For me, the easiest way to think about it (not necessarily the easiest way to code it), is that I have some persistent slider object with a changing value. ","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 30382,"question": "I haven't looked into react much yet and I'm not sure when I'll get to that.... but if I have a slider, say, how am I to think about it? For me, the easiest way to think about it (not necessarily the easiest way to code it), is that I have some persistent slider object with a changing value. ","aSentId": 30383,"answer": "Functional programming supports time-varying values in a paradigm called FRP (Functional Reactive Programming).\n\nIn FRP, there's two kinds of values: behaviors and events. Behaviors can be seen as functions from time to a value (so the current time will be able to mean something different from one second ago). Events are discrete, so they can be seen as a map of a point in time to a value.\n\nThey are not actually implemented like that, but it's a useful abstraction.\n\nSo, imagine that you have a variable that is increased every time a button is pressed, and decreased every time another button is pressed. Let's say those events already exist in the program, and they're called `upEvent` and `downEvent`.\n\nHow to represent the behavior we want?\n\n    foo = accumB 0 $ union (const (+1) &lt;$&gt; upEvent) (const (flip (-)  1) &lt;$&gt; downEvent) \n\nWhat does that mean? Well, we started by mapping `upEvent` to a function (`(+1)`). Every time `upEvent` happens, it's like the function is \"emitted\". The same is true for `downEvent`. We also fuse those two streams into a single one with `union`. Now we have a event that can be accumulated on our behavior. We accumulate it with the starting value of 0.\n\nThis may seen strange at first, but now imagine that you can represent your whole DOM as a behavior. Your DOM is a single, time-varying value, and the entirety of its description is on its declaration. No need to search for changes scattered throughout the code. \n\nThat's FRP. \n\nIf you don't understand Haskell-speak, a ECMAScript version:\n\n    var foo = accumB(0, union(upEvent.map(a =&gt; x =&gt; x+1), downEvent.map(a =&gt; x =&gt; x-1)));","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 30382,"question": "I haven't looked into react much yet and I'm not sure when I'll get to that.... but if I have a slider, say, how am I to think about it? For me, the easiest way to think about it (not necessarily the easiest way to code it), is that I have some persistent slider object with a changing value. ","aSentId": 30385,"answer": "Think of React like an html template that gets re-rendered every time your state changes. You pass in state to the render function and you get html back as the output. Immutable state makes it trivially easy to determine if something changed and you need to re-render (just compare pointer equality). It also makes things like undo/redo simple, because you can just keep a stack of states, pop, and re-render to undo. You no longer have to worry about UI state transitions, because you just re-render when something changes, which massively simplifies your code.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 30386,"question": "Think of React like an html template that gets re-rendered every time your state changes. You pass in state to the render function and you get html back as the output. Immutable state makes it trivially easy to determine if something changed and you need to re-render (just compare pointer equality). It also makes things like undo/redo simple, because you can just keep a stack of states, pop, and re-render to undo. You no longer have to worry about UI state transitions, because you just re-render when something changes, which massively simplifies your code.","aSentId": 30387,"answer": "&gt; Think of React like an html template that gets re-rendered every time your state changes.\n\n*vomit* this is why we can't have nice things.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 30388,"question": "&gt; Think of React like an html template that gets re-rendered every time your state changes.\n\n*vomit* this is why we can't have nice things.","aSentId": 30389,"answer": "care to explain?","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 30390,"question": "care to explain?","aSentId": 30391,"answer": "We have hyper-fast processors, web connections and graphics card, and still websites like facebook lag like hell (for instance, I can't even go on facebook on a G4 iMac with 512megabytes of RAM) because of all this bloat and the end of the pursuit of performance.\n\nEvery website &amp; non-professionnal desktop app on earth should run in the hundreds of FPS'es on the smallest ARM chip, but this will never be possible if everybody says \"oh, nice, no state and reload everything at each change!\"","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 30392,"question": "We have hyper-fast processors, web connections and graphics card, and still websites like facebook lag like hell (for instance, I can't even go on facebook on a G4 iMac with 512megabytes of RAM) because of all this bloat and the end of the pursuit of performance.\n\nEvery website &amp; non-professionnal desktop app on earth should run in the hundreds of FPS'es on the smallest ARM chip, but this will never be possible if everybody says \"oh, nice, no state and reload everything at each change!\"","aSentId": 30393,"answer": "&gt; oh, nice, no state and reload everything at each change\n\nThat's only what happens conceptually for the developer. The developer can code as if the entire thing is re-rendered any time state changes, but the actual implementation is optimized.\n\nSpecifically React adds an intermediate render step called the virtual dom. The virtual dom is not actually rendered out as pixels, but rather it's just an object graph and is quick to create. \n\nAfter the virtual dom is rendered a resolution algorithm compares the new virtual dom to the old virtual dom and only updates what changed in the actual DOM in the most efficient manner.\n\nSo in the example of a slider, you move the mouse, which causes a state update, which causes the slider to be re-rendered to virtual dom. The resolution algorithm then updates the real dom with only what changed. This is probably only a style.x or style.left representing the x coordinates of the slider button, which results in a single call to `document.getElementById(id).style.x = newX`.\n\nThis method is very quick compared to most other dom data-binding techniques.\n\nImmutable data improves things further because fast change detection by pointer comparison allows you to skip entire branches of the virtual dom tree in both the virtual dom render step and the resolution diff step.\n\nReact + immutable data is performant and yet also remains very simple with a small api surface for developers to reason about. It is quite elegant.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 30394,"question": "&gt; oh, nice, no state and reload everything at each change\n\nThat's only what happens conceptually for the developer. The developer can code as if the entire thing is re-rendered any time state changes, but the actual implementation is optimized.\n\nSpecifically React adds an intermediate render step called the virtual dom. The virtual dom is not actually rendered out as pixels, but rather it's just an object graph and is quick to create. \n\nAfter the virtual dom is rendered a resolution algorithm compares the new virtual dom to the old virtual dom and only updates what changed in the actual DOM in the most efficient manner.\n\nSo in the example of a slider, you move the mouse, which causes a state update, which causes the slider to be re-rendered to virtual dom. The resolution algorithm then updates the real dom with only what changed. This is probably only a style.x or style.left representing the x coordinates of the slider button, which results in a single call to `document.getElementById(id).style.x = newX`.\n\nThis method is very quick compared to most other dom data-binding techniques.\n\nImmutable data improves things further because fast change detection by pointer comparison allows you to skip entire branches of the virtual dom tree in both the virtual dom render step and the resolution diff step.\n\nReact + immutable data is performant and yet also remains very simple with a small api surface for developers to reason about. It is quite elegant.","aSentId": 30395,"answer": "The other cool thing is that the resolution step is pluggable, so it's possible to use React with other UI frameworks beyond DOM by writing new resolution code, which is how ReactNative works for iOS and Android. I see this is a being a major shift for all UI development, not just browsers.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 30378,"question": "I think that functional programming is being integrated into many languages/libraries, but don't think that it will replace OOP. Rather, both will be available as aspects of the same languages. Domains that are naturally stateful, such as UI and games, will continue to be best modelled by OOP. \n\nIn terms of types, I am hoping that we will prefer stronger type systems rather than weaker ones, and it does look like languages are moving in that direction. I personally think that's a good thing.","aSentId": 30397,"answer": "&gt; Domains that are naturally stateful, \n\n\"Natural\" is a funny word. FP isn't so much about eliminating state as it is about eliminating *destructive* updates of state.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 30398,"question": "&gt; Domains that are naturally stateful, \n\n\"Natural\" is a funny word. FP isn't so much about eliminating state as it is about eliminating *destructive* updates of state.","aSentId": 30399,"answer": "Here's what I mean by \"natural.\" As far as I know, in functional programming, lists are usually immutable, whereas in OOP, for the most part, lists are mutable by default.\n\nNow tell me, honestly, how a REAL list works. When I write down a list on a piece of paper, it is mutable (I can add and cross out entries). So, in a sense the most realistic model of a list is mutable. In a game, you might have a long list of objects whose position, velocity, etc. must be updated at every frame. Does it make sense to replace these objects at every frame, or should they maintain state?\n\nI would contrast this with things like the solving of math problems (the domain prototypical to functional programming), in which statelessness makes more sense to me.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 30400,"question": "Here's what I mean by \"natural.\" As far as I know, in functional programming, lists are usually immutable, whereas in OOP, for the most part, lists are mutable by default.\n\nNow tell me, honestly, how a REAL list works. When I write down a list on a piece of paper, it is mutable (I can add and cross out entries). So, in a sense the most realistic model of a list is mutable. In a game, you might have a long list of objects whose position, velocity, etc. must be updated at every frame. Does it make sense to replace these objects at every frame, or should they maintain state?\n\nI would contrast this with things like the solving of math problems (the domain prototypical to functional programming), in which statelessness makes more sense to me.","aSentId": 30401,"answer": "The computer only updates those things in the list that have changed. The whole list is not literally copied to a new piece of memory.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 30400,"question": "Here's what I mean by \"natural.\" As far as I know, in functional programming, lists are usually immutable, whereas in OOP, for the most part, lists are mutable by default.\n\nNow tell me, honestly, how a REAL list works. When I write down a list on a piece of paper, it is mutable (I can add and cross out entries). So, in a sense the most realistic model of a list is mutable. In a game, you might have a long list of objects whose position, velocity, etc. must be updated at every frame. Does it make sense to replace these objects at every frame, or should they maintain state?\n\nI would contrast this with things like the solving of math problems (the domain prototypical to functional programming), in which statelessness makes more sense to me.","aSentId": 30403,"answer": "&gt; Now tell me, honestly, how a REAL list works. When I write down a list on a piece of paper, it is mutable (I can add and cross out entries). So, in a sense the most realistic model of a list is mutable. \n\nLists are abstract entities to begin with. This feels like asking me to write a triangle on a piece of paper: is this a real triangle? Or is \"triangle\" still more of an abstract concept? A list is about as abstract as a regular number is.\n\nDoes the list feel more real because you can use your eraser on it, and pencil in new entries?\n\nHere's another way to look at it, which might seem too try-hard: Making the list immutable captures the time dimension. We live in a 4D universe, right? So another way of looking at your doodling of the list is that each *state* of the list is captured in some snapshot in time. So the value of the list at time `x` is stored at that time in the past, the value of the list at time `x+1` is also stored in the past, etc. Admittedly, now we are in \"unnatural\" territory, since this isn't the most obvious way of looking at such a drawing. :)\n\n&gt; In a game, you might have a long list of objects whose position, velocity, etc. must be updated at every frame. Does it make sense to replace these objects at every frame, or should they maintain state?\n\nIt could. Aside from whether it is simpler and easier to do that, what if you want to look at the game's state as a long chain of snapshot, as in it having it's history preserved in memory? Then it makes sense to model the game with immutability. This could also be used in debugging, as they do with Elm's time travelling debugger.\n\n&gt; I would contrast this with things like the solving of math problems (the domain prototypical to functional programming), in which statelessness makes more sense to me.\n\nAlgorithms and computational problems are math problems to begin with. Or at least that's their origin. I guess math problems don't tend to have that *time* dimension to them, and an imperative approach might be a more natural (though not necessarily *better*) way to approach problems which can be viewed as happening through a sequence of steps, time, and so on.\n\n\n","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 30404,"question": "&gt; Now tell me, honestly, how a REAL list works. When I write down a list on a piece of paper, it is mutable (I can add and cross out entries). So, in a sense the most realistic model of a list is mutable. \n\nLists are abstract entities to begin with. This feels like asking me to write a triangle on a piece of paper: is this a real triangle? Or is \"triangle\" still more of an abstract concept? A list is about as abstract as a regular number is.\n\nDoes the list feel more real because you can use your eraser on it, and pencil in new entries?\n\nHere's another way to look at it, which might seem too try-hard: Making the list immutable captures the time dimension. We live in a 4D universe, right? So another way of looking at your doodling of the list is that each *state* of the list is captured in some snapshot in time. So the value of the list at time `x` is stored at that time in the past, the value of the list at time `x+1` is also stored in the past, etc. Admittedly, now we are in \"unnatural\" territory, since this isn't the most obvious way of looking at such a drawing. :)\n\n&gt; In a game, you might have a long list of objects whose position, velocity, etc. must be updated at every frame. Does it make sense to replace these objects at every frame, or should they maintain state?\n\nIt could. Aside from whether it is simpler and easier to do that, what if you want to look at the game's state as a long chain of snapshot, as in it having it's history preserved in memory? Then it makes sense to model the game with immutability. This could also be used in debugging, as they do with Elm's time travelling debugger.\n\n&gt; I would contrast this with things like the solving of math problems (the domain prototypical to functional programming), in which statelessness makes more sense to me.\n\nAlgorithms and computational problems are math problems to begin with. Or at least that's their origin. I guess math problems don't tend to have that *time* dimension to them, and an imperative approach might be a more natural (though not necessarily *better*) way to approach problems which can be viewed as happening through a sequence of steps, time, and so on.\n\n\n","aSentId": 30405,"answer": "&gt; Aside from whether it is simpler and easier to do that, what if you want to look at the game's state as a long chain of snapshot, as in it having it's history preserved in memory?\n\nSo this is why the best they could do with Haskell on android was a 5fps breakout clone ?","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 30406,"question": "&gt; Aside from whether it is simpler and easier to do that, what if you want to look at the game's state as a long chain of snapshot, as in it having it's history preserved in memory?\n\nSo this is why the best they could do with Haskell on android was a 5fps breakout clone ?","aSentId": 30407,"answer": "I don't know anything about that. The topic was which way was more natural to model the problem, not what is more performant.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 30400,"question": "Here's what I mean by \"natural.\" As far as I know, in functional programming, lists are usually immutable, whereas in OOP, for the most part, lists are mutable by default.\n\nNow tell me, honestly, how a REAL list works. When I write down a list on a piece of paper, it is mutable (I can add and cross out entries). So, in a sense the most realistic model of a list is mutable. In a game, you might have a long list of objects whose position, velocity, etc. must be updated at every frame. Does it make sense to replace these objects at every frame, or should they maintain state?\n\nI would contrast this with things like the solving of math problems (the domain prototypical to functional programming), in which statelessness makes more sense to me.","aSentId": 30409,"answer": "&gt; Now tell me, honestly, how a REAL list works. When I write down a list on a piece of paper, it is mutable (I can add and cross out entries). So, in a sense the most realistic model of a list is mutable.  \n  \nDepends on how you look at it, when you add/scratch something out on the paper, is it really the *same* list? What if you think about the list itself as being the *given marks on the paper at a particular point in **time***?  \n  \n... which actually proves the point, because while someone *can* conceive of lists that way, will *most people* do so, *without being guided thru it*? And you seem to run into a lot of these kinds of mental gymnastics when working with FP (*cough cough* monads). \n  \nEDIT: formatting","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 30411,"question": "A 'real' list is defined by the pure operations cons, head, and tail with the element '[]'. Anything other than that is either built with those operations, or moving away from a real list. What you describe is an array/vector, not a list.\n\nIf you want a 'mutable' list the tool functional programmers typically reach for is a zipper which is made of two lists and a focus element. You can 'change' the element under focus in constant time without needing any notion of mutability.","aSentId": 30412,"answer": "No. By real I mean lists in the sense prior to the invention of the computer. ","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 30413,"question": "No. By real I mean lists in the sense prior to the invention of the computer. ","aSentId": 30414,"answer": "You write \"A, B, C\" on a list of paper and we call it \"list1\".  You then add \", D\" on the piece of paper.  The concept of \"list1\" still exists in our mind, so if you had really modified the list, we would remember list1 as \"A, B, C, D\".  What you did instead was create a new version of a list at a different point in time.  ","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 30415,"question": "You write \"A, B, C\" on a list of paper and we call it \"list1\".  You then add \", D\" on the piece of paper.  The concept of \"list1\" still exists in our mind, so if you had really modified the list, we would remember list1 as \"A, B, C, D\".  What you did instead was create a new version of a list at a different point in time.  ","aSentId": 30416,"answer": "nobody thinks like this, except for some programmers :)","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 30417,"question": "nobody thinks like this, except for some programmers :)","aSentId": 30418,"answer": "Any programmer using version control thinks like that: the current file in your directory is simply the result of a bunch of state changes that you can inspect, go back to, etc.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 30417,"question": "nobody thinks like this, except for some programmers :)","aSentId": 30420,"answer": "Langrangian mechanics and derivative formulations in physics is similar to this. Its actually a very useful approach to problem solving.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 30413,"question": "No. By real I mean lists in the sense prior to the invention of the computer. ","aSentId": 30422,"answer": "Then a real list works however we individually define it to which is a confusing concept for the purposes of discussion. The concept of a list is formally defined to alleviate that problem. What you describe is an array which most functional languages support without necessarily needing explicit mutability.\n","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 30423,"question": "Then a real list works however we individually define it to which is a confusing concept for the purposes of discussion. The concept of a list is formally defined to alleviate that problem. What you describe is an array which most functional languages support without necessarily needing explicit mutability.\n","aSentId": 30424,"answer": "I'm discussing the problem of modeling the world. The concept \"List\" has a relatively fixed meaning, which one can find in the dictionary. This meaning is prior to the cs meanings. ","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 30413,"question": "No. By real I mean lists in the sense prior to the invention of the computer. ","aSentId": 30426,"answer": "LOL we're programming computers. The modeling capabilities are endless. And you decide to model sequential data after an IRL PAPER LIST?\n\nL O L","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 30378,"question": "I think that functional programming is being integrated into many languages/libraries, but don't think that it will replace OOP. Rather, both will be available as aspects of the same languages. Domains that are naturally stateful, such as UI and games, will continue to be best modelled by OOP. \n\nIn terms of types, I am hoping that we will prefer stronger type systems rather than weaker ones, and it does look like languages are moving in that direction. I personally think that's a good thing.","aSentId": 30428,"answer": "From what you're describing it sounds like you think Scala is the future. ","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 30374,"question": "Are static typing and functional programming winning?","aSentId": 30431,"answer": "Type inference, data-structure pattern matching syntax, and by-default immutability won. Not all functional programming languages have all of these features, and static typing is only implied by the first.\n\nTo contrast, lazy evaluation is a niche at most (Haskell); self-modifying runtime environments didn't catch on for AI (Lisp); data constraints beyond tagged unions are uncommon (Ada, Eiffel); and no-one writes formal proofs alongside their code in a machine-verifiable way (some research languages, e.g. the late BitC).","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 30432,"question": "Type inference, data-structure pattern matching syntax, and by-default immutability won. Not all functional programming languages have all of these features, and static typing is only implied by the first.\n\nTo contrast, lazy evaluation is a niche at most (Haskell); self-modifying runtime environments didn't catch on for AI (Lisp); data constraints beyond tagged unions are uncommon (Ada, Eiffel); and no-one writes formal proofs alongside their code in a machine-verifiable way (some research languages, e.g. the late BitC).","aSentId": 30433,"answer": "The last one is kind of a shame","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 30434,"question": "The last one is kind of a shame","aSentId": 30435,"answer": "Work is still continuing in this space. Look at Idris and Agda.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 30434,"question": "The last one is kind of a shame","aSentId": 30437,"answer": "the last one is so common in functional programming that I once saw a lecture where the instructor made a joke about it","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 30438,"question": "the last one is so common in functional programming that I once saw a lecture where the instructor made a joke about it","aSentId": 30439,"answer": "By \"the last one\" are you meaning \"by-default immutability\"? Because I think jint8686 is referring to \"the late BitC\".","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 30441,"question": "Static has steadily but irresistibly been conquering the language space these past years. It's become much better at gaining features that used to be the monopoly of dynamically typed languages than the other way around. The way things go, I don't see dynamically typed languages stay around for much use except very niche cases.\n\nThe case for functional programming is much less clear cut.\n\nFirst of all because nobody can agree on what functional programming is:\n\n- Functions as first class objects\n- Closures/lambdas\n- Immutability\n- Side effects captured in the type system\n- Composition\n- Functors/Applicatives/Monads\n\nAsk any amateur/seasoned/veteran so-called functional programmers and they will all have a different definition. Go tell a Haskell programmer that Javascript is a functional languages because functions are first class objects and she'll laugh in your face.\n\nIt's clear that OO languages have been adopting features that used to be present exclusively in FP languages, such as fold/maps/closures/etc... but besides that, the concepts I listed above haven't made much inroad and, to be honest, are often downright impractical for every day programming.\n\n","aSentId": 30442,"answer": "&gt; what functional programming is:\n\nI believe functional programming is ultimately all about expressions compared to imperative programming which is about statements. As a result of being about expressions, the features such as functions being first class objects and closures/lambdas allow you to create and use functions in expressions as well as pass them around to other expressions. Everything else is just trying to restrict the definition because they might have interesting properties, but aren't exactly what functional programming is.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 30443,"question": "&gt; what functional programming is:\n\nI believe functional programming is ultimately all about expressions compared to imperative programming which is about statements. As a result of being about expressions, the features such as functions being first class objects and closures/lambdas allow you to create and use functions in expressions as well as pass them around to other expressions. Everything else is just trying to restrict the definition because they might have interesting properties, but aren't exactly what functional programming is.","aSentId": 30444,"answer": "I was thinking of it as functions as the primary control flow. And lambdas are just a way to make that easier ","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 30441,"question": "Static has steadily but irresistibly been conquering the language space these past years. It's become much better at gaining features that used to be the monopoly of dynamically typed languages than the other way around. The way things go, I don't see dynamically typed languages stay around for much use except very niche cases.\n\nThe case for functional programming is much less clear cut.\n\nFirst of all because nobody can agree on what functional programming is:\n\n- Functions as first class objects\n- Closures/lambdas\n- Immutability\n- Side effects captured in the type system\n- Composition\n- Functors/Applicatives/Monads\n\nAsk any amateur/seasoned/veteran so-called functional programmers and they will all have a different definition. Go tell a Haskell programmer that Javascript is a functional languages because functions are first class objects and she'll laugh in your face.\n\nIt's clear that OO languages have been adopting features that used to be present exclusively in FP languages, such as fold/maps/closures/etc... but besides that, the concepts I listed above haven't made much inroad and, to be honest, are often downright impractical for every day programming.\n\n","aSentId": 30446,"answer": "That's like saying C++ is not object-oriented... Can't it just be a sliding scale of being functional or object-oriented?","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 30447,"question": "That's like saying C++ is not object-oriented... Can't it just be a sliding scale of being functional or object-oriented?","aSentId": 30448,"answer": "No, because the two are orthogonal. ","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 30441,"question": "Static has steadily but irresistibly been conquering the language space these past years. It's become much better at gaining features that used to be the monopoly of dynamically typed languages than the other way around. The way things go, I don't see dynamically typed languages stay around for much use except very niche cases.\n\nThe case for functional programming is much less clear cut.\n\nFirst of all because nobody can agree on what functional programming is:\n\n- Functions as first class objects\n- Closures/lambdas\n- Immutability\n- Side effects captured in the type system\n- Composition\n- Functors/Applicatives/Monads\n\nAsk any amateur/seasoned/veteran so-called functional programmers and they will all have a different definition. Go tell a Haskell programmer that Javascript is a functional languages because functions are first class objects and she'll laugh in your face.\n\nIt's clear that OO languages have been adopting features that used to be present exclusively in FP languages, such as fold/maps/closures/etc... but besides that, the concepts I listed above haven't made much inroad and, to be honest, are often downright impractical for every day programming.\n\n","aSentId": 30450,"answer": "Functional programming has a formal meaning. Programming with referentially transparent, first class functions. Anything else is just a help. \n\nNow, what OOP is? How is JavaScript's OOP in anyway similar to Java's? What about OCaml? And Common Lisp? Rust? GObject? Smalltalk? ","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 30451,"question": "Functional programming has a formal meaning. Programming with referentially transparent, first class functions. Anything else is just a help. \n\nNow, what OOP is? How is JavaScript's OOP in anyway similar to Java's? What about OCaml? And Common Lisp? Rust? GObject? Smalltalk? ","aSentId": 30452,"answer": "OOP compares to FP like English compares to math. FP has a formal meaning because it is based on a formal concept, whereas OOP is mostly based on concepts from natural language (talking abbout objects with nouns and verbs). ","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 30453,"question": "OOP compares to FP like English compares to math. FP has a formal meaning because it is based on a formal concept, whereas OOP is mostly based on concepts from natural language (talking abbout objects with nouns and verbs). ","aSentId": 30454,"answer": "Look, I know this claim is often repeated (sometimes by people who should know better) but the fact is that it's simply nonsense on stilts. \n\nThe formal meaning of \"object oriented\" has been defined for about 25 years. A language is object-oriented if it has abstract data types with _subtype polymorphism_. There are plenty of formal (mathematical) treatments of subtype polymorphism in the literature, going back more than two decades.\n\nIf you actually bother to pay attention to the literature on type systems, you'll find that OO has been _extensively_ studied using much the same mathematical tools that have been used to study \"functional\" programming languages.\n\nEDIT: FTR, I consider so-called \"structural\" polymorphism to be just a flavor of subtype polymorphism. If you don't accept that characterization, then you can replace \"subtype polymorphism\" above with \"subtype or structural polymorphism\". I certainly don't mean to exclude languages like OCaml.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 30455,"question": "Look, I know this claim is often repeated (sometimes by people who should know better) but the fact is that it's simply nonsense on stilts. \n\nThe formal meaning of \"object oriented\" has been defined for about 25 years. A language is object-oriented if it has abstract data types with _subtype polymorphism_. There are plenty of formal (mathematical) treatments of subtype polymorphism in the literature, going back more than two decades.\n\nIf you actually bother to pay attention to the literature on type systems, you'll find that OO has been _extensively_ studied using much the same mathematical tools that have been used to study \"functional\" programming languages.\n\nEDIT: FTR, I consider so-called \"structural\" polymorphism to be just a flavor of subtype polymorphism. If you don't accept that characterization, then you can replace \"subtype polymorphism\" above with \"subtype or structural polymorphism\". I certainly don't mean to exclude languages like OCaml.","aSentId": 30456,"answer": "&gt; A language is object-oriented if it has abstract data types with subtype polymorphism\n\nMaybe in academia, but not practically. You're saying inheritance is a defining feature of OO? Practically, it's just a supporting part. I'd say it's more about organization - information hiding, defining types and interactions. ","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 30457,"question": "&gt; A language is object-oriented if it has abstract data types with subtype polymorphism\n\nMaybe in academia, but not practically. You're saying inheritance is a defining feature of OO? Practically, it's just a supporting part. I'd say it's more about organization - information hiding, defining types and interactions. ","aSentId": 30458,"answer": "&gt; You're saying inheritance is a defining feature of OO?\n\nNope. I _definitely_ did not say that. You can have subtype polymorphism without (implementation) inheritance. For example, systems with structural typing don't necessarily need to have inheritance. But they still have a notion of one type being a subtype of a second type.\n\n&gt; I'd say it's more about organization - information hiding, defining types and interactions.\n\nWell that might be what the word means to you personally, but it's not really a very satisfactory definition, because:\n\n1. it's not a _formal_ definition, which is what the poster above was asking for, and \n2. it doesn't help identify which programming languages support object-oriented programming and which don't.\n\nFor example, there are languages commonly considered OO that don't really support information hiding. Likewise, there are languages that are _not_ commonly considered OO that _do_. So I don't see how information hiding can really be a useful part of the definition.\n\nAnd it seems to me that whatever you might mean by \"interactions\" would suffer the same problem: namely that you would have a problem formalizing how objects \"interact\" differently than ordinary functions. If a method of a class invokes a method of another object, how on earth is that at all different to a nested function of a function calling a function reference in a language like ML? It's the exact same thing, AFAICT.\n\n    class Foo(Bar bar) {\n        function foo() {\n            return bar.bar(\"black sheep\");\n        }\n    }\n\nvs.\n\n    function foo(String(String) bar) {\n        function foo() {\n            return bar(\"black sheep\");\n        }\n    }\n\nThese two code examples seem to exhibit the exact same kind of \"interaction\", no?\n\nOTOH, if you look around at which languages are commonly considered \"object-oriented\", you will see that they _all_ support some form of subtype polymorphism. Meanwhile, if you look at the languages that _aren't_ considered \"object-oriented\", you will notice that they _don't_ have subtypes.\n\nTherefore, the definition I gave above is the most useful one because:\n\n0. it's very _simple_,\n1. it is a definition that is easily formalized, and\n2. it correctly identifies exactly _which_ languages are commonly considered \"object-oriented\" by programmers.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 30455,"question": "Look, I know this claim is often repeated (sometimes by people who should know better) but the fact is that it's simply nonsense on stilts. \n\nThe formal meaning of \"object oriented\" has been defined for about 25 years. A language is object-oriented if it has abstract data types with _subtype polymorphism_. There are plenty of formal (mathematical) treatments of subtype polymorphism in the literature, going back more than two decades.\n\nIf you actually bother to pay attention to the literature on type systems, you'll find that OO has been _extensively_ studied using much the same mathematical tools that have been used to study \"functional\" programming languages.\n\nEDIT: FTR, I consider so-called \"structural\" polymorphism to be just a flavor of subtype polymorphism. If you don't accept that characterization, then you can replace \"subtype polymorphism\" above with \"subtype or structural polymorphism\". I certainly don't mean to exclude languages like OCaml.","aSentId": 30460,"answer": "So Haskell is object oriented because it has type classes. ","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 30461,"question": "So Haskell is object oriented because it has type classes. ","aSentId": 30462,"answer": "Well, sure, to the extent that you consider type classes to count as a kind of subtype polymorphism. But yeah, type classes indeed let you do some very OO-like stuff.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 30463,"question": "Well, sure, to the extent that you consider type classes to count as a kind of subtype polymorphism. But yeah, type classes indeed let you do some very OO-like stuff.","aSentId": 30464,"answer": "Well, your definition makes sense for almost every language that is considered OO, except Smalltalk, which is actually about the actor model. ","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 30465,"question": "Well, your definition makes sense for almost every language that is considered OO, except Smalltalk, which is actually about the actor model. ","aSentId": 30466,"answer": "I don't understand. Surely you would agree that Smalltalk has subtype polymorphism?","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 30467,"question": "I don't understand. Surely you would agree that Smalltalk has subtype polymorphism?","aSentId": 30468,"answer": "Yeah, I guess you're right. \n\nWhat about OCaml? Its object system has nothing to do with its structural subtyping. In fact, a subclass may not be a subtype, and a subtype may not be a subclass! ","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 30469,"question": "Yeah, I guess you're right. \n\nWhat about OCaml? Its object system has nothing to do with its structural subtyping. In fact, a subclass may not be a subtype, and a subtype may not be a subclass! ","aSentId": 30470,"answer": "I'm not an expert on OCaml, and so my characterization of it might not be quite right. I've seen it described it as structural subtyping + row polymorphism. So, if I'm understanding correctly, it just means that the subtyping relationship is separate from the (implementation) inheritance relationship. But it still features a sort of subtype polymorphism.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 30471,"question": "I'm not an expert on OCaml, and so my characterization of it might not be quite right. I've seen it described it as structural subtyping + row polymorphism. So, if I'm understanding correctly, it just means that the subtyping relationship is separate from the (implementation) inheritance relationship. But it still features a sort of subtype polymorphism.","aSentId": 30472,"answer": "My point is that its subtype polymorphism (in the form of its structural type system) has nothing to do with its object system, or the other way around.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 30473,"question": "My point is that its subtype polymorphism (in the form of its structural type system) has nothing to do with its object system, or the other way around.","aSentId": 30474,"answer": "Well I mean lots of of languages have a way of defining some kind of \"object\" (structs, records, tuples, or whatever) without that amounting to something that most people would describe as fully \"object-oriented\". It's only once you introduce late binding somewhere that the label really fits.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 30461,"question": "So Haskell is object oriented because it has type classes. ","aSentId": 30476,"answer": "Haskell type classes are *very* different from traditional OO classes. I think making OO analogies makes it harder to understand what they are about.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 30477,"question": "Haskell type classes are *very* different from traditional OO classes. I think making OO analogies makes it harder to understand what they are about.","aSentId": 30478,"answer": "I know, I'm only following his reasoning that OO is about subtype polymorphism.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 30451,"question": "Functional programming has a formal meaning. Programming with referentially transparent, first class functions. Anything else is just a help. \n\nNow, what OOP is? How is JavaScript's OOP in anyway similar to Java's? What about OCaml? And Common Lisp? Rust? GObject? Smalltalk? ","aSentId": 30480,"answer": "&gt; a formal meaning\n\nThis just means that someone once came up with a definition that they liked.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 30481,"question": "&gt; a formal meaning\n\nThis just means that someone once came up with a definition that they liked.","aSentId": 30482,"answer": "No it doesn't; otherwise every definition for anything would be a \"formal meaning\", which certainly isn't the case.\n\n    for\u00b7mal\n    \u02c8f\u00f4rm\u0259l/\n    adjective\n    adjective: formal\n        1.\n        done in accordance with rules of convention or etiquette; suitable for or constituting an official or important situation or occasion.\n        2.\n        officially sanctioned or recognized.\n\nThat being said, functional programming tends to be recognized as a set of multiple principles rather than one binary flag that says something is or isn't a functional language.\n\nYou could consider Javascript to be functional because of its first-class functions and closures/lambdas; same for Python and numerous other languages.\n\nIf you look at something like Rust however, it goes further with immutability by default, so in this case you consider it to be *more functional* of a language. These also tend to be considered \"functional languages\" because their intention from the start is to be functional, whereas that's not the case for Javascript or Python.\n\nAnother thing that people seem to get wrong is the idea that OOP and FP are incompatible, that if a language is one then it absolutely cannot be the other. Scala on its own is living proof of that.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 30483,"question": "No it doesn't; otherwise every definition for anything would be a \"formal meaning\", which certainly isn't the case.\n\n    for\u00b7mal\n    \u02c8f\u00f4rm\u0259l/\n    adjective\n    adjective: formal\n        1.\n        done in accordance with rules of convention or etiquette; suitable for or constituting an official or important situation or occasion.\n        2.\n        officially sanctioned or recognized.\n\nThat being said, functional programming tends to be recognized as a set of multiple principles rather than one binary flag that says something is or isn't a functional language.\n\nYou could consider Javascript to be functional because of its first-class functions and closures/lambdas; same for Python and numerous other languages.\n\nIf you look at something like Rust however, it goes further with immutability by default, so in this case you consider it to be *more functional* of a language. These also tend to be considered \"functional languages\" because their intention from the start is to be functional, whereas that's not the case for Javascript or Python.\n\nAnother thing that people seem to get wrong is the idea that OOP and FP are incompatible, that if a language is one then it absolutely cannot be the other. Scala on its own is living proof of that.","aSentId": 30484,"answer": "People often miss the point about what being functional means. If you don't break referential transparency in JavaScript, you're definitely doing functional programming. That doesn't mean JavaScript is a purely functional language, it means it supports a functional style of programming. \n\nAnother thing is that, contrary to popular belief, immutability is NOT essential. The important thing, again, is referential transparency. In Haskell, lazy values are MODIFIED when they are evaluated. A mutation happens! But Haskell is still pure because even with this mutation, a function will respect equational reasoning. ","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 30485,"question": "People often miss the point about what being functional means. If you don't break referential transparency in JavaScript, you're definitely doing functional programming. That doesn't mean JavaScript is a purely functional language, it means it supports a functional style of programming. \n\nAnother thing is that, contrary to popular belief, immutability is NOT essential. The important thing, again, is referential transparency. In Haskell, lazy values are MODIFIED when they are evaluated. A mutation happens! But Haskell is still pure because even with this mutation, a function will respect equational reasoning. ","aSentId": 30486,"answer": "&gt; In Haskell, lazy values are MODIFIED when they are evaluated. A mutation happens! \n\nI think people mean \"immutable from the point of view of the programmer\".","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 30487,"question": "&gt; In Haskell, lazy values are MODIFIED when they are evaluated. A mutation happens! \n\nI think people mean \"immutable from the point of view of the programmer\".","aSentId": 30488,"answer": "Which means that it respects equational reasoning. ","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 30489,"question": "Which means that it respects equational reasoning. ","aSentId": 30490,"answer": "Sure.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 30493,"question": "I think inheritance, mutable state, and impure functions are rapidly falling out of favor, but I suspect we'll soon see a surge in oo systems incorporating these concepts without requiring retraining coders to use pure functional languages.","aSentId": 30494,"answer": "Exactly this. :-)","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 30498,"question": "Good summary of trends.\n\nIt's not just static typing that is interesting to big companies though. Big companies like Google want to be able to target languages as compilation targets. So they can continue to mostly use the tools they already have and just have a different build depending on the need.\n\nAlso the web is everything in terms of incentive for these changes. The way that the browsers make UI work ends up influencing every other language out there, for example. So UI nowadays is as complex as the browsers demand them to be. Today I tried a Google service that checked a URL for mobile compatibility. On the web, nothing ever seems to be enough. And with plugins being made obsolete, the web itself needs to change so it can absorb what the plugins used to make possible. And that is on top of all the kinds of standards that one needs to be watchful of on the web.\n\nSomething that applies to most developers is the idea of using templates when doing UI work nowadays. Programming languages that used to include most things that one needed in just a small UI library are seen as almost like dinosaurs, as most of us have to rely on frameworks of several layers spanning both server and client side to get the same thing done.\n\nAlthough programming languages may appear to be improving, the architecture of applications may still be getting more complicated and new kinds of devices continue to get created and everything ends up connected on the internet.\n\nProgramming languages that work well for small teams of developers may not scale well for companies that have hundreds to thousands of developers all working on about the same thing at the same time. As programming languages appear to be evolving, they still need to work for all of those developers at the same time. Which means that they had better cater to the average developer, rather than to the 1% at some field. :-)\n\nAll of the slack can be picked up by newcomers still using outdated technologies.","aSentId": 30499,"answer": "Implementing apps over the web was fucking stupid idea. \n\nhtml/css/javascript can go to hell.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 30500,"question": "Implementing apps over the web was fucking stupid idea. \n\nhtml/css/javascript can go to hell.","aSentId": 30501,"answer": "that ship has sailed a long time ago I'm afraid","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 30500,"question": "Implementing apps over the web was fucking stupid idea. \n\nhtml/css/javascript can go to hell.","aSentId": 30503,"answer": "I want to add to that an underestimated pain: the web browser can go to hell as well. To enable apps over the web, the web browser has started emulating features traditionally associated with an operating system. We're just re-experiencing the problems of personal computing in the late '80s, but now in the web browser. Disgusting.\n\nWithout web apps, we could let the web browser do a web browsers job and the operating system do an operating systems job.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 30500,"question": "Implementing apps over the web was fucking stupid idea. \n\nhtml/css/javascript can go to hell.","aSentId": 30505,"answer": "How come? Whenever something tells me download an app I am very hesitant to do so unless I know I really want it. But various in browser calculators and the like I use all the time with ease.\n\nWhat is so bad about in browser apps?","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 30507,"question": "Some quick comments on the examples listed in the article:  \n  \n**Static Typing:**  \n&gt; 1. Ruby: Matz announced that Ruby 3.0 may have type annotations.  \n&gt; 2. Python: Guido van Rossum sent out a proposal to add type annotations to Python.  \n  \nIf you follow the links there, you will see Matz &amp; Guido both explicitly state they are going for something which is NOT static typing. They want to try to get some of the benefits of static typing without losing the dynamic nature of the languages.  \n  \n**Functional Programming:**  \n&gt; 1. Java: version 8 added lambdas, functional interfaces (i.e. functions, almost), method references (i.e. first class functions, almost), and the stream API.  \n&gt; 2. C++: version 11 and version 14 added support for functional programming features.  \n  \nThe additions in Java 8 are streamlining things you have been able to do for years, and which for there were (and are) several popular 3rd party libs available. The C++ situation seems to be similar.  \n  \nEDIT: quoted my own words, fixed\n","aSentId": 30508,"answer": "&gt;  functional interfaces (i.e. functions, almost), method references (i.e. first class functions, almost)\n\nWhat makes these not first-class? I get that they're not nearly as nice as they should be, but they do seem \"complete\".","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 30509,"question": "&gt;  functional interfaces (i.e. functions, almost), method references (i.e. first class functions, almost)\n\nWhat makes these not first-class? I get that they're not nearly as nice as they should be, but they do seem \"complete\".","aSentId": 30510,"answer": "The way Java has always implemented this type of functionality is with a pattern called *functors*. Functors are basically light weight objects, usually with very little state/member-data; and a single method that serves as the procedure body.  \n  \nExample:  \n\n    class AddFunctor {  \n        public int call(int a, int b) { return a + b ; }  \n    }\n  \nWhen you store a reference to a method in Java, you actually need to wrap a functor around the procedure, and store the functor. This isn't 'first class', because to then invoke the method, you need to retreive the functor and invoke it's call method. This point is emphasized because the way Java syntax works requires the invocation of the functor call to be written as functor.call(...), not simply functor(...).  \n  \nNB: I don't really agree that use of the above pattern disqualifies functions in a given language from being '1st class', although regarding Java (due to backwards compatibility issues) there are enough limitations/exceptions that I think the opinion is largely justified.\n  \nEDIT: formatting. Reddit markdown is stupid.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 30511,"question": "The way Java has always implemented this type of functionality is with a pattern called *functors*. Functors are basically light weight objects, usually with very little state/member-data; and a single method that serves as the procedure body.  \n  \nExample:  \n\n    class AddFunctor {  \n        public int call(int a, int b) { return a + b ; }  \n    }\n  \nWhen you store a reference to a method in Java, you actually need to wrap a functor around the procedure, and store the functor. This isn't 'first class', because to then invoke the method, you need to retreive the functor and invoke it's call method. This point is emphasized because the way Java syntax works requires the invocation of the functor call to be written as functor.call(...), not simply functor(...).  \n  \nNB: I don't really agree that use of the above pattern disqualifies functions in a given language from being '1st class', although regarding Java (due to backwards compatibility issues) there are enough limitations/exceptions that I think the opinion is largely justified.\n  \nEDIT: formatting. Reddit markdown is stupid.","aSentId": 30512,"answer": "How do these relate or conflict with functors ala Haskell?","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 30511,"question": "The way Java has always implemented this type of functionality is with a pattern called *functors*. Functors are basically light weight objects, usually with very little state/member-data; and a single method that serves as the procedure body.  \n  \nExample:  \n\n    class AddFunctor {  \n        public int call(int a, int b) { return a + b ; }  \n    }\n  \nWhen you store a reference to a method in Java, you actually need to wrap a functor around the procedure, and store the functor. This isn't 'first class', because to then invoke the method, you need to retreive the functor and invoke it's call method. This point is emphasized because the way Java syntax works requires the invocation of the functor call to be written as functor.call(...), not simply functor(...).  \n  \nNB: I don't really agree that use of the above pattern disqualifies functions in a given language from being '1st class', although regarding Java (due to backwards compatibility issues) there are enough limitations/exceptions that I think the opinion is largely justified.\n  \nEDIT: formatting. Reddit markdown is stupid.","aSentId": 30514,"answer": "Considering \"real\" closures are often implemented identically under the hood, the difference between `x.run()` and `x()` seems somewhat excusable.\n\nI get that the whole \"wrap a functor around the procedure, and store the functor\" idea would break this, but as you mention Java 8 does that for you.\n\nBut thanks for the answer.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 30522,"question": "Announcing Microsoft.IO.RecycableMemoryStream","aSentId": 30523,"answer": "Ben's \"comment cleanup\" commit has some fun errata. This one is my favorite:\n \uf05d-        /// access the bytes in this stream. Uses of this method will be logged and punished. ","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 30522,"question": "Announcing Microsoft.IO.RecycableMemoryStream","aSentId": 30525,"answer": "&gt; The large pool is only used when you need a contiguous byte[] buffer, via a call to GetBuffer or (let\u2019s hope not) ToArray. \n\nUnfortunately it's not uncommon for libraries to accept byte[] and have no equivalent API accepting a Stream.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 30526,"question": "&gt; The large pool is only used when you need a contiguous byte[] buffer, via a call to GetBuffer or (let\u2019s hope not) ToArray. \n\nUnfortunately it's not uncommon for libraries to accept byte[] and have no equivalent API accepting a Stream.","aSentId": 30527,"answer": "This library will work efficiently with both types.\n\nA well-designed API that accepts byte[] should also accept an offset and length as well (most of the FCL APIs do this). Unfortunately, not all APIs are well-designed...\n\n","corpus": "reddit"}]