[{"docID": "t5_2qhmr", "qSentId": 57157, "question": "What makes a University CS Department thrive?", "aSentId": 57158, "answer": "I'm not super well informed on this but I can tell you what it has been for me, for undergrad at Case Western Reserve University and graduate MS-CS at George Mason University.\n\nWhat makes people flock to the program?\n\nI think reputation has a lot to do with it in undergrad.  People want to go somewhere that their degree will be worth something on the job market.  Now whether that reputation is earned, I am not sure what percentage of people fully investigate.  For example I think CWRU has a good legacy and strong engineering school, but some aspects of the curriculum were pretty outdated for the modern job market or even continuation on a research track.  \n\nSecondly is the quality of the instructors.  For graduate school I got to know that it is very important in class selection to read reviews of each professor.  I think every program has studs and duds though.  But you can find out based on what kind of research projects the school puts at the forefront, browse around on the department websites... Ironically for me George Mason was really the only viable choice so I was driven to do it mostly by necessity, but I was very very happy that it was much harder than I anticipated and the quality of the department was very high.  \n\nWhat style of study works best for getting the most in this field? Eg. Is research based more effective than teaching based programs?\n\nI think research is a very particular thing.  For me I steered more towards hardware and engineering in undergrad so I am not a very research-oriented person in general.  I think the master's students that I met were a little behind the curve of professional developers but ahead on the math comprehension... Comp Sci is not really about software development necessarily so that is kind of ok, but having worked with some of those people single-letter variable names still make me see red to this day.\n\nWhat do/did you enjoy most about your CS program?\n\nI enjoyed the theoretical and mathematical rigor at Mason.  I think at CWRU the main thing was meeting a lot of very smart peers and group projects in undergrad were a lot of fun.  I learned the hard way for sure how much work it really takes to succeed, which was lucky because I had to work pretty hard to finish the Master's degree for sure.\n\nLike least?\n\nI do not think C is a good teaching language so any professor who taught a mandatory class that was a C-brained person those were pretty tough for me.  But I guess I learned a lot from them in the end it was just a struggle.\n\nWhat about the physical department itself is attracting?\n\nIf they have a pretty defined curriculum and can actually staff teachers for it that's a huge bonus.  There were a few times when classes got cancelled because of not enough people enrolling in them.  I think CWRU is beautiful but in a bad part of town and I'm even from Cleveland anyways... Mason I felt much safer.  \n\nWhat types of resources help CS students the most?\n\nAvailability of office hours for teacher and TA.  I think a lot of TA's are not very good about actually advertising when they can help, or not playing favorites/being slightly shady.  Those group things like piazza to ask questions are super great.  I also like ACM paper access :).\n\nWhat about the program brought collaboration, creativity, and a desire to learn?\n\nI think at Mason the other students were primarily professionals so they knew we had to cooperate to succeed.  In undergrad some of the teachers I had were just brilliant and so much fun.  They made us really try to learn without feeding us everything, to find that inner drive to care about the field.\n\nI think on your last point yes you have to create a culture of collaboration, and if you are the first to do it, this is the nature of true academia to pose questions and be passionate... to not let it just falter because you want to finish the program and move on with your life.  But the responsibility is not 100% on the students either.  So it is up to each person to evaluate their true goals.  You can really learn on your own anything anyways if you are driven by necessity, right?  ", "corpus": "reddit"},{"docID": "t5_2qhmr", "qSentId": 57159, "question": "I'm not super well informed on this but I can tell you what it has been for me, for undergrad at Case Western Reserve University and graduate MS-CS at George Mason University.\n\nWhat makes people flock to the program?\n\nI think reputation has a lot to do with it in undergrad.  People want to go somewhere that their degree will be worth something on the job market.  Now whether that reputation is earned, I am not sure what percentage of people fully investigate.  For example I think CWRU has a good legacy and strong engineering school, but some aspects of the curriculum were pretty outdated for the modern job market or even continuation on a research track.  \n\nSecondly is the quality of the instructors.  For graduate school I got to know that it is very important in class selection to read reviews of each professor.  I think every program has studs and duds though.  But you can find out based on what kind of research projects the school puts at the forefront, browse around on the department websites... Ironically for me George Mason was really the only viable choice so I was driven to do it mostly by necessity, but I was very very happy that it was much harder than I anticipated and the quality of the department was very high.  \n\nWhat style of study works best for getting the most in this field? Eg. Is research based more effective than teaching based programs?\n\nI think research is a very particular thing.  For me I steered more towards hardware and engineering in undergrad so I am not a very research-oriented person in general.  I think the master's students that I met were a little behind the curve of professional developers but ahead on the math comprehension... Comp Sci is not really about software development necessarily so that is kind of ok, but having worked with some of those people single-letter variable names still make me see red to this day.\n\nWhat do/did you enjoy most about your CS program?\n\nI enjoyed the theoretical and mathematical rigor at Mason.  I think at CWRU the main thing was meeting a lot of very smart peers and group projects in undergrad were a lot of fun.  I learned the hard way for sure how much work it really takes to succeed, which was lucky because I had to work pretty hard to finish the Master's degree for sure.\n\nLike least?\n\nI do not think C is a good teaching language so any professor who taught a mandatory class that was a C-brained person those were pretty tough for me.  But I guess I learned a lot from them in the end it was just a struggle.\n\nWhat about the physical department itself is attracting?\n\nIf they have a pretty defined curriculum and can actually staff teachers for it that's a huge bonus.  There were a few times when classes got cancelled because of not enough people enrolling in them.  I think CWRU is beautiful but in a bad part of town and I'm even from Cleveland anyways... Mason I felt much safer.  \n\nWhat types of resources help CS students the most?\n\nAvailability of office hours for teacher and TA.  I think a lot of TA's are not very good about actually advertising when they can help, or not playing favorites/being slightly shady.  Those group things like piazza to ask questions are super great.  I also like ACM paper access :).\n\nWhat about the program brought collaboration, creativity, and a desire to learn?\n\nI think at Mason the other students were primarily professionals so they knew we had to cooperate to succeed.  In undergrad some of the teachers I had were just brilliant and so much fun.  They made us really try to learn without feeding us everything, to find that inner drive to care about the field.\n\nI think on your last point yes you have to create a culture of collaboration, and if you are the first to do it, this is the nature of true academia to pose questions and be passionate... to not let it just falter because you want to finish the program and move on with your life.  But the responsibility is not 100% on the students either.  So it is up to each person to evaluate their true goals.  You can really learn on your own anything anyways if you are driven by necessity, right?  ", "aSentId": 57160, "answer": "&gt;I do not think C is a good teaching language \n\nI was \"brought up\" with this belief. We were taught haughty functional languages and Java. \n\nNow I disagree, I think C is a great teaching language. It is small, meaning that there is not much syntax to learn (something like 32 keywords, IIRC). A C program is simply structured: a main function that does some stuff and calls functions which do their own stuff. That's all, functions doing stuff and calling other functions. No need for a crap load of boiler plate code just to print \"hello world\", no need to bother with objects, and as for functional languages....it's not a natural way of thinking. \n\nFinally, I think languages like Python shield you from the system too much. It's ok for some purposes, but when it comes to learning, C reminds you that you are dealing with a machine. I love the fact that my mental model of a data structure maps so closely to the actual memory. I know what a pointer and an array is. It's really honest. \n\nC is a great language, I wish it was the one I got taught first. \n", "corpus": "reddit"},{"docID": "t5_2qhmr", "qSentId": 57157, "question": "What makes a University CS Department thrive?", "aSentId": 57162, "answer": "What makes it thrive is the community of students and the relationship of that community with the department itself. I really enjoy that there are so many fellow students who are willing to help in my department. Student organizations, clubs, events bring out everyones shared interest: programming and making things. What really makes a program thrive is also the departments relationships with companies. There are tech talks and recruiting days from the worlds best companies in multiple industries basically every week and that opportunity truly strengthens the cs program. ", "corpus": "reddit"},{"docID": "t5_2qhmr", "qSentId": 57163, "question": "What makes it thrive is the community of students and the relationship of that community with the department itself. I really enjoy that there are so many fellow students who are willing to help in my department. Student organizations, clubs, events bring out everyones shared interest: programming and making things. What really makes a program thrive is also the departments relationships with companies. There are tech talks and recruiting days from the worlds best companies in multiple industries basically every week and that opportunity truly strengthens the cs program. ", "aSentId": 57164, "answer": "This was true at my college as well.  Nothing helped students decide where they wanted to go like student volunteers on open house day talking about how great the student community was.  All of the things you mention are also huge in succeeding after college as well.\n\nOne additional thing: Internships.  Internships not only get students real on-the-job experience which, as someone who conducts interviews on a weekly basis, is absolutely huge in developing their skills, especially code layout, but it also brings new ideas and a good judge of relevancy back to the department when they come back.  The networking and finding-a-job skills are great as well.", "corpus": "reddit"},{"docID": "t5_2qhmr", "qSentId": 57165, "question": "This was true at my college as well.  Nothing helped students decide where they wanted to go like student volunteers on open house day talking about how great the student community was.  All of the things you mention are also huge in succeeding after college as well.\n\nOne additional thing: Internships.  Internships not only get students real on-the-job experience which, as someone who conducts interviews on a weekly basis, is absolutely huge in developing their skills, especially code layout, but it also brings new ideas and a good judge of relevancy back to the department when they come back.  The networking and finding-a-job skills are great as well.", "aSentId": 57166, "answer": "Are you a recruiter at a company now? How was your internship experiences and what did you end up doing after graduation? ", "corpus": "reddit"},{"docID": "t5_2qhmr", "qSentId": 57167, "question": "Are you a recruiter at a company now? How was your internship experiences and what did you end up doing after graduation? ", "aSentId": 57168, "answer": "I'm a software engineer now.  My internships were great.  Even the one that sucked taught me a lot about how not to do things.  As part of my job now I give 1-3 technical interviews per week usually.", "corpus": "reddit"},{"docID": "t5_2qhmr", "qSentId": 57157, "question": "What makes a University CS Department thrive?", "aSentId": 57170, "answer": "I went to Union College, from 88-92, for Computer Science.  The program wasn't large, but it seemed to be thriving.   It sounds, from your experience, that people come to class, go home, and don't really do anything else.  \n\nIn contrast, we had a chapter of the ACM on campus, which sponsored various activities, including sending us to programming contests.  There were jobs available for student and faculty computer support, everywhere from fixing paper jams to answering CS questions, and many of us did that as well.  Also, they had just built a new CS lab the year before I came, so there were interesting computing resources that people could use outside of the classroom as well.  So, as we all did these things, we'd socialize a lot more outside of class than seems to be your experience.\n\nI visited the campus about a year ago to see what had changed since I graduated.  The graduate program seems to have dissolved, which is unfortunate, but the undergraduate program seems to still be going strong, with similar resources to what I had, although now they are focused around a multi-year robotics project, 3D printing lab, etc.   There are lots of ways students can get together outside of class and do something creative.\n\nWhat was also good about my time at Union is that there were almost no TAs - professors taught everything, and you could talk to them whenever you needed assistance or wanted to just chat.   When I visited recently, one professor from my time was still there, and I was able to say hello - she still remembered me from back then.   I think schools where TAs do all of the teaching and professors are rarely seen lends itself more to the go to class/go home mentality.", "corpus": "reddit"},{"docID": "t5_2qhmr", "qSentId": 57178, "question": "CS is a trade and you're in a class with tradespeople.  Not all of them are going to be creative hacker types.  You want that, go find or better create a hackerspace or meetup.  \n\nThe culture is amazing and grows organically and extremely quickly.  ", "aSentId": 57179, "answer": "Programming is a trade. Software development as a whole could maybe be called a trade. Computer science is not a trade.", "corpus": "reddit"},{"docID": "t5_2qhmr", "qSentId": 57180, "question": "Programming is a trade. Software development as a whole could maybe be called a trade. Computer science is not a trade.", "aSentId": 57181, "answer": "99% of people with a CS degree are using it to get a software development or programming job.  It's a trade.", "corpus": "reddit"},{"docID": "t5_2qhmr", "qSentId": 57182, "question": "99% of people with a CS degree are using it to get a software development or programming job.  It's a trade.", "aSentId": 57183, "answer": "&gt; 99% of people with a CS degree are using it to get a software development or programming job. It's a trade.\n\n99% of people with a mathematics degree are using it to get a job - does that make mathematics a trade?\n\n99% of people with a physics degree are using it to get a job - does that make physics a trade?", "corpus": "reddit"},{"docID": "t5_2qhmr", "qSentId": 57178, "question": "CS is a trade and you're in a class with tradespeople.  Not all of them are going to be creative hacker types.  You want that, go find or better create a hackerspace or meetup.  \n\nThe culture is amazing and grows organically and extremely quickly.  ", "aSentId": 57185, "answer": "&gt;CS is a trade \n\nIt's a bit of a stretch to call mathematics a trade.", "corpus": "reddit"},{"docID": "t5_2qhmr", "qSentId": 57186, "question": "&gt;CS is a trade \n\nIt's a bit of a stretch to call mathematics a trade.", "aSentId": 57187, "answer": "It's really not.  Especially as it's practiced in the world.  99% of CS majors are crapping out JEE apps and using tibco to integrate old back ends into something resembling the state of the art circa 2005.\n\nMost CS grads aren't writing compilers even if they had to in school.  Most aren't doing anything with big-o outside of diagnosing slow doubly nested for loops.  \n\nSure it opens up the doors to more complicated work, but the vast majority of CS degrees are issued to people who work on the above type of projects.\n\nImagine all of the country's electrical engineering graduates went on to be electricians.  That's pretty much the state of the industry at the moment.", "corpus": "reddit"},{"docID": "t5_2qhmr", "qSentId": 57188, "question": "It's really not.  Especially as it's practiced in the world.  99% of CS majors are crapping out JEE apps and using tibco to integrate old back ends into something resembling the state of the art circa 2005.\n\nMost CS grads aren't writing compilers even if they had to in school.  Most aren't doing anything with big-o outside of diagnosing slow doubly nested for loops.  \n\nSure it opens up the doors to more complicated work, but the vast majority of CS degrees are issued to people who work on the above type of projects.\n\nImagine all of the country's electrical engineering graduates went on to be electricians.  That's pretty much the state of the industry at the moment.", "aSentId": 57189, "answer": "&gt;Imagine all of the country's electrical engineering graduates went on to be electricians.  That's pretty much the state of the industry at the moment.\n\nWhich is absolutely disgusting, and why I'm unwilling to keep pushing this paradigm forward.\n\n\n", "corpus": "reddit"},{"docID": "t5_2qhmr", "qSentId": 57191, "question": "From where i am the only reason many choose cs as a major is for the money earned later,99% of the crowd here dosent care even a bit about cs they aren't passionate or even in some cases know how to operate a computer other than browsing the internet,such people should be banned in the first place from getting into cs.", "aSentId": 57192, "answer": "Exactly. There are so many morons in CS who 'don't like math'. Wow, if you don't like math, then why are you studying CS? CS is math...\n\nIt's like someone saying 'I want to learn physics but I don't like math'. Well...you need math to describe the world to the best our knowledge right now. So if you don't like math, then you don't want to learn physics.", "corpus": "reddit"},{"docID": "t5_2qhmr", "qSentId": 57193, "question": "Exactly. There are so many morons in CS who 'don't like math'. Wow, if you don't like math, then why are you studying CS? CS is math...\n\nIt's like someone saying 'I want to learn physics but I don't like math'. Well...you need math to describe the world to the best our knowledge right now. So if you don't like math, then you don't want to learn physics.", "aSentId": 57194, "answer": "The answer is obvious, I don't understand why you're playing dumb about it. Most wish to become software engineers.", "corpus": "reddit"},{"docID": "t5_2qhmr", "qSentId": 57195, "question": "The answer is obvious, I don't understand why you're playing dumb about it. Most wish to become software engineers.", "aSentId": 57196, "answer": "Isn't it a troublesome that we live in a society where people study CS in university to go into software eng?\n\n If a student were to go to uni for pure mathematics with the end goal of an accounting career, of course they'll complain about having to take real analysis and abstract algebra because they don't need it and can't understand it. But obviously they have no right to complain. So why are dimwits in CS any different? ", "corpus": "reddit"},{"docID": "t5_2qhmr", "qSentId": 57197, "question": "Isn't it a troublesome that we live in a society where people study CS in university to go into software eng?\n\n If a student were to go to uni for pure mathematics with the end goal of an accounting career, of course they'll complain about having to take real analysis and abstract algebra because they don't need it and can't understand it. But obviously they have no right to complain. So why are dimwits in CS any different? ", "aSentId": 57198, "answer": "&gt; If a student were to go to uni for pure mathematics with the end goal of an accounting career, of course they'll complain about having to take real analysis and abstract algebra because they don't need it and can't understand it. \n\nI agree 100% with that. But at the same time it's also sort of a disservice to _them_ and I think they have a right to complain.\n\n&gt;So why are dimwits in CS any different? \n\nI don't get the name calling. Wanting to study CS for something other than the sake of CS doesn't make someone a dimwit.\n\nedit: _them_ above refers to cs majors aspiring to be software engineers. Accountants have a better option for a major. Software engineers typically don't (at least in the US)", "corpus": "reddit"},{"docID": "t5_2qhmr", "qSentId": 57199, "question": "&gt; If a student were to go to uni for pure mathematics with the end goal of an accounting career, of course they'll complain about having to take real analysis and abstract algebra because they don't need it and can't understand it. \n\nI agree 100% with that. But at the same time it's also sort of a disservice to _them_ and I think they have a right to complain.\n\n&gt;So why are dimwits in CS any different? \n\nI don't get the name calling. Wanting to study CS for something other than the sake of CS doesn't make someone a dimwit.\n\nedit: _them_ above refers to cs majors aspiring to be software engineers. Accountants have a better option for a major. Software engineers typically don't (at least in the US)", "aSentId": 57200, "answer": "Software engineering is an actual program that students can enroll in at many universities, just like accounting. If demand is high, I feel it should start to be offered at universities that do not instead of devolving the CS programs already in place. Majors like math and physics are not very popular, but no one believes that a physics program should be twisted into electrical eng or mech eng; similarly, math programs are not twisted into programs geared at career accountants, etc. On the other hand, it seems that it's acceptable to make CS programs into programming/software eng programs with no regard to the significant value of CS.\n\nAt my school, there are students that go into CS because their grades wouldn't let them into soft eng and then go about complaining about the incredibly light amount of required math. Here, there are no entrance requirements for physics/chem majors (because of its unpopularity) but if an aspiring electrical eng couldn't make the cut and enrolled in physics, they would have no right to complain about the difficulty of the program nor do they have the right to ask for a less theoretical approach to EM, for example. Obviously, it should stand that non-CS people in CS have no right to complain either, but somehow it's deemed to be acceptable.", "corpus": "reddit"},{"docID": "t5_2qhmr", "qSentId": 57201, "question": "Software engineering is an actual program that students can enroll in at many universities, just like accounting. If demand is high, I feel it should start to be offered at universities that do not instead of devolving the CS programs already in place. Majors like math and physics are not very popular, but no one believes that a physics program should be twisted into electrical eng or mech eng; similarly, math programs are not twisted into programs geared at career accountants, etc. On the other hand, it seems that it's acceptable to make CS programs into programming/software eng programs with no regard to the significant value of CS.\n\nAt my school, there are students that go into CS because their grades wouldn't let them into soft eng and then go about complaining about the incredibly light amount of required math. Here, there are no entrance requirements for physics/chem majors (because of its unpopularity) but if an aspiring electrical eng couldn't make the cut and enrolled in physics, they would have no right to complain about the difficulty of the program nor do they have the right to ask for a less theoretical approach to EM, for example. Obviously, it should stand that non-CS people in CS have no right to complain either, but somehow it's deemed to be acceptable.", "aSentId": 57202, "answer": "Okay, yeah, then that's bone-headed", "corpus": "reddit"},{"docID": "t5_2qhmr", "qSentId": 57193, "question": "Exactly. There are so many morons in CS who 'don't like math'. Wow, if you don't like math, then why are you studying CS? CS is math...\n\nIt's like someone saying 'I want to learn physics but I don't like math'. Well...you need math to describe the world to the best our knowledge right now. So if you don't like math, then you don't want to learn physics.", "aSentId": 57204, "answer": "Its not about math its more about they aren't interested in computers in general,or even care about programming.Only think theg care about is the big bucks they will earn later and thats the reason they take up cs,sometimes in class i just want to grab these idiots and shoot them in the nads.Due to these people so many deserving candidates who actually care about stuff do not get admissions for a cs major,normally these  bitches i am talking about are muggers who cram stuff up only for the marks during entrance exams so that they can get into any engineering major available since getting a engineering degree means respect and nice pay.Total fucking dicks. ", "corpus": "reddit"},{"docID": "t5_2qhmr", "qSentId": 57206, "question": "Fermilab-led project builds codes to model particle accelerators, improving the odds of filling in the Standard Model. Crossposted to /r/particlephysics, /r/HPC", "aSentId": 57207, "answer": "That science doe", "corpus": "reddit"},{"docID": "t5_2qhmr", "qSentId": 57211, "question": "I feel like I'm the worst CS major at my university. Does/has anyone have/had this problem?", "aSentId": 57212, "answer": "If you're still in the program then you are already doing better than everyone who has ever quit...which is a lot of fucking people. Don't get caught up in class statistics or your peer's salaries. You are skilled and there is a niche for everyone who completes this degree, not just top notch dev jobs at the big five.", "corpus": "reddit"},{"docID": "t5_2qhmr", "qSentId": 57213, "question": "If you're still in the program then you are already doing better than everyone who has ever quit...which is a lot of fucking people. Don't get caught up in class statistics or your peer's salaries. You are skilled and there is a niche for everyone who completes this degree, not just top notch dev jobs at the big five.", "aSentId": 57214, "answer": " &gt; the big five\n\nI've never heard this term before. Apple, MS, Google, Facebook, and...?", "corpus": "reddit"},{"docID": "t5_2qhmr", "qSentId": 57215, "question": " &gt; the big five\n\nI've never heard this term before. Apple, MS, Google, Facebook, and...?", "aSentId": 57216, "answer": "Amazon", "corpus": "reddit"},{"docID": "t5_2qhmr", "qSentId": 57215, "question": " &gt; the big five\n\nI've never heard this term before. Apple, MS, Google, Facebook, and...?", "aSentId": 57218, "answer": "AOL", "corpus": "reddit"},{"docID": "t5_2qhmr", "qSentId": 57219, "question": "AOL", "aSentId": 57220, "answer": "When the market for free internet subscription cds comes around they're going to be huge!", "corpus": "reddit"},{"docID": "t5_2qhmr", "qSentId": 57221, "question": "When the market for free internet subscription cds comes around they're going to be huge!", "aSentId": 57222, "answer": "You may laugh, but they bought advertising.com years ago and have been quietly running a major ad platform.  Besides, there's actually a surprising number of older folks who still use AOL.", "corpus": "reddit"},{"docID": "t5_2qhmr", "qSentId": 57223, "question": "You may laugh, but they bought advertising.com years ago and have been quietly running a major ad platform.  Besides, there's actually a surprising number of older folks who still use AOL.", "aSentId": 57224, "answer": "My ex's parents still use AOL... though it's probably best for them. Her mom got pissed that I broke something on her computer when I simply maximized the window so I could see everything... she couldn't figure out how to put it back.  \n  \nI made mine switch to TWC (from AOL/Earthlink dial-up) in 2001 after my first semester at college... once you're on Ethernet, there's no going back. ", "corpus": "reddit"},{"docID": "t5_2qhmr", "qSentId": 57219, "question": "AOL", "aSentId": 57226, "answer": "as one of the worst CS majors at my university I'm glad there's a big 5 company for me out there ", "corpus": "reddit"},{"docID": "t5_2qhmr", "qSentId": 57219, "question": "AOL", "aSentId": 57228, "answer": "LOL", "corpus": "reddit"},{"docID": "t5_2qhmr", "qSentId": 57229, "question": "LOL", "aSentId": 57230, "answer": "You mean Riot?", "corpus": "reddit"},{"docID": "t5_2qhmr", "qSentId": 57232, "question": "Amazon On-Line \u00ae", "aSentId": 57233, "answer": "AmazOnLine? ", "corpus": "reddit"},{"docID": "t5_2qhmr", "qSentId": 57234, "question": "AmazOnLine? ", "aSentId": 57235, "answer": "AmAzOnliNE", "corpus": "reddit"},{"docID": "t5_2qhmr", "qSentId": 57215, "question": " &gt; the big five\n\nI've never heard this term before. Apple, MS, Google, Facebook, and...?", "aSentId": 57237, "answer": "Amazon I imagine?", "corpus": "reddit"},{"docID": "t5_2qhmr", "qSentId": 57239, "question": "Snapchat, ask.com, spotify, flappy bird and Candy Crush.", "aSentId": 57240, "answer": "pied piper, hooli, bro, yo, ...?", "corpus": "reddit"},{"docID": "t5_2qhmr", "qSentId": 57241, "question": "pied piper, hooli, bro, yo, ...?", "aSentId": 57242, "answer": "bro, Bro, bRo, brO, **BRO**. Peid Piper is dead, they can't even get funded...", "corpus": "reddit"},{"docID": "t5_2qhmr", "qSentId": 57239, "question": "Snapchat, ask.com, spotify, flappy bird and Candy Crush.", "aSentId": 57244, "answer": "&gt; You are skilled and there is a niche for everyone who completes this degree, not just top notch dev jobs at the big five.\n\nYou mean...\"candy KUsh\"?", "corpus": "reddit"},{"docID": "t5_2qhmr", "qSentId": 57245, "question": "&gt; You are skilled and there is a niche for everyone who completes this degree, not just top notch dev jobs at the big five.\n\nYou mean...\"candy KUsh\"?", "aSentId": 57246, "answer": "Sorry, a complete mistype, I meant Pied Piper.", "corpus": "reddit"},{"docID": "t5_2qhmr", "qSentId": 57248, "question": "IBM?", "aSentId": 57249, "answer": "Big five of the 90s (maybe):\n\nIBM, Sun, Cisco, Microsoft, Yahoo", "corpus": "reddit"},{"docID": "t5_2qhmr", "qSentId": 57248, "question": "IBM?", "aSentId": 57251, "answer": "iirc, IBM used to be one of them. I think it was Google, Apple, Microsoft, Amazon, and IBM, but facebook replaced IBM. Don't quote me on that though.", "corpus": "reddit"},{"docID": "t5_2qhmr", "qSentId": 57252, "question": "iirc, IBM used to be one of them. I think it was Google, Apple, Microsoft, Amazon, and IBM, but facebook replaced IBM. Don't quote me on that though.", "aSentId": 57253, "answer": "&gt;iirc, IBM used to be one of them. I think it was Google, Apple, Microsoft, Amazon, and IBM, but facebook replaced IBM.\n\n-/u/vgman20", "corpus": "reddit"},{"docID": "t5_2qhmr", "qSentId": 57252, "question": "iirc, IBM used to be one of them. I think it was Google, Apple, Microsoft, Amazon, and IBM, but facebook replaced IBM. Don't quote me on that though.", "aSentId": 57255, "answer": "what about oracle?", "corpus": "reddit"},{"docID": "t5_2qhmr", "qSentId": 57256, "question": "what about oracle?", "aSentId": 57257, "answer": "It's more of a career opportunity for lawyers. ", "corpus": "reddit"},{"docID": "t5_2qhmr", "qSentId": 57248, "question": "IBM?", "aSentId": 57259, "answer": "IBM's position has fallen greatly the past decade. Their interviews were very easy and they don't pay well (for entry level). Source: had an offer from them at one point. I'm sure they still have some high profile teams though. ", "corpus": "reddit"},{"docID": "t5_2qhmr", "qSentId": 57260, "question": "IBM's position has fallen greatly the past decade. Their interviews were very easy and they don't pay well (for entry level). Source: had an offer from them at one point. I'm sure they still have some high profile teams though. ", "aSentId": 57261, "answer": "They're behind Watson, so they do have *some* cool shit going on.", "corpus": "reddit"},{"docID": "t5_2qhmr", "qSentId": 57262, "question": "They're behind Watson, so they do have *some* cool shit going on.", "aSentId": 57263, "answer": "They're a massive monolithic company. Not much room for growth, but they aren't dying any time soon. As with most big things, it's hard to get it moving one way or the other (and once it starts stagnating and getting out of touch it's hard to get it up again). ", "corpus": "reddit"},{"docID": "t5_2qhmr", "qSentId": 57264, "question": "They're a massive monolithic company. Not much room for growth, but they aren't dying any time soon. As with most big things, it's hard to get it moving one way or the other (and once it starts stagnating and getting out of touch it's hard to get it up again). ", "aSentId": 57265, "answer": "This will change once Watson takes the helm", "corpus": "reddit"},{"docID": "t5_2qhmr", "qSentId": 57264, "question": "They're a massive monolithic company. Not much room for growth, but they aren't dying any time soon. As with most big things, it's hard to get it moving one way or the other (and once it starts stagnating and getting out of touch it's hard to get it up again). ", "aSentId": 57267, "answer": "E.g. the infamous story about how it would take 9 months for IBM to be able to deliver an empty cardboard box. Dat dere bureaucracy.", "corpus": "reddit"},{"docID": "t5_2qhmr", "qSentId": 57272, "question": "Yahoo!", "aSentId": 57273, "answer": "no way...", "corpus": "reddit"},{"docID": "t5_2qhmr", "qSentId": 57279, "question": "My first guess was IBM, Apple, Google, Oracle, Microsoft.\n\nAfter reading the other comments, I have to admit neither Facebook nor Amazon occurred to me, although it is possible Oracle could be swapped out with Facebook, but being that they are in direct competition with both IBM and Google, I thought Oracle was a better guess. I wouldn't consider Facebook \"bigger\" than the other 5 I mentioned, but it might be just because they are a relatively new company.", "aSentId": 57280, "answer": "There's absolutely no way that Facebook is bigger than Oracle.\n\nFacebook had 9,199 employees by the end of the year last year.\n\nOracle had 122,458.  Fucking SAP has 74,400 employees.\n\nOracle's net annual income is US$ 10.95 billion.  SAP's net income was \u20ac3.275 billion.\n\nThough Facebook's net income last year was US$2.94 billion.  That's pretty damn impressive for having ~10x fewer employees.\n\nBut in terms of prestigious companies to work for, I would put everything you said plus Intel ahead of Facebook.  I didn't say that they were preferable.  Just that, in my opinion, they're definitely bigger.\n\nEdit: Alright, okay, I understand number of employees is a poor metric to measure \"bigness\".  Other than revenue and # of employees, how can you measure \"bigness\" then?  Is being one of the \"Big 5\" or 6 or 15 or whatever just a matter of how hot the company is at the moment?", "corpus": "reddit"},{"docID": "t5_2qhmr", "qSentId": 57281, "question": "There's absolutely no way that Facebook is bigger than Oracle.\n\nFacebook had 9,199 employees by the end of the year last year.\n\nOracle had 122,458.  Fucking SAP has 74,400 employees.\n\nOracle's net annual income is US$ 10.95 billion.  SAP's net income was \u20ac3.275 billion.\n\nThough Facebook's net income last year was US$2.94 billion.  That's pretty damn impressive for having ~10x fewer employees.\n\nBut in terms of prestigious companies to work for, I would put everything you said plus Intel ahead of Facebook.  I didn't say that they were preferable.  Just that, in my opinion, they're definitely bigger.\n\nEdit: Alright, okay, I understand number of employees is a poor metric to measure \"bigness\".  Other than revenue and # of employees, how can you measure \"bigness\" then?  Is being one of the \"Big 5\" or 6 or 15 or whatever just a matter of how hot the company is at the moment?", "aSentId": 57282, "answer": "Big companies are far less prestigious to work for. It's easier to get hired, harder to get fired. When you have 100,000 employees, your management structure MUST be set up to so that you're able to churn out some form of marketable product using ONLY average developers. Quite frankly it's amazing what big companies are able to do given how bad the lower half of software people are. I work for one, and lets just say dilbert makes me cry and not laugh.", "corpus": "reddit"},{"docID": "t5_2qhmr", "qSentId": 57283, "question": "Big companies are far less prestigious to work for. It's easier to get hired, harder to get fired. When you have 100,000 employees, your management structure MUST be set up to so that you're able to churn out some form of marketable product using ONLY average developers. Quite frankly it's amazing what big companies are able to do given how bad the lower half of software people are. I work for one, and lets just say dilbert makes me cry and not laugh.", "aSentId": 57284, "answer": "Don't disagree with your reasoning, but in reality all of those companies look damn good on a resume assuming you were there long enough to look like a solid/stable developer. Also, it's hard to get fired, but easier and easier to find yourself in filling one of your department's annual layoff slots.", "corpus": "reddit"},{"docID": "t5_2qhmr", "qSentId": 57281, "question": "There's absolutely no way that Facebook is bigger than Oracle.\n\nFacebook had 9,199 employees by the end of the year last year.\n\nOracle had 122,458.  Fucking SAP has 74,400 employees.\n\nOracle's net annual income is US$ 10.95 billion.  SAP's net income was \u20ac3.275 billion.\n\nThough Facebook's net income last year was US$2.94 billion.  That's pretty damn impressive for having ~10x fewer employees.\n\nBut in terms of prestigious companies to work for, I would put everything you said plus Intel ahead of Facebook.  I didn't say that they were preferable.  Just that, in my opinion, they're definitely bigger.\n\nEdit: Alright, okay, I understand number of employees is a poor metric to measure \"bigness\".  Other than revenue and # of employees, how can you measure \"bigness\" then?  Is being one of the \"Big 5\" or 6 or 15 or whatever just a matter of how hot the company is at the moment?", "aSentId": 57286, "answer": "Tata Consultancy Services has 300,000 employees. Doesn't make them bigger than Oracle / Facebook. Number of employees is a bad metric.", "corpus": "reddit"},{"docID": "t5_2qhmr", "qSentId": 57211, "question": "I feel like I'm the worst CS major at my university. Does/has anyone have/had this problem?", "aSentId": 57288, "answer": "There's an old joke that applies here. \n\n\n\"What do you call the person who graduates with the lowest average from Medical School?\"  \n\"-Doctor.\"  \n\nOr.. \"What do you call the person who graduates with the lowest average from Law School?\"    -A Lawyer. \n\nYeah, I know about bar exams, fellowships and that.  This is just an old joke.   \n\nTL;DR - As long as you are passing your classes, you are doing better than anyone who drops out . fails out of the program.   Get the education, and don't worry about competition in your class. ", "corpus": "reddit"},{"docID": "t5_2qhmr", "qSentId": 57289, "question": "There's an old joke that applies here. \n\n\n\"What do you call the person who graduates with the lowest average from Medical School?\"  \n\"-Doctor.\"  \n\nOr.. \"What do you call the person who graduates with the lowest average from Law School?\"    -A Lawyer. \n\nYeah, I know about bar exams, fellowships and that.  This is just an old joke.   \n\nTL;DR - As long as you are passing your classes, you are doing better than anyone who drops out . fails out of the program.   Get the education, and don't worry about competition in your class. ", "aSentId": 57290, "answer": " \"What do you call the person who graduates with the lowest average from Law School?\"  \"A JAG.\"", "corpus": "reddit"},{"docID": "t5_2qhmr", "qSentId": 57291, "question": " \"What do you call the person who graduates with the lowest average from Law School?\"  \"A JAG.\"", "aSentId": 57292, "answer": "That's not even close to accurate, JAG is actually one of the most competitive fields within law, it has an absurdly low yearly acceptance rate, (somewhere around 4%)", "corpus": "reddit"},{"docID": "t5_2qhmr", "qSentId": 57289, "question": "There's an old joke that applies here. \n\n\n\"What do you call the person who graduates with the lowest average from Medical School?\"  \n\"-Doctor.\"  \n\nOr.. \"What do you call the person who graduates with the lowest average from Law School?\"    -A Lawyer. \n\nYeah, I know about bar exams, fellowships and that.  This is just an old joke.   \n\nTL;DR - As long as you are passing your classes, you are doing better than anyone who drops out . fails out of the program.   Get the education, and don't worry about competition in your class. ", "aSentId": 57294, "answer": "ANYONE who drops out? Maybe the majority who drop out? Bill Gates isn't all that anyway... ", "corpus": "reddit"},{"docID": "t5_2qhmr", "qSentId": 57295, "question": "ANYONE who drops out? Maybe the majority who drop out? Bill Gates isn't all that anyway... ", "aSentId": 57296, "answer": "There's a huge difference between someone who drops out to do bigger and better things and someone who flunks out.", "corpus": "reddit"},{"docID": "t5_2qhmr", "qSentId": 57297, "question": "There's a huge difference between someone who drops out to do bigger and better things and someone who flunks out.", "aSentId": 57298, "answer": "I fully agree, it doesn't make me wrong.", "corpus": "reddit"},{"docID": "t5_2qhmr", "qSentId": 57299, "question": "I fully agree, it doesn't make me wrong.", "aSentId": 57300, "answer": "Not even 1% of the population is a Bill Gates though. Dropping out and thinking you are or will become the next Bill Gates is just delusional. Sadly - a large portion think that especially on reddit: \"I'm a genious with 1024 in IQ - but you know - I just don't have the motivation. I can study for a test in like 1 second and ace it whenever I do - but I just can't motivate myself, you know?\"", "corpus": "reddit"},{"docID": "t5_2qhmr", "qSentId": 57301, "question": "Not even 1% of the population is a Bill Gates though. Dropping out and thinking you are or will become the next Bill Gates is just delusional. Sadly - a large portion think that especially on reddit: \"I'm a genious with 1024 in IQ - but you know - I just don't have the motivation. I can study for a test in like 1 second and ace it whenever I do - but I just can't motivate myself, you know?\"", "aSentId": 57302, "answer": "The person said that finishing your degree makes you better than **EVERY** person who drops out; I said that this wasn't the case. I have no idea what words you're trying to put into my mouth... ", "corpus": "reddit"},{"docID": "t5_2qhmr", "qSentId": 57303, "question": "The person said that finishing your degree makes you better than **EVERY** person who drops out; I said that this wasn't the case. I have no idea what words you're trying to put into my mouth... ", "aSentId": 57304, "answer": "And it's not like someone in school is \"better\" than someone who dropped out anyway. ", "corpus": "reddit"},{"docID": "t5_2qhmr", "qSentId": 57289, "question": "There's an old joke that applies here. \n\n\n\"What do you call the person who graduates with the lowest average from Medical School?\"  \n\"-Doctor.\"  \n\nOr.. \"What do you call the person who graduates with the lowest average from Law School?\"    -A Lawyer. \n\nYeah, I know about bar exams, fellowships and that.  This is just an old joke.   \n\nTL;DR - As long as you are passing your classes, you are doing better than anyone who drops out . fails out of the program.   Get the education, and don't worry about competition in your class. ", "aSentId": 57306, "answer": "Actually \"competition in the class\" is one of the best motivations you can have in your whole life, IMHO", "corpus": "reddit"},{"docID": "t5_2qhmr", "qSentId": 57211, "question": "I feel like I'm the worst CS major at my university. Does/has anyone have/had this problem?", "aSentId": 57308, "answer": "How big is your university?\n\nA lot of people come in with programming experience from high school or dinky little personal projects. This is more of an advantage than you'd expect. My advice: learn from your peers. Group projects are good for this, even if they suck for everything else. Work on homework assignments in a computer lab, chances are good someone else there is working on the same thing. Be friendly and ask \"hey, you working on assignment x? Do you know how to do xyz?\" if you get stuck.\n\nProgramming textbooks tend to suck for learning the basics, in my experience. But once you get into data structures and algorithms, READ THE GODDAMN BOOK, and before class! I cannot emphasize strongly enough how much better your understanding of these topics will be if you read the chapters in advance of the lectures.", "corpus": "reddit"},{"docID": "t5_2qhmr", "qSentId": 57309, "question": "How big is your university?\n\nA lot of people come in with programming experience from high school or dinky little personal projects. This is more of an advantage than you'd expect. My advice: learn from your peers. Group projects are good for this, even if they suck for everything else. Work on homework assignments in a computer lab, chances are good someone else there is working on the same thing. Be friendly and ask \"hey, you working on assignment x? Do you know how to do xyz?\" if you get stuck.\n\nProgramming textbooks tend to suck for learning the basics, in my experience. But once you get into data structures and algorithms, READ THE GODDAMN BOOK, and before class! I cannot emphasize strongly enough how much better your understanding of these topics will be if you read the chapters in advance of the lectures.", "aSentId": 57310, "answer": "I am not going to lie, but there is a fine line between genuinely asking for help and just asking for someones work. So OP if you do end up asking questions, don't just ask for the answer, try to ask for some vague help on how to solve the problem. \n\nThere are a lot of students who just want the answer and not the how. Don't be one of those students please.", "corpus": "reddit"},{"docID": "t5_2qhmr", "qSentId": 57311, "question": "I am not going to lie, but there is a fine line between genuinely asking for help and just asking for someones work. So OP if you do end up asking questions, don't just ask for the answer, try to ask for some vague help on how to solve the problem. \n\nThere are a lot of students who just want the answer and not the how. Don't be one of those students please.", "aSentId": 57312, "answer": "I had a guy ask me for help once, and when I pointed out his issue (a simple fucking syntax error) he spun the keyboard toward me and said \"can you fix it?\"\n\nNo. No I cannot.", "corpus": "reddit"},{"docID": "t5_2qhmr", "qSentId": 57313, "question": "I had a guy ask me for help once, and when I pointed out his issue (a simple fucking syntax error) he spun the keyboard toward me and said \"can you fix it?\"\n\nNo. No I cannot.", "aSentId": 57314, "answer": "So in short everyone: don't be that fucking person.", "corpus": "reddit"},{"docID": "t5_2qhmr", "qSentId": 57313, "question": "I had a guy ask me for help once, and when I pointed out his issue (a simple fucking syntax error) he spun the keyboard toward me and said \"can you fix it?\"\n\nNo. No I cannot.", "aSentId": 57316, "answer": "\"Here, use mine\"", "corpus": "reddit"},{"docID": "t5_2qhmr", "qSentId": 57309, "question": "How big is your university?\n\nA lot of people come in with programming experience from high school or dinky little personal projects. This is more of an advantage than you'd expect. My advice: learn from your peers. Group projects are good for this, even if they suck for everything else. Work on homework assignments in a computer lab, chances are good someone else there is working on the same thing. Be friendly and ask \"hey, you working on assignment x? Do you know how to do xyz?\" if you get stuck.\n\nProgramming textbooks tend to suck for learning the basics, in my experience. But once you get into data structures and algorithms, READ THE GODDAMN BOOK, and before class! I cannot emphasize strongly enough how much better your understanding of these topics will be if you read the chapters in advance of the lectures.", "aSentId": 57318, "answer": "And go to office hours!!  Hang out with your professor to learn the basics, not just for debugging help.  Become their friend when an assignment isn't around the corner.  Go over stuff from class with them.  (I really wish I had done this more)", "corpus": "reddit"},{"docID": "t5_2qhmr", "qSentId": 57319, "question": "And go to office hours!!  Hang out with your professor to learn the basics, not just for debugging help.  Become their friend when an assignment isn't around the corner.  Go over stuff from class with them.  (I really wish I had done this more)", "aSentId": 57320, "answer": "Office hours was the absolute must useful resource for me in undergrad, bar none. Go go go unless the gsi sucks in which case you're fucked. ", "corpus": "reddit"},{"docID": "t5_2qhmr", "qSentId": 57309, "question": "How big is your university?\n\nA lot of people come in with programming experience from high school or dinky little personal projects. This is more of an advantage than you'd expect. My advice: learn from your peers. Group projects are good for this, even if they suck for everything else. Work on homework assignments in a computer lab, chances are good someone else there is working on the same thing. Be friendly and ask \"hey, you working on assignment x? Do you know how to do xyz?\" if you get stuck.\n\nProgramming textbooks tend to suck for learning the basics, in my experience. But once you get into data structures and algorithms, READ THE GODDAMN BOOK, and before class! I cannot emphasize strongly enough how much better your understanding of these topics will be if you read the chapters in advance of the lectures.", "aSentId": 57322, "answer": "Question for you. Situation first.\n\nIm finishing up my CS221 Data Structures course in a week. I've read MAYBE 3 pages of the textbook. It's one of 2 classes that I'm completely confident will be an A.\n\nNow the question: Do you still recommend that I read the book anyway? We covered everything starting from Classes, going through lists, trees, graphs, recursion, and hash tables. We're squeezing in sorting and polymorphism here at the end, but wont be tested on those. All of this resulted in an A for me. I have only been coding for about a year. Will the book be that much of a benefit for me to just sit down and read through it during summer?", "corpus": "reddit"},{"docID": "t5_2qhmr", "qSentId": 57323, "question": "Question for you. Situation first.\n\nIm finishing up my CS221 Data Structures course in a week. I've read MAYBE 3 pages of the textbook. It's one of 2 classes that I'm completely confident will be an A.\n\nNow the question: Do you still recommend that I read the book anyway? We covered everything starting from Classes, going through lists, trees, graphs, recursion, and hash tables. We're squeezing in sorting and polymorphism here at the end, but wont be tested on those. All of this resulted in an A for me. I have only been coding for about a year. Will the book be that much of a benefit for me to just sit down and read through it during summer?", "aSentId": 57324, "answer": "you should read the book, you can get an A in the class and still have missed things that will show up in later classes or in a tech interview.", "corpus": "reddit"},{"docID": "t5_2qhmr", "qSentId": 57323, "question": "Question for you. Situation first.\n\nIm finishing up my CS221 Data Structures course in a week. I've read MAYBE 3 pages of the textbook. It's one of 2 classes that I'm completely confident will be an A.\n\nNow the question: Do you still recommend that I read the book anyway? We covered everything starting from Classes, going through lists, trees, graphs, recursion, and hash tables. We're squeezing in sorting and polymorphism here at the end, but wont be tested on those. All of this resulted in an A for me. I have only been coding for about a year. Will the book be that much of a benefit for me to just sit down and read through it during summer?", "aSentId": 57326, "answer": "Are you taking it at ccny?", "corpus": "reddit"},{"docID": "t5_2qhmr", "qSentId": 57327, "question": "Are you taking it at ccny?", "aSentId": 57328, "answer": "What's that? community college in new york?\n\nedit: Googled it. Nope. I'm at a state university in the South.", "corpus": "reddit"},{"docID": "t5_2qhmr", "qSentId": 57323, "question": "Question for you. Situation first.\n\nIm finishing up my CS221 Data Structures course in a week. I've read MAYBE 3 pages of the textbook. It's one of 2 classes that I'm completely confident will be an A.\n\nNow the question: Do you still recommend that I read the book anyway? We covered everything starting from Classes, going through lists, trees, graphs, recursion, and hash tables. We're squeezing in sorting and polymorphism here at the end, but wont be tested on those. All of this resulted in an A for me. I have only been coding for about a year. Will the book be that much of a benefit for me to just sit down and read through it during summer?", "aSentId": 57330, "answer": "If you're sure you're doing fine in the class then consider it optional. Keep it around afterwards for reference. Reading it can also be good practice for the kind of analytical thinking you'll need for later classes. ", "corpus": "reddit"},{"docID": "t5_2qhmr", "qSentId": 57335, "question": "I did. \nIt's called being a student. \n\nThe difference is what you do with that feeling. \n\nHere is an example. \n\nI took an algorithm complexity class. The notation alone was over my head. \n\nWhat I came to learn was that my community collage didn't cover the information as well as the equivalent class which was a prerequisite to this class. \n\nI went home everyday and did double the homework.  \n\nThe honest truth is. Everything you need to know is being covered in every prerequisite. If you don't digest something, it will come back to haunt you. \n\nEven maybe years later at work \n\nFor me it was functional programming. Lambda functions pfffft. \n\nWell years later I was ask to learn Scala to write programs that can be proven to be correct. Cost me 6 months to get to where I needed to. Which is nothing compared to the reputation it cost me. I was the super star of everything until that point. \n\nTldr. You will always feel like you don't know enough. That's a good thing. Get the basics down and know that you will always have to study. Even after graduation. \n\n", "aSentId": 57336, "answer": "I'm transferring from community college next fall and I'm pretty nervous about being unprepared.  Anything I should be sure to know before I transfer?", "corpus": "reddit"},{"docID": "t5_2qhmr", "qSentId": 57337, "question": "I'm transferring from community college next fall and I'm pretty nervous about being unprepared.  Anything I should be sure to know before I transfer?", "aSentId": 57338, "answer": "I would say what /u/PressF1 said is accurate. But more than anything, I dont know what your short coming could be. Its not to say that your Community College is bad, just that they might not have the same structure as you would think once you are at the university level. Ill tell you what I did. \n\n\nFind the equivalent undergrad classes that you have already taken; take a note of the times they are being offered and what books they are using. If at any point you find that you lack knowledge on a subject, take a look at the book or drop in on the class if it doesn't clash with your schedule. \n\nBut more importantly, and its true of every class, ask questions when you dont know. Dont ignore it. It WILL COME back to get you. I promise. I dont care if you are in the last semester of your college career during finals in a operating system design class which was purlely written in C and by some miracle, you have made it to the final and you have to ask what a compiler is. Sure, you teacher might not pass you. But its far better than graduating. Getting a job. Then asking your coworker what a compiler is. I remember reading a story hear of an intern who wasn't offered a position because he didn't know what a pointer was. I dont remeber if he was a first year CS student, in which case I would say thats a little rash....\n\n\nMy experience is that you get to learn everything at least twice in CS. With one exception; Discrete Structures. This was only taught once to me. Learn it, love it, live it. Everything else will come easy. Even though it might feel that you don't directly leverage that information, its understanding will build greatly.  \n\nTL;DR It doesnt matter if you are unprepared. When you find out what you lack. Go find a way to learn it. Drop in on the classes. Repeat class. Read the book again. Do a small project that focuses on that. But dont ignore it\n\n\n", "corpus": "reddit"},{"docID": "t5_2qhmr", "qSentId": 57339, "question": "I would say what /u/PressF1 said is accurate. But more than anything, I dont know what your short coming could be. Its not to say that your Community College is bad, just that they might not have the same structure as you would think once you are at the university level. Ill tell you what I did. \n\n\nFind the equivalent undergrad classes that you have already taken; take a note of the times they are being offered and what books they are using. If at any point you find that you lack knowledge on a subject, take a look at the book or drop in on the class if it doesn't clash with your schedule. \n\nBut more importantly, and its true of every class, ask questions when you dont know. Dont ignore it. It WILL COME back to get you. I promise. I dont care if you are in the last semester of your college career during finals in a operating system design class which was purlely written in C and by some miracle, you have made it to the final and you have to ask what a compiler is. Sure, you teacher might not pass you. But its far better than graduating. Getting a job. Then asking your coworker what a compiler is. I remember reading a story hear of an intern who wasn't offered a position because he didn't know what a pointer was. I dont remeber if he was a first year CS student, in which case I would say thats a little rash....\n\n\nMy experience is that you get to learn everything at least twice in CS. With one exception; Discrete Structures. This was only taught once to me. Learn it, love it, live it. Everything else will come easy. Even though it might feel that you don't directly leverage that information, its understanding will build greatly.  \n\nTL;DR It doesnt matter if you are unprepared. When you find out what you lack. Go find a way to learn it. Drop in on the classes. Repeat class. Read the book again. Do a small project that focuses on that. But dont ignore it\n\n\n", "aSentId": 57340, "answer": "Thank you for taking the time to write this!  I appreciate it.  That's a great idea dropping in on the earlier prereq classes, I will make sure to try to do that.", "corpus": "reddit"},{"docID": "t5_2qhmr", "qSentId": 57339, "question": "I would say what /u/PressF1 said is accurate. But more than anything, I dont know what your short coming could be. Its not to say that your Community College is bad, just that they might not have the same structure as you would think once you are at the university level. Ill tell you what I did. \n\n\nFind the equivalent undergrad classes that you have already taken; take a note of the times they are being offered and what books they are using. If at any point you find that you lack knowledge on a subject, take a look at the book or drop in on the class if it doesn't clash with your schedule. \n\nBut more importantly, and its true of every class, ask questions when you dont know. Dont ignore it. It WILL COME back to get you. I promise. I dont care if you are in the last semester of your college career during finals in a operating system design class which was purlely written in C and by some miracle, you have made it to the final and you have to ask what a compiler is. Sure, you teacher might not pass you. But its far better than graduating. Getting a job. Then asking your coworker what a compiler is. I remember reading a story hear of an intern who wasn't offered a position because he didn't know what a pointer was. I dont remeber if he was a first year CS student, in which case I would say thats a little rash....\n\n\nMy experience is that you get to learn everything at least twice in CS. With one exception; Discrete Structures. This was only taught once to me. Learn it, love it, live it. Everything else will come easy. Even though it might feel that you don't directly leverage that information, its understanding will build greatly.  \n\nTL;DR It doesnt matter if you are unprepared. When you find out what you lack. Go find a way to learn it. Drop in on the classes. Repeat class. Read the book again. Do a small project that focuses on that. But dont ignore it\n\n\n", "aSentId": 57342, "answer": "Good advice, but the thought of a senior who doesn't know what a compiler is... disturbing to say the least.", "corpus": "reddit"},{"docID": "t5_2qhmr", "qSentId": 57343, "question": "Good advice, but the thought of a senior who doesn't know what a compiler is... disturbing to say the least.", "aSentId": 57344, "answer": "&gt; operating system design class which was purely written in C \n\nIt gets even worse", "corpus": "reddit"},{"docID": "t5_2qhmr", "qSentId": 57337, "question": "I'm transferring from community college next fall and I'm pretty nervous about being unprepared.  Anything I should be sure to know before I transfer?", "aSentId": 57346, "answer": "Make sure you have a solid grasp of data structures, ESPECIALLY the fundamental building block atructures (array, linked list, tree), some basics in algorithms (complexity of various operations in the fundamental structures, complexity of searches and sorts, etc.) \n\nAlso have a strong understanding of memory and how it works.\n\nThe most important thing is that you understand the core concepts of programming, if you know that learning the syntax and benefits of a language will be mich easier because you'll be learning that language, not how to program and that language.\n\nTo prepare I highly recommend you work on a big project, ideally with friends but alone is fine too. Make sure it's something you're interested in.", "corpus": "reddit"},{"docID": "t5_2qhmr", "qSentId": 57347, "question": "Make sure you have a solid grasp of data structures, ESPECIALLY the fundamental building block atructures (array, linked list, tree), some basics in algorithms (complexity of various operations in the fundamental structures, complexity of searches and sorts, etc.) \n\nAlso have a strong understanding of memory and how it works.\n\nThe most important thing is that you understand the core concepts of programming, if you know that learning the syntax and benefits of a language will be mich easier because you'll be learning that language, not how to program and that language.\n\nTo prepare I highly recommend you work on a big project, ideally with friends but alone is fine too. Make sure it's something you're interested in.", "aSentId": 57348, "answer": "Thanks for the advice!  Do you mind linking some resources for learning about memory?  Also, I've only taken CS classes that were Java based (plus an intro to linux/unix class), should I spend some time learning C++?  ", "corpus": "reddit"},{"docID": "t5_2qhmr", "qSentId": 57349, "question": "Thanks for the advice!  Do you mind linking some resources for learning about memory?  Also, I've only taken CS classes that were Java based (plus an intro to linux/unix class), should I spend some time learning C++?  ", "aSentId": 57350, "answer": "If your goal is to learn about memory, you should use C.\n\nI love c++ and use it daily, but it makes the memory management a lot easier. If you start in C you don't get things like a constructor and destructor, no smart pointers, so you really have to know what you're doing more in c than c++. I think I am a stronger dev because I started in c and learned to appreciate how much can be done automatically by c++.", "corpus": "reddit"},{"docID": "t5_2qhmr", "qSentId": 57337, "question": "I'm transferring from community college next fall and I'm pretty nervous about being unprepared.  Anything I should be sure to know before I transfer?", "aSentId": 57352, "answer": "Just be prepared for a bit of an ego check.  I walked in to a major university with a 4.0 from a community college thinking I was just incredibly smart and classes would be a breeze.  I was not and they were not. Also, I was working full time and I was able to take a full course load and keep up at community college.  That came to an abrupt end at a real college. Just keep in mind when planning that you will likely be expected to do a lot more work than you did at the community college. \n\nOn the other hand, I also had no idea that grades at the university were often curved,  as that just wasn't done at community college...at least not the one I went to.  As such, I spent my first semester convinced I was going to have to retake classes when in fact I got all A's and B's.  \n\nBest advice is to go in knowing it's going to be hard.  Expect it and don't get discouraged.   It's hard for almost everyone whether they admit it or not. Talk to your professors if you start getting in trouble and keep in mind your work doesn't have to be perfect, it's just has to get you enough points to pass the class...partial credit can be a beautiful thing sometimes! ", "corpus": "reddit"},{"docID": "t5_2qhmr", "qSentId": 57353, "question": "Just be prepared for a bit of an ego check.  I walked in to a major university with a 4.0 from a community college thinking I was just incredibly smart and classes would be a breeze.  I was not and they were not. Also, I was working full time and I was able to take a full course load and keep up at community college.  That came to an abrupt end at a real college. Just keep in mind when planning that you will likely be expected to do a lot more work than you did at the community college. \n\nOn the other hand, I also had no idea that grades at the university were often curved,  as that just wasn't done at community college...at least not the one I went to.  As such, I spent my first semester convinced I was going to have to retake classes when in fact I got all A's and B's.  \n\nBest advice is to go in knowing it's going to be hard.  Expect it and don't get discouraged.   It's hard for almost everyone whether they admit it or not. Talk to your professors if you start getting in trouble and keep in mind your work doesn't have to be perfect, it's just has to get you enough points to pass the class...partial credit can be a beautiful thing sometimes! ", "aSentId": 57354, "answer": "Thanks for the advice!", "corpus": "reddit"},{"docID": "t5_2qhmr", "qSentId": 57358, "question": "Nope, you are the only person who has ever had imposters syndrome.   \nWe're all amazing programmers and know exactly what we're doing. We snicker behind your back whenever we see you Google anything.\n\nWe actually get together every week to talk about you and how bad you are at it.", "aSentId": 57359, "answer": "I'll bring the donuts this week!", "corpus": "reddit"},{"docID": "t5_2qhmr", "qSentId": 57358, "question": "Nope, you are the only person who has ever had imposters syndrome.   \nWe're all amazing programmers and know exactly what we're doing. We snicker behind your back whenever we see you Google anything.\n\nWe actually get together every week to talk about you and how bad you are at it.", "aSentId": 57361, "answer": "&gt;We actually get together every week to talk about you and how bad you are at it.\n\nLighten up, GLaDOS. Jesus.", "corpus": "reddit"},{"docID": "t5_2qhmr", "qSentId": 57358, "question": "Nope, you are the only person who has ever had imposters syndrome.   \nWe're all amazing programmers and know exactly what we're doing. We snicker behind your back whenever we see you Google anything.\n\nWe actually get together every week to talk about you and how bad you are at it.", "aSentId": 57363, "answer": "Unu, gurl'er gur jbefg, nera'g gurl? Yvxr, YRNEA GB PBZCHGRE FPVRAPR, CYF, AHO.", "corpus": "reddit"},{"docID": "t5_2qhmr", "qSentId": 57364, "question": "Unu, gurl'er gur jbefg, nera'g gurl? Yvxr, YRNEA GB PBZCHGRE FPVRAPR, CYF, AHO.", "aSentId": 57365, "answer": "V xabj, evtug? Yvxr, pna gurl rira rapelcgvba? V org gurl qba'g rira yvsg.", "corpus": "reddit"},{"docID": "t5_2qhmr", "qSentId": 57369, "question": "Logically in every CS class there is one person who feels like this. ", "aSentId": 57370, "answer": "Sorry, I can't resist...\n\nThis doesn't follow from logic. Logically, there's at least one person who's the worst in the class (by strict grade ranking). It doesn't follow that there's at least one person who **feels like that person is them**.\n\nYou could have a class full of great students, none of whom think they're any good at all, and you can have a class full of future marketing majors, all of whom think they're Linus Torvalds.", "corpus": "reddit"},{"docID": "t5_2qhmr", "qSentId": 57371, "question": "Sorry, I can't resist...\n\nThis doesn't follow from logic. Logically, there's at least one person who's the worst in the class (by strict grade ranking). It doesn't follow that there's at least one person who **feels like that person is them**.\n\nYou could have a class full of great students, none of whom think they're any good at all, and you can have a class full of future marketing majors, all of whom think they're Linus Torvalds.", "aSentId": 57372, "answer": "Logically I am still correct, there may be more than one student who feels they are the worst, but there is at least one student. And even if they are all geniuses, there will be one genius that feels they are the least capable genius in the class :-)", "corpus": "reddit"},{"docID": "t5_2qhmr", "qSentId": 57373, "question": "Logically I am still correct, there may be more than one student who feels they are the worst, but there is at least one student. And even if they are all geniuses, there will be one genius that feels they are the least capable genius in the class :-)", "aSentId": 57374, "answer": "&gt; there may be more than one student who feels they are the worst, but there is at least one student\n\nSuppose you and I are the only two students in the class. I think you're the worst student, and you think I'm the worst student. No one in our class thinks they themselves are the worst.\n\nIt's necessarily true that there exists at least one student who is viewed to be worst by at least one student in the class. It's *not* necessarily true that there exists at least one student who thinks they themselves are the worst student.\n\n", "corpus": "reddit"},{"docID": "t5_2qhmr", "qSentId": 57375, "question": "&gt; there may be more than one student who feels they are the worst, but there is at least one student\n\nSuppose you and I are the only two students in the class. I think you're the worst student, and you think I'm the worst student. No one in our class thinks they themselves are the worst.\n\nIt's necessarily true that there exists at least one student who is viewed to be worst by at least one student in the class. It's *not* necessarily true that there exists at least one student who thinks they themselves are the worst student.\n\n", "aSentId": 57376, "answer": "To get this perfect case scenario you are having to dismiss a wide range of variables that exist in the real world. \n\nIt will be pretty self evident to a student in a class where n&gt;1 that they are the worst once the first assessment is returned. \n\nWhen Time==0 there might not be a student who feels they are the worst, however students don't enter a course as a blank slate, their self esteem based on a lack of success in the past will indicate to them that they are out of their depth.   ", "corpus": "reddit"},{"docID": "t5_2qhmr", "qSentId": 57377, "question": "To get this perfect case scenario you are having to dismiss a wide range of variables that exist in the real world. \n\nIt will be pretty self evident to a student in a class where n&gt;1 that they are the worst once the first assessment is returned. \n\nWhen Time==0 there might not be a student who feels they are the worst, however students don't enter a course as a blank slate, their self esteem based on a lack of success in the past will indicate to them that they are out of their depth.   ", "aSentId": 57378, "answer": "I have no idea how likely it is in real life. Dunning-Kruger says it isn't crazy to imagine the worst student overestimating their own competence. But regardless, I was sort of whimsically picking on your use of \"logically\". It may or may not be almost always true in the real world, but in formal logic, it definitely isn't guaranteed.\n\nWe might be beating it into the ground at this point though. :)", "corpus": "reddit"},{"docID": "t5_2qhmr", "qSentId": 57407, "question": "i don't have this problem", "aSentId": 57408, "answer": "Mr or Mrs Dunning-Kruger I presume?", "corpus": "reddit"},{"docID": "t5_2qhmr", "qSentId": 57411, "question": "Calculating the longest increasing subsequence where two attributes are considered for each item.", "aSentId": 57412, "answer": "&gt; Overall the time complexity would be O(2nlogn) (one for sort, one for search) or simply O(nlogn).\n\nWas that given as a requirement?  I mean, does someone has a solution (maybe your instructor) for this that is provably O(nlogn)?\n\nedit: I would set up 2 lists in memory.  One ordered by the 1st var, and one by the 2nd.  So you've got 2 lists of the same thing in different orders.  Base your 'final' list on traversing/searching those two.  Feels like its going to be a lot of brute force linear searches.  I'd have no idea of runtime without actually writing out the search/comparison part and sizing it up to a worst case list, like where var 1 is the inverse order of var 2, aka as out-of-order as possible, and the longest solution is just 1 element.  I guess you'd be iterating down each list n times or something.", "corpus": "reddit"},{"docID": "t5_2qhmr", "qSentId": 57416, "question": "I'm teaching my first class on C! I would like your advice on what you liked/didn't about when you learned.", "aSentId": 57417, "answer": "I taught a couple C++ courses at a college. I just wanted to throw 3 pieces of advice at you that I have found extremely useful. Hope this helps!\n\n(1) Always try to demonstrate a need for what you are about to teach before you teach it (i.e., when you're introducing loops, show them a problem that requires loops and try to work through how annoying/difficult it is to solve that problem without some mechanism for repeating execution of lines of code)\n\n(2) When you are teaching students syntax, spend a lot of time outside of class practicing writing the syntax on the board. Go to the back of the classroom and look at what you have written. Does it look clear? Will students be able to read it and make sense of it, no matter where they're sitting?\n\n(3) Give students challenging questions during class. It's easy to drift when people are lecturing on coding---if you don't press them to participate, they won't.", "corpus": "reddit"},{"docID": "t5_2qhmr", "qSentId": 57418, "question": "I taught a couple C++ courses at a college. I just wanted to throw 3 pieces of advice at you that I have found extremely useful. Hope this helps!\n\n(1) Always try to demonstrate a need for what you are about to teach before you teach it (i.e., when you're introducing loops, show them a problem that requires loops and try to work through how annoying/difficult it is to solve that problem without some mechanism for repeating execution of lines of code)\n\n(2) When you are teaching students syntax, spend a lot of time outside of class practicing writing the syntax on the board. Go to the back of the classroom and look at what you have written. Does it look clear? Will students be able to read it and make sense of it, no matter where they're sitting?\n\n(3) Give students challenging questions during class. It's easy to drift when people are lecturing on coding---if you don't press them to participate, they won't.", "aSentId": 57419, "answer": "Great to hear from someone who has done it. Thanks!", "corpus": "reddit"},{"docID": "t5_2qhmr", "qSentId": 57416, "question": "I'm teaching my first class on C! I would like your advice on what you liked/didn't about when you learned.", "aSentId": 57421, "answer": "I learned C on my own in high school. My background was some assembly (6502) and a lot of C-64 Basic.\n\nThe first thing I wished I learned was what a variable was. I would drill this into the head of the students of what is happening when you declare a variable in a function, where it goes when the function returns, and when it is initialized. Once they make the connection between memory addresses and variables, then you can introduce pointers, which is singularly the most complicated topic in C.\n\nI remember reading chapter upon chapter about what C actually was, what a compiler was, how the linker worked, etc, etc... when I didn't really care (and I still largely don't.) I wanted to know how to program in the language. Understanding by what process the language is translated into machine code is really secondary to understanding what the language means in machine code.", "corpus": "reddit"},{"docID": "t5_2qhmr", "qSentId": 57422, "question": "I learned C on my own in high school. My background was some assembly (6502) and a lot of C-64 Basic.\n\nThe first thing I wished I learned was what a variable was. I would drill this into the head of the students of what is happening when you declare a variable in a function, where it goes when the function returns, and when it is initialized. Once they make the connection between memory addresses and variables, then you can introduce pointers, which is singularly the most complicated topic in C.\n\nI remember reading chapter upon chapter about what C actually was, what a compiler was, how the linker worked, etc, etc... when I didn't really care (and I still largely don't.) I wanted to know how to program in the language. Understanding by what process the language is translated into machine code is really secondary to understanding what the language means in machine code.", "aSentId": 57423, "answer": "Thanks! Good insights!", "corpus": "reddit"},{"docID": "t5_2qhmr", "qSentId": 57416, "question": "I'm teaching my first class on C! I would like your advice on what you liked/didn't about when you learned.", "aSentId": 57425, "answer": "Is this a beginners introduction to programming course?\n\nI'm going to answer as my \"What I wish I had known learning C (not C++) after doing a year of CS (using Java and scheme)\"\n\n* Types and casting - specifically across systems (so floats aren't always the same float but uint8_t is always uint8_t) and the implications of casts (casting to and from char for example,  where you can lose -ve parts).\n\n* Good use of the preprocessor.  Protect against multiple reads with ifndef,  use defines to clean up \"static\" code which has a long arg lists with one useful setting.  Making an appropriate DEBUG or BENCHMARK mode with it.\n\n* ~~namespaces and how to use them.~~ (C++,  I wrote the bullets before the intro)\n\n* functions as variables.  Very useful for benchmarking / testing frameworks,  managing critical regions,  even guaranteeing use of malloc and free.\n\n* malloc and free.  How to use them safely (with fail fast for example),  when to write your own malloc (there are times this is appropriate.  Its just really really rare.  Like super rare embedded systems with multi-chip shared memory rare).", "corpus": "reddit"},{"docID": "t5_2qhmr", "qSentId": 57426, "question": "Is this a beginners introduction to programming course?\n\nI'm going to answer as my \"What I wish I had known learning C (not C++) after doing a year of CS (using Java and scheme)\"\n\n* Types and casting - specifically across systems (so floats aren't always the same float but uint8_t is always uint8_t) and the implications of casts (casting to and from char for example,  where you can lose -ve parts).\n\n* Good use of the preprocessor.  Protect against multiple reads with ifndef,  use defines to clean up \"static\" code which has a long arg lists with one useful setting.  Making an appropriate DEBUG or BENCHMARK mode with it.\n\n* ~~namespaces and how to use them.~~ (C++,  I wrote the bullets before the intro)\n\n* functions as variables.  Very useful for benchmarking / testing frameworks,  managing critical regions,  even guaranteeing use of malloc and free.\n\n* malloc and free.  How to use them safely (with fail fast for example),  when to write your own malloc (there are times this is appropriate.  Its just really really rare.  Like super rare embedded systems with multi-chip shared memory rare).", "aSentId": 57427, "answer": "namespaces in C? ;)", "corpus": "reddit"},{"docID": "t5_2qhmr", "qSentId": 57428, "question": "namespaces in C? ;)", "aSentId": 57429, "answer": "shhh,  I got carried away", "corpus": "reddit"},{"docID": "t5_2qhmr", "qSentId": 57431, "question": "Pointers... Those guys took me a full week of headbanging to understand.  Looking back at it they make perfect sense, but for some reason learning those was a nightmare.\n\nOne thing I really enjoyed about my class was the structure of the lecture.  It was broken into three parts.\n\n1) Beginning of class is a 10 minute review of the homework due that day.  What questions/ideas were tough.  This really helped when a particularly difficult concept was introduced because we got to learn about it one day.  Do the homework.  Then learn about it again, really hammered the ideas home.  Most of the time it's learn, homework, forget about it, test...\n\n2) New material - lecture\n\n3) 10 minutes at the end to begin on homework/ work on current project.\n\nAnother note about the class.  In a broader sense the class was broken into 2 chunks.   The first half of the learn was classic read textbook, homework, exam.  The Second half was a project.  Groups of 2 or 3, and decide a program/game you would like to make.  Classes were basically time to work with partner and to ask teacher questions.  I feel like I learned the most during this portion because when you get to make a project you like, with dedicated time with the teacher, it lets the student drive their learning further.  \n\n\n\nBest of luck ;)", "aSentId": 57432, "answer": "That's a really nice class structure, specially splitting the theory and projects. Currently studying Algorithms and our teacher follows a similar path except the final part of starting homework, which sounds great to read the assignment and solve any apparent doubt on requirements and such. I'd suggest it or implement it if I ever teach.", "corpus": "reddit"},{"docID": "t5_2qhmr", "qSentId": 57434, "question": "These might be a bit advanced for a first class, perhaps towards the end of a semester you can discuss these. I find these to be a problem area in many new grads to the work force:\n\n* Make sure you give a good foundation on allocating memory and freeing it.  Touching on functions that allocate memory without being obvious (e.g. strdup).\n* Discuss buffer and array overflows (e.g. sprintf vs snprintf, strcat vs strncat)\n* Teach them to use debuggers and other useful tools (e.g. gdb, valgrind, etc)\n\nGood luck, and don't feel bad if half the students drop your class, C can be a difficult thing to get your head around.  My class went form 20 something to less than 10 over the semester when I was in college. \n\nAbove all thank you for training the next generation!", "aSentId": 57435, "answer": "I'll second the suggestion to teach them about debuggers.  Stepping through code in a debugger might be a good way to demonstrate how loops and 'if' statements work.  Before even running new code, show them how you can step through it to check that it's working as expected. \n\nAlso, be sure to teach 'while' loops before 'for' loops. The syntax of a for loop is not intuitive and can look strange to new programmers.\n", "corpus": "reddit"},{"docID": "t5_2qhmr", "qSentId": 57437, "question": "I learned C++ as my first language in university. In retrospective, it was a good course except for one detail. At the beginning of the semester, the teacher basically told us that we had to download Visual Studio Express (which obviously require you to have Windows installed) and sent us a step-by-step guide on how to setup a project to get started. I find this approach a bit overkill for the kind of tasks you do in those courses. I had absolutly no idea what I was actually doing when hitting \"F5\" to start compilation and I felt overwhelmed by all Visual Studio features.\n\nI think an interesting approach would have been to learn some bash commands (i.e. ls,cd,mkdir,rm,touch..) and to compile on the command line with gcc. This approach wouldn't be difficult since you generally have all of your source code in one file when you begin programming. You could spend a whole class just naviguating in bash, compiling some simple programs and explaining what the commands you type actually do. The obvious downisde is that your students have to install Linux on their machine. \n\nDo you think I am asking too much for an introductory class (if it is one of course) ? ", "aSentId": 57438, "answer": "That's what they did at my university. C++ was the first language they taught, and even before they taught us that, they taught us how to navigate the command line. It would have had to have been the first two weeks were just on the command line and linux. They also had us install Linux in a virtual machine, and all the computer labs used Ubuntu.\n\nAfter that however, they gave us free reign over how we compiled and ran our programs, we could use IDEs if we wanted to, all you had to do was ensure that your program compiled on the command line aswell.", "corpus": "reddit"},{"docID": "t5_2qhmr", "qSentId": 57437, "question": "I learned C++ as my first language in university. In retrospective, it was a good course except for one detail. At the beginning of the semester, the teacher basically told us that we had to download Visual Studio Express (which obviously require you to have Windows installed) and sent us a step-by-step guide on how to setup a project to get started. I find this approach a bit overkill for the kind of tasks you do in those courses. I had absolutly no idea what I was actually doing when hitting \"F5\" to start compilation and I felt overwhelmed by all Visual Studio features.\n\nI think an interesting approach would have been to learn some bash commands (i.e. ls,cd,mkdir,rm,touch..) and to compile on the command line with gcc. This approach wouldn't be difficult since you generally have all of your source code in one file when you begin programming. You could spend a whole class just naviguating in bash, compiling some simple programs and explaining what the commands you type actually do. The obvious downisde is that your students have to install Linux on their machine. \n\nDo you think I am asking too much for an introductory class (if it is one of course) ? ", "aSentId": 57440, "answer": "Learning via the command line is my preference.\n\nWhen I learned they gave us a machine with the command line and a text editor,  the next lesson we tried several different IDE's.  I used IDE's until we did a systems class where I mastered the command line,  already knew about my compiler and I haven't looked back.", "corpus": "reddit"},{"docID": "t5_2qhmr", "qSentId": 57451, "question": "Object Oriented Design Patterns", "aSentId": 57452, "answer": "Patterns are a mean to achieve a design goal.  Your goal here seems to be using the patterns and your mean designing something.  That sounds a good way to ensure that patterns will be abused and used when they are not useful. ", "corpus": "reddit"},{"docID": "t5_2qhmr", "qSentId": 57453, "question": "Patterns are a mean to achieve a design goal.  Your goal here seems to be using the patterns and your mean designing something.  That sounds a good way to ensure that patterns will be abused and used when they are not useful. ", "aSentId": 57454, "answer": "That's just what my project is. I understand when I would use them when I normally code but my teacher wants us to prove that we know the patterns. ", "corpus": "reddit"},{"docID": "t5_2qhmr", "qSentId": 57451, "question": "Object Oriented Design Patterns", "aSentId": 57456, "answer": "Well start with Singleton. That one's easy and now you only have to do three others!", "corpus": "reddit"},{"docID": "t5_2qhmr", "qSentId": 57457, "question": "Well start with Singleton. That one's easy and now you only have to do three others!", "aSentId": 57458, "answer": "The one so much abused that it has been called an anti-pattern ?", "corpus": "reddit"},{"docID": "t5_2qhmr", "qSentId": 57457, "question": "Well start with Singleton. That one's easy and now you only have to do three others!", "aSentId": 57460, "answer": "I can do the patterns, I just need some ideas to bounce around that I could base my project on. ", "corpus": "reddit"},{"docID": "t5_2qhmr", "qSentId": 57461, "question": "I can do the patterns, I just need some ideas to bounce around that I could base my project on. ", "aSentId": 57462, "answer": "Fizzbuzz", "corpus": "reddit"},{"docID": "t5_2qhmr", "qSentId": 57464, "question": "Anyone having lecture notes or slides for CS 5625?", "aSentId": 57465, "answer": "...because this is the kind of quality content we want on a Computer Science subreddit.\n\nBorderline illegal, no potential discussion, lazy.", "corpus": "reddit"},{"docID": "t5_2qhmr", "qSentId": 57464, "question": "Anyone having lecture notes or slides for CS 5625?", "aSentId": 57467, "answer": "Where are the mods, when this kind of post comes this high-up?\n", "corpus": "reddit"},{"docID": "t5_2qhmr", "qSentId": 57469, "question": "[AI Algorithm]Using an AI technique to sort a grid", "aSentId": 57470, "answer": "I don't completely understand the role that the entities/robots play in sorting the grid as well as the pathfinding aspect. It sounds like this is some kind of game and I was wondering if you could breakdown what exactly goes on as the program runs.", "corpus": "reddit"},{"docID": "t5_2qhmr", "qSentId": 57471, "question": "I don't completely understand the role that the entities/robots play in sorting the grid as well as the pathfinding aspect. It sounds like this is some kind of game and I was wondering if you could breakdown what exactly goes on as the program runs.", "aSentId": 57472, "answer": "Well, it's basically a simulation which accepts orders. With each order, a robot is tasked to grab the product listed in the order, from its corresponding shelf. When the product is collected, the product/shelf gains popularity. If the product's/shelf's popularity were to enter a new predefined range, another robot is tasked to check if that said product/shelf needs to be moved up or down the grid. (the decaying popularity calls the same function as when after a robot collects a product)\n\nI hope this clarifies the problem a bit more. :)", "corpus": "reddit"},{"docID": "t5_2qhmr", "qSentId": 57473, "question": "Well, it's basically a simulation which accepts orders. With each order, a robot is tasked to grab the product listed in the order, from its corresponding shelf. When the product is collected, the product/shelf gains popularity. If the product's/shelf's popularity were to enter a new predefined range, another robot is tasked to check if that said product/shelf needs to be moved up or down the grid. (the decaying popularity calls the same function as when after a robot collects a product)\n\nI hope this clarifies the problem a bit more. :)", "aSentId": 57474, "answer": "So can robot only perform 1 swap at a time so that the shelf gradually moves down until it's in the right spot, or can it calculate the shelf's correct spot before moving, pick it up and move it to that correct spot in one movement?", "corpus": "reddit"},{"docID": "t5_2qhmr", "qSentId": 57475, "question": "So can robot only perform 1 swap at a time so that the shelf gradually moves down until it's in the right spot, or can it calculate the shelf's correct spot before moving, pick it up and move it to that correct spot in one movement?", "aSentId": 57476, "answer": "Currently, the robot should be able to determine where the shelf should go. However, it can only hold one shelf at a time. So I have: an origin point and destination point. It just has to bring the shelf at the origin point to the destination point and then exchange the shelves at that location. After, it would have to locate the best location to put the shelf that the robot is currently holding.\n\nLet R be the robot;\nLet X be the popular shelf that needs sorting;\nLet Y be the shelf that it has determined to replace;\n\nR goes to X, picks it up.\nR then goes to Y, switches X with Y. R now holds Y.\nR brings Y to wherever it needs to go or old position of X.\n\nSince Y can also be a popular shelf, it may need to switch with another shelf. The question is how many times and where.", "corpus": "reddit"},{"docID": "t5_2qhmr", "qSentId": 57478, "question": "[Theory of Computation] Approximation Algorithm HW Problem", "aSentId": 57479, "answer": "Assume wlog that the algorithm returns v0, the volume of plot 0, and the last crate put in plot 0 has weight w.  We have the following inequalities relating vi (the volume of plot i at the end of the algorithm), w, and OPT (the optimal assignment), the proof of which I leave as an exercise.\n\n* w \u2264 OPT \u2264 v0\n* vi + w \u2265 v0 for all i\n* k\\*OPT \u2265 \u03a3 w[i] = \u03a3vi\n\nIt follows that   \n(k\\*OPT \u2264) k\\* v0 \u2264 \u03a3vi + k\\*w \u2264 2k\\*OPT\n\nAnd hence the algorithm is a 2-approximation.\n\n**Edit**  \nTo get the 3/2-approximation you break it into two cases depending on how many crates v0 contains.  If it is one, then the algorithm will return the optimal value.  If it is more than one then you can show that\n\n* w \u2264 OPT/2\n\nAnd the 3/2 bound follows directly.", "corpus": "reddit"},{"docID": "t5_2qhmr", "qSentId": 57480, "question": "Assume wlog that the algorithm returns v0, the volume of plot 0, and the last crate put in plot 0 has weight w.  We have the following inequalities relating vi (the volume of plot i at the end of the algorithm), w, and OPT (the optimal assignment), the proof of which I leave as an exercise.\n\n* w \u2264 OPT \u2264 v0\n* vi + w \u2265 v0 for all i\n* k\\*OPT \u2265 \u03a3 w[i] = \u03a3vi\n\nIt follows that   \n(k\\*OPT \u2264) k\\* v0 \u2264 \u03a3vi + k\\*w \u2264 2k\\*OPT\n\nAnd hence the algorithm is a 2-approximation.\n\n**Edit**  \nTo get the 3/2-approximation you break it into two cases depending on how many crates v0 contains.  If it is one, then the algorithm will return the optimal value.  If it is more than one then you can show that\n\n* w \u2264 OPT/2\n\nAnd the 3/2 bound follows directly.", "aSentId": 57481, "answer": "Woot! Thanks so much mate!", "corpus": "reddit"},{"docID": "t5_2qhmr", "qSentId": 57483, "question": "Moore\u2019s Law turns 50, but will it soon cease to exist?", "aSentId": 57484, "answer": "This is akin to arguing about how small you could make a vacuum tube. We already know a number of technologies that supercede silicon as well as radically different computational platforms such as memristors. The only reason we're still using silicon is economics. We don't have to make any new discoveries to move past it, it's just a matter of commercializing the alternatives.", "corpus": "reddit"},{"docID": "t5_2qhmr", "qSentId": 57485, "question": "This is akin to arguing about how small you could make a vacuum tube. We already know a number of technologies that supercede silicon as well as radically different computational platforms such as memristors. The only reason we're still using silicon is economics. We don't have to make any new discoveries to move past it, it's just a matter of commercializing the alternatives.", "aSentId": 57486, "answer": "Well Silicon was chosen because of manufacturing constraints that made it the most economical material. Now that we are likely within an order of magnitude of the manufacturing limits for Silicon are the alternatives economically worthwhile? That's a question that a lot of R&amp;D money is trying to answer. There's a big difference between a laboratory test and a mass produced product. \n\nAt some point, we reach a price-performance tradeoff where the market gets too small. ", "corpus": "reddit"},{"docID": "t5_2qhmr", "qSentId": 57487, "question": "Well Silicon was chosen because of manufacturing constraints that made it the most economical material. Now that we are likely within an order of magnitude of the manufacturing limits for Silicon are the alternatives economically worthwhile? That's a question that a lot of R&amp;D money is trying to answer. There's a big difference between a laboratory test and a mass produced product. \n\nAt some point, we reach a price-performance tradeoff where the market gets too small. ", "aSentId": 57488, "answer": "My point is that it's not a question of if but of when. We're already hitting the limits of what silicon is capable of. At the same time we have more and more demand for processing power and miniaturization. While it will take money and time to move from laboratory to production I think there's little question that it will happen.", "corpus": "reddit"},{"docID": "t5_2qhmr", "qSentId": 57485, "question": "This is akin to arguing about how small you could make a vacuum tube. We already know a number of technologies that supercede silicon as well as radically different computational platforms such as memristors. The only reason we're still using silicon is economics. We don't have to make any new discoveries to move past it, it's just a matter of commercializing the alternatives.", "aSentId": 57490, "answer": "Exactly. And GPUs are becoming more relevant to general purpose computing, even more so when neural net based apps start hitting the mainstream. Just summing the count of transistors in these coprocessor an the expected growth would give a few more cycles of mores law, without having new technologies. \n\n", "corpus": "reddit"},{"docID": "t5_2qhmr", "qSentId": 57483, "question": "Moore\u2019s Law turns 50, but will it soon cease to exist?", "aSentId": 57492, "answer": "To be fair, people have been asking that question for pretty much all of the last 50 years. People were convinced that there was no way it could continue, but sure enough, it has. This is like trying to predict when a traffic light will change. You can guess all you like, but it will change when it damn well pleases.", "corpus": "reddit"},{"docID": "t5_2qhmr", "qSentId": 57493, "question": "To be fair, people have been asking that question for pretty much all of the last 50 years. People were convinced that there was no way it could continue, but sure enough, it has. This is like trying to predict when a traffic light will change. You can guess all you like, but it will change when it damn well pleases.", "aSentId": 57494, "answer": "It's one thing when people talk about limits imposed by technology (which evolves) or economics (which are not really known) and another thing when people talk about limits imposed by physics. ", "corpus": "reddit"},{"docID": "t5_2qhmr", "qSentId": 57495, "question": "It's one thing when people talk about limits imposed by technology (which evolves) or economics (which are not really known) and another thing when people talk about limits imposed by physics. ", "aSentId": 57496, "answer": "You're right. Vacuum tubes can only get so small before it becomes physically infeasible. If only three were alternative technologies. /s\n\nThe father of nanotechnology mentioned it may be possible to have thousands of modern-day class CPUs in the size of a cell. Or something crazy like that.", "corpus": "reddit"},{"docID": "t5_2qhmr", "qSentId": 57497, "question": "You're right. Vacuum tubes can only get so small before it becomes physically infeasible. If only three were alternative technologies. /s\n\nThe father of nanotechnology mentioned it may be possible to have thousands of modern-day class CPUs in the size of a cell. Or something crazy like that.", "aSentId": 57498, "answer": "So what happens after we have transistors that are 1 atom wide? Lets make it 1 hydrogen atom wide for the sake of argument. The nucleus can't be split into anything stable. Therefore, it must end by (or in reality, before) that point. ", "corpus": "reddit"},{"docID": "t5_2qhmr", "qSentId": 57499, "question": "So what happens after we have transistors that are 1 atom wide? Lets make it 1 hydrogen atom wide for the sake of argument. The nucleus can't be split into anything stable. Therefore, it must end by (or in reality, before) that point. ", "aSentId": 57500, "answer": "We might find ways to do many calculations at once on a single atom, we don't really know what the upper information density limit is.", "corpus": "reddit"},{"docID": "t5_2qhmr", "qSentId": 57499, "question": "So what happens after we have transistors that are 1 atom wide? Lets make it 1 hydrogen atom wide for the sake of argument. The nucleus can't be split into anything stable. Therefore, it must end by (or in reality, before) that point. ", "aSentId": 57502, "answer": "I don't know. I'm not an expert in nanotechnology. I'm not going to say it's possible or impossible.\n\nHere's is Eric Drexler talking about what I mentioned: https://youtu.be/LeM5qWbKfNk?t=4m32s", "corpus": "reddit"},{"docID": "t5_2qhmr", "qSentId": 57499, "question": "So what happens after we have transistors that are 1 atom wide? Lets make it 1 hydrogen atom wide for the sake of argument. The nucleus can't be split into anything stable. Therefore, it must end by (or in reality, before) that point. ", "aSentId": 57504, "answer": "We just aren't there yet. There are information-theoretic lower bounds to how small a processor can get, but we're orders of magnitude away from them.", "corpus": "reddit"},{"docID": "t5_2qhmr", "qSentId": 57495, "question": "It's one thing when people talk about limits imposed by technology (which evolves) or economics (which are not really known) and another thing when people talk about limits imposed by physics. ", "aSentId": 57506, "answer": "Yes. This argument has been made the whole time as well, and is the most mind boggling part. For my whole life people have been saying that the physics of the system doesn't allow for any more minuaturization. I have learned to never underestimate people's ability to come up with innovative solutions to what might seem like impossible tasks. Like I said, maybe the end is here, or maybe we come up with a brand new solution that keeps the process going. We'll see.", "corpus": "reddit"},{"docID": "t5_2qhmr", "qSentId": 57507, "question": "Yes. This argument has been made the whole time as well, and is the most mind boggling part. For my whole life people have been saying that the physics of the system doesn't allow for any more minuaturization. I have learned to never underestimate people's ability to come up with innovative solutions to what might seem like impossible tasks. Like I said, maybe the end is here, or maybe we come up with a brand new solution that keeps the process going. We'll see.", "aSentId": 57508, "answer": "So what happens after we have transistors that are 1 atom wide? Lets make it 1 hydrogen atom wide for the sake of argument. The nucleus can't be split into anything stable. Therefore, it must end by (or in reality, before) that point. ", "corpus": "reddit"},{"docID": "t5_2qhmr", "qSentId": 57509, "question": "So what happens after we have transistors that are 1 atom wide? Lets make it 1 hydrogen atom wide for the sake of argument. The nucleus can't be split into anything stable. Therefore, it must end by (or in reality, before) that point. ", "aSentId": 57510, "answer": "Maybe, or we rethink how we built transistors in order to continue packing in higher density. Or we come up with something entirely different. It seems impossible, but many times where people have ruled things impossible, we've found solutions.", "corpus": "reddit"},{"docID": "t5_2qhmr", "qSentId": 57511, "question": "Maybe, or we rethink how we built transistors in order to continue packing in higher density. Or we come up with something entirely different. It seems impossible, but many times where people have ruled things impossible, we've found solutions.", "aSentId": 57512, "answer": "You're comparing not knowing how to do something physics says isn't impossible to breaking all of physics. It is a bit different. ", "corpus": "reddit"},{"docID": "t5_2qhmr", "qSentId": 57513, "question": "You're comparing not knowing how to do something physics says isn't impossible to breaking all of physics. It is a bit different. ", "aSentId": 57514, "answer": "You're running in circles. That same argument has been made before. To use my example from before, you can say the light is about to change, and you could be right. Or maybe you won't be. We'll see.", "corpus": "reddit"},{"docID": "t5_2qhmr", "qSentId": 57495, "question": "It's one thing when people talk about limits imposed by technology (which evolves) or economics (which are not really known) and another thing when people talk about limits imposed by physics. ", "aSentId": 57516, "answer": "Physics evolves too.", "corpus": "reddit"},{"docID": "t5_2qhmr", "qSentId": 57483, "question": "Moore\u2019s Law turns 50, but will it soon cease to exist?", "aSentId": 57518, "answer": "While Moore's Law was originally about ICs, I think in the year 2015 it's fair to widen that definition to something a little less restrictive. Call it a \"weak Moore's Law\". ", "corpus": "reddit"},{"docID": "t5_2qhmr", "qSentId": 57519, "question": "While Moore's Law was originally about ICs, I think in the year 2015 it's fair to widen that definition to something a little less restrictive. Call it a \"weak Moore's Law\". ", "aSentId": 57520, "answer": "A less is Moore law", "corpus": "reddit"},{"docID": "t5_2qhmr", "qSentId": 57521, "question": "A less is Moore law", "aSentId": 57522, "answer": "lesser moores law?", "corpus": "reddit"},{"docID": "t5_2qhmr", "qSentId": 57524, "question": "Read \"Moore\" was thinking \"DeMorgan.\" So much confusion followed. ", "aSentId": 57525, "answer": "That would be fun.  There aren't very many groundbreaking discoveries in propositional logic these days.", "corpus": "reddit"},{"docID": "t5_2qhmr", "qSentId": 57526, "question": "That would be fun.  There aren't very many groundbreaking discoveries in propositional logic these days.", "aSentId": 57527, "answer": "\"BREAKING: A does not in fact imply A\"", "corpus": "reddit"},{"docID": "t5_2qhmr", "qSentId": 57531, "question": "So Intels newest chips have traces that are 14nm (nanometers) wide, and and the average diameter of an atom is about .1nm (1 Angstrom).  So we are certainly closing in on the smallest a trace could be without electron tunnelling effects, where the electrons will pass through material and go places we don't want them to.\n\nWe can still build UP, however.  For the most part, the CPU is one layer, and all the extra thickness of the CPU is a package that protects the etching, and provides a heat sink.  Intel is pioneering \"3D transistors\" right now, which would effectively allow the transistor count to continue increasing by building UP.  \n\nWhat will really make computers faster though, is if someone can come up with a way to implement one program on parallel processors.  Right now if you have multiple cores, your computer run one program on one core, and another on a different core.  If you buy a $5,000 gaming rig with over 10 cores (an Intel Xeon server chip), you are usually not taking advantage or more cores than programs running.\n\nSo, come up with a good way to make existing software run in parallel, and you're rich.  \n\nSource:  I work in the semiconductor industry.\n\nEdit:  A few people have challenged my view on parallel software, and I may be wrong.  Right now all I can say is that I'm not sure anymore.", "aSentId": 57532, "answer": "My understanding is that the dynamic losses are (very roughly) quadratic with respect to voltage, while propagation and switching times (very roughly) linear, meaning that you get more computer per watt as you lower voltage (and speed). At the same time, current chips are thermally limited; you just can't dissipate heat fast enough to clock them much higher. As a result, as transistor count increases, the total performance can go up, though only paired with per-chip clock rates coming down.\n\nSo I've been curious, for current technologies, what is the approximate return on performance per extra transistor assuming a fixed TDP? I'd assume that would be pretty well studied and documented, but I hadn't seen much info about it, being in software myself.", "corpus": "reddit"},{"docID": "t5_2qhmr", "qSentId": 57533, "question": "My understanding is that the dynamic losses are (very roughly) quadratic with respect to voltage, while propagation and switching times (very roughly) linear, meaning that you get more computer per watt as you lower voltage (and speed). At the same time, current chips are thermally limited; you just can't dissipate heat fast enough to clock them much higher. As a result, as transistor count increases, the total performance can go up, though only paired with per-chip clock rates coming down.\n\nSo I've been curious, for current technologies, what is the approximate return on performance per extra transistor assuming a fixed TDP? I'd assume that would be pretty well studied and documented, but I hadn't seen much info about it, being in software myself.", "aSentId": 57534, "answer": "As far as power loss, Ohm's law tells us I=V/R.  The formula for power dissipated is Watts = V * I.  Now substitute in Ohm's law for I in the power equation, and Watts = V * V/R.  So energy use can go up exponentially for increases in voltage.\n\nThere are a few challenges related to lowering the voltage and saving power.  Ideally, the voltage is high or low in a transmission line/between transistors to represent a 1 or 0, transitioning like a square wave.  In reality there is a rise and fall time (non-vertical slope to the transition between a 0 and 1), and \"ringing\" that happens during the transition (oscillation above and below the target voltage).  You can fix the ringing by adding capacitance but at the cost of slowing the transition time and therefore clock speed.  If the ringing is too bad, a 1 could ring down to a 0 before settling at 1.  We lower the voltage to save power and reduce rise/fall time, but speed is still limited due to the ringing issue.\n\nUnfortunately I don't have an answer to your question.  I worked mostly with the power deliver system on desktops, servers, laptops, tablets and smartphones.  Most people aren't too concerned with better performance anymore (non-gamers anyway), and so we focused on improving power usage to extend battery life for the most part.\n\nThe people who could answer your question would be one of the Ph.Ds at Intel who are actually designing the chips.", "corpus": "reddit"},{"docID": "t5_2qhmr", "qSentId": 57535, "question": "As far as power loss, Ohm's law tells us I=V/R.  The formula for power dissipated is Watts = V * I.  Now substitute in Ohm's law for I in the power equation, and Watts = V * V/R.  So energy use can go up exponentially for increases in voltage.\n\nThere are a few challenges related to lowering the voltage and saving power.  Ideally, the voltage is high or low in a transmission line/between transistors to represent a 1 or 0, transitioning like a square wave.  In reality there is a rise and fall time (non-vertical slope to the transition between a 0 and 1), and \"ringing\" that happens during the transition (oscillation above and below the target voltage).  You can fix the ringing by adding capacitance but at the cost of slowing the transition time and therefore clock speed.  If the ringing is too bad, a 1 could ring down to a 0 before settling at 1.  We lower the voltage to save power and reduce rise/fall time, but speed is still limited due to the ringing issue.\n\nUnfortunately I don't have an answer to your question.  I worked mostly with the power deliver system on desktops, servers, laptops, tablets and smartphones.  Most people aren't too concerned with better performance anymore (non-gamers anyway), and so we focused on improving power usage to extend battery life for the most part.\n\nThe people who could answer your question would be one of the Ph.Ds at Intel who are actually designing the chips.", "aSentId": 57536, "answer": "TIL x^2 is exponential on x.", "corpus": "reddit"},{"docID": "t5_2qhmr", "qSentId": 57537, "question": "TIL x^2 is exponential on x.", "aSentId": 57538, "answer": "It's a pretty common mistake to say \"exponential\" when you mean \"polynomial\"... so I doubt today is the first time you're hearing it misused.", "corpus": "reddit"},{"docID": "t5_2qhmr", "qSentId": 57539, "question": "It's a pretty common mistake to say \"exponential\" when you mean \"polynomial\"... so I doubt today is the first time you're hearing it misused.", "aSentId": 57540, "answer": "Is this misuse?  I'm saying that Watts are related to Volts exponentially, as opposed to linearly.  Polynomially could infer an exponential as well as linear relationship...while exponential to me cuts out the linear aspect of the polnomial (a coefficient times x itself.)  I'm probably wrong but this is how I hear professors speak in high-level math courses...and I go to the finest of state univeristies.  :-(   (I'm in the US....)", "corpus": "reddit"},{"docID": "t5_2qhmr", "qSentId": 57537, "question": "TIL x^2 is exponential on x.", "aSentId": 57542, "answer": "Everyone seems to be taking me to task on what word I should have used there.  In my defense, I feel like it's technically correct to say that y has an exponential relationship to x, if y=x^2.  Why is my statement incorrect?  Is there any reason besides that it doesn't specify what power x is rasied to?", "corpus": "reddit"},{"docID": "t5_2qhmr", "qSentId": 57535, "question": "As far as power loss, Ohm's law tells us I=V/R.  The formula for power dissipated is Watts = V * I.  Now substitute in Ohm's law for I in the power equation, and Watts = V * V/R.  So energy use can go up exponentially for increases in voltage.\n\nThere are a few challenges related to lowering the voltage and saving power.  Ideally, the voltage is high or low in a transmission line/between transistors to represent a 1 or 0, transitioning like a square wave.  In reality there is a rise and fall time (non-vertical slope to the transition between a 0 and 1), and \"ringing\" that happens during the transition (oscillation above and below the target voltage).  You can fix the ringing by adding capacitance but at the cost of slowing the transition time and therefore clock speed.  If the ringing is too bad, a 1 could ring down to a 0 before settling at 1.  We lower the voltage to save power and reduce rise/fall time, but speed is still limited due to the ringing issue.\n\nUnfortunately I don't have an answer to your question.  I worked mostly with the power deliver system on desktops, servers, laptops, tablets and smartphones.  Most people aren't too concerned with better performance anymore (non-gamers anyway), and so we focused on improving power usage to extend battery life for the most part.\n\nThe people who could answer your question would be one of the Ph.Ds at Intel who are actually designing the chips.", "aSentId": 57544, "answer": "&gt;So energy use can go up **quadratically** for increases in voltage.\n\nFTFY.", "corpus": "reddit"},{"docID": "t5_2qhmr", "qSentId": 57545, "question": "&gt;So energy use can go up **quadratically** for increases in voltage.\n\nFTFY.", "aSentId": 57546, "answer": "Why is exponentially not also correct but just less specific than quadratically in my last post?", "corpus": "reddit"},{"docID": "t5_2qhmr", "qSentId": 57547, "question": "Why is exponentially not also correct but just less specific than quadratically in my last post?", "aSentId": 57548, "answer": "Quadratically is x^(2), but exponentially is 2^(x) (or another number than 2).\n\n\"Exponentially\" grows much faster than any polynomial.", "corpus": "reddit"},{"docID": "t5_2qhmr", "qSentId": 57531, "question": "So Intels newest chips have traces that are 14nm (nanometers) wide, and and the average diameter of an atom is about .1nm (1 Angstrom).  So we are certainly closing in on the smallest a trace could be without electron tunnelling effects, where the electrons will pass through material and go places we don't want them to.\n\nWe can still build UP, however.  For the most part, the CPU is one layer, and all the extra thickness of the CPU is a package that protects the etching, and provides a heat sink.  Intel is pioneering \"3D transistors\" right now, which would effectively allow the transistor count to continue increasing by building UP.  \n\nWhat will really make computers faster though, is if someone can come up with a way to implement one program on parallel processors.  Right now if you have multiple cores, your computer run one program on one core, and another on a different core.  If you buy a $5,000 gaming rig with over 10 cores (an Intel Xeon server chip), you are usually not taking advantage or more cores than programs running.\n\nSo, come up with a good way to make existing software run in parallel, and you're rich.  \n\nSource:  I work in the semiconductor industry.\n\nEdit:  A few people have challenged my view on parallel software, and I may be wrong.  Right now all I can say is that I'm not sure anymore.", "aSentId": 57550, "answer": "3D transistors are about using \"rails\" rather than strips of metal for wiring.\n\nhttps://imgur.com/AtwrUZ0\n\nIt's essentially like stacking the transistors on their side so you can squeeze more in.  This isn't a thing where you can continuously build \"up\".\n\nAlso, stacking a bunch of chips on top of eachother isn't going to help the power/performance, which is really the key to die reductions.  As power/performance gets better you can get faster and faster computers that *use the same amount of power*.  High end servers etc can have a gajillion cores and runs as fast as they need to, but the power pull is going to blow a hole in your wall if you try to plug it in at home.\n\nWe want smaller chips because it means we can use less power, which is great for everyone from data centers to laptops to mobile phones.  Speed is great too, and it's easily attained by adding cores, but a vast majority of people have much more speed than they need, and really care more about the power savings, which can only be accomplished by making the transistors smaller and smaller.", "corpus": "reddit"},{"docID": "t5_2qhmr", "qSentId": 57551, "question": "3D transistors are about using \"rails\" rather than strips of metal for wiring.\n\nhttps://imgur.com/AtwrUZ0\n\nIt's essentially like stacking the transistors on their side so you can squeeze more in.  This isn't a thing where you can continuously build \"up\".\n\nAlso, stacking a bunch of chips on top of eachother isn't going to help the power/performance, which is really the key to die reductions.  As power/performance gets better you can get faster and faster computers that *use the same amount of power*.  High end servers etc can have a gajillion cores and runs as fast as they need to, but the power pull is going to blow a hole in your wall if you try to plug it in at home.\n\nWe want smaller chips because it means we can use less power, which is great for everyone from data centers to laptops to mobile phones.  Speed is great too, and it's easily attained by adding cores, but a vast majority of people have much more speed than they need, and really care more about the power savings, which can only be accomplished by making the transistors smaller and smaller.", "aSentId": 57552, "answer": "Thanks, I was under the impression that the idea was to build up, but it's just a 2D space savings it what you seem to be saying.", "corpus": "reddit"},{"docID": "t5_2qhmr", "qSentId": 57531, "question": "So Intels newest chips have traces that are 14nm (nanometers) wide, and and the average diameter of an atom is about .1nm (1 Angstrom).  So we are certainly closing in on the smallest a trace could be without electron tunnelling effects, where the electrons will pass through material and go places we don't want them to.\n\nWe can still build UP, however.  For the most part, the CPU is one layer, and all the extra thickness of the CPU is a package that protects the etching, and provides a heat sink.  Intel is pioneering \"3D transistors\" right now, which would effectively allow the transistor count to continue increasing by building UP.  \n\nWhat will really make computers faster though, is if someone can come up with a way to implement one program on parallel processors.  Right now if you have multiple cores, your computer run one program on one core, and another on a different core.  If you buy a $5,000 gaming rig with over 10 cores (an Intel Xeon server chip), you are usually not taking advantage or more cores than programs running.\n\nSo, come up with a good way to make existing software run in parallel, and you're rich.  \n\nSource:  I work in the semiconductor industry.\n\nEdit:  A few people have challenged my view on parallel software, and I may be wrong.  Right now all I can say is that I'm not sure anymore.", "aSentId": 57554, "answer": "&gt; if someone can come up with a way to implement one program on parallel processors. Right now if you have multiple cores, your computer run one program on one core, and another on a different core.\n\nWe have that, it's called mullti-threading. We even have languages that make it easy to not have the big issues (data races, etc) like haskell and rust. And a lot of games coming out do use multiple cores (2 is still multiple), so do a lot of cpu intensive programs like video editing software and compiles", "corpus": "reddit"},{"docID": "t5_2qhmr", "qSentId": 57555, "question": "&gt; if someone can come up with a way to implement one program on parallel processors. Right now if you have multiple cores, your computer run one program on one core, and another on a different core.\n\nWe have that, it's called mullti-threading. We even have languages that make it easy to not have the big issues (data races, etc) like haskell and rust. And a lot of games coming out do use multiple cores (2 is still multiple), so do a lot of cpu intensive programs like video editing software and compiles", "aSentId": 57556, "answer": "I might have been wrong on the multi-threading thing then, I'll have to look into it more.  Perhaps it was that it was difficult to spread the load in parallel on a larger number of processors, say 10 for example.", "corpus": "reddit"},{"docID": "t5_2qhmr", "qSentId": 57555, "question": "&gt; if someone can come up with a way to implement one program on parallel processors. Right now if you have multiple cores, your computer run one program on one core, and another on a different core.\n\nWe have that, it's called mullti-threading. We even have languages that make it easy to not have the big issues (data races, etc) like haskell and rust. And a lot of games coming out do use multiple cores (2 is still multiple), so do a lot of cpu intensive programs like video editing software and compiles", "aSentId": 57558, "answer": "Are you sure that's what multi threading is?  I had an engineer at Intel explain it to me as the processor fetching the next instruction ahead of time while the current CPU cycle was running.", "corpus": "reddit"},{"docID": "t5_2qhmr", "qSentId": 57559, "question": "Are you sure that's what multi threading is?  I had an engineer at Intel explain it to me as the processor fetching the next instruction ahead of time while the current CPU cycle was running.", "aSentId": 57560, "answer": "I'm fairly certain, I've been able to max out the cpu with one program before (according to the program htop) using parallel threads. Maybe he was explaining a more low level aspect of it that allows programmers to use multiple threads without a lot of overhead? ", "corpus": "reddit"},{"docID": "t5_2qhmr", "qSentId": 57561, "question": "I'm fairly certain, I've been able to max out the cpu with one program before (according to the program htop) using parallel threads. Maybe he was explaining a more low level aspect of it that allows programmers to use multiple threads without a lot of overhead? ", "aSentId": 57562, "answer": "Yes definitely lower-level.  I think what he was getting at was that it's difficult to write software to take advantage of multiple cores, and it would be great if a compiler existed that could efficiently compile code to run as fast as possible by using many cores.  ", "corpus": "reddit"},{"docID": "t5_2qhmr", "qSentId": 57559, "question": "Are you sure that's what multi threading is?  I had an engineer at Intel explain it to me as the processor fetching the next instruction ahead of time while the current CPU cycle was running.", "aSentId": 57564, "answer": "Fetching the next instruction ahead of time is pipelining.  Multi-threading is having multiple tasks (threads) in software that could be run at the same time.  Whether they are run at the same time depends on the hardware and the OS, but generally you will have one thread running at the same time per core you have.  The OS switches between threads if you have more running than you have cores.  In this case, each thread gets to run for a little bit until it either gives up control or uses up its allotted time slice.  Hyper threading is when each core can have multiple threads (usually 2) running at the same time.  The way this works is the context for both threads is maintained at the same time and both try to run at the same time.  If they both need a particular piece of hardware (for example, an adder), then the processor core will serialize the access so only 1 runs at a time.  This is useful so that if a thread is waiting for memory or something, the other thread on that core can run.", "corpus": "reddit"},{"docID": "t5_2qhmr", "qSentId": 57567, "question": "Is silicon still largely two dimensional? If so, would improvements in stacking still leave room for further improvements in transistor density?", "aSentId": 57568, "answer": "I read something about how 3d wont work like you think bc of heat. Likely some very new tech will be needed to really build 3d circuits in any dense way. ", "corpus": "reddit"},{"docID": "t5_2qhmr", "qSentId": 57567, "question": "Is silicon still largely two dimensional? If so, would improvements in stacking still leave room for further improvements in transistor density?", "aSentId": 57570, "answer": "2.5d and 3d is coming, but as others have said, heat is an issue. Also, it seems to be more more applicable solving IO issues than it is to speed up computation.", "corpus": "reddit"},{"docID": "t5_2qhmr", "qSentId": 57571, "question": "2.5d and 3d is coming, but as others have said, heat is an issue. Also, it seems to be more more applicable solving IO issues than it is to speed up computation.", "aSentId": 57572, "answer": "Heat is an issue only because of the realities of software. As you hold TDP constant and increase transistor count, you reduce voltage and clock speed. The net is still an increase in performance. The problem is in the software.", "corpus": "reddit"},{"docID": "t5_2qhmr", "qSentId": 57574, "question": "We've already seen a decreased rate of improvement in processor speed for years. We have multiple cores and virtual cores now but the speed of an individual core isn't climbing into the tens of GHz. Distributed computing and multithreading has helped us keep pace with overall increase in speed but that can really only go so far.\n\nI think the real issue that needs to be addressed is heat dissipation. There haven't been really any major improvements in end-user levels of heat-sinks for a long time. Basically just attached metal and a fan to cool the metal which ends up getting clogged with dust that decreases performance. MAYBE a water cooling system which is basically just pipes and a radiator. I feel like there is a lot of room for improvement in heat dissipation which would allow us to push processor speed. Hell, look at the speeds they can achieve with a bathtub full of liquid nitrogen. The real issue right now is heat.", "aSentId": 57575, "answer": "The GHz wars were real for awhile, but processor speed isn't just about clock rate anymore. The processor's architecture is just as important.\n\nAdditionally, Moore's law didn't really say anything about speed. Yes, it's implied, but what it really said was that the number of transistors on a chip would double ever 16 or so months, so looking at clock rates is especially wrong.", "corpus": "reddit"},{"docID": "t5_2qhmr", "qSentId": 57576, "question": "The GHz wars were real for awhile, but processor speed isn't just about clock rate anymore. The processor's architecture is just as important.\n\nAdditionally, Moore's law didn't really say anything about speed. Yes, it's implied, but what it really said was that the number of transistors on a chip would double ever 16 or so months, so looking at clock rates is especially wrong.", "aSentId": 57577, "answer": "Right. The largest gate to performance is probably latency into the heap, and modern out-of-order cpu designs bend over backwards to try hide that latency or at least do something useful while waiting for main memory access.", "corpus": "reddit"},{"docID": "t5_2qhmr", "qSentId": 57576, "question": "The GHz wars were real for awhile, but processor speed isn't just about clock rate anymore. The processor's architecture is just as important.\n\nAdditionally, Moore's law didn't really say anything about speed. Yes, it's implied, but what it really said was that the number of transistors on a chip would double ever 16 or so months, so looking at clock rates is especially wrong.", "aSentId": 57579, "answer": "This is a really important point. You want a processor that runs at 20 ghz? No problemo! Just slap a shitton of pipeline stages into everything so the critical path is extremely short and you can tick your clock real fast. The processor will of course be not only hideously slower than anything else out there and also consume unbelievable amounts of energy but the ghz will be through the roof! ", "corpus": "reddit"},{"docID": "t5_2qhmr", "qSentId": 57576, "question": "The GHz wars were real for awhile, but processor speed isn't just about clock rate anymore. The processor's architecture is just as important.\n\nAdditionally, Moore's law didn't really say anything about speed. Yes, it's implied, but what it really said was that the number of transistors on a chip would double ever 16 or so months, so looking at clock rates is especially wrong.", "aSentId": 57581, "answer": "The GHz wars ended not because it doesn't matter but because it wasn't viable anymore, but Moore's Law really doesn't imply anything about speed. \n\nBut we at least expect processors to get 'better', otherwise what's the point of increasing density?", "corpus": "reddit"},{"docID": "t5_2qhmr", "qSentId": 57574, "question": "We've already seen a decreased rate of improvement in processor speed for years. We have multiple cores and virtual cores now but the speed of an individual core isn't climbing into the tens of GHz. Distributed computing and multithreading has helped us keep pace with overall increase in speed but that can really only go so far.\n\nI think the real issue that needs to be addressed is heat dissipation. There haven't been really any major improvements in end-user levels of heat-sinks for a long time. Basically just attached metal and a fan to cool the metal which ends up getting clogged with dust that decreases performance. MAYBE a water cooling system which is basically just pipes and a radiator. I feel like there is a lot of room for improvement in heat dissipation which would allow us to push processor speed. Hell, look at the speeds they can achieve with a bathtub full of liquid nitrogen. The real issue right now is heat.", "aSentId": 57583, "answer": "Moore's law is about transistor die shrinks, so you can fit 2x the transistors in the same area. GHZ clock rate increases are different, but I agree we aren't seeing the improvement we have enjoyed in the past", "corpus": "reddit"},{"docID": "t5_2qhmr", "qSentId": 57584, "question": "Moore's law is about transistor die shrinks, so you can fit 2x the transistors in the same area. GHZ clock rate increases are different, but I agree we aren't seeing the improvement we have enjoyed in the past", "aSentId": 57585, "answer": "Because we are nearly hitting wall that is speed of light. Increase clock rate some more, and signal won't come from one end of die to another before next cycle starts.", "corpus": "reddit"},{"docID": "t5_2qhmr", "qSentId": 57574, "question": "We've already seen a decreased rate of improvement in processor speed for years. We have multiple cores and virtual cores now but the speed of an individual core isn't climbing into the tens of GHz. Distributed computing and multithreading has helped us keep pace with overall increase in speed but that can really only go so far.\n\nI think the real issue that needs to be addressed is heat dissipation. There haven't been really any major improvements in end-user levels of heat-sinks for a long time. Basically just attached metal and a fan to cool the metal which ends up getting clogged with dust that decreases performance. MAYBE a water cooling system which is basically just pipes and a radiator. I feel like there is a lot of room for improvement in heat dissipation which would allow us to push processor speed. Hell, look at the speeds they can achieve with a bathtub full of liquid nitrogen. The real issue right now is heat.", "aSentId": 57587, "answer": "I should mention I have a graphics intense game on my cell phone that ends up getting hot if I play it for too long. ", "corpus": "reddit"},{"docID": "t5_2qhmr", "qSentId": 57589, "question": "I think the real revolution will be turning that heat into usable energy for the device again. \n\nEdit: a word", "aSentId": 57590, "answer": "You can do this already, instead of a space heater start F@H on your PC", "corpus": "reddit"},{"docID": "t5_2qhmr", "qSentId": 57591, "question": "You can do this already, instead of a space heater start F@H on your PC", "aSentId": 57592, "answer": "Well this is the first time I've heard someone reference Folding ever since bitcoins became the popular way to convert electricity to heat.", "corpus": "reddit"},{"docID": "t5_2qhmr", "qSentId": 57589, "question": "I think the real revolution will be turning that heat into usable energy for the device again. \n\nEdit: a word", "aSentId": 57594, "answer": "The laws of thermodynamics would like to have a word with you.", "corpus": "reddit"},{"docID": "t5_2qhmr", "qSentId": 57589, "question": "I think the real revolution will be turning that heat into usable energy for the device again. \n\nEdit: a word", "aSentId": 57596, "answer": "Second law of thermodynamics.", "corpus": "reddit"},{"docID": "t5_2qhmr", "qSentId": 57603, "question": "Moores law (should be renamed to \"Moore's temporary phenomenon\") ended about 6 years ago when we didn't get reasonably priced 8 GHZ processors 18 months after the reasonably priced 4 Ghz processors populated store shelves.  \n\nWhat bugs me more than hitting the platau is that most people think moore's law is in effect.  It's like people memorize things without understanding the spirit of what they stand for.", "aSentId": 57604, "answer": "Moore's law is not about clock rate but transistor density.", "corpus": "reddit"},{"docID": "t5_2qhmr", "qSentId": 57605, "question": "Moore's law is not about clock rate but transistor density.", "aSentId": 57606, "answer": "*woosh*", "corpus": "reddit"},{"docID": "t5_2qhmr", "qSentId": 57603, "question": "Moores law (should be renamed to \"Moore's temporary phenomenon\") ended about 6 years ago when we didn't get reasonably priced 8 GHZ processors 18 months after the reasonably priced 4 Ghz processors populated store shelves.  \n\nWhat bugs me more than hitting the platau is that most people think moore's law is in effect.  It's like people memorize things without understanding the spirit of what they stand for.", "aSentId": 57608, "answer": "You're idiot.\n\nGo to wikipedia and read what Moore's Law is.\n\n*Hint: it's not about clock speed.*", "corpus": "reddit"},{"docID": "t5_2qhmr", "qSentId": 57609, "question": "You're idiot.\n\nGo to wikipedia and read what Moore's Law is.\n\n*Hint: it's not about clock speed.*", "aSentId": 57610, "answer": "Even transistor density vs cost ended a while ago. ", "corpus": "reddit"},{"docID": "t5_2qhmr", "qSentId": 57612, "question": "Computer Science help", "aSentId": 57613, "answer": "Please read the sidebar. And when you decide to go to /r/learnprogramming, read the sidebar there too.  ", "corpus": "reddit"},{"docID": "t5_2qhmr", "qSentId": 57614, "question": "Please read the sidebar. And when you decide to go to /r/learnprogramming, read the sidebar there too.  ", "aSentId": 57615, "answer": "/r/programminghomework is also well suited for this kind of question.\n\nEDIT: nevermind, I didn't even take a look at the age of those posts.", "corpus": "reddit"},{"docID": "t5_2qhmr", "qSentId": 57612, "question": "Computer Science help", "aSentId": 57617, "answer": "This is probably the wrong subreddit? Also, why not try stackoverflow, there are people there literally addicted to helping people like you for points and silly badges.", "corpus": "reddit"},{"docID": "t5_2qhmr", "qSentId": 57612, "question": "Computer Science help", "aSentId": 57619, "answer": "Darn Shoeshiner lady, I wish I could help but I am stuck as well, please help world. . . we only want answers. . . Please.\n", "corpus": "reddit"},{"docID": "t5_2qhmr", "qSentId": 57620, "question": "Darn Shoeshiner lady, I wish I could help but I am stuck as well, please help world. . . we only want answers. . . Please.\n", "aSentId": 57621, "answer": "I'm not in this class but these gals are pretty funny. You should help them", "corpus": "reddit"},{"docID": "t5_2qhmr", "qSentId": 57624, "question": "Any ideas for movies I should watch while possibly tripping on acid that might amp up motivation for seriously learning to code?", "aSentId": 57625, "answer": "Watching some hacker movie while frying ain't gonna make you motivated to learn code...  The most motivating thing I've done while frying is talking to someone (also tripping) about all the cool projects you could actually do with programming.. And realising how easily you could realize those goals if you actually put work into it", "corpus": "reddit"},{"docID": "t5_2qhmr", "qSentId": 57627, "question": "How do I stand out?", "aSentId": 57628, "answer": "A portfolio fat with impressive projects will put you well ahead of 90% of the competition. Create things and share them.", "corpus": "reddit"},{"docID": "t5_2qhmr", "qSentId": 57629, "question": "A portfolio fat with impressive projects will put you well ahead of 90% of the competition. Create things and share them.", "aSentId": 57630, "answer": "+1. When evaluating new grads, your resume goes to the top of the pile if you have work in hand. Only a small fraction of grads show up with anything, but they make up the majority of new grad hires anywhere that I've worked.", "corpus": "reddit"},{"docID": "t5_2qhmr", "qSentId": 57631, "question": "+1. When evaluating new grads, your resume goes to the top of the pile if you have work in hand. Only a small fraction of grads show up with anything, but they make up the majority of new grad hires anywhere that I've worked.", "aSentId": 57632, "answer": "Is this actually true. It seems like plenty of cs majors have some work experience. ", "corpus": "reddit"},{"docID": "t5_2qhmr", "qSentId": 57633, "question": "Is this actually true. It seems like plenty of cs majors have some work experience. ", "aSentId": 57634, "answer": "Plenty do have relevant work experience. I suspect that many more don't, but it's hard to tell what the ratio is. All else being the same: if a group has to submit more resumes before getting hired then that group is represented disproportionately in the pool of resumes.", "corpus": "reddit"},{"docID": "t5_2qhmr", "qSentId": 57635, "question": "Plenty do have relevant work experience. I suspect that many more don't, but it's hard to tell what the ratio is. All else being the same: if a group has to submit more resumes before getting hired then that group is represented disproportionately in the pool of resumes.", "aSentId": 57636, "answer": "If so many have relevant work experience, what's the use then? I will never be able to stand out within one of the most popular majors.", "corpus": "reddit"},{"docID": "t5_2qhmr", "qSentId": 57629, "question": "A portfolio fat with impressive projects will put you well ahead of 90% of the competition. Create things and share them.", "aSentId": 57638, "answer": "I can't emphasize this more. I'm a second year student who didn't manage to get a single internship. I thought going to a decent school and getting a good GPA would be enough to cut it. Huge mistake. With little to no project experience, I found that most employees don't want me. \n\nI've decided to use my summer building projects which interest me and taking summer class. Hopefully, I'll manage to build up a portfolio and learn as much as I would in an internship in my own!", "corpus": "reddit"},{"docID": "t5_2qhmr", "qSentId": 57629, "question": "A portfolio fat with impressive projects will put you well ahead of 90% of the competition. Create things and share them.", "aSentId": 57640, "answer": "I would love to do this. I want to devote one to three hours a day to personal projects, join key clubs that actually conduct projects, and join competitions. But I do not see how this will put be ahead of other people. It seems like everyone is already doing all of that plus more like volunteering, having a full-time job, and other things that I cannot comprehend.", "corpus": "reddit"},{"docID": "t5_2qhmr", "qSentId": 57641, "question": "I would love to do this. I want to devote one to three hours a day to personal projects, join key clubs that actually conduct projects, and join competitions. But I do not see how this will put be ahead of other people. It seems like everyone is already doing all of that plus more like volunteering, having a full-time job, and other things that I cannot comprehend.", "aSentId": 57642, "answer": "Nobody is doing all of those things. Most of them do one or two and some do none but nobody is doing everything. A portfolio proves you can write code and shows off the kind of code you write. Volunteering and clubs are good but they do not prove you can do anything. A recruiter can look at your portfolio and it will instantly tell him everything he needs to know to call you for an interview. It is even more important than your degree. ", "corpus": "reddit"},{"docID": "t5_2qhmr", "qSentId": 57643, "question": "Nobody is doing all of those things. Most of them do one or two and some do none but nobody is doing everything. A portfolio proves you can write code and shows off the kind of code you write. Volunteering and clubs are good but they do not prove you can do anything. A recruiter can look at your portfolio and it will instantly tell him everything he needs to know to call you for an interview. It is even more important than your degree. ", "aSentId": 57644, "answer": "Everyone has a portfolio. I do not see how it will make me stand out when my competition has just as much as I do.", "corpus": "reddit"},{"docID": "t5_2qhmr", "qSentId": 57645, "question": "Everyone has a portfolio. I do not see how it will make me stand out when my competition has just as much as I do.", "aSentId": 57646, "answer": "No they don't. Plenty of students do the homework and nothing else, unless you're in a top school. Plus, your portfolio is unique. It may well be that you've done something nobody else has that makes you a better fit. And if you don't have a portfolio, then everyone else that does is above you. Even if everyone else had a portfolio, you would at least want to be on the same level, wouldn't you? Your logic sounds like 'if I can't be better than everyone else, then I won't even try to be as good as everyone else'. Unless Larry Page is one of your references, a portfolio will get you further than anything else. Nobody cares about volunteer work in the real world. Nobody cares about your clubs unless your club has produced something real. All they want is evidence that you can do the job. That is it. Your portfolio is that evidence.", "corpus": "reddit"},{"docID": "t5_2qhmr", "qSentId": 57647, "question": "No they don't. Plenty of students do the homework and nothing else, unless you're in a top school. Plus, your portfolio is unique. It may well be that you've done something nobody else has that makes you a better fit. And if you don't have a portfolio, then everyone else that does is above you. Even if everyone else had a portfolio, you would at least want to be on the same level, wouldn't you? Your logic sounds like 'if I can't be better than everyone else, then I won't even try to be as good as everyone else'. Unless Larry Page is one of your references, a portfolio will get you further than anything else. Nobody cares about volunteer work in the real world. Nobody cares about your clubs unless your club has produced something real. All they want is evidence that you can do the job. That is it. Your portfolio is that evidence.", "aSentId": 57648, "answer": "It is useless to be on the same level as everyone else with such a huge number of CS majors. To me, I might as well abandon the CS major if I will just be on the same level. I want to earn my place at the top of the class (or near it, I am pretty sure I can never compete against those guys who have been programming their own linux OS since they were 10), not just be an average joe who has no chance at getting a great job.\n\n\n\n", "corpus": "reddit"},{"docID": "t5_2qhmr", "qSentId": 57649, "question": "It is useless to be on the same level as everyone else with such a huge number of CS majors. To me, I might as well abandon the CS major if I will just be on the same level. I want to earn my place at the top of the class (or near it, I am pretty sure I can never compete against those guys who have been programming their own linux OS since they were 10), not just be an average joe who has no chance at getting a great job.\n\n\n\n", "aSentId": 57650, "answer": "Well I'm sorry you see things that way. I guess there's no helping you. Getting to the top requires drive and talent. You clearly have no drive and sound like you don't have talent so you're probably screwed. Enjoy working at McDonald's, because that's where your attitude is going to get you.", "corpus": "reddit"},{"docID": "t5_2qhmr", "qSentId": 57651, "question": "Well I'm sorry you see things that way. I guess there's no helping you. Getting to the top requires drive and talent. You clearly have no drive and sound like you don't have talent so you're probably screwed. Enjoy working at McDonald's, because that's where your attitude is going to get you.", "aSentId": 57652, "answer": "Attitude has nothing to do with it. Why waste time being average in CS so I can land a crappy job? Talent does not exist. No one is born a CS genius. I have the drive, but it is useless to pour hours into it when all I will end up doing is become average.", "corpus": "reddit"},{"docID": "t5_2qhmr", "qSentId": 57653, "question": "Attitude has nothing to do with it. Why waste time being average in CS so I can land a crappy job? Talent does not exist. No one is born a CS genius. I have the drive, but it is useless to pour hours into it when all I will end up doing is become average.", "aSentId": 57654, "answer": "Lol", "corpus": "reddit"},{"docID": "t5_2qhmr", "qSentId": 57655, "question": "Lol", "aSentId": 57656, "answer": "Oh, a troll. ", "corpus": "reddit"},{"docID": "t5_2qhmr", "qSentId": 57657, "question": "Oh, a troll. ", "aSentId": 57658, "answer": "He's not trolling, he just gave up on you.", "corpus": "reddit"},{"docID": "t5_2qhmr", "qSentId": 57659, "question": "He's not trolling, he just gave up on you.", "aSentId": 57660, "answer": "How did he give up on me? He even said most people do many things. What's the use of trying so hard when all I will end up being is average among a popular major? ", "corpus": "reddit"},{"docID": "t5_2qhmr", "qSentId": 57661, "question": "How did he give up on me? He even said most people do many things. What's the use of trying so hard when all I will end up being is average among a popular major? ", "aSentId": 57662, "answer": "He was giving you advice but you comtinue to have a terrible attitude which made him become sarcastic. The only advice I'll give is stop having a shitty attitude, stop making excuses, and if CS is really something you want to do you'll make it happen. Know how to program, know the languages inside and out and be able to communicate that knowledge and you'll land a job easily. Don't start with you shitty attitude again because that's what I did and I'm doing well for myself and only getting better. ", "corpus": "reddit"},{"docID": "t5_2qhmr", "qSentId": 57663, "question": "He was giving you advice but you comtinue to have a terrible attitude which made him become sarcastic. The only advice I'll give is stop having a shitty attitude, stop making excuses, and if CS is really something you want to do you'll make it happen. Know how to program, know the languages inside and out and be able to communicate that knowledge and you'll land a job easily. Don't start with you shitty attitude again because that's what I did and I'm doing well for myself and only getting better. ", "aSentId": 57664, "answer": "I want to do CS, but I cannot make it happen since the average student is way too good. It is useless jumping in when everyone is going side projects, competitions, and internships. There is no way to stand out.", "corpus": "reddit"},{"docID": "t5_2qhmr", "qSentId": 57627, "question": "How do I stand out?", "aSentId": 57666, "answer": "Empathy. Understand human emotion. Other peoples feelings. That will separate you from many engineers out there.", "corpus": "reddit"},{"docID": "t5_2qhmr", "qSentId": 57667, "question": "Empathy. Understand human emotion. Other peoples feelings. That will separate you from many engineers out there.", "aSentId": 57668, "answer": "I always find it funny that I have aspergers yet it seems like I have more empathy than most people I know.", "corpus": "reddit"},{"docID": "t5_2qhmr", "qSentId": 57669, "question": "I always find it funny that I have aspergers yet it seems like I have more empathy than most people I know.", "aSentId": 57670, "answer": "Please don't use your disability to justify talking down other people,even if they are what you say they are. If you have nothing good to say, nothing good will come of saying it. ", "corpus": "reddit"},{"docID": "t5_2qhmr", "qSentId": 57671, "question": "Please don't use your disability to justify talking down other people,even if they are what you say they are. If you have nothing good to say, nothing good will come of saying it. ", "aSentId": 57672, "answer": "I am not talking down anyone. The stereotypical person with aspergers is considered emotionless. I was joking by saying that me, who has emotional aspergers, has more empathy than most people. ", "corpus": "reddit"},{"docID": "t5_2qhmr", "qSentId": 57627, "question": "How do I stand out?", "aSentId": 57674, "answer": "Learn how to use professional software development tools and methodologies. \n\n* Git (and github.com also, but mostly just Git itself)\n* proficiency with at least one good programming oriented text editor. I recommend sublime text but there are many good choices.\n* understand how to write unit tests and make sure all of your code is adequately tested. this is not optional in a professional setting and the biggest hump on the learning curve for many recent grads is learning how to write good tests. \n* learn how to use Unix. or at least get started, since this is a deep subject. but you should get started early so by the time you graduate the unix shell and the general unix philosophy of system design makes sense to you.\n* do team projects! programming is a team sport at the professional level and unless you've done at least one decent sized project on a team you won't really understand the challenges involved. \n\nalso, in general don't worry that you've \"fucked up your life\". absolutely not. you're a student. you're not capable of fucking up your life at this stage. there's no Gladiator in the pit that will slit your throat for choosing the wrong major. you're learning. focus on that. take pride in the work you do and focus on developing skills. software is only going to become more ubiquitous in the future, the field isn't saturated, its only just now ramping up to meet demand.", "corpus": "reddit"},{"docID": "t5_2qhmr", "qSentId": 57677, "question": "&gt; I want to major in computer science and engineering, but everyone is majoring in it nowadays. \n\nEveryone wants to have these majors because the job market is huge and the jobs pay very well.\n\n&gt; I am not really sure what specific field\n\nI'm assuming you're about to start a CS degree. I'm about to finish my Bachelors degree and get my Masters in CS, and I still have NO CLUE what field I want to go into.\n\n&gt; But I'd imagine most people who get hired for those types of jobs are ChemE with a masters in CS or something like that.\n\nNot necessarily. A lot of work can be interdisciplinary, but Chem/Physics students probably will never touch a piece of code and you'll have to do the job.\n\nHere are some tips:\n\n**Work Hard**\n\nIf it's something you love, you'll want to work hard. Even if you don't love it, continue to work hard. It will pay off - but be sure to realize when enough is enough.\n\n**Have strong communication skills (verbal/written)**\n\nYou'll be surprised at how far ahead you will be of your peers if you can clearly articulate yourself in front of another human being. \n\n**Be open to new opportunities**\n\nTry things. Try things again. Try more things! Keep trying anything you can.\n\n**Internships**\n\nTry your hardest to find an internship while getting your degree. You'll quickly learn that the professional world is MUCH different than the academic world.\n\n**Follow what you love**\n\nIf you love technology, then you picked a good major.\n\n\n\nI didn't intend on writing so much, but if you want advice from someone who's graduating with a CS degree who's getting his Masters, PM me.", "aSentId": 57678, "answer": "What does strong communication skills look like? Generally, I have been told I have solid writing skills. I have also been told I can make complex things simple, but I still have social awkwardness.", "corpus": "reddit"},{"docID": "t5_2qhmr", "qSentId": 57679, "question": "What does strong communication skills look like? Generally, I have been told I have solid writing skills. I have also been told I can make complex things simple, but I still have social awkwardness.", "aSentId": 57680, "answer": "Look back at any projects you've had to do as a team.  If you've had issues communicating an idea or concept to a team member, don't just assume their dumb or deaf.  Ask yourself how you could make it clearer", "corpus": "reddit"},{"docID": "t5_2qhmr", "qSentId": 57679, "question": "What does strong communication skills look like? Generally, I have been told I have solid writing skills. I have also been told I can make complex things simple, but I still have social awkwardness.", "aSentId": 57682, "answer": "Strong **technical** writing skills are important. Being able to step through your thought process out loud is important. Understand your audience - are they a fellow cs major or someone who has never looked at code? The latter you have to work harder to be clear.", "corpus": "reddit"},{"docID": "t5_2qhmr", "qSentId": 57684, "question": "Lots of people are studying the subject because there are a lot of jobs out there - and that is very likely to increase!  The last thing you are going to do is screw your life up by picking a niche area to study that you're interested in. Most jobs have little to do with what you studied anyway. So if you're interested in something,  go for it. Focus on something you want to do,  not what will help make you marketable.  As someone who has hired programmers,  it's more important to me to find a good problem solver who's enthusiastic about projects they've worked on than someone who fits the exact specs I'm looking for. Technology moves fast anyway. Good luck and have fun and don't worry too much about studying the right thing. If you want to work in computing ,  having a background in any of those areas you mentioned will almost certainly be advantageous. \nThat being said, my one advice would be don't skimp out on the mathematics -  that will help you more than you know and make you stand out from people who studied only pure compsci. But that's my personal bias (I work in modelling!) ", "aSentId": 57685, "answer": "My worry is that I have no chance at getting a job in a market so saturated. How will I ever stand out when thousands upon thousands of people are competing for the same job I am.", "corpus": "reddit"},{"docID": "t5_2qhmr", "qSentId": 57686, "question": "My worry is that I have no chance at getting a job in a market so saturated. How will I ever stand out when thousands upon thousands of people are competing for the same job I am.", "aSentId": 57687, "answer": "Most jobs have thousands of people competing for positions.  Computer science is more of a niche skill than you think it is", "corpus": "reddit"},{"docID": "t5_2qhmr", "qSentId": 57688, "question": "Most jobs have thousands of people competing for positions.  Computer science is more of a niche skill than you think it is", "aSentId": 57689, "answer": "CS is not a niche skill as it is now one of the most popular degrees out there.", "corpus": "reddit"},{"docID": "t5_2qhmr", "qSentId": 57690, "question": "CS is not a niche skill as it is now one of the most popular degrees out there.", "aSentId": 57691, "answer": "Cite your source?  Or go walk around any given GE classroom and see how many kids are computer science students.  \n\nFsure, CS is definitely gaining A LOT more students in recent years, but it us by no means \"one of the most popular majors.\"", "corpus": "reddit"},{"docID": "t5_2qhmr", "qSentId": 57686, "question": "My worry is that I have no chance at getting a job in a market so saturated. How will I ever stand out when thousands upon thousands of people are competing for the same job I am.", "aSentId": 57693, "answer": "Because a lot of people who graduate aren't very good. Stand out by being good at what you do.", "corpus": "reddit"},{"docID": "t5_2qhmr", "qSentId": 57694, "question": "Because a lot of people who graduate aren't very good. Stand out by being good at what you do.", "aSentId": 57695, "answer": "THey are good. I have never heard of a graduate sucking and lacking any experience. Hell, most of them seem like they have been doing this stuff since they were 5.", "corpus": "reddit"},{"docID": "t5_2qhmr", "qSentId": 57696, "question": "THey are good. I have never heard of a graduate sucking and lacking any experience. Hell, most of them seem like they have been doing this stuff since they were 5.", "aSentId": 57697, "answer": "What country are you in? ", "corpus": "reddit"},{"docID": "t5_2qhmr", "qSentId": 57698, "question": "What country are you in? ", "aSentId": 57699, "answer": "USA", "corpus": "reddit"},{"docID": "t5_2qhmr", "qSentId": 57700, "question": "USA", "aSentId": 57701, "answer": "I'm not really sure where you're getting this information from. Take the advice in this thread because you're mistaken about a lot of assumptions. ", "corpus": "reddit"},{"docID": "t5_2qhmr", "qSentId": 57702, "question": "I'm not really sure where you're getting this information from. Take the advice in this thread because you're mistaken about a lot of assumptions. ", "aSentId": 57703, "answer": "I most likely am mistaken. I latch onto the worst case scenario due to anxiety problems. Still, this thread has not done much to help that. ", "corpus": "reddit"},{"docID": "t5_2qhmr", "qSentId": 57704, "question": "I most likely am mistaken. I latch onto the worst case scenario due to anxiety problems. Still, this thread has not done much to help that. ", "aSentId": 57705, "answer": "I'm sorry I can't help with the anxiety, but the worst case scenario you're dreaming up doesn't exist. Computer Science is one of the most job-secure majors. If you're worried about jobs then major in IT because it's easier with a similar number of jobs. If you want a job market that is small and pays well become a petrol engineer. But I garuntee you it is a lot harder to stand out as a non-computer engineer and harder still to stand out if you have a liberal arts degree ", "corpus": "reddit"},{"docID": "t5_2qhmr", "qSentId": 57707, "question": "Make sure you know git and a little Linux.  Have a project or two that I can look over.  It also gives us more to talk about.  Without work history to talk about, I usually look for good communication skills and a bit of passion.  I won't hire someone who doesn't think coding is the coolest thing ever.", "aSentId": 57708, "answer": "Thank you for your input. When you say work history, I am guessing you mean relevant, correct? While I get my associates of science, I also can get a certificate in electrical technology. But I am guessing being an electrician for a year or two means nothing.\n\nWhat are good communication skills? I can randomly stutter, and I tend to take long pauses. ", "corpus": "reddit"},{"docID": "t5_2qhmr", "qSentId": 57709, "question": "Thank you for your input. When you say work history, I am guessing you mean relevant, correct? While I get my associates of science, I also can get a certificate in electrical technology. But I am guessing being an electrician for a year or two means nothing.\n\nWhat are good communication skills? I can randomly stutter, and I tend to take long pauses. ", "aSentId": 57710, "answer": "Relevant work history is correct.  Everyone that interviews fresh grads knows that they don't have experience, and that's fine.  However, without experience you will need to convince me that you are truly interested in coding.  For example you might have a side project, or some thing you are currently learning about.  I want to see that you are passionate about something.  Software development is hard and it's constantly changing.  I look for people who are curious, and enjoy learning new things.  My time is limited and I would rather spend it trying to keep up with someone as opposed to wasting time dragging someone along who doesn't really have their heart in it.\n\nAs far as communication skills go, I would never hold it against you if you stutter or take pauses.  What I care about is your ability to get your ideas across.  In IT you will work with lots of non-technical people, and you need to be able to explain your plan and give them the pros and cons.  For example, could you describe some programming problem to your grandma in a way that she could make a decision for you?", "corpus": "reddit"},{"docID": "t5_2qhmr", "qSentId": 57714, "question": "Get good grades, and do quality work. You will definitely stand out. ", "aSentId": 57715, "answer": "It seems like everyone does both of those.", "corpus": "reddit"},{"docID": "t5_2qhmr", "qSentId": 57719, "question": "Why cant garbage collection be smartptry?", "aSentId": 57720, "answer": "Aside from the fact that reference counting cannot easily handle reference loops, deallocating as soon as there are no references is not necessarily more performant. Delaying the deallocation to a time when CPU/memory load is lower, or deallocating a large chunk of memory at once, may result in performance gains.", "corpus": "reddit"},{"docID": "t5_2qhmr", "qSentId": 57719, "question": "Why cant garbage collection be smartptry?", "aSentId": 57722, "answer": "Reference counting is a garbage collection algorithm, so there is no fundamental difference here.  And about the \"much better\", we need to know what are your criteria, at least the situation does not seem as well cut as you present it.\n\nReference counting has the advantage of synchronicity.  It has the drawbacks that loops are difficult to handle and that it needs an action at each pointer copy operation.  I don't remember having seen thorough comparison of performance, memory and time.\n\nThe difficulty of handling loops seem to be a very common reason for which other GC algorithms are chosen in contexts where the synchronicity is not a strong requirement (there are idioms in C++ using destructors which make it a requirement).", "corpus": "reddit"},{"docID": "t5_2qhmr", "qSentId": 57719, "question": "Why cant garbage collection be smartptry?", "aSentId": 57724, "answer": "As other people have said before, refcounting is a GC algorithm, and like all GC algorithms has tradeoffs, you get:\n\n* deterministic deallocation ordering, although for most programs it's still difficult to guarantee exactly _when_ it will happen. If you knew when the object would become dead you wouldn't need GC :D\n* memory usage is strictly tied to the live set\n\nThe disadvantages are fairly simple:\n\n* As others have said, reference cycles are a real problem and the solutions in a refcounted GC are fairly complex: manual loop breaking, weak references, cycle collectors (essentially an additional mark/sweep collector). All of these also require that you can identify all cycle that could occur in your object graph, which is a real problem on its own.\n* Refcount churn is surprisingly expensive - every time you copy the pointer you have to increment and decrement the refcount, which has a mile of side effects through cache hits, pressure on tlbs, etc (Correct use of refcounting means stack references should also be using your smart pointer).\n* All objects have their size increased due to the need to track the refcount.\n\nThe GC models you're thinking of (the many and varied non-refcounting models) also have a pile of trade offs:\n\n* Classically GC allocation was faster than malloc based allocation. I don't think this is really true anymore except vs. system mallocs that have various constraints due to bincompat, etc, etc.\n* No need to worry about cycles :D\n\nA big downside is that it is fairly easy to demonstrate that regardless of the actual algorithm being used, to maintain performance the GC heap normally needs to be around ~2x the size of the expected live size. This is not due to copying as it applies to both copying and non-copying collectors (a copying collector needs 2x the _address_ space for the copy phase but doesn't need it all to be live).\n\nThere are a wide range of additional upsides and downsides to the other GCs depending on the exact algorithm.\n\n* They're known for pauses, this can be mitigated by concurrent collection but in general all collectors can be pushed into a position where a synchronous collection is require at the time of allocation. Generational collectors can substantially reduce the latency of these forced allocations but it comes at the cost of increased _overall_ time.\n* Copying collectors can directly improve cache coherence as the core algorithm basically leads to related objects being placed in the same part of the heap.\n* To counter the last point walking a GC heap can thrash the data cache as it is inherently a unpredictable walk of the entire heap.\n\n\nIf you're really interested Objective-C _has_ adopted refcounting for garbage collection - there was a brief window in which there was a mark/sweep collector but it hit many of the above issues, with the additional fun of having to run in a bizarro world of GC and non-GC aware code. The internet is full of complaints about crazy memory use, etc that boil down to this GC.\n\nThe modern Objective-C runtime now supports ARC which can basically be considered to be the invisible insertion of smart pointers (objective-c is already refcounted).\n", "corpus": "reddit"},{"docID": "t5_2qhmr", "qSentId": 57725, "question": "As other people have said before, refcounting is a GC algorithm, and like all GC algorithms has tradeoffs, you get:\n\n* deterministic deallocation ordering, although for most programs it's still difficult to guarantee exactly _when_ it will happen. If you knew when the object would become dead you wouldn't need GC :D\n* memory usage is strictly tied to the live set\n\nThe disadvantages are fairly simple:\n\n* As others have said, reference cycles are a real problem and the solutions in a refcounted GC are fairly complex: manual loop breaking, weak references, cycle collectors (essentially an additional mark/sweep collector). All of these also require that you can identify all cycle that could occur in your object graph, which is a real problem on its own.\n* Refcount churn is surprisingly expensive - every time you copy the pointer you have to increment and decrement the refcount, which has a mile of side effects through cache hits, pressure on tlbs, etc (Correct use of refcounting means stack references should also be using your smart pointer).\n* All objects have their size increased due to the need to track the refcount.\n\nThe GC models you're thinking of (the many and varied non-refcounting models) also have a pile of trade offs:\n\n* Classically GC allocation was faster than malloc based allocation. I don't think this is really true anymore except vs. system mallocs that have various constraints due to bincompat, etc, etc.\n* No need to worry about cycles :D\n\nA big downside is that it is fairly easy to demonstrate that regardless of the actual algorithm being used, to maintain performance the GC heap normally needs to be around ~2x the size of the expected live size. This is not due to copying as it applies to both copying and non-copying collectors (a copying collector needs 2x the _address_ space for the copy phase but doesn't need it all to be live).\n\nThere are a wide range of additional upsides and downsides to the other GCs depending on the exact algorithm.\n\n* They're known for pauses, this can be mitigated by concurrent collection but in general all collectors can be pushed into a position where a synchronous collection is require at the time of allocation. Generational collectors can substantially reduce the latency of these forced allocations but it comes at the cost of increased _overall_ time.\n* Copying collectors can directly improve cache coherence as the core algorithm basically leads to related objects being placed in the same part of the heap.\n* To counter the last point walking a GC heap can thrash the data cache as it is inherently a unpredictable walk of the entire heap.\n\n\nIf you're really interested Objective-C _has_ adopted refcounting for garbage collection - there was a brief window in which there was a mark/sweep collector but it hit many of the above issues, with the additional fun of having to run in a bizarro world of GC and non-GC aware code. The internet is full of complaints about crazy memory use, etc that boil down to this GC.\n\nThe modern Objective-C runtime now supports ARC which can basically be considered to be the invisible insertion of smart pointers (objective-c is already refcounted).\n", "aSentId": 57726, "answer": "(If you unindent your lists, they would be readable without using a scroll bar.)", "corpus": "reddit"},{"docID": "t5_2qhmr", "qSentId": 57728, "question": "The biggest issue that a lot of applications have with garbage collection isn't forgetting objects, rather it's the performance trade off. You sometimes don't want the garbage collector to run right now because the real-time performance is can be **FAR** more critical than a little bit of memory that's temporarily wasted.\n\nReal-time systems where you have hard constraints on response time exist everywhere. If a garbage collector starts up and halts the rest of the program while it checks all of the allocated objects is a expensive and dangerous problem when you're dealing with machines, medical devices, and other safety systems. Most programmers deal with soft real-time systems instead. For example games, this type of delay causes a very noticeable performance degradation because the users don't really care about the average frame rate, the slowest frame rate is the most noticeable.", "aSentId": 57729, "answer": "This does not seem to answer the question, because in real-time (soft or hard) reference counting or manual management are usually preferred due to the predictability.", "corpus": "reddit"},{"docID": "t5_2qhmr", "qSentId": 57730, "question": "This does not seem to answer the question, because in real-time (soft or hard) reference counting or manual management are usually preferred due to the predictability.", "aSentId": 57731, "answer": "When it's called and how much stuff needs to be removed isn't really predictable and you never really know when an interrupt needs to be called with a hard real-time system where you have X number of miliseconds to handle the change.", "corpus": "reddit"},{"docID": "t5_2qhmr", "qSentId": 57736, "question": "Modern garbage collectors do a lot more than just automatically calling `free()` on unused objects. \n\nReference counting is an adequate garbage collection strategy, but it has several drawbacks. It can't handle cycles, it increases the size of every object by the size of the count, and incrementing/decrementing the count has to be atomic, which requires CPU support or the use of synchronization algorithms, which causes a performance hit every time a reference is created/destroyed. \n\nGCs try to handle any cycles appropriately, limit the memory overhead, and limit the performance overhead. The best GCs can run mostly in parallel with your program and use only a few bits per object to maintain its state. ", "aSentId": 57737, "answer": "&gt; and incrementing/decrementing the count has to be atomic\n\nIt doesn't have to be atomic for objects that aren't shared between threads. For example, Rust's `Rc&lt;T&gt;` type doesn't need atomic operations because it can't be sent between threads. For mutable data, the locking overhead is the real problem.\n\n&gt; every time a reference is created/destroyed\n\nThis isn't actually common in a language with move-by-default like Rust. The Objective-C compiler has optimization passes to remove redundant counts but it's not usually as good as doing it by hand.\n\n&gt; it increases the size of every object by the size of the count\n\n&gt; limit the memory overhead\n\n&gt; use only a few bits per object to maintain its state\n\nTracing has *much* higher memory overhead than reference counting in practice. A counter header for each object is nowhere near as bad as the 3-6x total heap size increase necessary to make the throughput of tracing become competitive. General purpose garbage collectors also need a lot more runtime data for metadata than you're claiming.\n\nGarbage collection either has competitive (or better *in some cases*) throughput at the expense of many times more memory consumption or competitive memory consumption, not both.", "corpus": "reddit"},{"docID": "t5_2qhmr", "qSentId": 57739, "question": "Planck scale transistors?", "aSentId": 57740, "answer": "Atomic radius varies from 0.3 - 3 Angstroms (10^-10). This means Planck length is ~ 10^16 times smaller than a single atom. With the current technologies we are using, this is clearly impossible.\n\nEven the radius of an electron, which is of the order of 10^-15, is still roughly 100 billion times larger than the planck length.\n\nThus this seems far-fetched, but we never know what will happen in the distant future. One thing is clear though, is that we will be long dead (or cyborgs) when this happens. And if this ever happens, the concept of transistor will probably be long gone.", "corpus": "reddit"},{"docID": "t5_2qhmr", "qSentId": 57741, "question": "Atomic radius varies from 0.3 - 3 Angstroms (10^-10). This means Planck length is ~ 10^16 times smaller than a single atom. With the current technologies we are using, this is clearly impossible.\n\nEven the radius of an electron, which is of the order of 10^-15, is still roughly 100 billion times larger than the planck length.\n\nThus this seems far-fetched, but we never know what will happen in the distant future. One thing is clear though, is that we will be long dead (or cyborgs) when this happens. And if this ever happens, the concept of transistor will probably be long gone.", "aSentId": 57742, "answer": "Considering the fact that transistors are an electronic component, as well as the fact that the plank length is substantially smaller than an electron, I'd say it is impossible to have a transistor at that scale.\n\n\nAlthough we may find something that functions akin to a transistor at that size scale, it certainly won't satisfy the definition of a transistor. ", "corpus": "reddit"},{"docID": "t5_2qhmr", "qSentId": 57739, "question": "Planck scale transistors?", "aSentId": 57744, "answer": "Well this is amusing from Wiki.\n\n&gt; Because the Schwarzschild radius of a black hole is roughly equal to the Compton wavelength at the Planck scale, a photon with sufficient energy to probe this realm would yield no information whatsoever. Any photon energetic enough to precisely measure a Planck-sized object could actually create a particle of that dimension, but it would be massive enough to immediately become a black hole (a.k.a. Planck particle), thus completely distorting that region of space, and swallowing the photon.\n\nSo you need a higher energy photon to observe anything at this scale. Higher energy = higher frequency = shorter wavelength which needs to be within an order of magnitude of the particle's diameter. The problem is we physically can't produce photons with this much energy because they eat themselves. The 'Compton wavelength' that they are referencing is the relationship between a photon's momentum and it's frequency which are linearly proportional.", "corpus": "reddit"},{"docID": "t5_2qhmr", "qSentId": 57739, "question": "Planck scale transistors?", "aSentId": 57746, "answer": "I can confidently say \"maybe\".", "corpus": "reddit"},{"docID": "t5_2qhmr", "qSentId": 57748, "question": "&gt; World-renown computer scientist Hugo De Garis mentioned something about this in one of his interviews.\n\nLink?", "aSentId": 57749, "answer": "I don't remember which interview it was, I'll have to look.", "corpus": "reddit"},{"docID": "t5_2qhmr", "qSentId": 57753, "question": "Placing text in a fixed location in a 3D world (openGL c++)", "aSentId": 57754, "answer": "&gt;I want to display a health percentage in a fixed location and when i traverse around the world i want it to be in that location regardless of movement.\n\nAre you talking about a GUI or [billboards](http://www.opengl-tutorial.org/intermediate-tutorials/billboards-particles/billboards/)?\n\nAlso, /r/GraphicsProgramming ", "corpus": "reddit"},{"docID": "t5_2qhmr", "qSentId": 57757, "question": "Website for downloading research papers for free?", "aSentId": 57758, "answer": "I'd suggest checking on the authors' web pages... They have the most incentive to make sure their work is disseminated to the widest audience possible.", "corpus": "reddit"},{"docID": "t5_2qhmr", "qSentId": 57757, "question": "Website for downloading research papers for free?", "aSentId": 57760, "answer": "The subreddit /r/scholar is for requesting academic articles you don't have and hoping that someone with access will post it.", "corpus": "reddit"},{"docID": "t5_2qhmr", "qSentId": 57757, "question": "Website for downloading research papers for free?", "aSentId": 57762, "answer": "Emailing a known paper author and requesting a copy can work, and can also provide a networking connection that can later be leveraged (I say this from [admittedly anecdotal] experience).", "corpus": "reddit"},{"docID": "t5_2qhmr", "qSentId": 57764, "question": "Aaron Swartz tried something to that end, and see where it led him to ....", "aSentId": 57765, "answer": "He also broke into a networking cabinet.", "corpus": "reddit"},{"docID": "t5_2qhmr", "qSentId": 57770, "question": "Dawn to Ceres: Processors for the Protoplanet", "aSentId": 57771, "answer": "I wouldn't have guessed FPGAs were being used for satellites.  I guess cost is a concern?", "corpus": "reddit"},{"docID": "t5_2qhmr", "qSentId": 57772, "question": "I wouldn't have guessed FPGAs were being used for satellites.  I guess cost is a concern?", "aSentId": 57773, "answer": "All I know is what it says there!", "corpus": "reddit"},{"docID": "t5_2qhmr", "qSentId": 57775, "question": "Fundamentals of computer graphics or computer graphics principles and practice", "aSentId": 57776, "answer": "And if you know any university course or video course that covers all the content described in these books. Please let me know!", "corpus": "reddit"}]