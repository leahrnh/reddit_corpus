[{"docID": "t5_2fwo", "qSentId": 44035, "question": "Deus Ex: Human Revolution - Graphics Study", "aSentId": 44036, "answer": "I've resubmitted it from r/GraphicsProgramming/\n\nI was amazed by nice pictures and detailed description. Really good job!", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44035, "question": "Deus Ex: Human Revolution - Graphics Study", "aSentId": 44038, "answer": "&gt; This pass draws an overlay on the top of the scene: the pixels marked as interactive are rendered with a yellowish taint\n\nYou might want to fix that typo.\n\nApart from that, great article! Always love reading things like this, especially when they're for my favourite games.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44039, "question": "&gt; This pass draws an overlay on the top of the scene: the pixels marked as interactive are rendered with a yellowish taint\n\nYou might want to fix that typo.\n\nApart from that, great article! Always love reading things like this, especially when they're for my favourite games.", "aSentId": 44040, "answer": "I believe something could be \"tainted yellow\", but your point stands: it's unfortunate wording, at best.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44041, "question": "I believe something could be \"tainted yellow\", but your point stands: it's unfortunate wording, at best.", "aSentId": 44042, "answer": "Tint. The word they were looking for was tint.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44043, "question": "Tint. The word they were looking for was tint.", "aSentId": 44044, "answer": "Well, obviously.  I'm suggesting the two words approach the same meaning in this context.\n\nEven so, I agree: the author probably meant *tint*.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44045, "question": "Well, obviously.  I'm suggesting the two words approach the same meaning in this context.\n\nEven so, I agree: the author probably meant *tint*.", "aSentId": 44046, "answer": "&gt; the author probably meant tint\n\nIf we want to get technical, the proper name is *piss filter.*", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44035, "question": "Deus Ex: Human Revolution - Graphics Study", "aSentId": 44048, "answer": "The transition effect this page is using to switch between images is a *really* bad choice, especially for the screenshots detailing the lighting effects.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44049, "question": "The transition effect this page is using to switch between images is a *really* bad choice, especially for the screenshots detailing the lighting effects.", "aSentId": 44050, "answer": "If you have NoScript installed then the images will just be laid out one after the other like you would expect. Didn't even know there was a transition animation/slideshow until I read your comment.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44051, "question": "If you have NoScript installed then the images will just be laid out one after the other like you would expect. Didn't even know there was a transition animation/slideshow until I read your comment.", "aSentId": 44052, "answer": "When the pics slide it fades in and out. Makes comparing slides difficult as the image is practically reset ", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44054, "question": "while(true){ color=\"ffff00\"; }\n\nNot hating on it, I loved the gold tint so much I modded it back in while playing the director's cut.", "aSentId": 44055, "answer": "Is it easy to mod in?", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44057, "question": "&gt; This effectively achieves a rendering with 0 overdraw.\n\nIt is incorrect to say that the render has zero overdraw since there is (at least) overdraw during the normal map pass. Nearly every rasterized game ever has overdraw, and claim of zero overdraw would be an amazing technical feat.", "aSentId": 44058, "answer": "I think what he means is that there is no overdraw with respect to the shading, which is the most expensive part. Since you can use the depth buffer to cull pixels that aren't visible there is no need to shade them, just like with deferred shading.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44057, "question": "&gt; This effectively achieves a rendering with 0 overdraw.\n\nIt is incorrect to say that the render has zero overdraw since there is (at least) overdraw during the normal map pass. Nearly every rasterized game ever has overdraw, and claim of zero overdraw would be an amazing technical feat.", "aSentId": 44060, "answer": "I think he meant specifically for that pass", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44057, "question": "&gt; This effectively achieves a rendering with 0 overdraw.\n\nIt is incorrect to say that the render has zero overdraw since there is (at least) overdraw during the normal map pass. Nearly every rasterized game ever has overdraw, and claim of zero overdraw would be an amazing technical feat.", "aSentId": 44062, "answer": "This had me a little confused. Is it more correct to say this reduces overdraw through culling?", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44065, "question": "Article said: \n&gt; I never had the chance to play the second opus \u201cInvisible War\u201d..\n\nYou're not missing anything..", "aSentId": 44066, "answer": "It had a very good plot. An excellent plot.\n\nI feel that most of the ill will towards it was about the simplified game mechanics and the overall butthurt about \"consolization\", however I can't say the first Deus Ex was all that big on them either -- everything combat-related was embarrassingly primitive, frankly. The way enemies behaved and moved and weapons worked was sketchy even by the Q1 standards, not to mention Unreal.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44067, "question": "It had a very good plot. An excellent plot.\n\nI feel that most of the ill will towards it was about the simplified game mechanics and the overall butthurt about \"consolization\", however I can't say the first Deus Ex was all that big on them either -- everything combat-related was embarrassingly primitive, frankly. The way enemies behaved and moved and weapons worked was sketchy even by the Q1 standards, not to mention Unreal.", "aSentId": 44068, "answer": "&gt; It had a very good plot. An excellent plot.\n\nI disagree. I think the plot could have been *interesting* on it's own but, not as an extension of the original Deus Ex plot.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44069, "question": "&gt; It had a very good plot. An excellent plot.\n\nI disagree. I think the plot could have been *interesting* on it's own but, not as an extension of the original Deus Ex plot.", "aSentId": 44070, "answer": "Why not? It builds on the same themes, and does it even better in my opinion.\n\n**Spoilers ahead!**\n\nI had it play on me what I consider the greatest plot twist moment in the history of gaming, at least conspiracy-related. First I tell that journalist to of course go and publish his discovery that the two competing coffee brands really were one and the same because pretend conflict is good for customer loyalty and therefore for the business, also prevents actual competition. Because what the fuck. He was killed because of that, btw, but that's small beans. Not fifteen minutes later I discover that the WTO and the Order are one and the same entity, because it's good for business and prevents actual competition, and I'm forced to tentatively accept that it's kinda good for the humanity. I don't think any other game ever made me experience a cognitive dissonance like that.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44071, "question": "Why not? It builds on the same themes, and does it even better in my opinion.\n\n**Spoilers ahead!**\n\nI had it play on me what I consider the greatest plot twist moment in the history of gaming, at least conspiracy-related. First I tell that journalist to of course go and publish his discovery that the two competing coffee brands really were one and the same because pretend conflict is good for customer loyalty and therefore for the business, also prevents actual competition. Because what the fuck. He was killed because of that, btw, but that's small beans. Not fifteen minutes later I discover that the WTO and the Order are one and the same entity, because it's good for business and prevents actual competition, and I'm forced to tentatively accept that it's kinda good for the humanity. I don't think any other game ever made me experience a cognitive dissonance like that.", "aSentId": 44072, "answer": "I thought that the coffee thing was really lame but thats just me.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44073, "question": "I thought that the coffee thing was really lame but thats just me.", "aSentId": 44074, "answer": "By itself it was kinda lame, its role was to be opposed to the same shit in the main plot, where I was forced to swallow all I had to say about the people having the right to know the truth and go with it. Without the coffee subplot that would have been business as usual, in DE1 you allied with various conspiracies without any moral scruples, but having that subplot exposed the glaring contradiction between what I did in the two cases.\n\nBy the way, another thing I remembered was that enemy soldier trapped behind a broken door in the Antarctic base. So you come closer and he very reasonably explains how on reflection he isn't really all that against augmentations, live and let live, you know? Yeah, I know, nice to see a reasonable person even on the other side, let me release you, reasonable people should help each other, this way we can make this world a bet... except he screams something about augmented abominations and opens fire.\n\nThat game was genius at fucking with players' expectations and beliefs.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44075, "question": "By itself it was kinda lame, its role was to be opposed to the same shit in the main plot, where I was forced to swallow all I had to say about the people having the right to know the truth and go with it. Without the coffee subplot that would have been business as usual, in DE1 you allied with various conspiracies without any moral scruples, but having that subplot exposed the glaring contradiction between what I did in the two cases.\n\nBy the way, another thing I remembered was that enemy soldier trapped behind a broken door in the Antarctic base. So you come closer and he very reasonably explains how on reflection he isn't really all that against augmentations, live and let live, you know? Yeah, I know, nice to see a reasonable person even on the other side, let me release you, reasonable people should help each other, this way we can make this world a bet... except he screams something about augmented abominations and opens fire.\n\nThat game was genius at fucking with players' expectations and beliefs.", "aSentId": 44076, "answer": "You make me want to play invisible war again... Something I swore I would never do. ", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44077, "question": "You make me want to play invisible war again... Something I swore I would never do. ", "aSentId": 44078, "answer": "I think I for one am going to do that on this weekend (got all three from a Humble Bundle or something). The stuff like the fps-killing post-effects and the long loading times between the extremely small sub-levels should not be a problem these days.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44067, "question": "It had a very good plot. An excellent plot.\n\nI feel that most of the ill will towards it was about the simplified game mechanics and the overall butthurt about \"consolization\", however I can't say the first Deus Ex was all that big on them either -- everything combat-related was embarrassingly primitive, frankly. The way enemies behaved and moved and weapons worked was sketchy even by the Q1 standards, not to mention Unreal.", "aSentId": 44080, "answer": "It's more due to the tiny cells that result in a ton of loading times. Also each load event on PC dumped you back to the desktop as it loaded the next cell before maximising the window again.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44081, "question": "It's more due to the tiny cells that result in a ton of loading times. Also each load event on PC dumped you back to the desktop as it loaded the next cell before maximising the window again.", "aSentId": 44082, "answer": "I have my share of criticisms against the game, but I never experienced *that*. (The desktop during loads bit.) Weird. ;O", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44067, "question": "It had a very good plot. An excellent plot.\n\nI feel that most of the ill will towards it was about the simplified game mechanics and the overall butthurt about \"consolization\", however I can't say the first Deus Ex was all that big on them either -- everything combat-related was embarrassingly primitive, frankly. The way enemies behaved and moved and weapons worked was sketchy even by the Q1 standards, not to mention Unreal.", "aSentId": 44084, "answer": "The game play in IW wasn't that good, though. Universal ammo system just allowed you to use whatever weapon you wanted. The levels were pre--\n\n...loading additional comment data...\n\n--tty small causing frequent loads. The faction system wasn't all that great. IIRC, there were a lot less side quests and the game could be completed with all endings and content played-through in under 20 hours. \n\nTBH, I don't remember the game all that well now, but I do remember not liking it all that much, and I was a huge fan of Deus Ex. Big enough of one that my username is derived from the series. ", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44085, "question": "The game play in IW wasn't that good, though. Universal ammo system just allowed you to use whatever weapon you wanted. The levels were pre--\n\n...loading additional comment data...\n\n--tty small causing frequent loads. The faction system wasn't all that great. IIRC, there were a lot less side quests and the game could be completed with all endings and content played-through in under 20 hours. \n\nTBH, I don't remember the game all that well now, but I do remember not liking it all that much, and I was a huge fan of Deus Ex. Big enough of one that my username is derived from the series. ", "aSentId": 44086, "answer": "Forget CPU or video card, I consider an SSD a *requirement* for the Invisible-War/Thief-3 engine. Such tiny zones...", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44065, "question": "Article said: \n&gt; I never had the chance to play the second opus \u201cInvisible War\u201d..\n\nYou're not missing anything..", "aSentId": 44088, "answer": "  I would love to see him dissect the DX:IW engine to see how it went so wrong.  \n\nThe game had a great story but was almost unplayable on modern systems at the time.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44065, "question": "Article said: \n&gt; I never had the chance to play the second opus \u201cInvisible War\u201d..\n\nYou're not missing anything..", "aSentId": 44090, "answer": "That game is not at all that bad in it of itself, but calling itself deus ex is insulting. Biggest problems are with it being geared towards consoles. The inventory and ammo simplification, smaller maps, and absolutely ridiculous amount of loading make it very difficult to play. The story was decent and the locations were really nice however.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44091, "question": "That game is not at all that bad in it of itself, but calling itself deus ex is insulting. Biggest problems are with it being geared towards consoles. The inventory and ammo simplification, smaller maps, and absolutely ridiculous amount of loading make it very difficult to play. The story was decent and the locations were really nice however.", "aSentId": 44092, "answer": "Don't forget the atrocious FOV. I remember at the time it felt like I was looking through a paper towel tube when playing.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44093, "question": "Don't forget the atrocious FOV. I remember at the time it felt like I was looking through a paper towel tube when playing.", "aSentId": 44094, "answer": "There's a mod for that! Unfortunately no mod fixing the more time spent loading than playing. Having an SSD doesn't help either...", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44091, "question": "That game is not at all that bad in it of itself, but calling itself deus ex is insulting. Biggest problems are with it being geared towards consoles. The inventory and ammo simplification, smaller maps, and absolutely ridiculous amount of loading make it very difficult to play. The story was decent and the locations were really nice however.", "aSentId": 44096, "answer": "I remember it being very lifeless and empty. Very few NPCs on the screen at the same time. The hub cities seemed little more than a few connected halls and alleyways. But I never finished it, so it might have opened up later.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44097, "question": "I remember it being very lifeless and empty. Very few NPCs on the screen at the same time. The hub cities seemed little more than a few connected halls and alleyways. But I never finished it, so it might have opened up later.", "aSentId": 44098, "answer": "I remember some kind of really lame competition between two coffee chains.  WTF was that crap?", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44099, "question": "I remember some kind of really lame competition between two coffee chains.  WTF was that crap?", "aSentId": 44100, "answer": "It was a meta story about how the two coffee chains pretended to fight against each other but were really the same entity. Just like the different factions like the WHO and the NWO.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44091, "question": "That game is not at all that bad in it of itself, but calling itself deus ex is insulting. Biggest problems are with it being geared towards consoles. The inventory and ammo simplification, smaller maps, and absolutely ridiculous amount of loading make it very difficult to play. The story was decent and the locations were really nice however.", "aSentId": 44102, "answer": "I tried to play on PC. I think I got in about four hours before I gave up.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44103, "question": "I tried to play on PC. I think I got in about four hours before I gave up.", "aSentId": 44104, "answer": "I had a top of the line gaming rig that I built for this game and it still ran like a dog.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44106, "question": "&gt;invisible war \n\n&gt;opus\n\nInvisible War was not a good Deus Ex game. ", "aSentId": 44107, "answer": "Opus just means 'work', it's not a magnum opus, nor even a bonum opus. Just a plain ol' opus.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44111, "question": "Really interesting read. I'd be interested to see how it compares to how other games render their graphics. ", "aSentId": 44112, "answer": "Carmack destroys this.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44114, "question": "Is there any way to prevent the Normal Map portion from shuffling through the slides automatically? I'd like to look at each without it switching to the next slide.", "aSentId": 44115, "answer": "Sure \u2014 hover over it with your mouse.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44114, "question": "Is there any way to prevent the Normal Map portion from shuffling through the slides automatically? I'd like to look at each without it switching to the next slide.", "aSentId": 44117, "answer": "Right click - Open image in new tab for each slide.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44118, "question": "Right click - Open image in new tab for each slide.", "aSentId": 44119, "answer": "That's a good idea. It would be nice if there was some kind of option to disable the slideshow, but this works, too.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44114, "question": "Is there any way to prevent the Normal Map portion from shuffling through the slides automatically? I'd like to look at each without it switching to the next slide.", "aSentId": 44121, "answer": "Install NoScript", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44123, "question": "As interesting as this is, it describes a rather old way of handling realtime rendering. ", "aSentId": 44124, "answer": "Drawing triangles in general is a rather old way of handling realtime rendering yet we still use it.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44126, "question": "This is why this game sucks, they spent too much time on the FX instead of the actual gameplay\n\nI miss the old ones ..", "aSentId": 44127, "answer": "Good news! Game of the year edition of the original is available on steam!", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44126, "question": "This is why this game sucks, they spent too much time on the FX instead of the actual gameplay\n\nI miss the old ones ..", "aSentId": 44129, "answer": "&gt;I miss the old ones\n\nYeah? You really miss Human Revolution eh? What a *great* game that was.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44131, "question": "RoboVM 1.0 released: write native iOS apps in Java/Scala/Kotlin, share your code with your Android app and backend", "aSentId": 44132, "answer": "You have to pay to get \"Line numbers in Stack Traces\". Ouch!", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44133, "question": "You have to pay to get \"Line numbers in Stack Traces\". Ouch!", "aSentId": 44134, "answer": "I get where you are coming from. In libGDX land we worked without line numbers for over a year, just because that feature wasn't implemented. It worked out pretty well. There's no question that having line numbers makes things easier though.\n\nPart of this release is trying to figure out what's fair regarding pricing. It's a fine line between alienating your user base and keeping the lights on. We reach out here because we get feedback from outside our community. Appreciate the honest feedback. We'll have some thinking to do.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44135, "question": "I get where you are coming from. In libGDX land we worked without line numbers for over a year, just because that feature wasn't implemented. It worked out pretty well. There's no question that having line numbers makes things easier though.\n\nPart of this release is trying to figure out what's fair regarding pricing. It's a fine line between alienating your user base and keeping the lights on. We reach out here because we get feedback from outside our community. Appreciate the honest feedback. We'll have some thinking to do.", "aSentId": 44136, "answer": "Line numbers though? come on....", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44135, "question": "I get where you are coming from. In libGDX land we worked without line numbers for over a year, just because that feature wasn't implemented. It worked out pretty well. There's no question that having line numbers makes things easier though.\n\nPart of this release is trying to figure out what's fair regarding pricing. It's a fine line between alienating your user base and keeping the lights on. We reach out here because we get feedback from outside our community. Appreciate the honest feedback. We'll have some thinking to do.", "aSentId": 44138, "answer": "Yeah, no line numbers in stack-traces is **DEFINITELY** alienating your users. At that point it basically feels like you're telling the user \"fuck you, you didn't pay so you get to search for 20 minutes extra where your bug occurred.\"\n\nYou want the for-pay stuff to be premium functionality, but under no circumstance do you want people who just try out your product go out telling all their friends \"I just tried this product, and it is absolutely unusable; getting anything done takes twice as long as with any of the competitors.\"\n\nIf you think you cannot do without asking for money for basic functionality like this, it is perhaps better to just not allow users to use the product at all without paying. Putting out a massively crippled free demo of your product can be worse to just not having a free version at all. And you can always give the user a trial/non-commercial/etc version to try things out before they buy. ", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44139, "question": "Yeah, no line numbers in stack-traces is **DEFINITELY** alienating your users. At that point it basically feels like you're telling the user \"fuck you, you didn't pay so you get to search for 20 minutes extra where your bug occurred.\"\n\nYou want the for-pay stuff to be premium functionality, but under no circumstance do you want people who just try out your product go out telling all their friends \"I just tried this product, and it is absolutely unusable; getting anything done takes twice as long as with any of the competitors.\"\n\nIf you think you cannot do without asking for money for basic functionality like this, it is perhaps better to just not allow users to use the product at all without paying. Putting out a massively crippled free demo of your product can be worse to just not having a free version at all. And you can always give the user a trial/non-commercial/etc version to try things out before they buy. ", "aSentId": 44140, "answer": "We have a free version without line numbers and debugger support. That functionality was not implemented up until a few weeks ago. Hundreds of apps have been made and published with that version over the past year. These developers obviously did not think that things were \"massively crippled\", nor did i get the impression that anyone felt offended. Indeed they were quite happy to not have any limitations on application size, funky splash screens, restrictions on 3rd party libs and so forth. Many of them actually started contributing to the project, and were quite happy to have [full source access](https://github.com/robovm/robovm). I myself am one of these developers via libGDX.\n\nWe also have a 14 day trial of all commercial features. \n\nBut as i said above, we'll definitely re-evaluate this.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44141, "question": "We have a free version without line numbers and debugger support. That functionality was not implemented up until a few weeks ago. Hundreds of apps have been made and published with that version over the past year. These developers obviously did not think that things were \"massively crippled\", nor did i get the impression that anyone felt offended. Indeed they were quite happy to not have any limitations on application size, funky splash screens, restrictions on 3rd party libs and so forth. Many of them actually started contributing to the project, and were quite happy to have [full source access](https://github.com/robovm/robovm). I myself am one of these developers via libGDX.\n\nWe also have a 14 day trial of all commercial features. \n\nBut as i said above, we'll definitely re-evaluate this.", "aSentId": 44142, "answer": "&gt; These developers obviously did not think that things were \"massively crippled\"\n\nHave you actually asked them? When I'm testing beta-software, I'd certainly expect that kind of thing, and put up with it. That does not change however that I would view a for-pay software that did that as being crippled.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44143, "question": "&gt; These developers obviously did not think that things were \"massively crippled\"\n\nHave you actually asked them? When I'm testing beta-software, I'd certainly expect that kind of thing, and put up with it. That does not change however that I would view a for-pay software that did that as being crippled.", "aSentId": 44144, "answer": "We actually did ask them about our plans in a survey. And i'm also speaking from my personal experience before joining forces with RoboVM.\n\nBut let me say it a third time: we'll take the feedback we got from you and others on here and reevaluate our pricing schema.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44131, "question": "RoboVM 1.0 released: write native iOS apps in Java/Scala/Kotlin, share your code with your Android app and backend", "aSentId": 44146, "answer": "&gt;  Given a main class as the main entry point, RoboVM will figure out the set of classes that are actually required\n\nDoes it handle classes used only via reflection?", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44131, "question": "RoboVM 1.0 released: write native iOS apps in Java/Scala/Kotlin, share your code with your Android app and backend", "aSentId": 44148, "answer": "Is this restricted to Java/Scala/Kotlin or can other JVM languages play?  I'm thinking Groovy in particular.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44149, "question": "Is this restricted to Java/Scala/Kotlin or can other JVM languages play?  I'm thinking Groovy in particular.", "aSentId": 44150, "answer": "From website:\n&gt;By taking bytecode as input, RoboVM does not need to care about what produced this bytecode. You can feed RoboVM\u2019s compiler bytecode generated by Java, Scala, Groovy, Kotlin, Clojure or any other alternative JVM language compiler, and it will happily compile it to native code. \n\nSo that means you could write Python or Ruby (Jthon, Jruby). That's nice.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44151, "question": "From website:\n&gt;By taking bytecode as input, RoboVM does not need to care about what produced this bytecode. You can feed RoboVM\u2019s compiler bytecode generated by Java, Scala, Groovy, Kotlin, Clojure or any other alternative JVM language compiler, and it will happily compile it to native code. \n\nSo that means you could write Python or Ruby (Jthon, Jruby). That's nice.", "aSentId": 44152, "answer": "In theory yes. If the JVM language can be statically compiled down to Java bytecode without relying on dynamic bytecode generation at runtime. For JRuby there's [jrubyc](https://github.com/jruby/jruby/wiki/JRubyCompiler) which could work. I'm not aware of anyone who tried this out yet.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44149, "question": "Is this restricted to Java/Scala/Kotlin or can other JVM languages play?  I'm thinking Groovy in particular.", "aSentId": 44154, "answer": "There's a Groovy on iOS proof of concept project at https://github.com/mvniekerk/GradleGroovyRobot. The Groovy @CompileStatic annotation is key to get this to work.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44158, "question": "I noticed y'all put in the effort to do the AOT work from jimple to LLVM IR and handling other JNI/binding things. But then later y'all mention that the standard Android lib needed to be \"massaged\" to work well on iOS.\n\nWhat benefit, if any, can all the work you have done be used by others outside of the iOS realm? I am aware of Avian and GCJ and what not, just wondering if any of the efforts done here can translate to the server space (especially to avoid the distribution woes of Oracle).", "aSentId": 44159, "answer": "RoboVM actually also compiles self-contained Linux and Mac OS X binaries, both 32- and 64-bit. Just specify the appropriate architecture and OS. We use this for internal testing. I'm not aware of anyone using it to replace an Oracle JVM deployment.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44161, "question": "I think if the RoboVM development roadmap included a basic, cross platform Unity-like scene editor (with source) that could generate LibGDX projects across different platforms, coupled with a subscription that had some of the Indie features, that many, including myself, would be interested in a monthly subscription.", "aSentId": 44162, "answer": "You might want to look into [Overlap2D](http://overlap2d.com/), based on libGDX.\n\nRoboVM is not a game thing. It allows you to write any type of iOS app. It just so happens that we libGDX folks picked it up first :)", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44163, "question": "You might want to look into [Overlap2D](http://overlap2d.com/), based on libGDX.\n\nRoboVM is not a game thing. It allows you to write any type of iOS app. It just so happens that we libGDX folks picked it up first :)", "aSentId": 44164, "answer": "Even though RoboVM isn't necessarily game related, a game-related subscription would pique much interest.\nOverlap2D isn't open-source, nor has 3d support.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44166, "question": "too expensive nowadays. ", "aSentId": 44167, "answer": "The OSS core is free, without any restrictions, just as before. You can publish to the App Store without having to pay a dime. \n\nWe do have to put food on the table though and support the work on the OSS core. Would you have any suggestions concerning pricing?", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44168, "question": "The OSS core is free, without any restrictions, just as before. You can publish to the App Store without having to pay a dime. \n\nWe do have to put food on the table though and support the work on the OSS core. Would you have any suggestions concerning pricing?", "aSentId": 44169, "answer": "I think your pricing is just fine.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44168, "question": "The OSS core is free, without any restrictions, just as before. You can publish to the App Store without having to pay a dime. \n\nWe do have to put food on the table though and support the work on the OSS core. Would you have any suggestions concerning pricing?", "aSentId": 44171, "answer": "It's just my opinion. You did a job, you put a price. I think it's expensive, somebody will buy, only time will show who was right. \n\nFor sure every job must be payed, so I'm not asking to give it away free. Besides you have nice Solo license which is cheaper than Xamarin. ", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44172, "question": "It's just my opinion. You did a job, you put a price. I think it's expensive, somebody will buy, only time will show who was right. \n\nFor sure every job must be payed, so I'm not asking to give it away free. Besides you have nice Solo license which is cheaper than Xamarin. ", "aSentId": 44173, "answer": "Fair points. We'll need to put some more thoughts into things like discounts for students and folks with low budgets yet. It's very early days.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44174, "question": "Fair points. We'll need to put some more thoughts into things like discounts for students and folks with low budgets yet. It's very early days.", "aSentId": 44175, "answer": "Your website is down and I can't see pricing at the moment. Can you post a summary here?", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44178, "question": "Goodbye MongoDB, Hello PostgreSQL", "aSentId": 44179, "answer": "99% of projects would be better off with a relational database. It makes things way easier and simpler. Very few features benefit from a NoSQL database. People are excited about mongo because \"it's javascript!\". These people are morons.\n\nCSB time:\nI went in for an interview once, where they told me about the product, explained how they use MongoDB for their database, and then explained how building out all the relational DB commands on top of mongo was a total bitch. Then asked me to whiteboard how I would write the JOIN function on top of Mongo, which is what they had to do.\n\nI answered their question, but stated my opinions on mongo and asked why they even bothered to use it, because their product aligned so much more with a relational ACID database. The engineering lead guy went red in the face and we debated the decision. Did not get the job.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44180, "question": "99% of projects would be better off with a relational database. It makes things way easier and simpler. Very few features benefit from a NoSQL database. People are excited about mongo because \"it's javascript!\". These people are morons.\n\nCSB time:\nI went in for an interview once, where they told me about the product, explained how they use MongoDB for their database, and then explained how building out all the relational DB commands on top of mongo was a total bitch. Then asked me to whiteboard how I would write the JOIN function on top of Mongo, which is what they had to do.\n\nI answered their question, but stated my opinions on mongo and asked why they even bothered to use it, because their product aligned so much more with a relational ACID database. The engineering lead guy went red in the face and we debated the decision. Did not get the job.", "aSentId": 44181, "answer": "You're probably better off working somewhere else anyway, if only for your own sanity.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44182, "question": "You're probably better off working somewhere else anyway, if only for your own sanity.", "aSentId": 44183, "answer": "I agree because if that engineering lead can't defend a critical architectural decision to an outsider in a civilized manner, then they certainly haven't had any healthy conversation internally about it", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44184, "question": "I agree because if that engineering lead can't defend a critical architectural decision to an outsider in a civilized manner, then they certainly haven't had any healthy conversation internally about it", "aSentId": 44185, "answer": "you're also listening to 1 side of the conversation with someone who \"didn't get the job\" (read: probably has a reason to cast them him in a negative light).\n\nMaybe it was or wasn't the right decision, and maybe that engineer is or isn't terrible, but I wouldn't base that off of a reddit post.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44186, "question": "you're also listening to 1 side of the conversation with someone who \"didn't get the job\" (read: probably has a reason to cast them him in a negative light).\n\nMaybe it was or wasn't the right decision, and maybe that engineer is or isn't terrible, but I wouldn't base that off of a reddit post.", "aSentId": 44187, "answer": "&gt; read: probably has a reason to cast them him in a negative light\n\nI don't know, jobs are a dime a dozen for a decent developer. There's jobs I haven't gotten, but I feel no ill-will, because with as many offers as I get, I know that I'm not going to always hit 100%. ", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44188, "question": "&gt; read: probably has a reason to cast them him in a negative light\n\nI don't know, jobs are a dime a dozen for a decent developer. There's jobs I haven't gotten, but I feel no ill-will, because with as many offers as I get, I know that I'm not going to always hit 100%. ", "aSentId": 44189, "answer": "well gosh then, I suppose you should definitely not apply critical thinking to anything posted on reddit.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44190, "question": "well gosh then, I suppose you should definitely not apply critical thinking to anything posted on reddit.", "aSentId": 44191, "answer": "Of course you should. I'm not sure how you take my comment to mean you shouldn't. You posited that the comment was one sided and he could have an ax to grind. I gave an opposite view, that just because someone didn't get a job, doesn't necessarily mean they're upset/angry/bitter/whatever about it. It was literally the exact same thing you did, but the other side.  \n\nYou should try to apply those critical thinking skills you mentioned, and not read so much into things. ", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44192, "question": "Of course you should. I'm not sure how you take my comment to mean you shouldn't. You posited that the comment was one sided and he could have an ax to grind. I gave an opposite view, that just because someone didn't get a job, doesn't necessarily mean they're upset/angry/bitter/whatever about it. It was literally the exact same thing you did, but the other side.  \n\nYou should try to apply those critical thinking skills you mentioned, and not read so much into things. ", "aSentId": 44193, "answer": "You misunderstood.\n\ngood day.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44182, "question": "You're probably better off working somewhere else anyway, if only for your own sanity.", "aSentId": 44195, "answer": "Or by having some sensible social skills, he could have eventually replaced the guy.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44182, "question": "You're probably better off working somewhere else anyway, if only for your own sanity.", "aSentId": 44197, "answer": "Better to have an offer and turn it down than to not get one, however. Arguing with the interviewer serves no purpose.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44198, "question": "Better to have an offer and turn it down than to not get one, however. Arguing with the interviewer serves no purpose.", "aSentId": 44199, "answer": "When I go for a job interview I am interviewing them as well. ", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44200, "question": "When I go for a job interview I am interviewing them as well. ", "aSentId": 44201, "answer": "Having market power is helpful ;)", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44200, "question": "When I go for a job interview I am interviewing them as well. ", "aSentId": 44203, "answer": "But blowing the lead serves no purpose.\n\nIt's better to keep that offer on the table (even if you are NEVER going to take it), the bridge intact, and use it to your advantage when negotiating later.\n\nThere is no winner in an argument, even less in an interview. Dale Carnegie has something to say about this.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44204, "question": "But blowing the lead serves no purpose.\n\nIt's better to keep that offer on the table (even if you are NEVER going to take it), the bridge intact, and use it to your advantage when negotiating later.\n\nThere is no winner in an argument, even less in an interview. Dale Carnegie has something to say about this.", "aSentId": 44205, "answer": "I'm sorry, but what is the advantage in getting an offer that you have no intention in using?\n\nWhy keep a bridge open to a place you know you don't want to be near?\n\nI agree that the argument itself probably won't settle anything, but in this case it made it clear to OP that the lead was impossible to work with...", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44206, "question": "I'm sorry, but what is the advantage in getting an offer that you have no intention in using?\n\nWhy keep a bridge open to a place you know you don't want to be near?\n\nI agree that the argument itself probably won't settle anything, but in this case it made it clear to OP that the lead was impossible to work with...", "aSentId": 44207, "answer": "The immediate benefit would be if they are a market player or well known. You can use it to your advantage in interviews with their competitors ", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44206, "question": "I'm sorry, but what is the advantage in getting an offer that you have no intention in using?\n\nWhy keep a bridge open to a place you know you don't want to be near?\n\nI agree that the argument itself probably won't settle anything, but in this case it made it clear to OP that the lead was impossible to work with...", "aSentId": 44209, "answer": "To use it with their competitors if you want.\n\nSelf-esteem, if that's your thing.\n\nTo not sound like a fucking dick when people talk about you. Would you rather be rejected on their (probably bullshit) terms, or would you rather reject them, professionally, a few days later?\n\nI've spoken freely about overly-pompous, (rejected) interview candidates to colleagues at other organizations on more than one occasion.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44206, "question": "I'm sorry, but what is the advantage in getting an offer that you have no intention in using?\n\nWhy keep a bridge open to a place you know you don't want to be near?\n\nI agree that the argument itself probably won't settle anything, but in this case it made it clear to OP that the lead was impossible to work with...", "aSentId": 44211, "answer": "My boss has told me that if I found a job somewhere else, he would be pissed off if he didn't get a chance to at least counter offer. If you're valuable, then interviewing is about expanding your horizons - because you're worth it.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44204, "question": "But blowing the lead serves no purpose.\n\nIt's better to keep that offer on the table (even if you are NEVER going to take it), the bridge intact, and use it to your advantage when negotiating later.\n\nThere is no winner in an argument, even less in an interview. Dale Carnegie has something to say about this.", "aSentId": 44213, "answer": "If the people are so close minded that they can't take a different opinion it's just better to move on.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44214, "question": "If the people are so close minded that they can't take a different opinion it's just better to move on.", "aSentId": 44215, "answer": "I agree that it's better to move on - after you've gotten the offer that you would have otherwise received if you weren't an argumentative prick in the interview.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44198, "question": "Better to have an offer and turn it down than to not get one, however. Arguing with the interviewer serves no purpose.", "aSentId": 44217, "answer": "In this case it did serve a purpose, very well.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44180, "question": "99% of projects would be better off with a relational database. It makes things way easier and simpler. Very few features benefit from a NoSQL database. People are excited about mongo because \"it's javascript!\". These people are morons.\n\nCSB time:\nI went in for an interview once, where they told me about the product, explained how they use MongoDB for their database, and then explained how building out all the relational DB commands on top of mongo was a total bitch. Then asked me to whiteboard how I would write the JOIN function on top of Mongo, which is what they had to do.\n\nI answered their question, but stated my opinions on mongo and asked why they even bothered to use it, because their product aligned so much more with a relational ACID database. The engineering lead guy went red in the face and we debated the decision. Did not get the job.", "aSentId": 44219, "answer": "I currently work somewhere with a really nice codebase... and also a NoSQL database (Cassandra) in the backend. That has to be the single biggest pain-point I've experienced. The lead architects keep assuring everyone that it's more \"scalable\" this way, but you can tell everyone is aware of the fact that we'd be far better off with Postgres.\n\nInstead, we spent months putting together a sub-project that used map-reduce so we could actually query the \"massive\" amounts of data we were storing.\n\nIf we were just realistic about our data-storage requirements and realized that we will never be \"Big Data\", even when we're successful, we could just start using relational DBs like everyone else and save ourselves the hassle.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44220, "question": "I currently work somewhere with a really nice codebase... and also a NoSQL database (Cassandra) in the backend. That has to be the single biggest pain-point I've experienced. The lead architects keep assuring everyone that it's more \"scalable\" this way, but you can tell everyone is aware of the fact that we'd be far better off with Postgres.\n\nInstead, we spent months putting together a sub-project that used map-reduce so we could actually query the \"massive\" amounts of data we were storing.\n\nIf we were just realistic about our data-storage requirements and realized that we will never be \"Big Data\", even when we're successful, we could just start using relational DBs like everyone else and save ourselves the hassle.", "aSentId": 44221, "answer": "What boggles my mind is, you could just dump the relevant information from RDMS into a NoSQL storage database quite easily, to implement the one key feature that actually needed it, without hamstringing development on all the other key features. We more/less do this at my company for our analytics system.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44222, "question": "What boggles my mind is, you could just dump the relevant information from RDMS into a NoSQL storage database quite easily, to implement the one key feature that actually needed it, without hamstringing development on all the other key features. We more/less do this at my company for our analytics system.", "aSentId": 44223, "answer": "Exactly the whole point of a proper old school standards compliant database, is you can do what then fuck you want. Dumping to nosql is a breeze.   Unless you are running a site the size of Craigslist, it's pointless. These days computers are so fast the original speed concerns are not even relevant. You could set up a 6-12 core multi code unix/Linux box and it would be fast as any nosql setup for 99% of projects.  \nI think people don't really understand why these nosql database were created and specially what they work best with. \nOld school database work with any project with real ease.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44224, "question": "Exactly the whole point of a proper old school standards compliant database, is you can do what then fuck you want. Dumping to nosql is a breeze.   Unless you are running a site the size of Craigslist, it's pointless. These days computers are so fast the original speed concerns are not even relevant. You could set up a 6-12 core multi code unix/Linux box and it would be fast as any nosql setup for 99% of projects.  \nI think people don't really understand why these nosql database were created and specially what they work best with. \nOld school database work with any project with real ease.", "aSentId": 44225, "answer": "It's a buzzword and management is going for it so they can tell other people they're doing it, similar to Cartman buying pubes to let people know he had reached adulthood.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44224, "question": "Exactly the whole point of a proper old school standards compliant database, is you can do what then fuck you want. Dumping to nosql is a breeze.   Unless you are running a site the size of Craigslist, it's pointless. These days computers are so fast the original speed concerns are not even relevant. You could set up a 6-12 core multi code unix/Linux box and it would be fast as any nosql setup for 99% of projects.  \nI think people don't really understand why these nosql database were created and specially what they work best with. \nOld school database work with any project with real ease.", "aSentId": 44227, "answer": "while i'm not i proponent of nosql stuff, saying that speed isn't important is retarded.  speed is always important, speed is almost always the limiting factor on any database set up.  speed is the one thing that costs the most and is the hardest to attain.\n\ni'm sure that for maybe a non-significant amount of databases speed isn't that big a deal but looking at any moderately large billing system (maybe a couple thousand clients) will make you want to gut yourself with how slow the whole thing runs.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44224, "question": "Exactly the whole point of a proper old school standards compliant database, is you can do what then fuck you want. Dumping to nosql is a breeze.   Unless you are running a site the size of Craigslist, it's pointless. These days computers are so fast the original speed concerns are not even relevant. You could set up a 6-12 core multi code unix/Linux box and it would be fast as any nosql setup for 99% of projects.  \nI think people don't really understand why these nosql database were created and specially what they work best with. \nOld school database work with any project with real ease.", "aSentId": 44229, "answer": "&gt; I think people don't really understand why these nosql database were created and specially what they work best with.\n\nAnd the NoSQL providers are actively trying to convince the community that their products *can* replace traditional RDMS's. \"MongoDB can do everything!\" - president of Mongo.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44222, "question": "What boggles my mind is, you could just dump the relevant information from RDMS into a NoSQL storage database quite easily, to implement the one key feature that actually needed it, without hamstringing development on all the other key features. We more/less do this at my company for our analytics system.", "aSentId": 44231, "answer": "Yeah my current employer does this by taking the relational MySQL data and de-normalizing into ElasticSearch", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44232, "question": "Yeah my current employer does this by taking the relational MySQL data and de-normalizing into ElasticSearch", "aSentId": 44233, "answer": "We do the same thing. I would never consider NoSQL without a relational primary database, but in our particular setup it works out very nicely.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44232, "question": "Yeah my current employer does this by taking the relational MySQL data and de-normalizing into ElasticSearch", "aSentId": 44235, "answer": "Without looking, I am guessing there is a Postgres FDW for ElasticSearch. Regardless, this could be done with HTTP:...\n\nWith said FDW and some Postgres triggers, you can have your PG DB automatically syncing data to ES without any additional hardware, headache, application code.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44232, "question": "Yeah my current employer does this by taking the relational MySQL data and de-normalizing into ElasticSearch", "aSentId": 44237, "answer": "We do something similar using a redis cache. Rdbms with a redis cache for cache able often accessed data. Works great ", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44222, "question": "What boggles my mind is, you could just dump the relevant information from RDMS into a NoSQL storage database quite easily, to implement the one key feature that actually needed it, without hamstringing development on all the other key features. We more/less do this at my company for our analytics system.", "aSentId": 44239, "answer": "Yeah we do that in reverse with Splunk. Use its NoSQL backend for storage, and poll RDBMS for event enrichment.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44242, "question": "That would be really nice. We're not leveraging tools for what they do well at the moment, we're trying to force a tool to do something it does poorly, and it's (obviously) working out poorly. We've been waiting months just to be able to perform analytics against our data.", "aSentId": 44243, "answer": "Riak's integration with Solr is pretty sharp, if in fact you need scale + search... That being said, if your data model doesn't fit, then don't bother.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44244, "question": "Riak's integration with Solr is pretty sharp, if in fact you need scale + search... That being said, if your data model doesn't fit, then don't bother.", "aSentId": 44245, "answer": "riak's clustering is also damn good, especially from the systems engineering side. joining and data rebalancing are a breeze", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44246, "question": "riak's clustering is also damn good, especially from the systems engineering side. joining and data rebalancing are a breeze", "aSentId": 44247, "answer": "Yeah, it's been good to us so far. \n\nWe've only really encountered any real issues with the yokozuna (kv - solr) integration layer, and those problems are getting fixed up quickly as we fire in tickets, so we're quite pleased.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44220, "question": "I currently work somewhere with a really nice codebase... and also a NoSQL database (Cassandra) in the backend. That has to be the single biggest pain-point I've experienced. The lead architects keep assuring everyone that it's more \"scalable\" this way, but you can tell everyone is aware of the fact that we'd be far better off with Postgres.\n\nInstead, we spent months putting together a sub-project that used map-reduce so we could actually query the \"massive\" amounts of data we were storing.\n\nIf we were just realistic about our data-storage requirements and realized that we will never be \"Big Data\", even when we're successful, we could just start using relational DBs like everyone else and save ourselves the hassle.", "aSentId": 44250, "answer": "&gt; Big data is like teenage sex: everyone talks about it, nobody really knows how to do it, everyone thinks everyone else is doing it, so everyone claims they are doing it...", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44251, "question": "&gt; Big data is like teenage sex: everyone talks about it, nobody really knows how to do it, everyone thinks everyone else is doing it, so everyone claims they are doing it...", "aSentId": 44252, "answer": "I do big data all the time, feels like bags of sand man.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44220, "question": "I currently work somewhere with a really nice codebase... and also a NoSQL database (Cassandra) in the backend. That has to be the single biggest pain-point I've experienced. The lead architects keep assuring everyone that it's more \"scalable\" this way, but you can tell everyone is aware of the fact that we'd be far better off with Postgres.\n\nInstead, we spent months putting together a sub-project that used map-reduce so we could actually query the \"massive\" amounts of data we were storing.\n\nIf we were just realistic about our data-storage requirements and realized that we will never be \"Big Data\", even when we're successful, we could just start using relational DBs like everyone else and save ourselves the hassle.", "aSentId": 44254, "answer": "Yup... Most of the time a relational database is fine. I really like the idea of Polyglot persistence. Even the Cassandra guys recommend it. Put relational data in an RDBMS. Put non relational data in Cassandra. Don't try to shove all your data into one kind of store. ", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44255, "question": "Yup... Most of the time a relational database is fine. I really like the idea of Polyglot persistence. Even the Cassandra guys recommend it. Put relational data in an RDBMS. Put non relational data in Cassandra. Don't try to shove all your data into one kind of store. ", "aSentId": 44256, "answer": "Sounds like they actually grasped the concepts of \"the right tool for the right job\" and \"there's no silver bullet\".", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44257, "question": "Sounds like they actually grasped the concepts of \"the right tool for the right job\" and \"there's no silver bullet\".", "aSentId": 44258, "answer": "&gt; and \"there's no silver bullet\"\n\nVampires everywhere approve this message.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44180, "question": "99% of projects would be better off with a relational database. It makes things way easier and simpler. Very few features benefit from a NoSQL database. People are excited about mongo because \"it's javascript!\". These people are morons.\n\nCSB time:\nI went in for an interview once, where they told me about the product, explained how they use MongoDB for their database, and then explained how building out all the relational DB commands on top of mongo was a total bitch. Then asked me to whiteboard how I would write the JOIN function on top of Mongo, which is what they had to do.\n\nI answered their question, but stated my opinions on mongo and asked why they even bothered to use it, because their product aligned so much more with a relational ACID database. The engineering lead guy went red in the face and we debated the decision. Did not get the job.", "aSentId": 44264, "answer": "&gt; 99% of projects would be better off with a relational database.\n\nOr better, and RDMS with a full blown JSON indexing and a hash store that rivals mongos speed.\n\nHow people don't choose psql just confuses me.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44265, "question": "&gt; 99% of projects would be better off with a relational database.\n\nOr better, and RDMS with a full blown JSON indexing and a hash store that rivals mongos speed.\n\nHow people don't choose psql just confuses me.", "aSentId": 44266, "answer": "For very large databases, Postgres' clustering abilities aren't that great.  It's probably one of the best choices for single-host databases (which, again, cover nearly all applications), but if you're trying to spread your database over a few dozen hosts, Postgres doesn't really work well.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44267, "question": "For very large databases, Postgres' clustering abilities aren't that great.  It's probably one of the best choices for single-host databases (which, again, cover nearly all applications), but if you're trying to spread your database over a few dozen hosts, Postgres doesn't really work well.", "aSentId": 44268, "answer": "I feel like this comment would have benefited from some better structure around how you're defining \"very large\". \n\nIt also depends on if/when you need to cluster.\n\nI vertically scaled postgres to 16TB+ sizes on single nodes. \n\nThe database still performed great, although the developers often failed to write performant queries against it. ", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44269, "question": "I feel like this comment would have benefited from some better structure around how you're defining \"very large\". \n\nIt also depends on if/when you need to cluster.\n\nI vertically scaled postgres to 16TB+ sizes on single nodes. \n\nThe database still performed great, although the developers often failed to write performant queries against it. ", "aSentId": 44270, "answer": "Yes, you're right. I was thinking about 200 TB+ databases when I wrote \"very large\".", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44267, "question": "For very large databases, Postgres' clustering abilities aren't that great.  It's probably one of the best choices for single-host databases (which, again, cover nearly all applications), but if you're trying to spread your database over a few dozen hosts, Postgres doesn't really work well.", "aSentId": 44272, "answer": "What alternative do you propose? I heard Oracle was good if you had deep pockets, what else is out there?", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44273, "question": "What alternative do you propose? I heard Oracle was good if you had deep pockets, what else is out there?", "aSentId": 44274, "answer": "One of the MS SQL clusters in our data-centre hosts 200+ databases and has capacity for more.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44275, "question": "One of the MS SQL clusters in our data-centre hosts 200+ databases and has capacity for more.", "aSentId": 44276, "answer": "Someone advocating a Microsoft product on reddit? Quick, get the pitchforks!", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44277, "question": "Someone advocating a Microsoft product on reddit? Quick, get the pitchforks!", "aSentId": 44278, "answer": "It must be a slow day, I still have my points \ud83d\ude0a ", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44277, "question": "Someone advocating a Microsoft product on reddit? Quick, get the pitchforks!", "aSentId": 44280, "answer": "We are many, but ms isn't so popular on reddit so we are mostly quiet ", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44277, "question": "Someone advocating a Microsoft product on reddit? Quick, get the pitchforks!", "aSentId": 44282, "answer": "That's ... not how /r/programming works. Gushing about Visual Studio and C#, and spreading FUD about Linux or Java is what makes people bring out the upvoting fingers.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44283, "question": "That's ... not how /r/programming works. Gushing about Visual Studio and C#, and spreading FUD about Linux or Java is what makes people bring out the upvoting fingers.", "aSentId": 44284, "answer": "srsly. i think microsoft developers stick with it just so they can play the victim, but nobody's victimizing them. it's like christians. ", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44275, "question": "One of the MS SQL clusters in our data-centre hosts 200+ databases and has capacity for more.", "aSentId": 44287, "answer": "I don't doubt it. While we are a PG shop, we have a sister company that uses MS SQL and loves it. Certainly seems like a nice database. The cost seems pretty high to us though. From what I can tell, running a 3 node cluster with 16 cores per cluster will run into hundreds of thousands of dollars. Is my understanding on cost correct?", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44288, "question": "I don't doubt it. While we are a PG shop, we have a sister company that uses MS SQL and loves it. Certainly seems like a nice database. The cost seems pretty high to us though. From what I can tell, running a 3 node cluster with 16 cores per cluster will run into hundreds of thousands of dollars. Is my understanding on cost correct?", "aSentId": 44289, "answer": "For MS SQL Server, the way I understand it, licensing is relatively cheap until you hit 4 cores per server.\n\nIn my job, I don't have to worry about costs: I raise a request for new infrastructure, they build it in our datacentre and take care of licensing, and send an invoice back to the stakeholders of the project. \n\nBut, we have two of those massive clusters that have been set up by a team of in-house DBAs so we have a way to readily host new databases. \n\nDuring the London 2012 Olympics, we built a service to capture tweets in one of those databases. The size grew to ~90GB in about 12 hours, and the capture ran for the entire length of the event, all the while with analytical reports being produced from the database. I don't remember the final size of it, but I was pretty impressed by how MS SQL Server was handling the load.\n\n", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44290, "question": "For MS SQL Server, the way I understand it, licensing is relatively cheap until you hit 4 cores per server.\n\nIn my job, I don't have to worry about costs: I raise a request for new infrastructure, they build it in our datacentre and take care of licensing, and send an invoice back to the stakeholders of the project. \n\nBut, we have two of those massive clusters that have been set up by a team of in-house DBAs so we have a way to readily host new databases. \n\nDuring the London 2012 Olympics, we built a service to capture tweets in one of those databases. The size grew to ~90GB in about 12 hours, and the capture ran for the entire length of the event, all the while with analytical reports being produced from the database. I don't remember the final size of it, but I was pretty impressed by how MS SQL Server was handling the load.\n\n", "aSentId": 44291, "answer": "Cool. Its the cost that sinks it for us, unfortunately :(", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44275, "question": "One of the MS SQL clusters in our data-centre hosts 200+ databases and has capacity for more.", "aSentId": 44293, "answer": "MS SQL is a 'surprisingly' good product. expensive though.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44273, "question": "What alternative do you propose? I heard Oracle was good if you had deep pockets, what else is out there?", "aSentId": 44295, "answer": "Seriously, MariaDB (MySQL fork) with clusters.  It's pretty much the *only* great option for cheap multi-master relational DBs these days.  You can run circles around Postgresql with that setup for write-heavy operations.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44296, "question": "Seriously, MariaDB (MySQL fork) with clusters.  It's pretty much the *only* great option for cheap multi-master relational DBs these days.  You can run circles around Postgresql with that setup for write-heavy operations.", "aSentId": 44297, "answer": "So does /dev/null, and it has the same data integrity features. \n\nFor me to even consider using MariaDB they would have to first remove all of those asinine options for silently corrupting data. Trying to shove \"ABC\" into an integer column should never be just a warning.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44298, "question": "So does /dev/null, and it has the same data integrity features. \n\nFor me to even consider using MariaDB they would have to first remove all of those asinine options for silently corrupting data. Trying to shove \"ABC\" into an integer column should never be just a warning.", "aSentId": 44299, "answer": "Strict mode turns those warnings into errors. It has been around for years but evidently it's not a widely known feature.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44300, "question": "Strict mode turns those warnings into errors. It has been around for years but evidently it's not a widely known feature.", "aSentId": 44301, "answer": "And it's often forgotten by those who do know about it.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44302, "question": "And it's often forgotten by those who do know about it.", "aSentId": 44303, "answer": "Or you know, you configure your database properly. If you are doing a clustered setup you should already be configuring and tuning your servers.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44302, "question": "And it's often forgotten by those who do know about it.", "aSentId": 44305, "answer": "And it's often forgotten by ~~those~~ incompetent engineers (fixed) who do know about it.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44306, "question": "And it's often forgotten by ~~those~~ incompetent engineers (fixed) who do know about it.", "aSentId": 44307, "answer": "Meh, the same old argument. I'm sure you are one of those people who argue that PHP is best language if used correctly. ;)", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44298, "question": "So does /dev/null, and it has the same data integrity features. \n\nFor me to even consider using MariaDB they would have to first remove all of those asinine options for silently corrupting data. Trying to shove \"ABC\" into an integer column should never be just a warning.", "aSentId": 44309, "answer": "But what about SQLite, where the ability to shove 'ABC' into an integer column is a *feature*?", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44310, "question": "But what about SQLite, where the ability to shove 'ABC' into an integer column is a *feature*?", "aSentId": 44311, "answer": "I consider SQLite to be one step above using raw file I/O. It's great for acting like a local cache for an Android app, but I'm not going to run a business on it.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44312, "question": "I consider SQLite to be one step above using raw file I/O. It's great for acting like a local cache for an Android app, but I'm not going to run a business on it.", "aSentId": 44313, "answer": "Cannot agree more: I've had to rescue a project from exactly this situation. I now know that there *are* people who try to use SQLite as a multi-user RDBMS, and it ends as badly as you would guess.\n\n&gt; I consider SQLite to be one step above using raw file I/O\n\nTry saying that in the SQLite mailing list... :-)", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44314, "question": "Cannot agree more: I've had to rescue a project from exactly this situation. I now know that there *are* people who try to use SQLite as a multi-user RDBMS, and it ends as badly as you would guess.\n\n&gt; I consider SQLite to be one step above using raw file I/O\n\nTry saying that in the SQLite mailing list... :-)", "aSentId": 44315, "answer": "You can. The SQLite people themselves say that SQLite isn't a replacement for an RDBMS system but instead is a replacement for fopen.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44316, "question": "You can. The SQLite people themselves say that SQLite isn't a replacement for an RDBMS system but instead is a replacement for fopen.", "aSentId": 44317, "answer": "I went there to get some backing for the notion that SQLite was not appropriate for a concurrent-write, multi-user scenario. The use case was pretty explicit (basically 'my boss wants this to work like MySQL, please tell him it won't').\n\nThey went to great pains to misinterpret my request over the perceived semantics of my phrasing. One guy bemoaned how great things were in the olden days of time sharing and how modern n-tier was just awful.\n\nI swear, DB people are the librarians of the software world.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44312, "question": "I consider SQLite to be one step above using raw file I/O. It's great for acting like a local cache for an Android app, but I'm not going to run a business on it.", "aSentId": 44319, "answer": "Whilst I'd agree that it's ok for embedded, but absolutely not for running a business on, I think that's being pretty harsh on SQLite to say it's one up from raw file I/O.\n\nIt's a fantastic engine with many capabilities and makes all sorts of things possible in applications (or even as a utility for one-off data manipulations).\n\nI think one above raw I/O might be sed/awk or object serialisation or BDB or something... but there's a fair way to go to match the features of SQLite before it's as basic as one step above using raw file I/O.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44310, "question": "But what about SQLite, where the ability to shove 'ABC' into an integer column is a *feature*?", "aSentId": 44321, "answer": "Well SQLite doesn't really have integer columns\u2026 types are just hints.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44298, "question": "So does /dev/null, and it has the same data integrity features. \n\nFor me to even consider using MariaDB they would have to first remove all of those asinine options for silently corrupting data. Trying to shove \"ABC\" into an integer column should never be just a warning.", "aSentId": 44323, "answer": "&gt; For me to even consider using MariaDB they would have to first remove all of those asinine options for silently corrupting data.\n\nOr, you know, you could just learn how to use the database.\n\n    mysql&gt; set session sql_mode='NO_ZERO_DATE,NO_ZERO_IN_DATE,STRICT_TRANS_TABLES';\n    Query OK, 0 rows affected (0.01 sec)\n    \n    mysql&gt; create table abc (a integer);\n    Query OK, 0 rows affected (0.01 sec)\n    \n    mysql&gt; insert into abc (a) values ('abc');\n    ERROR 1366 (HY000): Incorrect integer value: 'abc' for column 'a' at row 1\n\nIt's been this way since *at least* 2005, which is the MySQL version I ran above (version 5.1).\n\nSure would be nice if the FUD about MySQL from ignorant people went away. Is it perfect? No. But there is absolutely nothing data corrupting about it. And there is a LOT to be said for running a mainstream database, which PostgreSQL most certainly isn't, compared to MySQL.\n\nIf MySQL is good enough to run Facebook with a billion users (yes, one billion active accounts per month), it's good enough to run whatever your app is.\n\nEdit: Thanks for the gold! Never thought I'd get it for defending MySQL... :) \ud83d\ude03", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44324, "question": "&gt; For me to even consider using MariaDB they would have to first remove all of those asinine options for silently corrupting data.\n\nOr, you know, you could just learn how to use the database.\n\n    mysql&gt; set session sql_mode='NO_ZERO_DATE,NO_ZERO_IN_DATE,STRICT_TRANS_TABLES';\n    Query OK, 0 rows affected (0.01 sec)\n    \n    mysql&gt; create table abc (a integer);\n    Query OK, 0 rows affected (0.01 sec)\n    \n    mysql&gt; insert into abc (a) values ('abc');\n    ERROR 1366 (HY000): Incorrect integer value: 'abc' for column 'a' at row 1\n\nIt's been this way since *at least* 2005, which is the MySQL version I ran above (version 5.1).\n\nSure would be nice if the FUD about MySQL from ignorant people went away. Is it perfect? No. But there is absolutely nothing data corrupting about it. And there is a LOT to be said for running a mainstream database, which PostgreSQL most certainly isn't, compared to MySQL.\n\nIf MySQL is good enough to run Facebook with a billion users (yes, one billion active accounts per month), it's good enough to run whatever your app is.\n\nEdit: Thanks for the gold! Never thought I'd get it for defending MySQL... :) \ud83d\ude03", "aSentId": 44325, "answer": "Postgres is most certainly mainstream ", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44324, "question": "&gt; For me to even consider using MariaDB they would have to first remove all of those asinine options for silently corrupting data.\n\nOr, you know, you could just learn how to use the database.\n\n    mysql&gt; set session sql_mode='NO_ZERO_DATE,NO_ZERO_IN_DATE,STRICT_TRANS_TABLES';\n    Query OK, 0 rows affected (0.01 sec)\n    \n    mysql&gt; create table abc (a integer);\n    Query OK, 0 rows affected (0.01 sec)\n    \n    mysql&gt; insert into abc (a) values ('abc');\n    ERROR 1366 (HY000): Incorrect integer value: 'abc' for column 'a' at row 1\n\nIt's been this way since *at least* 2005, which is the MySQL version I ran above (version 5.1).\n\nSure would be nice if the FUD about MySQL from ignorant people went away. Is it perfect? No. But there is absolutely nothing data corrupting about it. And there is a LOT to be said for running a mainstream database, which PostgreSQL most certainly isn't, compared to MySQL.\n\nIf MySQL is good enough to run Facebook with a billion users (yes, one billion active accounts per month), it's good enough to run whatever your app is.\n\nEdit: Thanks for the gold! Never thought I'd get it for defending MySQL... :) \ud83d\ude03", "aSentId": 44327, "answer": "LOL at PostgreSQL not being a 'mainstream database'.... ", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44328, "question": "LOL at PostgreSQL not being a 'mainstream database'.... ", "aSentId": 44329, "answer": "No shit right? Pervasive anyone?", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44328, "question": "LOL at PostgreSQL not being a 'mainstream database'.... ", "aSentId": 44331, "answer": "If you think the marketshare of PostgreSQL is even remotely close to the popular databases, I don't know what to tell you, except you ought to do some research. PostgreSQL is very much a small player.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44332, "question": "If you think the marketshare of PostgreSQL is even remotely close to the popular databases, I don't know what to tell you, except you ought to do some research. PostgreSQL is very much a small player.", "aSentId": 44333, "answer": "If you've had to admin MariaDB/MySQL and PostgreSQL, you'd see why friends don't let friends do MySQL. \n\nGive PG access to plenty of RAM, and it wipes MySQL off the map with complex queries. PG has actual data integrity, and is incredibly stable. After almost 15 years of heavy, production use: not a single instance of data corruption. This when (sometimes) running north of 1k queries per second with about 70% write queries.\n\nAs an admin; I've had MySQL (especially with replication) corrupt multiple times per month....", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44334, "question": "If you've had to admin MariaDB/MySQL and PostgreSQL, you'd see why friends don't let friends do MySQL. \n\nGive PG access to plenty of RAM, and it wipes MySQL off the map with complex queries. PG has actual data integrity, and is incredibly stable. After almost 15 years of heavy, production use: not a single instance of data corruption. This when (sometimes) running north of 1k queries per second with about 70% write queries.\n\nAs an admin; I've had MySQL (especially with replication) corrupt multiple times per month....", "aSentId": 44335, "answer": "&gt; PG has actual data integrity\n\n...as does MySQL. Surely you're not one of those people who still believe MySQL is not ACID-compliant?\n\n&gt; As an admin; I've had MySQL (especially with replication) corrupt multiple times per month....\n\nThen there was something wrong with your hardware or your administration. Do you really -- *really* -- believe that MySQL could achieve nearly 50% marketshare if corrupted data happened \"multiple times per month\"?\n\nDo you *really*, I mean *REALLY*, think that Facebook could possibly function with a billion active users a month if MySQL regularly corrupted data?\n\nBut no, it couldn't be something wrong with your own experience, the entire rest of the world must be wrong. The rest of the world must be hiding all this data corruption that is apparently happening with that kind of regularity.\n\nAnd, by the way, I've been running MySQL for about a decade on a high volume, relatively high data volume application, and have never had one occurrence of data corruption, much less \"multiple times per month\".\n\nWhat is about PostgreSQL that makes you people so unbelievably defensive about it that you have to spread such FUD about MySQL? By all means, use PostgreSQL, it's a fine database in its niche. Why can't you people just accept that MySQL is a fine database in its own right, that literally hundreds of millions of people use successfully with minimal problems, including one of the biggest database users of all?", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44336, "question": "&gt; PG has actual data integrity\n\n...as does MySQL. Surely you're not one of those people who still believe MySQL is not ACID-compliant?\n\n&gt; As an admin; I've had MySQL (especially with replication) corrupt multiple times per month....\n\nThen there was something wrong with your hardware or your administration. Do you really -- *really* -- believe that MySQL could achieve nearly 50% marketshare if corrupted data happened \"multiple times per month\"?\n\nDo you *really*, I mean *REALLY*, think that Facebook could possibly function with a billion active users a month if MySQL regularly corrupted data?\n\nBut no, it couldn't be something wrong with your own experience, the entire rest of the world must be wrong. The rest of the world must be hiding all this data corruption that is apparently happening with that kind of regularity.\n\nAnd, by the way, I've been running MySQL for about a decade on a high volume, relatively high data volume application, and have never had one occurrence of data corruption, much less \"multiple times per month\".\n\nWhat is about PostgreSQL that makes you people so unbelievably defensive about it that you have to spread such FUD about MySQL? By all means, use PostgreSQL, it's a fine database in its niche. Why can't you people just accept that MySQL is a fine database in its own right, that literally hundreds of millions of people use successfully with minimal problems, including one of the biggest database users of all?", "aSentId": 44337, "answer": "I don't think Facebook is using the stock installer downloaded from mysql.com but a heavily modified own version of MySQL. I could be wrong, though. ", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44338, "question": "I don't think Facebook is using the stock installer downloaded from mysql.com but a heavily modified own version of MySQL. I could be wrong, though. ", "aSentId": 44339, "answer": "You would be correct.  The MySQL Facebook uses is heavily modified.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44336, "question": "&gt; PG has actual data integrity\n\n...as does MySQL. Surely you're not one of those people who still believe MySQL is not ACID-compliant?\n\n&gt; As an admin; I've had MySQL (especially with replication) corrupt multiple times per month....\n\nThen there was something wrong with your hardware or your administration. Do you really -- *really* -- believe that MySQL could achieve nearly 50% marketshare if corrupted data happened \"multiple times per month\"?\n\nDo you *really*, I mean *REALLY*, think that Facebook could possibly function with a billion active users a month if MySQL regularly corrupted data?\n\nBut no, it couldn't be something wrong with your own experience, the entire rest of the world must be wrong. The rest of the world must be hiding all this data corruption that is apparently happening with that kind of regularity.\n\nAnd, by the way, I've been running MySQL for about a decade on a high volume, relatively high data volume application, and have never had one occurrence of data corruption, much less \"multiple times per month\".\n\nWhat is about PostgreSQL that makes you people so unbelievably defensive about it that you have to spread such FUD about MySQL? By all means, use PostgreSQL, it's a fine database in its niche. Why can't you people just accept that MySQL is a fine database in its own right, that literally hundreds of millions of people use successfully with minimal problems, including one of the biggest database users of all?", "aSentId": 44341, "answer": "&gt;Do you really -- really -- believe that MySQL could achieve nearly 50% marketshare if corrupted data happened \"multiple times per month\"?\n\nWell, it happened... just because with enough money and time to fix it that it works doesn't mean it's ideal, you know?", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44342, "question": "&gt;Do you really -- really -- believe that MySQL could achieve nearly 50% marketshare if corrupted data happened \"multiple times per month\"?\n\nWell, it happened... just because with enough money and time to fix it that it works doesn't mean it's ideal, you know?", "aSentId": 44343, "answer": "&gt; Well, it happened... just because with enough money and time to fix it that it works doesn't mean it's ideal, you know?\n\nSeriously? You think MySQL users are typically rolling in money and they spend it fixing their databases?\n\nI have literally NEVER had a MySQL database corruption instance, and I have literally never had to spend one second or one dime on fixing anything. It Just Works^\\(c).", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44344, "question": "&gt; Well, it happened... just because with enough money and time to fix it that it works doesn't mean it's ideal, you know?\n\nSeriously? You think MySQL users are typically rolling in money and they spend it fixing their databases?\n\nI have literally NEVER had a MySQL database corruption instance, and I have literally never had to spend one second or one dime on fixing anything. It Just Works^\\(c).", "aSentId": 44345, "answer": "Lots of things work great under light loads. I'm pretty sure Facebook has plenty of money to \"Keep MySQL working\" (tm). As noted elsewhere in thread, they've modified it heavily.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44332, "question": "If you think the marketshare of PostgreSQL is even remotely close to the popular databases, I don't know what to tell you, except you ought to do some research. PostgreSQL is very much a small player.", "aSentId": 44347, "answer": "Well, a pen and piece of paper have far higher market share than both MySQL and PG but it doesn't mean you should use it instead.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44348, "question": "Well, a pen and piece of paper have far higher market share than both MySQL and PG but it doesn't mean you should use it instead.", "aSentId": 44349, "answer": "&gt; Well, a pen and piece of paper have far higher market share than both MySQL and PG\n\nI was unaware of P&amp;P being used for large scale database installations. I would recommend against that.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44324, "question": "&gt; For me to even consider using MariaDB they would have to first remove all of those asinine options for silently corrupting data.\n\nOr, you know, you could just learn how to use the database.\n\n    mysql&gt; set session sql_mode='NO_ZERO_DATE,NO_ZERO_IN_DATE,STRICT_TRANS_TABLES';\n    Query OK, 0 rows affected (0.01 sec)\n    \n    mysql&gt; create table abc (a integer);\n    Query OK, 0 rows affected (0.01 sec)\n    \n    mysql&gt; insert into abc (a) values ('abc');\n    ERROR 1366 (HY000): Incorrect integer value: 'abc' for column 'a' at row 1\n\nIt's been this way since *at least* 2005, which is the MySQL version I ran above (version 5.1).\n\nSure would be nice if the FUD about MySQL from ignorant people went away. Is it perfect? No. But there is absolutely nothing data corrupting about it. And there is a LOT to be said for running a mainstream database, which PostgreSQL most certainly isn't, compared to MySQL.\n\nIf MySQL is good enough to run Facebook with a billion users (yes, one billion active accounts per month), it's good enough to run whatever your app is.\n\nEdit: Thanks for the gold! Never thought I'd get it for defending MySQL... :) \ud83d\ude03", "aSentId": 44351, "answer": "&gt; If MySQL is good enough to run Facebook with a billion users (yes, one billion active accounts per month), it's good enough to run whatever your app is.\n\nNot exactly a fair comparison. Facebook uses it as a key-value store; there isn't much RDBMS in that.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44352, "question": "&gt; If MySQL is good enough to run Facebook with a billion users (yes, one billion active accounts per month), it's good enough to run whatever your app is.\n\nNot exactly a fair comparison. Facebook uses it as a key-value store; there isn't much RDBMS in that.", "aSentId": 44353, "answer": "Facebook also has it hacked-to-shit.\n\nThey aren't running your daddy's installation of MySQL (or PHP, or anything for that matter).\n\nSome of the shit they've done to optimize network performance in MySQL (public, on the engineering blog) will blow your mind.\n", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44354, "question": "Facebook also has it hacked-to-shit.\n\nThey aren't running your daddy's installation of MySQL (or PHP, or anything for that matter).\n\nSome of the shit they've done to optimize network performance in MySQL (public, on the engineering blog) will blow your mind.\n", "aSentId": 44355, "answer": "care to explain?", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44354, "question": "Facebook also has it hacked-to-shit.\n\nThey aren't running your daddy's installation of MySQL (or PHP, or anything for that matter).\n\nSome of the shit they've done to optimize network performance in MySQL (public, on the engineering blog) will blow your mind.\n", "aSentId": 44357, "answer": "Complete opinion with 0 factual data.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44359, "question": "So why are those even options to begin with?\n\nAnd why do they default to the unsafe state?\n\nThe defaults should be for paranoid data protection rather than performance, you should have to say \"I HATE MY DATA\" to turn the unsafe mode on instead of having to learn about the safe mode to turn that on.\n\n*That* is why so many professionals don't trust MySQL. ", "aSentId": 44360, "answer": "&gt; So why are those even options to begin with?\n&gt; And why do they default to the unsafe state?\n\nAs with many regrettable legacy features, backward compatibility. You just turn on strict mode and move on.\n\n&gt; That is why so many professionals don't trust MySQL.\n\nPeople don't trust MySQL because they've \"heard\" it's unreliable or they've \"heard\" it doesn't support transactions (info 15 years out of date) or they've \"heard\" it doesn't raise data errors or the name sounds too corny or any one of a number of silly reasons.\n\nThere are many valid reasons for preferring one database over another database, but this thread hasn't had any of them.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44361, "question": "&gt; So why are those even options to begin with?\n&gt; And why do they default to the unsafe state?\n\nAs with many regrettable legacy features, backward compatibility. You just turn on strict mode and move on.\n\n&gt; That is why so many professionals don't trust MySQL.\n\nPeople don't trust MySQL because they've \"heard\" it's unreliable or they've \"heard\" it doesn't support transactions (info 15 years out of date) or they've \"heard\" it doesn't raise data errors or the name sounds too corny or any one of a number of silly reasons.\n\nThere are many valid reasons for preferring one database over another database, but this thread hasn't had any of them.", "aSentId": 44362, "answer": "When I used MySQL the defaults were all to the least safe options.\n\nIt isn't a matter of \"I heard these things\", it's a matter of \"I had to go through the effort of making it reliable enough for a real-world application\". \n\nI have since decided that making PostgreSQL fast is easier and more productive than making MySQL provide good data integrity.\n\nThat you (and others) don't think that lacking data integrity as the default option is a good enough reason to be suspicious of a piece of database software makes me sad.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44363, "question": "When I used MySQL the defaults were all to the least safe options.\n\nIt isn't a matter of \"I heard these things\", it's a matter of \"I had to go through the effort of making it reliable enough for a real-world application\". \n\nI have since decided that making PostgreSQL fast is easier and more productive than making MySQL provide good data integrity.\n\nThat you (and others) don't think that lacking data integrity as the default option is a good enough reason to be suspicious of a piece of database software makes me sad.", "aSentId": 44364, "answer": "&gt; That you (and others) don't think that lacking data integrity as the default option is a good enough reason to be suspicious of a piece of database software makes me sad.\n\nThat you reject a tool because you don't want to invest time in learning to use it properly makes me sad. Especially an aspect that takes literally five minutes to figure out.\n\nEdit: Do you *really* not see how ludicrous it is to reject an entire software platform because a couple of options aren't set to the default you like out of concern for backward compatability? Do you *really* not see how foolish that is?\n\nBut I know the answer: Of course you see how foolish it is, and you don't apply these \"high ideals\" to anything else. You just want an excuse to dismiss MySQL, which holds a special place in the minds of PostgreSQL advocates who just can't accept that MySQL has utterly killed PostgreSQL in the marketplace of mindshare, and that MySQL just might be superior to PostgreSQL in most ways.\n\nI swear to Ken Iverson, the God of APL, that I will be done with this thread.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44365, "question": "&gt; That you (and others) don't think that lacking data integrity as the default option is a good enough reason to be suspicious of a piece of database software makes me sad.\n\nThat you reject a tool because you don't want to invest time in learning to use it properly makes me sad. Especially an aspect that takes literally five minutes to figure out.\n\nEdit: Do you *really* not see how ludicrous it is to reject an entire software platform because a couple of options aren't set to the default you like out of concern for backward compatability? Do you *really* not see how foolish that is?\n\nBut I know the answer: Of course you see how foolish it is, and you don't apply these \"high ideals\" to anything else. You just want an excuse to dismiss MySQL, which holds a special place in the minds of PostgreSQL advocates who just can't accept that MySQL has utterly killed PostgreSQL in the marketplace of mindshare, and that MySQL just might be superior to PostgreSQL in most ways.\n\nI swear to Ken Iverson, the God of APL, that I will be done with this thread.", "aSentId": 44366, "answer": "You obviously didn't read what I said.\n\nYou obviously also haven't had to work double shifts cleaning up after MySQL.\n\nYou'll learn.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44367, "question": "You obviously didn't read what I said.\n\nYou obviously also haven't had to work double shifts cleaning up after MySQL.\n\nYou'll learn.", "aSentId": 44368, "answer": "&gt; You obviously also haven't had to work double shifts cleaning up after MySQL.\n\nWell, I'm still waiting after a decade of using MySQL.\n\nI'm sure it never occurred to you that your application had major problems and was causing the data damage. This reminds me of rookie programmers who, when they first start using C, come across a case where they are absolutely convinced that they've found a bug in the compiler.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44369, "question": "&gt; You obviously also haven't had to work double shifts cleaning up after MySQL.\n\nWell, I'm still waiting after a decade of using MySQL.\n\nI'm sure it never occurred to you that your application had major problems and was causing the data damage. This reminds me of rookie programmers who, when they first start using C, come across a case where they are absolutely convinced that they've found a bug in the compiler.", "aSentId": 44370, "answer": "Well, I guess you told me.\n\nMaybe you've put enough effort into securing MySQL that your data is now safe, and put the time into reviewing updates and ensuring that you don't have any regressions to defaults that could cause problems.\n\nOr maybe data integrity just isn't that important to your application, so a bit of sloppiness isn't a big deal.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44372, "question": "I said 'remove' for a reason.", "aSentId": 44373, "answer": "&gt; I said 'remove' for a reason.\n\nAnd that helps you exactly how? Boo hoo, it has legacy features that you're not forced in any way to use. Exactly how does that hurt you? Do you apply that same standard to every other product that might have regretful legacy features? You refuse to use any product with legacy features that offend you, even if they don't affect you in the slightest?\n\nI'd love to understand your logic here, if any.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44374, "question": "&gt; I said 'remove' for a reason.\n\nAnd that helps you exactly how? Boo hoo, it has legacy features that you're not forced in any way to use. Exactly how does that hurt you? Do you apply that same standard to every other product that might have regretful legacy features? You refuse to use any product with legacy features that offend you, even if they don't affect you in the slightest?\n\nI'd love to understand your logic here, if any.", "aSentId": 44375, "answer": "I've got more important things to do than manually audit every client to make sure that they aren't missing one of the \"don't fuck up flags\".\n\nThis shouldn't even be an option unless you explicitly enable it during installation.\n\n****\n\nOf course, this argument is moot because of the many, many other reasons not to use MySQL. ", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44376, "question": "I've got more important things to do than manually audit every client to make sure that they aren't missing one of the \"don't fuck up flags\".\n\nThis shouldn't even be an option unless you explicitly enable it during installation.\n\n****\n\nOf course, this argument is moot because of the many, many other reasons not to use MySQL. ", "aSentId": 44377, "answer": "&gt; I've got more important things to do than manually audit every client to make sure that they aren't missing one of the \"don't fuck up flags\".\n\nIf you're manually auditing every client in that manner, you have bigger problems.\n\n&gt; This shouldn't even be an option unless you explicitly enable it during installation.\n\nI hope to live in your world someday where all software products are out-of-the-box configured perfectly, with no modification needed for specific purposes.\n\n&gt; Of course, this argument is moot because of the many, many other reasons not to use MySQL.\n\nAnd I'm sure those reasons are of just as high of quality and as accurate as the reason you have given here.\n\nI'm sure Facebook is just deluded, and no doubt they would get a huge increase in performance and reliability if they would only move to PostgreSQL. Not to mention all the savings of not having to manually audit all their servers to make sure they aren't setting the wrong flags.\n\nI joke, but the level of MySQL FUD in this industry is just alternately laughable and annoying.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44378, "question": "&gt; I've got more important things to do than manually audit every client to make sure that they aren't missing one of the \"don't fuck up flags\".\n\nIf you're manually auditing every client in that manner, you have bigger problems.\n\n&gt; This shouldn't even be an option unless you explicitly enable it during installation.\n\nI hope to live in your world someday where all software products are out-of-the-box configured perfectly, with no modification needed for specific purposes.\n\n&gt; Of course, this argument is moot because of the many, many other reasons not to use MySQL.\n\nAnd I'm sure those reasons are of just as high of quality and as accurate as the reason you have given here.\n\nI'm sure Facebook is just deluded, and no doubt they would get a huge increase in performance and reliability if they would only move to PostgreSQL. Not to mention all the savings of not having to manually audit all their servers to make sure they aren't setting the wrong flags.\n\nI joke, but the level of MySQL FUD in this industry is just alternately laughable and annoying.", "aSentId": 44379, "answer": "&gt; I hope to live in your world someday where all software products are out-of-the-box configured perfectly, with no modification needed for specific purposes.\n\nYou're just being difficult... Expecting your db to be out-of-the-box configured not to corrupt data is reasonable.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44380, "question": "&gt; I hope to live in your world someday where all software products are out-of-the-box configured perfectly, with no modification needed for specific purposes.\n\nYou're just being difficult... Expecting your db to be out-of-the-box configured not to corrupt data is reasonable.", "aSentId": 44381, "answer": "&gt; Expecting your db to be out-of-the-box configured not to corrupt data is reasonable.\n\nYour premise is false. MySQL never corrupts data. It will, however, not protect you from yourself if you don't choose to enable type validations. Note that in a correctly functioning application, these are only precautions, they don't actually make any material difference.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44382, "question": "&gt; Expecting your db to be out-of-the-box configured not to corrupt data is reasonable.\n\nYour premise is false. MySQL never corrupts data. It will, however, not protect you from yourself if you don't choose to enable type validations. Note that in a correctly functioning application, these are only precautions, they don't actually make any material difference.", "aSentId": 44383, "answer": "You're still just being difficult... But I can rephrase: Expecting your db to be out-of-the-box configured to protect you from yourself and perform type validations is reasonable.\n\n&gt;Note that in a correctly functioning application...\n\nOn the other hand, expecting your application to function correctly is less reasonable.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44384, "question": "You're still just being difficult... But I can rephrase: Expecting your db to be out-of-the-box configured to protect you from yourself and perform type validations is reasonable.\n\n&gt;Note that in a correctly functioning application...\n\nOn the other hand, expecting your application to function correctly is less reasonable.", "aSentId": 44385, "answer": "&gt; You're still just being difficult\n\nI honestly think I'm the one being reasonable in this thread, but YMMV.\n\n&gt; Expecting your db to be out-of-the-box configured to protect you from yourself and perform type validations is reasonable.\n\nYou are correct, that would be reasonable. But in an imperfect world where there is a legacy of bad applications that don't behave correctly, and the MySQL team desires to not break the world, they trust competent people to put one line of code into their program to enable errors. Note that it DOES always do the type validations; it's just a question of whether they are warnings or errors.\n\nLiterally, it's one line of boilerplate that you put next to your connection statement. Do you really think it's reasonable to dismiss the most popular database in the world running mission critical code all over the world over the need to put in one line of code?\n\nAnd do you apply this standard to every other software system you use? Does every single package you use literally not have any legacy issues for which you inserted code to enable or disable something? Not one pragma anywhere that turns on a feature? Not one decoration? Not one configuration option that enables stricter validation?\n\nIf not, then I congratulate you for living in a world different from mine, where all software was written perfectly from the start and there are no legacy issues that need dealing with.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44387, "question": "Since we are doing anecdotes, I once had MySQL go all corrupty when used as a database for MythTV (a PVR program). It got into some state where it was randomly (and slowly) changing static data.\n\nSo one user, infrequent accesses and updates, no contention...\n\nFrom that experience I now refuse to consider MythTV. If MythTV would be willing to consider allowing the use of some other database I might use it again.", "aSentId": 44388, "answer": "&gt; It got into some state where it was randomly (and slowly) changing static data.\n\nSo, instead of blaming your hardware, or blaming the MythTV application, or blaming how you linked the MySQL libraries, you're going to blame the core database that runs literally hundreds of millions of installations, and hundreds of trillions of queries every year without a hitch.\n\nReally, which is more probable? Do you really think that MySQL could have 50% marketshare if it \"randomly (and slowly) changed static data\"? Do you not think that people would tend to notice that over the last decade of MySQL dominance? Seriously, what is it about MySQL that causes people to lose all ability to apply logic to things?", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44389, "question": "&gt; It got into some state where it was randomly (and slowly) changing static data.\n\nSo, instead of blaming your hardware, or blaming the MythTV application, or blaming how you linked the MySQL libraries, you're going to blame the core database that runs literally hundreds of millions of installations, and hundreds of trillions of queries every year without a hitch.\n\nReally, which is more probable? Do you really think that MySQL could have 50% marketshare if it \"randomly (and slowly) changed static data\"? Do you not think that people would tend to notice that over the last decade of MySQL dominance? Seriously, what is it about MySQL that causes people to lose all ability to apply logic to things?", "aSentId": 44390, "answer": "No, they were database issues. The issue that caused me to give up was when a value in a table not only changed unexpectedly but wedged at that value. My DBA friend was unable to change the value to anything else with actual SQL.\n\nThis DBA friend happily runs MythTV with no problems so this isn't something that happens all the time. It probably doesn't happen a lot. But a database should not be able to exhibit the sort of behaviour that I saw, ever...\n\n&gt;Seriously, what is it about MySQL that causes people to lose all ability to apply logic to things?\n\nRight back at you...\n\n", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44391, "question": "No, they were database issues. The issue that caused me to give up was when a value in a table not only changed unexpectedly but wedged at that value. My DBA friend was unable to change the value to anything else with actual SQL.\n\nThis DBA friend happily runs MythTV with no problems so this isn't something that happens all the time. It probably doesn't happen a lot. But a database should not be able to exhibit the sort of behaviour that I saw, ever...\n\n&gt;Seriously, what is it about MySQL that causes people to lose all ability to apply logic to things?\n\nRight back at you...\n\n", "aSentId": 44392, "answer": "to be fair, it still might be a hardware issue.  MySQL can't do anything about random memory changing values, for example.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44391, "question": "No, they were database issues. The issue that caused me to give up was when a value in a table not only changed unexpectedly but wedged at that value. My DBA friend was unable to change the value to anything else with actual SQL.\n\nThis DBA friend happily runs MythTV with no problems so this isn't something that happens all the time. It probably doesn't happen a lot. But a database should not be able to exhibit the sort of behaviour that I saw, ever...\n\n&gt;Seriously, what is it about MySQL that causes people to lose all ability to apply logic to things?\n\nRight back at you...\n\n", "aSentId": 44394, "answer": "&gt; The issue that caused me to give up was when a value in a table not only changed unexpectedly but wedged at that value. \n\nAnd it doesn't occur to you that maybe such an obvious problem isn't related to the core MySQL system? Do you really think such an obvious problem wouldn't be noticed on a mass scale, if it was a problem in the MySQL code?\n\nReally roll that around in your head. An update didn't update a column.\n\nDon't you think it's a bit more probable that there some wack way things were linked together that caused the issue? Or it was misconfigured in some way that the transaction log couldn't be applied?\n\nI don't know why I'm letting myself get sucked into this.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44398, "question": "You can either fork over money for Oracle, run MariaDB and spend the time to fix all the shitty defaults, or run PostgreSQL and get worse performance (for some clustered loads).  For many companies, MariaDB is actually going to be the best option.\n\nIf your application is actually trying to shove \"ABC\" into an integer, you have something seriously wrong with your application.  Besides, you can fix that default behavior anyways.", "aSentId": 44399, "answer": "Or I can use a database that doesn't completely suck like SQL Server. \n\nThe only reason people even know MySQL exists is that it was free during a time when most other databases weren't. That selling point is no longer justifiable.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44400, "question": "Or I can use a database that doesn't completely suck like SQL Server. \n\nThe only reason people even know MySQL exists is that it was free during a time when most other databases weren't. That selling point is no longer justifiable.", "aSentId": 44401, "answer": "&gt; Or I can use a database that doesn't completely suck like SQL Server.\n\nThat requires you to use an operating system that completely sucks. Are you seriously knocking MySQL for requiring setting a few flags (literally one line in my connection code), yet you have no problem with the nightmare of setting up Windows servers and getting those configured properly and stable? Come on.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44402, "question": "&gt; Or I can use a database that doesn't completely suck like SQL Server.\n\nThat requires you to use an operating system that completely sucks. Are you seriously knocking MySQL for requiring setting a few flags (literally one line in my connection code), yet you have no problem with the nightmare of setting up Windows servers and getting those configured properly and stable? Come on.", "aSentId": 44403, "answer": "you're a bigot, Windows is a great OS.  I personally *prefer* the Linux environment, but that's my personal preference.  You can get a lot of shit done in a reasonable manner with both.\n\nYou're a bigot and you need to open your eyes.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44404, "question": "you're a bigot, Windows is a great OS.  I personally *prefer* the Linux environment, but that's my personal preference.  You can get a lot of shit done in a reasonable manner with both.\n\nYou're a bigot and you need to open your eyes.", "aSentId": 44405, "answer": "&gt; you're a bigot, Windows is a great OS.\n\nWell, maybe \"completely sucks\" is too harsh, but I'm mostly speaking in the context of configuring software environments, which the OP was complaining about. Complaining about configuration and also advocating Windows is absurd. Windows needs a lot of tuning and it's very brittle.\n\nThough, to be fair, it's been a few years since I've really used Windows as a server. It's a great desktop operating system, which I use every day and in fact develop on Linux running on VMWare under Windows. So I'm not one of those that hates Microsoft on general principles, but I dislike Windows as a server environment. Though, there are probably use cases where it makes sense.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44406, "question": "&gt; you're a bigot, Windows is a great OS.\n\nWell, maybe \"completely sucks\" is too harsh, but I'm mostly speaking in the context of configuring software environments, which the OP was complaining about. Complaining about configuration and also advocating Windows is absurd. Windows needs a lot of tuning and it's very brittle.\n\nThough, to be fair, it's been a few years since I've really used Windows as a server. It's a great desktop operating system, which I use every day and in fact develop on Linux running on VMWare under Windows. So I'm not one of those that hates Microsoft on general principles, but I dislike Windows as a server environment. Though, there are probably use cases where it makes sense.", "aSentId": 44407, "answer": "fair enough, I get tired of the anti-MS hate from a certain segment of the dev population.\n\nI run Linux the same way you do, although I'm a freelance dev so it has the added benefit of allowing me to create dev environments specifically for clients.\n\nI'll mention Powershell for Windows.  There are a lot of things I dislike about Powershell, but most things are configurable through it provided you have the permissions.  Barring that, I agree that *nix's use of config files is simpler than the Windows GUI for everything, but I still put that under the preference column (I'm a developer, not an IT guy).", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44400, "question": "Or I can use a database that doesn't completely suck like SQL Server. \n\nThe only reason people even know MySQL exists is that it was free during a time when most other databases weren't. That selling point is no longer justifiable.", "aSentId": 44409, "answer": "What's the licensing cost of running a 3 node SQL Server cluster nowadays? Assuming each node has 32 cores.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44400, "question": "Or I can use a database that doesn't completely suck like SQL Server. \n\nThe only reason people even know MySQL exists is that it was free during a time when most other databases weren't. That selling point is no longer justifiable.", "aSentId": 44411, "answer": "&gt; Or I can use a database that doesn't completely suck like SQL Server.\n\nBefore I down/up-vote you, can you confirm whether you actually meant the above or the below.\n\nOr I can use a database that doesn't completely suck, like SQL Server.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44398, "question": "You can either fork over money for Oracle, run MariaDB and spend the time to fix all the shitty defaults, or run PostgreSQL and get worse performance (for some clustered loads).  For many companies, MariaDB is actually going to be the best option.\n\nIf your application is actually trying to shove \"ABC\" into an integer, you have something seriously wrong with your application.  Besides, you can fix that default behavior anyways.", "aSentId": 44413, "answer": "Thanks for this explanation. Do you have any insight as to if or when Postgres will be a viable alternative over MariaDB? If I recall correctly, Postgres is the \"open\" db to switch to in an Oracle shop, but it sounds like HA is better in MariaDB, and that makes it a clear winner.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44398, "question": "You can either fork over money for Oracle, run MariaDB and spend the time to fix all the shitty defaults, or run PostgreSQL and get worse performance (for some clustered loads).  For many companies, MariaDB is actually going to be the best option.\n\nIf your application is actually trying to shove \"ABC\" into an integer, you have something seriously wrong with your application.  Besides, you can fix that default behavior anyways.", "aSentId": 44415, "answer": "If your \"worse performance\" has an asterisk, that's pretty good in my opinion\\*.\n\n\\* *But I'm really weak on databases.*", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44418, "question": "If you're too lazy to do type checking &amp; validation at the business logic layer, no database in the world can help you. \n\nRealistically, I agree this isn't ideal for a database, but considering the nature of the web, it's far more advantageous to developers who do not have rigorous software development education to simply coerce data rather than falling over.  They've clearly stated that even in Maria they're not going to fix the open issue in MySQL on this, which has been open for almost a decade; they must have a good reason, they're certainly competent.", "aSentId": 44419, "answer": "People fuck up type checking and validation. If it happens in one place - i.e. the server - then the software engineers round the edge can screw up as much as they like without putting inconsistencies and just, plain wrongness into the database.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44418, "question": "If you're too lazy to do type checking &amp; validation at the business logic layer, no database in the world can help you. \n\nRealistically, I agree this isn't ideal for a database, but considering the nature of the web, it's far more advantageous to developers who do not have rigorous software development education to simply coerce data rather than falling over.  They've clearly stated that even in Maria they're not going to fix the open issue in MySQL on this, which has been open for almost a decade; they must have a good reason, they're certainly competent.", "aSentId": 44421, "answer": "With regards to type checking &amp; validation. What is the point of a database if it cannot do the job it was created for?", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44422, "question": "With regards to type checking &amp; validation. What is the point of a database if it cannot do the job it was created for?", "aSentId": 44423, "answer": "&gt; With regards to type checking &amp; validation. What is the point of a database if it cannot do the job it was created for?\n\nDon't believe the FUD. MySQL has type checking, and has had it for at least a decade.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44424, "question": "&gt; With regards to type checking &amp; validation. What is the point of a database if it cannot do the job it was created for?\n\nDon't believe the FUD. MySQL has type checking, and has had it for at least a decade.", "aSentId": 44425, "answer": "It's understood, but it should be enabled by default. As that is a part of SQL.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44422, "question": "With regards to type checking &amp; validation. What is the point of a database if it cannot do the job it was created for?", "aSentId": 44427, "answer": "You mean storing data that it's given?  Because it's actually pretty good at that, even if the data you gave wasn't great.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44428, "question": "You mean storing data that it's given?  Because it's actually pretty good at that, even if the data you gave wasn't great.", "aSentId": 44429, "answer": "Consistency is also important. If you join on a table with a bad attribute you could get any number of results.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44418, "question": "If you're too lazy to do type checking &amp; validation at the business logic layer, no database in the world can help you. \n\nRealistically, I agree this isn't ideal for a database, but considering the nature of the web, it's far more advantageous to developers who do not have rigorous software development education to simply coerce data rather than falling over.  They've clearly stated that even in Maria they're not going to fix the open issue in MySQL on this, which has been open for almost a decade; they must have a good reason, they're certainly competent.", "aSentId": 44431, "answer": "Popularity isn't equivalent to competency.\n\nAnd silently discarding data that can't be coerced isn't of any benefit to developers. Aside from MySQL fanboys, no programmer says, \"yes, I like not knowing that all my inserts failed because of data type mismatches\".", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44296, "question": "Seriously, MariaDB (MySQL fork) with clusters.  It's pretty much the *only* great option for cheap multi-master relational DBs these days.  You can run circles around Postgresql with that setup for write-heavy operations.", "aSentId": 44433, "answer": "An off-topic question: in a multi-master database, are uniqueness constraints, foreign keys, etc. satisfied cluster-wide?\n\nWon't that make write operations slower than a non clustered database?", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44434, "question": "An off-topic question: in a multi-master database, are uniqueness constraints, foreign keys, etc. satisfied cluster-wide?\n\nWon't that make write operations slower than a non clustered database?", "aSentId": 44435, "answer": "&gt;An off-topic question: in a multi-master database, are uniqueness constraints, foreign keys, etc. satisfied cluster-wide?\n\nYes.  It would be useless if they didn't.  \n\nProtip: make your auto-increment offset by a different amount on each box, and increment by 10 (or 100, or whatever).  So box #1 starts at 1, and counts by 10, (1,11,21,31), box #2 starts at 2 and counts by 10 (2,12,22,32), and so on.  Collisions become much more rare and it's a lot safer.\n\n&gt;Won't that make write operations slower than a non clustered database?\n\nOf course.  But you don't cluster just because you think it'd be fun,  you cluster because you can't handle all the I/O with a single box.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44296, "question": "Seriously, MariaDB (MySQL fork) with clusters.  It's pretty much the *only* great option for cheap multi-master relational DBs these days.  You can run circles around Postgresql with that setup for write-heavy operations.", "aSentId": 44437, "answer": "Can it yet txn DDL changes? I love MySQL, but that is the only thing where psql wins in my mind.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44273, "question": "What alternative do you propose? I heard Oracle was good if you had deep pockets, what else is out there?", "aSentId": 44439, "answer": "2ndQuadrant has a multi master solution for PostgreSQL in beta with the aim for inclusion in core [here]( http://2ndquadrant.com/en/resources/bdr/)", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44441, "question": "Vertica is pretty good with clustering. That's what we use at my job.", "aSentId": 44442, "answer": "Vertica is not a transactional database, its an analytic database. It has tremendous read performance, and lousy write performance. It would perform terribly as the storage layer of a CRUD website. INSERTs and DELETEs are both very expensive, and UPDATEs are actually one of each under the covers.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44443, "question": "Vertica is not a transactional database, its an analytic database. It has tremendous read performance, and lousy write performance. It would perform terribly as the storage layer of a CRUD website. INSERTs and DELETEs are both very expensive, and UPDATEs are actually one of each under the covers.", "aSentId": 44444, "answer": "We don't use it as a storage layer of a CRUD website, so that's good. We use it for a large clustered analytical database, which is what I assumed they were asking about, since they were looking for a large and clustered solution alternative to Oracle. I don't think we _ever_ do UPDATEs or DELETEs. And for INSERTs, those DB guys did some voodoo magic so it keeps up with our ingest pipeline just fine.\n\nFor the CRUD part, we just use MongoDB, which, in hindsight, wasn't a fantastic decision, but it's a little late in our product to make changes like that. And it's not like it's _horrible_, it's just not the best.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44446, "question": "MySQL ", "aSentId": 44447, "answer": "something something shots fired ", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44446, "question": "MySQL ", "aSentId": 44449, "answer": "You went off the ACID compliant rails.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44450, "question": "You went off the ACID compliant rails.", "aSentId": 44451, "answer": "I found one source from 2010 that (correctly) claimed that MySQL was not ACID compliant, but several from 2014 that seemed to show that it was. Are you sure your joke is based on the current state of MySQL?", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44452, "question": "I found one source from 2010 that (correctly) claimed that MySQL was not ACID compliant, but several from 2014 that seemed to show that it was. Are you sure your joke is based on the current state of MySQL?", "aSentId": 44453, "answer": "Some 2014 blog posts seems to imply it still is not fully compliant.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44446, "question": "MySQL ", "aSentId": 44455, "answer": "lol fuck that\n\nE: so, much to my surprise, multiple commenters are vouching for MySQL as something that scales really well. Huh.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44456, "question": "lol fuck that\n\nE: so, much to my surprise, multiple commenters are vouching for MySQL as something that scales really well. Huh.", "aSentId": 44457, "answer": "Percona's distribution of MySQL clusters and scales very well.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44456, "question": "lol fuck that\n\nE: so, much to my surprise, multiple commenters are vouching for MySQL as something that scales really well. Huh.", "aSentId": 44459, "answer": "By \"scales well\" they mean \"scales so poorly with more CPUs that MySQL AB had no choice but to make replication stupidly simply to setup\". ", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44460, "question": "By \"scales well\" they mean \"scales so poorly with more CPUs that MySQL AB had no choice but to make replication stupidly simply to setup\". ", "aSentId": 44461, "answer": "There are tradeoffs to everything. MariaDB can handle a lot in the right workloads and the right architecture. Is it perfect out of the box? No. It's also not right in every situation. There are also some silly design decisions. You have to work around just about every tool though, and of the open source DBs available, MariaDB fits a lot of situations better than others. Don't write it off so quickly just because \"hurr durr mysql sucks\" has been burnt into your consciousness. ", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44462, "question": "There are tradeoffs to everything. MariaDB can handle a lot in the right workloads and the right architecture. Is it perfect out of the box? No. It's also not right in every situation. There are also some silly design decisions. You have to work around just about every tool though, and of the open source DBs available, MariaDB fits a lot of situations better than others. Don't write it off so quickly just because \"hurr durr mysql sucks\" has been burnt into your consciousness. ", "aSentId": 44463, "answer": "&gt; MariaDB fits a lot of situations better than others. \n\nSuch as?", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44464, "question": "&gt; MariaDB fits a lot of situations better than others. \n\nSuch as?", "aSentId": 44465, "answer": "The obvious examples are common CMSes that are most heavily tested against it. Drupal, Wordpress, etc. Making off the shelf software scale to multiple databases can be as easy as setting up a Percona/MariaDB cluster and using haproxy to load balance requests, regardless of read or write.\n\nAnything you might need multiple masters for, without the feasibility to modify the app to do sharding itself would also be a candidate.\n\nIt helps that InnoDB/XtraDB is the storage engine encouraged for use in multi-master and replicated scenarios, as it's ACID compliant and a lot of the data integrity arguments about mysql go out the window when you're not talking about MyISAM.\n\nedit: You might like this as a [reference](http://www.linux-mag.com/id/7356/) with regards to XtraDB", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44466, "question": "The obvious examples are common CMSes that are most heavily tested against it. Drupal, Wordpress, etc. Making off the shelf software scale to multiple databases can be as easy as setting up a Percona/MariaDB cluster and using haproxy to load balance requests, regardless of read or write.\n\nAnything you might need multiple masters for, without the feasibility to modify the app to do sharding itself would also be a candidate.\n\nIt helps that InnoDB/XtraDB is the storage engine encouraged for use in multi-master and replicated scenarios, as it's ACID compliant and a lot of the data integrity arguments about mysql go out the window when you're not talking about MyISAM.\n\nedit: You might like this as a [reference](http://www.linux-mag.com/id/7356/) with regards to XtraDB", "aSentId": 44467, "answer": "I'll buy the Wordpress argument, but it's hard to imagine a scenario where MySQL multi-master would be applicable when other databases scale up easier than MySQL scales out.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44468, "question": "I'll buy the Wordpress argument, but it's hard to imagine a scenario where MySQL multi-master would be applicable when other databases scale up easier than MySQL scales out.", "aSentId": 44469, "answer": "I'm just saying - sometimes you need a big, dumb database cluster that you can throw requests at. MariaDB/Percona make that easy. You don't always have the luxury of building the app around the DB, but have to build the infrastructure around the app.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44470, "question": "I'm just saying - sometimes you need a big, dumb database cluster that you can throw requests at. MariaDB/Percona make that easy. You don't always have the luxury of building the app around the DB, but have to build the infrastructure around the app.", "aSentId": 44471, "answer": "Fair enough.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44460, "question": "By \"scales well\" they mean \"scales so poorly with more CPUs that MySQL AB had no choice but to make replication stupidly simply to setup\". ", "aSentId": 44473, "answer": "Well, there's also the aspect of people skimping to install MySQL are also going to skimp on speccing their disk subsystems correctly.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44477, "question": "Nothing, absolutely nothing is good about Oracle, except their marketing....", "aSentId": 44478, "answer": "*sigh*\n\nThat's not true.  The Oracle conundrum is that it's simultaneously:\n\n1. Extremely solid and reliable.  \n2. Extremely annoying.\n\nPoint #1: I've in the past written automated SQL query generators that can spit out fiendishly complex queries, based on user configuration.  In one of them, if the user's configuration was complete enough, the code could easily generate queries with dozens of outer joins.  An the WHERE clauses whose complexity grew in O(n!) on the number of tables in the query.  \n\nOut of three commercial database Oracle was the only database that I tested that could cope with these queries (although a bit of hinting was required).  Another RDBMS by a REALLY BIG COMPUTER COMPANY wouldn't even execute the query\u2014it would throw an error right away saying that the query was too complex.  Another RDBMS by THE OTHER REALLY BIG COMPUTER COMPANY would run the query, but randomly return incorrect answers.\n\nBut even knowing that, I hate, *hate*, **hate** working with Oracle.  Everything is painfully clunky.  The documentation is often horrible.  The data types are a mess and don't match those in other databases (lol `VARCHAR2` lol).  The SQL dialect is a mess as well.  Instead of having the decent, standard distinction of database vs. schema vs. table, it combines the first two concepts (MySQL also does this), and equates users with both of them to boot (which MySQL doesn't do).  And why the heck can't my index names be bigger than 30 characters?\n\nAaaaargh.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44479, "question": "*sigh*\n\nThat's not true.  The Oracle conundrum is that it's simultaneously:\n\n1. Extremely solid and reliable.  \n2. Extremely annoying.\n\nPoint #1: I've in the past written automated SQL query generators that can spit out fiendishly complex queries, based on user configuration.  In one of them, if the user's configuration was complete enough, the code could easily generate queries with dozens of outer joins.  An the WHERE clauses whose complexity grew in O(n!) on the number of tables in the query.  \n\nOut of three commercial database Oracle was the only database that I tested that could cope with these queries (although a bit of hinting was required).  Another RDBMS by a REALLY BIG COMPUTER COMPANY wouldn't even execute the query\u2014it would throw an error right away saying that the query was too complex.  Another RDBMS by THE OTHER REALLY BIG COMPUTER COMPANY would run the query, but randomly return incorrect answers.\n\nBut even knowing that, I hate, *hate*, **hate** working with Oracle.  Everything is painfully clunky.  The documentation is often horrible.  The data types are a mess and don't match those in other databases (lol `VARCHAR2` lol).  The SQL dialect is a mess as well.  Instead of having the decent, standard distinction of database vs. schema vs. table, it combines the first two concepts (MySQL also does this), and equates users with both of them to boot (which MySQL doesn't do).  And why the heck can't my index names be bigger than 30 characters?\n\nAaaaargh.", "aSentId": 44480, "answer": "&gt; REALLY BIG COMPUTER COMPANY\n\nIs there a reason you can't just say what product it is?  What's the difference between a post on reddit with an opinion based on experience and any number of blogs bashing or praising a product?  Genuinely curious because even over at /r/woodworking people won't say simple things like the quality of furniture grade plywood at home depot sucks (which is a true statement).  Instead they'll refer to it as the \"orange store\" vs the \"blue store\" for Lowes.\n\nCan anyone actually go after a post because they don't like an opinion?\n", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44481, "question": "&gt; REALLY BIG COMPUTER COMPANY\n\nIs there a reason you can't just say what product it is?  What's the difference between a post on reddit with an opinion based on experience and any number of blogs bashing or praising a product?  Genuinely curious because even over at /r/woodworking people won't say simple things like the quality of furniture grade plywood at home depot sucks (which is a true statement).  Instead they'll refer to it as the \"orange store\" vs the \"blue store\" for Lowes.\n\nCan anyone actually go after a post because they don't like an opinion?\n", "aSentId": 44482, "answer": "This was 9 years ago, and some of these databases have been much improved since.  I just don't feel it's fair to imply that the same thing would happen today.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44483, "question": "This was 9 years ago, and some of these databases have been much improved since.  I just don't feel it's fair to imply that the same thing would happen today.", "aSentId": 44484, "answer": "Okay, fine if it's MS then say MS SQL Server 2000.  I still don't get the need for veiled references.  Luckily most SW and products have versions :-)", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44479, "question": "*sigh*\n\nThat's not true.  The Oracle conundrum is that it's simultaneously:\n\n1. Extremely solid and reliable.  \n2. Extremely annoying.\n\nPoint #1: I've in the past written automated SQL query generators that can spit out fiendishly complex queries, based on user configuration.  In one of them, if the user's configuration was complete enough, the code could easily generate queries with dozens of outer joins.  An the WHERE clauses whose complexity grew in O(n!) on the number of tables in the query.  \n\nOut of three commercial database Oracle was the only database that I tested that could cope with these queries (although a bit of hinting was required).  Another RDBMS by a REALLY BIG COMPUTER COMPANY wouldn't even execute the query\u2014it would throw an error right away saying that the query was too complex.  Another RDBMS by THE OTHER REALLY BIG COMPUTER COMPANY would run the query, but randomly return incorrect answers.\n\nBut even knowing that, I hate, *hate*, **hate** working with Oracle.  Everything is painfully clunky.  The documentation is often horrible.  The data types are a mess and don't match those in other databases (lol `VARCHAR2` lol).  The SQL dialect is a mess as well.  Instead of having the decent, standard distinction of database vs. schema vs. table, it combines the first two concepts (MySQL also does this), and equates users with both of them to boot (which MySQL doesn't do).  And why the heck can't my index names be bigger than 30 characters?\n\nAaaaargh.", "aSentId": 44486, "answer": "You forgot one:\n\n3\\. Extremely expensive.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44479, "question": "*sigh*\n\nThat's not true.  The Oracle conundrum is that it's simultaneously:\n\n1. Extremely solid and reliable.  \n2. Extremely annoying.\n\nPoint #1: I've in the past written automated SQL query generators that can spit out fiendishly complex queries, based on user configuration.  In one of them, if the user's configuration was complete enough, the code could easily generate queries with dozens of outer joins.  An the WHERE clauses whose complexity grew in O(n!) on the number of tables in the query.  \n\nOut of three commercial database Oracle was the only database that I tested that could cope with these queries (although a bit of hinting was required).  Another RDBMS by a REALLY BIG COMPUTER COMPANY wouldn't even execute the query\u2014it would throw an error right away saying that the query was too complex.  Another RDBMS by THE OTHER REALLY BIG COMPUTER COMPANY would run the query, but randomly return incorrect answers.\n\nBut even knowing that, I hate, *hate*, **hate** working with Oracle.  Everything is painfully clunky.  The documentation is often horrible.  The data types are a mess and don't match those in other databases (lol `VARCHAR2` lol).  The SQL dialect is a mess as well.  Instead of having the decent, standard distinction of database vs. schema vs. table, it combines the first two concepts (MySQL also does this), and equates users with both of them to boot (which MySQL doesn't do).  And why the heck can't my index names be bigger than 30 characters?\n\nAaaaargh.", "aSentId": 44488, "answer": "MSSQL and DB2?", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44491, "question": "&gt; the code could easily generate queries with dozens of outer joins. An the WHERE clauses whose complexity grew in O(n!)\n\nThis sounds like a design problem more than anything else; i.e. if you're doing this many joins it's time to rethink the structure of your database or approach to solving the problem.", "aSentId": 44492, "answer": "&gt; If you're doing this many joins it's time to rethink the structure of your database or approach to solving the problem.\n\nThe component in question was actually doing schema denormalization, so it was the solution to that problem :-P.  It's the piece of the application that precomputed all the joins ahead of time so that users wouldn't have to do them themselves.\n\nAnyway, to give some context, what I described was version #2 of a component that went through 4 iterations:  \n\n1. The first one pulled all rows into a Java process that did all the heavy lifting and inserted them (one by one!) back into the database.  It scaled very, very badly; runtimes climbed up to 12 hours for one of the bigger customers, even for a very simple configuration.\n2. The second version (the one we're talking about here) did the same task as the original one in under 10 minutes, *and* supported features that were originally a requirement the developer of the first one never bothered to implement.  It did this by translating the configuration into the very complex SQL queries that I mentioned.\n3. But now that it was possible to actually write a complex configuration and get it to work, the users started using the component to do things that were an order of magnitude more complex than they ever tried before, running into the problems I describe.  The third iteration got rid of the big monolithic queries of #2, and instead performed the task iteratively using a sequence of temporary tables for intermediate results.\n4. But still the number of tables joined by #3 grew in proportion to one of the bits of configuration (but not most of the others).  And again, once we made it possible for users to do more complex things, they got more ambitious.  So iteration #4 made it so that the number of tables joined in each query was no more than about 7.\n\n\nVersion 1 took about a week to write, I think (I didn't do it).  Version 2 took about a month and a half, but the bulk of that was writing a very generic, reusable query generator.  Versions 3 and 4 took a week each, thanks to the reusable query generator.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44267, "question": "For very large databases, Postgres' clustering abilities aren't that great.  It's probably one of the best choices for single-host databases (which, again, cover nearly all applications), but if you're trying to spread your database over a few dozen hosts, Postgres doesn't really work well.", "aSentId": 44494, "answer": "This is no longer true. Checkout Postgres-XL http://www.postgres-xl.org/", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44495, "question": "This is no longer true. Checkout Postgres-XL http://www.postgres-xl.org/", "aSentId": 44496, "answer": "Xl does not solve the uptime problem. If any data node fails the entire system becomes unusable.\n\nThey really need to replicate their shards to guard against that.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44497, "question": "Xl does not solve the uptime problem. If any data node fails the entire system becomes unusable.\n\nThey really need to replicate their shards to guard against that.", "aSentId": 44498, "answer": "&gt;Xl does not solve the uptime problem. If any data node fails the entire system becomes unusable.\nThey really need to replicate their shards to guard against that.\n\n?\n\nXL supports slaves that function basically the same as streaming replication. The only thing that isn't nice is the fact that you have to throw corosync/pacemaker on top instead of having automatic failover, but it's patently false to say they don't already offer replication.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44499, "question": "&gt;Xl does not solve the uptime problem. If any data node fails the entire system becomes unusable.\nThey really need to replicate their shards to guard against that.\n\n?\n\nXL supports slaves that function basically the same as streaming replication. The only thing that isn't nice is the fact that you have to throw corosync/pacemaker on top instead of having automatic failover, but it's patently false to say they don't already offer replication.", "aSentId": 44500, "answer": "&gt;XL supports slaves that function basically the same as streaming replication.\n\nWhich means no automatic failover, no fail back, and all the complexity of setting all of that up for every data node. Not to mention you have to double your data nodes.\n\n&gt;but it's patently false to say they don't already offer replication.\n\nRead what i said. I think it's sleazy of you to you say I claim they don't offer replication.  How unethical do you have to be to put words in my mouth and then say I am wrong because I claimed something I didn't.\n\nWhat I said is right above your post. Go read it and then come back to me.\n", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44501, "question": "&gt;XL supports slaves that function basically the same as streaming replication.\n\nWhich means no automatic failover, no fail back, and all the complexity of setting all of that up for every data node. Not to mention you have to double your data nodes.\n\n&gt;but it's patently false to say they don't already offer replication.\n\nRead what i said. I think it's sleazy of you to you say I claim they don't offer replication.  How unethical do you have to be to put words in my mouth and then say I am wrong because I claimed something I didn't.\n\nWhat I said is right above your post. Go read it and then come back to me.\n", "aSentId": 44502, "answer": "&gt;Which means no automatic failover, no fail back,\n\nCorosync/pacemaker are not hard to implement.\n\n &gt;and all the complexity of setting all of that up for every data node. \n\nAre you not using some form of configuration management in this day and age? This is absolutely trivial.\n\n\n&gt;Read what i said. I think it's sleazy of you to you say I claim they don't offer replication.\n\nUh. Let me quote you: \n\n&gt;They really need to replicate their shards to guard against that.\n\nYou're saying they need to offer something. I'm telling you they already do.\n\nOr are you saying it's a negative that they have to replicate? What world do you live in where any solution works when you lose the only copy of your data? No solution out there works when a master node fails and there are no copies of it anywhere else. Some solutions use replication nodes. Some stripe the data across multiple masters in a ring partitioning scheme. The end goal is the same - you add more nodes to keep extra copies of data. Any solution that offers some magic way of not failing when you lose the only copy of your data is not doing you a favor.\n\n\nYour fundamental premise is wrong: XL can solve the uptime problem. It involves a trivial amount of extra effort using some very battle tested tools that have been used for this sort of purpose with hundreds of other services. XL offers replication, which you flat out say that they don't offer, but that they need to.\n\n\n", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44505, "question": "pgpool-II seems to work pretty well for distributed queries.", "aSentId": 44506, "answer": "Right... and since it is part of the design strategy for MongoDB it's just that much simpler.  Pros and Cons everywhere would you believe it!", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44507, "question": "Right... and since it is part of the design strategy for MongoDB it's just that much simpler.  Pros and Cons everywhere would you believe it!", "aSentId": 44508, "answer": "My god it's... it's like different tools do things differently. Differently enough to where you have to come up with.. with... with ***a design*** for your application.. and actually use the tools which work for your design! Instead of the other way around! Oh my jesus fuck, I'm going insane!", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44509, "question": "My god it's... it's like different tools do things differently. Differently enough to where you have to come up with.. with... with ***a design*** for your application.. and actually use the tools which work for your design! Instead of the other way around! Oh my jesus fuck, I'm going insane!", "aSentId": 44510, "answer": "Deep breaths, /u/EnragedMikey", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44509, "question": "My god it's... it's like different tools do things differently. Differently enough to where you have to come up with.. with... with ***a design*** for your application.. and actually use the tools which work for your design! Instead of the other way around! Oh my jesus fuck, I'm going insane!", "aSentId": 44512, "answer": "I thought only CTOs were supposed to be in charge of that kind of thing. ;p", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44509, "question": "My god it's... it's like different tools do things differently. Differently enough to where you have to come up with.. with... with ***a design*** for your application.. and actually use the tools which work for your design! Instead of the other way around! Oh my jesus fuck, I'm going insane!", "aSentId": 44514, "answer": "And than you pick mongo! Ha!", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44505, "question": "pgpool-II seems to work pretty well for distributed queries.", "aSentId": 44516, "answer": "Or http://www.postgres-xl.org/", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44520, "question": "Somehow redshift manages.", "aSentId": 44521, "answer": "Do they use stock PostgreSQL?  I'm assuming you mean Amazon Redshift, and from reading their main site, it looks like they're running a heavily modified version of PostgreSQL, while keeping the API/protocol the same so you can use the same clients.  Assuming they've modified their PostgreSQL, I'd say no, that doesn't really count - unless you really want to get into the database development business to store large amounts of data.  For many companies, other solutions would probably be more cost-effective.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44525, "question": "Oh bullshit.  Skype had such a hard time with Postgres that they finally had to sell to Microsoft for billions of dollars.", "aSentId": 44526, "answer": "I wish I had that many problems I too could sell to Microsoft for billions of dollars. :/\n\nOr Google, whatevs, not picky.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44527, "question": "I wish I had that many problems I too could sell to Microsoft for billions of dollars. :/\n\nOr Google, whatevs, not picky.", "aSentId": 44528, "answer": "Well start using a relational database.  You are going to be so swamped with problems that the money people are offering is going pale in comparison.  \"I don't have time for these contracts....  I am busy writing a JOIN.\"", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44525, "question": "Oh bullshit.  Skype had such a hard time with Postgres that they finally had to sell to Microsoft for billions of dollars.", "aSentId": 44530, "answer": "That was how many years ago?\n\nComparing PG &lt; 7 vs 9.2+ is apples to oranges.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44265, "question": "&gt; 99% of projects would be better off with a relational database.\n\nOr better, and RDMS with a full blown JSON indexing and a hash store that rivals mongos speed.\n\nHow people don't choose psql just confuses me.", "aSentId": 44532, "answer": "I think a lot of aging dipshits at the CTO level went for NoSQL because they desperately want to be ahead of the curve on one tech development.  For almost every database project there is Postgres... For everything else there's Apple watch.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44533, "question": "I think a lot of aging dipshits at the CTO level went for NoSQL because they desperately want to be ahead of the curve on one tech development.  For almost every database project there is Postgres... For everything else there's Apple watch.", "aSentId": 44534, "answer": "And the young ones, too.  I mean, this company will eventually have a billion users so a bunch of pain now trying to make it act like a relational db will totally payoff in the future.  Plus, we can undercut salaries by 25% since our new hires will be happy to work with a NoSql db.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44265, "question": "&gt; 99% of projects would be better off with a relational database.\n\nOr better, and RDMS with a full blown JSON indexing and a hash store that rivals mongos speed.\n\nHow people don't choose psql just confuses me.", "aSentId": 44536, "answer": "I'm not sure if all the postgres drivers provide convenient access to putting objects straight into a ~~hstore~~ JSON type column. Compare that to Mongo where it's pretty much built into the drivers.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44537, "question": "I'm not sure if all the postgres drivers provide convenient access to putting objects straight into a ~~hstore~~ JSON type column. Compare that to Mongo where it's pretty much built into the drivers.", "aSentId": 44538, "answer": "You would use json types for that. Hstore is just a 1 dim key value array effectively.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44539, "question": "You would use json types for that. Hstore is just a 1 dim key value array effectively.", "aSentId": 44540, "answer": "My mistake.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44544, "question": "But using an RDBMS requires me to think about my data model ahead of time, instead of synergizing my agile workflow while staying kanban. \n\nFor real, though, model your data. If you're drawing lines between things, you've got relational data. ", "aSentId": 44545, "answer": "I've had to model some crazy stuff in the last 20 years, most of which fit well into traditional rdbms schemas. Some things, like entire carrier-class router configs that are hundreds of thousands lines long, fit pretty well into nosql. \n\nFor that example, in the rdbms world, you have a choice: model and store only the data you need and hope you don't need anything you threw out later, or model the whole thing (which gets weird when you try and support multiple vendors who might structure their config differently, or versions that make changes to the structure of their config...) With nosql you parse it and file all of it, and focus all your efforts on the retrieval rather than the storage.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44546, "question": "I've had to model some crazy stuff in the last 20 years, most of which fit well into traditional rdbms schemas. Some things, like entire carrier-class router configs that are hundreds of thousands lines long, fit pretty well into nosql. \n\nFor that example, in the rdbms world, you have a choice: model and store only the data you need and hope you don't need anything you threw out later, or model the whole thing (which gets weird when you try and support multiple vendors who might structure their config differently, or versions that make changes to the structure of their config...) With nosql you parse it and file all of it, and focus all your efforts on the retrieval rather than the storage.", "aSentId": 44547, "answer": "There definitely good uses for NoSQL. My employer uses Cassandra to keep millions of rows of product data available for our APIs. NoSQL has a place, it's just not the only tool in the toolbox. ", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44548, "question": "There definitely good uses for NoSQL. My employer uses Cassandra to keep millions of rows of product data available for our APIs. NoSQL has a place, it's just not the only tool in the toolbox. ", "aSentId": 44549, "answer": "Relational databases do keep millions of rows of product data too. Why is Cassandra better in this case?", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44550, "question": "Relational databases do keep millions of rows of product data too. Why is Cassandra better in this case?", "aSentId": 44551, "answer": "Without knowing the specifics of the problem being solved that's an impossible question to answer without rhetoric.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44544, "question": "But using an RDBMS requires me to think about my data model ahead of time, instead of synergizing my agile workflow while staying kanban. \n\nFor real, though, model your data. If you're drawing lines between things, you've got relational data. ", "aSentId": 44553, "answer": "\"synergizing\" my \"agile workflow\" while \"staying kanban\".\n\nThat is 3 cringes per sentence.\n\nI am sorry, you have crossed the allowed 1 cringe per sentence threshold and will now be deleted from the internet.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44544, "question": "But using an RDBMS requires me to think about my data model ahead of time, instead of synergizing my agile workflow while staying kanban. \n\nFor real, though, model your data. If you're drawing lines between things, you've got relational data. ", "aSentId": 44555, "answer": "If you're drawing lines, go ahead and combine the tables.  When it was made clear to me that normalization was causing more problems than solving, my DB woes fluttered away.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44556, "question": "If you're drawing lines, go ahead and combine the tables.  When it was made clear to me that normalization was causing more problems than solving, my DB woes fluttered away.", "aSentId": 44557, "answer": "Please tell me this is being sarcastic. Database normalization has real benefits, and is incredibly valuable. ", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44558, "question": "Please tell me this is being sarcastic. Database normalization has real benefits, and is incredibly valuable. ", "aSentId": 44559, "answer": "In the right design. In many designs, it is the enemy of scalability. Especially when considering a monolithic database vs many denormalized databases. Depending on my task, it can be much better to optimize for read or write rather than storage size or data integrity.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44556, "question": "If you're drawing lines, go ahead and combine the tables.  When it was made clear to me that normalization was causing more problems than solving, my DB woes fluttered away.", "aSentId": 44561, "answer": "lolwut.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44556, "question": "If you're drawing lines, go ahead and combine the tables.  When it was made clear to me that normalization was causing more problems than solving, my DB woes fluttered away.", "aSentId": 44563, "answer": "They fluttered away and are waiting on the path ahead, they've only grown stronger and more vicious, good luck.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44568, "question": "In case you haven't seen it:\n\nhttp://www.mongodb-is-web-scale.com/\n", "aSentId": 44569, "answer": "Yikes memory-mapped files? That makes me scared for my data. ", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44568, "question": "In case you haven't seen it:\n\nhttp://www.mongodb-is-web-scale.com/\n", "aSentId": 44571, "answer": "What a piece of poetry.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44573, "question": "I don't get the use case for nosql databases, the only one I know of is bitcoin which uses leveldb/berkleydb to store info about where data of a block is stored, which is nice as every block or whatever has a unique hash\r\rOther then that I just keep going back to \"this would be a lot easier with a traditional database...\"", "aSentId": 44574, "answer": "In the past, I've set up a Cassandra cluster because we needed a key-value store with range queries and no single point of failure, good data integrity and high performance (at least 50k+ transactions/second, scaling horizontally). To that end I tested just about every \"NoSQL\" and/or KV store out there, including MySQL and Postgres. My conclusion was that most NoSQL solutions were shit (performed terribly (seriously, some couldn't even do 100 writes/second), used a single master setup or had no support for data integrity/durability at all at acceptable speeds). MySQL was too slow and Postgres didn't support multi-master setups. \n\nThis cluster was used for a mass push notification service. The idea was that we could message all (millions) subscribed devices in as short a time span as possible based upon certain criteria the customer would set.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44573, "question": "I don't get the use case for nosql databases, the only one I know of is bitcoin which uses leveldb/berkleydb to store info about where data of a block is stored, which is nice as every block or whatever has a unique hash\r\rOther then that I just keep going back to \"this would be a lot easier with a traditional database...\"", "aSentId": 44576, "answer": "Some thing don't fit in them, and it's fine, since your data model doesn't need the flexibility at the query level. \n\nWe've got a large data store that has a large (~750K) amount of meaningful textual data per entry. Lot of entries. \nInitially, the data was stored in postgres. At a point, the size made it unwieldy, and we were just using it as a key value store, so we moved it to something that could store that type of data more performantly. \n\nIt works out fine, since we *never* do anything but range queries on the keys. \n\n", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44573, "question": "I don't get the use case for nosql databases, the only one I know of is bitcoin which uses leveldb/berkleydb to store info about where data of a block is stored, which is nice as every block or whatever has a unique hash\r\rOther then that I just keep going back to \"this would be a lot easier with a traditional database...\"", "aSentId": 44578, "answer": "I've used them to snapshot user state as a logging mechanism if a user is having issues so I can replay their state exactly.  ", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44582, "question": "&gt; People are excited about mongo because \"it's javascript!\". These people are morons.\n\nI'm a javascript fanatic, and I support this opinion entirely. ", "aSentId": 44583, "answer": "What does being a js fanatic imply? You do not use other languages period?", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44584, "question": "What does being a js fanatic imply? You do not use other languages period?", "aSentId": 44585, "answer": "Nah, I use other languages, as the situation requires. I just really like Javascript. I defend it against naysayers (where I can, I'm not blind to it's faults) and if I *can* use it for a project, I'm more likely to. It's not the best choice for a lot of programs though, so I can't use it exclusively. I use C for some low level work (I'm trying to teach myself more by writing simple device drivers), I use python for quick scripts on the command line or most 'big number' projects through numPy. But If given the option, I love using node.js for almost anything I can get it to do. \n\nAnd for all that, I love me a good rdbms. My job requires me to sling a lot of sql around, so I'm quite comfortable in that environment. ", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44582, "question": "&gt; People are excited about mongo because \"it's javascript!\". These people are morons.\n\nI'm a javascript fanatic, and I support this opinion entirely. ", "aSentId": 44587, "answer": "I'm a MongoDB fanatic, and I support that opinion entirely too.\n\nWell, TokuMX rather than MongoDB, because until now the MongoDB storage engine has been...  Lacking.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44590, "question": "Exactly how many people run a site like Craigslist where nosql makes sense.  Not many, so everyone is best just sticking to old school. Computers are so fast now speed concerns of traditional databases is less of a issue. ", "aSentId": 44591, "answer": "Is craigslist nosql?\n\nEdit: According to [this](http://stackoverflow.com/a/1155868) its MySQL + Perl.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44594, "question": "What about using something like MongoDB for its intended purpose -- that is, storing large hunks of of non-tabular data?", "aSentId": 44595, "answer": "Postgres does that better too", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44178, "question": "Goodbye MongoDB, Hello PostgreSQL", "aSentId": 44615, "answer": "Good luck with that. Last time I checked, PostgreSQL wasn't web scale. ", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44616, "question": "Good luck with that. Last time I checked, PostgreSQL wasn't web scale. ", "aSentId": 44617, "answer": "Yeah we noticed that last week, we're considering moving to FileMaker as our primary data storage engine.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44618, "question": "Yeah we noticed that last week, we're considering moving to FileMaker as our primary data storage engine.", "aSentId": 44619, "answer": "What *is* FileMaker? I've seen it lying around on one of the servers in the office, and nobody knows what it's for.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44620, "question": "What *is* FileMaker? I've seen it lying around on one of the servers in the office, and nobody knows what it's for.", "aSentId": 44621, "answer": "Neither do the people who use it.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44622, "question": "Neither do the people who use it.", "aSentId": 44623, "answer": "Used it for two years as abandoned shitware from previous employees and can confirm, nobody understands this shit. ", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44624, "question": "Used it for two years as abandoned shitware from previous employees and can confirm, nobody understands this shit. ", "aSentId": 44625, "answer": "My responsibility at my internship was to create a web app to keep track of peoples medical information so they could get rid of FileMaker. People at interviews never have any idea what I'm talking about. Neither do I.\n\nKidding, I know it's kind of like MS access, but other than that I has no idea.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44622, "question": "Neither do the people who use it.", "aSentId": 44627, "answer": "That's not actually true.  I don't know what it is but I've seen people use it before in combination with software I wrote with really good results.  I think it is like a database you can do spreadsheet like things with.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44628, "question": "That's not actually true.  I don't know what it is but I've seen people use it before in combination with software I wrote with really good results.  I think it is like a database you can do spreadsheet like things with.", "aSentId": 44629, "answer": "Oh, is it web scale? I'll use it if it's web scale, and has good benchmarks! /s", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44620, "question": "What *is* FileMaker? I've seen it lying around on one of the servers in the office, and nobody knows what it's for.", "aSentId": 44631, "answer": "It's like MS Access, only less robust.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44632, "question": "It's like MS Access, only less robust.", "aSentId": 44633, "answer": "Dude, just upgrade to FileMaker Pro.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44632, "question": "It's like MS Access, only less robust.", "aSentId": 44635, "answer": "&gt;  MS Access\n\nThis is my trigger, would you kindly not spell out this word?", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44636, "question": "&gt;  MS Access\n\nThis is my trigger, would you kindly not spell out this word?", "aSentId": 44637, "answer": "M S A C C E S S ", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44638, "question": "M S A C C E S S ", "aSentId": 44639, "answer": "No silly, he doesn't want T H I S W O R D spelled out.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44636, "question": "&gt;  MS Access\n\nThis is my trigger, would you kindly not spell out this word?", "aSentId": 44641, "answer": "Yeah Access is terrible. That's why I just keep all my data in excel spreadsheets with vba. I'm a pivot table pro! \n\nSee, the red cells are the ones you can't touch, and the blue ones have to be filled in, and then you just press this button to run the macro. \n\nJust make sure you're using the latest version of this sheet which is in our drop box... \n\n/s", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44642, "question": "Yeah Access is terrible. That's why I just keep all my data in excel spreadsheets with vba. I'm a pivot table pro! \n\nSee, the red cells are the ones you can't touch, and the blue ones have to be filled in, and then you just press this button to run the macro. \n\nJust make sure you're using the latest version of this sheet which is in our drop box... \n\n/s", "aSentId": 44643, "answer": "This exactly was my first job out of college... I graduated in 2013", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44642, "question": "Yeah Access is terrible. That's why I just keep all my data in excel spreadsheets with vba. I'm a pivot table pro! \n\nSee, the red cells are the ones you can't touch, and the blue ones have to be filled in, and then you just press this button to run the macro. \n\nJust make sure you're using the latest version of this sheet which is in our drop box... \n\n/s", "aSentId": 44645, "answer": "My department uses some bizarre Excel sheet to calculate budgets at the end of the month. Inputs involve copying and pasting the timesheets of 30 or so people all broken down by project. It's all supposed to work once the magic button is clicked, but of course every now and again I'm called in to the admin office to deconstruct the macro and explain how since it's looking for the word \"Sunday\" on row 124 and it was mistakenly left out, it's not going to run.\n\nDon't get me wrong, modern spreadsheet programs are ridiculously powerful and can do all sorts of things. But if you are writing an Excel sheet and macro for use for an undetermined number of users, you should seriously rethink your life and look into databases or even MatLab.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44646, "question": "My department uses some bizarre Excel sheet to calculate budgets at the end of the month. Inputs involve copying and pasting the timesheets of 30 or so people all broken down by project. It's all supposed to work once the magic button is clicked, but of course every now and again I'm called in to the admin office to deconstruct the macro and explain how since it's looking for the word \"Sunday\" on row 124 and it was mistakenly left out, it's not going to run.\n\nDon't get me wrong, modern spreadsheet programs are ridiculously powerful and can do all sorts of things. But if you are writing an Excel sheet and macro for use for an undetermined number of users, you should seriously rethink your life and look into databases or even MatLab.", "aSentId": 44647, "answer": "I once saw an Excel spreadsheet that was used as input to a MS SQL Server database.\n\nThe username/password was hard-coded directly into the spreadsheet, and the SQL was concatenated together. The webpage that displayed the result was partially built using HTML that had been put into the database.\n\nHTML Injection: it isn't a bug, it is how we do layout (TM)", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44648, "question": "I once saw an Excel spreadsheet that was used as input to a MS SQL Server database.\n\nThe username/password was hard-coded directly into the spreadsheet, and the SQL was concatenated together. The webpage that displayed the result was partially built using HTML that had been put into the database.\n\nHTML Injection: it isn't a bug, it is how we do layout (TM)", "aSentId": 44649, "answer": "I work for a FTSE 100 company that tracks holidays for over 100,000 employees via a series of excel spreadsheets held on a shared drive.\n\nEach team has to open a spreadsheet on a network drive and wait for it to load a series of complex macros, then when you have made any changes it you have to save it back to the drive. Each Tuesday they run the master spreadsheet which copies and consolidates the data from all the other spreadsheets and updates their information.\n\nThere are over 1000 teams that use this system in the company.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44650, "question": "I work for a FTSE 100 company that tracks holidays for over 100,000 employees via a series of excel spreadsheets held on a shared drive.\n\nEach team has to open a spreadsheet on a network drive and wait for it to load a series of complex macros, then when you have made any changes it you have to save it back to the drive. Each Tuesday they run the master spreadsheet which copies and consolidates the data from all the other spreadsheets and updates their information.\n\nThere are over 1000 teams that use this system in the company.", "aSentId": 44651, "answer": "Amazing how much of our world is held together by duct tape and chewing gum.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44652, "question": "Amazing how much of our world is held together by duct tape and chewing gum.", "aSentId": 44653, "answer": "I tell everyone that has never worked before that in as little as three months they will come to the conclusion that the entire world operates on a very fragile, \"duct tape and chewing gum\" (as you put it) infrastructure. It never ceases to amaze me.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44650, "question": "I work for a FTSE 100 company that tracks holidays for over 100,000 employees via a series of excel spreadsheets held on a shared drive.\n\nEach team has to open a spreadsheet on a network drive and wait for it to load a series of complex macros, then when you have made any changes it you have to save it back to the drive. Each Tuesday they run the master spreadsheet which copies and consolidates the data from all the other spreadsheets and updates their information.\n\nThere are over 1000 teams that use this system in the company.", "aSentId": 44655, "answer": "Holy fuck, when they learn about what an actual database is their heads will explode.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44656, "question": "Holy fuck, when they learn about what an actual database is their heads will explode.", "aSentId": 44657, "answer": "They have, and are trying to replace it. It is costing tens of millions to replace as the spreadsheet is now tightly tied into other labour systems the company uses.\n\nI think this is just what happens when a company isn't willing to spend on IT up front... a non-technical person creates a bastardised solution to 'get by' and then before you know it you have a new dependency.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44658, "question": "They have, and are trying to replace it. It is costing tens of millions to replace as the spreadsheet is now tightly tied into other labour systems the company uses.\n\nI think this is just what happens when a company isn't willing to spend on IT up front... a non-technical person creates a bastardised solution to 'get by' and then before you know it you have a new dependency.", "aSentId": 44659, "answer": "Tens of millions? Do they have more people working on that than using it?", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44636, "question": "&gt;  MS Access\n\nThis is my trigger, would you kindly not spell out this word?", "aSentId": 44661, "answer": "Yeah, all the transdata JSONkin should protest against cisschema supremacy.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44632, "question": "It's like MS Access, only less robust.", "aSentId": 44664, "answer": "I once saw a company operating for months on filemaker database that had an error but just kept pretending to be working, but not actually saving to disk.\n\nAfter a power outage months of data was gone.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44620, "question": "What *is* FileMaker? I've seen it lying around on one of the servers in the office, and nobody knows what it's for.", "aSentId": 44667, "answer": "i once wrote an interactive website in php run off of filemakepro (it has a webserver). it was used by a large school district to register teachers for classes... and that was ~1999. it was very weird", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44668, "question": "i once wrote an interactive website in php run off of filemakepro (it has a webserver). it was used by a large school district to register teachers for classes... and that was ~1999. it was very weird", "aSentId": 44669, "answer": "Is this where the legend of Little Bobby Tables comes from?", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44668, "question": "i once wrote an interactive website in php run off of filemakepro (it has a webserver). it was used by a large school district to register teachers for classes... and that was ~1999. it was very weird", "aSentId": 44671, "answer": "Ditto except ours was a report card system and calendar. And it was Access. We spent two weeks working on it before I went to my boss and said, \"umm, I'm sorry, but this is a toy database. You've asked us to build a real grown up application. We need something better.\"  To his credit, he splurged and bought us a SQL license. He loves telling this story to this day. Two weeks into the job I was calling his BS. Still the best quality in our working relationship 15 years later.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44668, "question": "i once wrote an interactive website in php run off of filemakepro (it has a webserver). it was used by a large school district to register teachers for classes... and that was ~1999. it was very weird", "aSentId": 44673, "answer": "I worked at a major university up until 2007, and at the point I left our departmental scheduling / registration database was still running on Filemaker Pro on a Mac SE/30 running OS7. ", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44676, "question": "The other replies left out that if you buy FileMaker Server and have a Mac Mini that's publicly addressable, you can install FM for iOS and access your data on the go. It's a super niche usecase, and even then there are probably a dozen other ways to do it, but for some, it's useful. ", "aSentId": 44677, "answer": "This actually makes a bit of sense though. Thanks!", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44618, "question": "Yeah we noticed that last week, we're considering moving to FileMaker as our primary data storage engine.", "aSentId": 44682, "answer": "My boss uses it for some in-house data management. Server constantly locks up and requires rebooting because even FileMaker themselves have no idea what the fuck it is.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44683, "question": "My boss uses it for some in-house data management. Server constantly locks up and requires rebooting because even FileMaker themselves have no idea what the fuck it is.", "aSentId": 44684, "answer": "I once worked at an Apple store that used it for managing their inventory, orders, etc. It was...interesting.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44685, "question": "I once worked at an Apple store that used it for managing their inventory, orders, etc. It was...interesting.", "aSentId": 44686, "answer": "Ah! A friend of mine used to work there as well. I heard they moved on to SAP. That'll be an improvement, I'm sure...", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44618, "question": "Yeah we noticed that last week, we're considering moving to FileMaker as our primary data storage engine.", "aSentId": 44688, "answer": "Don't forget Notes and dBASE 3. \n\n", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44689, "question": "Don't forget Notes and dBASE 3. \n\n", "aSentId": 44690, "answer": "The first database I wrote was on dBase-III with a Kaypro 2 laptop. dBase had a forms engine and a programming language. Kaypro had dual double-sided 5.25\" floppies iirc. Put my whole album collection on there. I rocked. ", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44689, "question": "Don't forget Notes and dBASE 3. \n\n", "aSentId": 44692, "answer": "Notes T.T", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44689, "question": "Don't forget Notes and dBASE 3. \n\n", "aSentId": 44694, "answer": "Clipper was the bomb!", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44695, "question": "Clipper was the bomb!", "aSentId": 44696, "answer": "Yes it was!", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44700, "question": "Foxpro mastre rase ", "aSentId": 44701, "answer": "Guys I have an awesome idea!  What if the database is also the application!  You only need to know 1 language and interface!  No fancy protocols and networking just simple file shares!\n\nI wish I could forget that part of my life.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44702, "question": "Guys I have an awesome idea!  What if the database is also the application!  You only need to know 1 language and interface!  No fancy protocols and networking just simple file shares!\n\nI wish I could forget that part of my life.", "aSentId": 44703, "answer": "Good fucking god...I thought I hated life working on a hacked together ColdFusion project. Then I saw a hacked together FoxPro project. ", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44702, "question": "Guys I have an awesome idea!  What if the database is also the application!  You only need to know 1 language and interface!  No fancy protocols and networking just simple file shares!\n\nI wish I could forget that part of my life.", "aSentId": 44705, "answer": "Oracle Apex is a plague that infects my organization. It is the same thing, except that people still actively use it today. It's truly horrifying.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44706, "question": "Oracle Apex is a plague that infects my organization. It is the same thing, except that people still actively use it today. It's truly horrifying.", "aSentId": 44707, "answer": "At least is better than Oracle FORMs or *God save our souls* Oracle Reports.\n", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44700, "question": "Foxpro mastre rase ", "aSentId": 44709, "answer": "Hey, guys, I have an even better idea. What if we just used an *actual fox* as our database? Hear me out here, we could keep it in the break room and feed it our data, and when the fox shits in the hallways, we scoop the shit into coffee cans and store them in the Marketing supply cupboard.\n\nI mean, we can't really get the data back out, but half the time we can't get the data back out of FoxPro anyway, and this way we get an office pet.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44710, "question": "Hey, guys, I have an even better idea. What if we just used an *actual fox* as our database? Hear me out here, we could keep it in the break room and feed it our data, and when the fox shits in the hallways, we scoop the shit into coffee cans and store them in the Marketing supply cupboard.\n\nI mean, we can't really get the data back out, but half the time we can't get the data back out of FoxPro anyway, and this way we get an office pet.", "aSentId": 44711, "answer": "Plus it's a great way to emphasize company's commitment to green values. ", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44700, "question": "Foxpro mastre rase ", "aSentId": 44713, "answer": "My first job out of college had a Foxpro app that was consistently corrupting itself.  I still have nightmares about learning enough Foxpro to debug it 10 years later.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44714, "question": "My first job out of college had a Foxpro app that was consistently corrupting itself.  I still have nightmares about learning enough Foxpro to debug it 10 years later.", "aSentId": 44715, "answer": "That would happen with the one I worked on all the time too. Someone also thought it would be a great idea to make a \"networked\" version of the app which was basically put the db file on a share somewhere...I never dug into it too much but it would place file locks on the database, which had a persistent connection, so pretty much only one user could use it at a time. ", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44717, "question": "FoxPro? Pfft, real men code in Clipper for DBase III.", "aSentId": 44718, "answer": "And I am old enough to know what you are taking about :(", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44719, "question": "And I am old enough to know what you are taking about :(", "aSentId": 44720, "answer": "I'm not even *that* old. Last worked with Clipper in 2008, when I was  24.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44616, "question": "Good luck with that. Last time I checked, PostgreSQL wasn't web scale. ", "aSentId": 44732, "answer": "Dude. Don't say that kind of shit without adding a &lt;/sarcasm&gt; at the end. Someone might think you are serious and have a coronary!", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44733, "question": "Dude. Don't say that kind of shit without adding a &lt;/sarcasm&gt; at the end. Someone might think you are serious and have a coronary!", "aSentId": 44734, "answer": "Thank you.  I was wondering.\n", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44733, "question": "Dude. Don't say that kind of shit without adding a &lt;/sarcasm&gt; at the end. Someone might think you are serious and have a coronary!", "aSentId": 44736, "answer": "This is /r/programming, so I have to ask this. Shouldn't you have to add an opening tag first before adding a closing tag?", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44737, "question": "This is /r/programming, so I have to ask this. Shouldn't you have to add an opening tag first before adding a closing tag?", "aSentId": 44738, "answer": "Inferring closing tags wasn't webscale so we decided to write our xml parser to infer opening tags.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44737, "question": "This is /r/programming, so I have to ask this. Shouldn't you have to add an opening tag first before adding a closing tag?", "aSentId": 44740, "answer": "It was open the whole time.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44737, "question": "This is /r/programming, so I have to ask this. Shouldn't you have to add an opening tag first before adding a closing tag?", "aSentId": 44742, "answer": "On Reddit, &lt;sarcasm&gt; is assumed.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44733, "question": "Dude. Don't say that kind of shit without adding a &lt;/sarcasm&gt; at the end. Someone might think you are serious and have a coronary!", "aSentId": 44746, "answer": "That was my reaction. I'm life after 18 years! Fuck I'm not porting", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44616, "question": "Good luck with that. Last time I checked, PostgreSQL wasn't web scale. ", "aSentId": 44749, "answer": "There's actually some truth. Master-master replication with postgresql doesn't have any stable solution. There are a couple of solutions for that, but none is confirmed afaik. I hope I'm wrong though.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44750, "question": "There's actually some truth. Master-master replication with postgresql doesn't have any stable solution. There are a couple of solutions for that, but none is confirmed afaik. I hope I'm wrong though.", "aSentId": 44751, "answer": "Considering that MongoDB doesn't have a stable solution for that either, we're not actually losing anything.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44752, "question": "Considering that MongoDB doesn't have a stable solution for that either, we're not actually losing anything.", "aSentId": 44753, "answer": "But MongoDB is web scale.  And NodeJS is bad-ass rockstar tech!\n\n&lt;/gar1t&gt;", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44754, "question": "But MongoDB is web scale.  And NodeJS is bad-ass rockstar tech!\n\n&lt;/gar1t&gt;", "aSentId": 44755, "answer": "The only thing more badass than NodeJS is io.js!", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44750, "question": "There's actually some truth. Master-master replication with postgresql doesn't have any stable solution. There are a couple of solutions for that, but none is confirmed afaik. I hope I'm wrong though.", "aSentId": 44757, "answer": "Nonetheless it can probably run reports about 100x faster than mongodb.\n\nEDIT: spellin", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44759, "question": "Last time I checked, \"web scale\" had no meaning.", "aSentId": 44760, "answer": "Here, to save yourself future embarrassment: http://www.mongodb-is-web-scale.com/", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44761, "question": "Here, to save yourself future embarrassment: http://www.mongodb-is-web-scale.com/", "aSentId": 44762, "answer": "Y'know, I've seen this joke dozens of times but never bothered to ask what it was in reference to, so thanks for that.\n\nBut now that I've seen it, I'm even more confused - Why is this funny? Is this an actual conversation that actually took place, or is this like that [angry burrito dude](https://medium.com/@luckyshirt/dear-guy-who-just-made-my-burrito-fd08c0babb57) who just made up a bunch of shit that never actually occurred?", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44763, "question": "Y'know, I've seen this joke dozens of times but never bothered to ask what it was in reference to, so thanks for that.\n\nBut now that I've seen it, I'm even more confused - Why is this funny? Is this an actual conversation that actually took place, or is this like that [angry burrito dude](https://medium.com/@luckyshirt/dear-guy-who-just-made-my-burrito-fd08c0babb57) who just made up a bunch of shit that never actually occurred?", "aSentId": 44764, "answer": "It's not a real conversation, and it's not supposed to resemble a real conversation. It's supposed to mock people touting \"web scale\" without understanding what it is. That's it. That's the whole joke.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44765, "question": "It's not a real conversation, and it's not supposed to resemble a real conversation. It's supposed to mock people touting \"web scale\" without understanding what it is. That's it. That's the whole joke.", "aSentId": 44766, "answer": "I feel like it piggybacks into the MongoDB hate, though, and the joke has muddied the waters enough that earnestly looking for evaluations of MongoDB derails into this same tired joke and a lot of just-as-ignorant opposition. The popularity of the joke ends up validating that kind of ignorant opposition.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44763, "question": "Y'know, I've seen this joke dozens of times but never bothered to ask what it was in reference to, so thanks for that.\n\nBut now that I've seen it, I'm even more confused - Why is this funny? Is this an actual conversation that actually took place, or is this like that [angry burrito dude](https://medium.com/@luckyshirt/dear-guy-who-just-made-my-burrito-fd08c0babb57) who just made up a bunch of shit that never actually occurred?", "aSentId": 44768, "answer": "The site says it's a transcription, so it seems to have happened.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44769, "question": "The site says it's a transcription, so it seems to have happened.", "aSentId": 44770, "answer": "A transcription of a joke video.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44761, "question": "Here, to save yourself future embarrassment: http://www.mongodb-is-web-scale.com/", "aSentId": 44772, "answer": "Actually, the embarrassment is still telling that joke after 5 years.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44773, "question": "Actually, the embarrassment is still telling that joke after 5 years.", "aSentId": 44774, "answer": "green is my pepper", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44759, "question": "Last time I checked, \"web scale\" had no meaning.", "aSentId": 44776, "answer": "Well you never know when your landing page might end up getting as many hits as the google home page.  That's webscale.  In 2004 it seemed like that might happen to any website.  And of course banner ads were going to make us all billionaires.  I really need this blog TO SCALE.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44777, "question": "Well you never know when your landing page might end up getting as many hits as the google home page.  That's webscale.  In 2004 it seemed like that might happen to any website.  And of course banner ads were going to make us all billionaires.  I really need this blog TO SCALE.", "aSentId": 44778, "answer": "You will also note that those who try to draw attention to their testicles usually are deflecting from the rest of their equipment not being web scale enough.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44784, "question": "*Karma for nothing, gold for free*", "aSentId": 44785, "answer": "When I saw it, that was the only reply in this post and I laughed so hard that my wife asked for an explanation. It deserved the gold.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44784, "question": "*Karma for nothing, gold for free*", "aSentId": 44787, "answer": "*Look at them yoyos, that's the way you do it; bangin out them Mongos, don't need an RDB*", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44178, "question": "Goodbye MongoDB, Hello PostgreSQL", "aSentId": 44790, "answer": "To throw some sticks into the fire, I, too, have decided to go with PgSQL (instead of NoSQL or even MySQL). I had a few reasons for that.\n\nBackground on my app: I'm building a document management system with OCR back-end. Think about it this way, I'm building a dropbox without actual files/folders (everything is DB-mocked with an uploads folder), that OCRs your documents. This is done for a specific industry.\n\nMy reasons:\n\n1. easy JSON column for custom information storage. This is my \"throw shit in here\" column which I fill up with all the cool shit I can post process from the OCRed text or that a user inputs. Like a tagging system with custom values. This can be done relationally and I might switch.\n2. superb search. Like seriously. Super quick, easily weighted, easily indexable, and can be used alongside regular `where` and `join` clauses. For instance, I can easily find a doc under an organization (easy join or `where` clause) that a user has write permission too that has the word \"lease\" in it, sorted by title priority.\n3. most features you can get out of MySQL + some other tool is built-in. No need to configure shit :)\n4. since this is a business app, I can easily split customers/organizations off to have their own DB server so I don't have to worry about clustering.\n\n", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44792, "question": "I chose pgsql for my latest project. The SQL possibilities are really good and perfs are on par with MySQL nowadays.\n\nBut all the hype about postgresql lately make me fear about the backlash which will come in 2 or 3 years after enough people start using it for the wrong reasons.", "aSentId": 44793, "answer": "I don't think it will get a backlash if I'm being honest. Certain applications have risen to the state of awesome and stayed there. Git, Linux, Postgres, Lisp. The secret is to be simple, direct and do something well. These tools don't try and be easy to use, the try and follow the simplest possible implementation.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44792, "question": "I chose pgsql for my latest project. The SQL possibilities are really good and perfs are on par with MySQL nowadays.\n\nBut all the hype about postgresql lately make me fear about the backlash which will come in 2 or 3 years after enough people start using it for the wrong reasons.", "aSentId": 44795, "answer": "Postgres is a different beast it's full on old school proper standards compliant  ordbms. There will never be a backlash. This is proper old school computing.  Over kill for smaller web apps, but ideal for proper development.   These days computers are so fast even the speed concerns are less and less.\nThe only options past postgres are commercial full on expensive things like oracle. You don't need to be making them richer than they already are!", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44796, "question": "Postgres is a different beast it's full on old school proper standards compliant  ordbms. There will never be a backlash. This is proper old school computing.  Over kill for smaller web apps, but ideal for proper development.   These days computers are so fast even the speed concerns are less and less.\nThe only options past postgres are commercial full on expensive things like oracle. You don't need to be making them richer than they already are!", "aSentId": 44797, "answer": "&gt; Over kill for smaller web apps, \n\nHow so? Smaller web apps are often build on top of MySQL, and PostgreSQL isn't in any way worse.\n", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44798, "question": "&gt; Over kill for smaller web apps, \n\nHow so? Smaller web apps are often build on top of MySQL, and PostgreSQL isn't in any way worse.\n", "aSentId": 44799, "answer": "PostgreSQL, unlike MySQL, enforces correctness out of the box.\n\nThat's a bit unpopular in the 'smaller web app' world where 'let bad code run anyway and automatically work around errors as best you can' is the preferred standard operating procedure.\n\nBut yes, for people who actually care about their software's correctness, PostgreSQL isn't any way worse.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44792, "question": "I chose pgsql for my latest project. The SQL possibilities are really good and perfs are on par with MySQL nowadays.\n\nBut all the hype about postgresql lately make me fear about the backlash which will come in 2 or 3 years after enough people start using it for the wrong reasons.", "aSentId": 44801, "answer": "I'm not sure what the 'wrong reasons' would be, when the program is so focused on returning correct results.  \n\nSoftware that functions correctly, and has few beartraps lurking, isn't likely to go out of style.\n", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44802, "question": "I'm not sure what the 'wrong reasons' would be, when the program is so focused on returning correct results.  \n\nSoftware that functions correctly, and has few beartraps lurking, isn't likely to go out of style.\n", "aSentId": 44803, "answer": "I can easily envision some misguided soul trying to abstract their app filesystem by storing everything in a database.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44806, "question": "Graham was right then, if you put off learning something, then there's a good chance you will find out that you didn't need to learn it.", "aSentId": 44807, "answer": "Started  learning MongoDb in my second year in college, and while its syntax was neat, simple and intuitive, I didn't stay with it for too long. Glad for that.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44809, "question": "Agile is dead. Mongo DB is old news. Angular JS is irrelevant. Now Microservices will definitely save our bacon.", "aSentId": 44810, "answer": "Docker. Don't forget Docker containers and DevOps.\n\nEDIT: Oh, and don't forget to write each microservice in a different programming language.\n&lt;/sarcasm&gt;", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44811, "question": "Docker. Don't forget Docker containers and DevOps.\n\nEDIT: Oh, and don't forget to write each microservice in a different programming language.\n&lt;/sarcasm&gt;", "aSentId": 44812, "answer": "I feel left out when I found out that people are already using Rust 2.0 while I am stuck in ES7.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44809, "question": "Agile is dead. Mongo DB is old news. Angular JS is irrelevant. Now Microservices will definitely save our bacon.", "aSentId": 44814, "answer": "Microservices? Is that a new term for daemons?", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44816, "question": "It's all about choosing the right system for the job. Clearly MongoDB wasn't the right system for your application plan. I've never used MongoDB in a scaled application, but it looks pretty promising with the new WiredTiger engine. In any event, nice numbers from NR - Background jobs look pretty beat though.", "aSentId": 44817, "answer": "Can you give me one exemple where a RDBMS isn't the right system for the job? I'm talking about RDBMS,not NoSql systems like MongoDB.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44818, "question": "Can you give me one exemple where a RDBMS isn't the right system for the job? I'm talking about RDBMS,not NoSql systems like MongoDB.", "aSentId": 44819, "answer": "Remember the original use cases for the database that started this whole thing (BigTable). For instance, putting the entire web into a key-&gt;value store was the motivating application behind a lot of this. Serving Google Maps tiles and satellite imagery data too.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44818, "question": "Can you give me one exemple where a RDBMS isn't the right system for the job? I'm talking about RDBMS,not NoSql systems like MongoDB.", "aSentId": 44821, "answer": "So if you want to store time-series data, Cassandra could be a better system for you. Cassandra stores data on disk according to your primary index. That's just one dimension though. Scale is very important, MySQL and other RDBMSs are very hard to scale because it breaks the close-proximity-data paradigm of the relational system. You end up having to shard your data across multiple server clusters and modify your application to be knowledgeable of your shards. Most NoSQL systems like MongoDB or Cassandra handle that for you. They're built to scale. MySQL Enterprise has dynamic scaling and clustering capabilities, but who really wants to pay for a database these days, amiright?", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44822, "question": "So if you want to store time-series data, Cassandra could be a better system for you. Cassandra stores data on disk according to your primary index. That's just one dimension though. Scale is very important, MySQL and other RDBMSs are very hard to scale because it breaks the close-proximity-data paradigm of the relational system. You end up having to shard your data across multiple server clusters and modify your application to be knowledgeable of your shards. Most NoSQL systems like MongoDB or Cassandra handle that for you. They're built to scale. MySQL Enterprise has dynamic scaling and clustering capabilities, but who really wants to pay for a database these days, amiright?", "aSentId": 44823, "answer": "Time-series is just a euphemism for reporting and analytical queries - which are 90% about retrieving immutable data versioned over time.\n\nMySQL, MongoDB, and Cassandra are about the worst solutions in the world at this kind of thing:  MySQL's optimizer is too primitive to run these queries, MongoDB can take 3 hours to query 3TB of data, and Cassandra's vendor DataStax will be the first to admit that they're a transactional database vendor (their words), not reporting. \n\nTime-series data structures in the nosql world means no adhoc analysis, and extremely limited data structures.\n\nThe one solution that you're ignoring is the one that got this right 15-20 years ago and continues to vastly outperform any of the above: parallel relational databases using a data warehouse star-schema model.    Commercial products would include Teradata, Informix, DB2, Netezza, etc in the commercial world.  Or Impala, ~~CitrusDB~~ CitusDB, etc in the open source world.\n\nThese products are designed to support massive queries scanning 100% of a vast database running for hours, or sometimes just a partition or two in under a second - for canned or adhoc queries.  \n\nEDIT: thanks for the CitusDB correction.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44824, "question": "Time-series is just a euphemism for reporting and analytical queries - which are 90% about retrieving immutable data versioned over time.\n\nMySQL, MongoDB, and Cassandra are about the worst solutions in the world at this kind of thing:  MySQL's optimizer is too primitive to run these queries, MongoDB can take 3 hours to query 3TB of data, and Cassandra's vendor DataStax will be the first to admit that they're a transactional database vendor (their words), not reporting. \n\nTime-series data structures in the nosql world means no adhoc analysis, and extremely limited data structures.\n\nThe one solution that you're ignoring is the one that got this right 15-20 years ago and continues to vastly outperform any of the above: parallel relational databases using a data warehouse star-schema model.    Commercial products would include Teradata, Informix, DB2, Netezza, etc in the commercial world.  Or Impala, ~~CitrusDB~~ CitusDB, etc in the open source world.\n\nThese products are designed to support massive queries scanning 100% of a vast database running for hours, or sometimes just a partition or two in under a second - for canned or adhoc queries.  \n\nEDIT: thanks for the CitusDB correction.", "aSentId": 44825, "answer": "The reason that Data Warehouses are such good repositories for reporting and analytical queries is not really so much because of some inherit value of a RDB over NoSQL for doing those kind of queries, but because a Data Warehouse has all the complex queries *pre-calculated* and stored in an easily retrievable format. That is what a star schema is: all the time-consuming hard work is done during the ETL (extract, transform, load) of the data from the OLTP database to the Data Warehouse.\n\nYou can do the same thing with a NoSQL datastore and get astonishingly fast reads across very complex datasets.\n\nFor example, our company uses a NoSQL datastore that stores a complex, hierarchical data structure with dozens of attributes. Over 100TB of data. Yet we are able to do very complex near real time reads of the data because when we write the data we are pre-calculating the different views of the data and storing the data in multiple slices. So, reads are very, very fast. \n\nThe advantage of using NoSQL for this over an RDBMS is the NoSQL database is eventually consistent and does not lock. However, doing this is non-trivial and only really appropriate for really large scale projects. Most projects would be better off with a simple RDBMS database for writes and simple reads and extract the data into a simple Data Warehouse for analytics and reporting.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44826, "question": "The reason that Data Warehouses are such good repositories for reporting and analytical queries is not really so much because of some inherit value of a RDB over NoSQL for doing those kind of queries, but because a Data Warehouse has all the complex queries *pre-calculated* and stored in an easily retrievable format. That is what a star schema is: all the time-consuming hard work is done during the ETL (extract, transform, load) of the data from the OLTP database to the Data Warehouse.\n\nYou can do the same thing with a NoSQL datastore and get astonishingly fast reads across very complex datasets.\n\nFor example, our company uses a NoSQL datastore that stores a complex, hierarchical data structure with dozens of attributes. Over 100TB of data. Yet we are able to do very complex near real time reads of the data because when we write the data we are pre-calculating the different views of the data and storing the data in multiple slices. So, reads are very, very fast. \n\nThe advantage of using NoSQL for this over an RDBMS is the NoSQL database is eventually consistent and does not lock. However, doing this is non-trivial and only really appropriate for really large scale projects. Most projects would be better off with a simple RDBMS database for writes and simple reads and extract the data into a simple Data Warehouse for analytics and reporting.", "aSentId": 44827, "answer": "That's an interesting way to look at it.   But I wouldn't say that the star-schema is pre-calculated queries as much as a high performance data structure that supports a vast range of queries - both known and unknown.\n\nPre-computing data for common or expensive queries in aggregate tables is a core strategy of any analytical database.   The difference between many current NoSQL solutions and a DW is that with the DW you can still hit the detail data as well - when you realize that you need a query that lacks any aggregates, or to build a new historical aggregate.\n\nAnd I think the main reason why parallel relational databases using star schemas are so good at analytical queries - is simply that they're completely tuned for that workload from top to bottom whereas almost all of today's NoSQL solutions were really built to support (eventually-consistent) transactional systems.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44828, "question": "That's an interesting way to look at it.   But I wouldn't say that the star-schema is pre-calculated queries as much as a high performance data structure that supports a vast range of queries - both known and unknown.\n\nPre-computing data for common or expensive queries in aggregate tables is a core strategy of any analytical database.   The difference between many current NoSQL solutions and a DW is that with the DW you can still hit the detail data as well - when you realize that you need a query that lacks any aggregates, or to build a new historical aggregate.\n\nAnd I think the main reason why parallel relational databases using star schemas are so good at analytical queries - is simply that they're completely tuned for that workload from top to bottom whereas almost all of today's NoSQL solutions were really built to support (eventually-consistent) transactional systems.", "aSentId": 44829, "answer": "You are right. Describing a star-schema a pre-calculation of the possible queries is not completely accurate. The point I was trying to get across is that the ETL process transforms the schema of OLTP database into a form that is more amenable to a certain type of queries. That work is done once and all future queries are take advantage of that work.\n\nOur 100TB datastore approach has worked well for us. Our data size was too large for a traditional vertically scaled RDBMS solution. In our case when we store the detail document (a 50K+ hierarchy of protobuf objects) we \"eventually consistently\" update dozens of summary objects sliced across multiple axis of the data. Thus very complex \"queries\" that summarize and aggregate tens of millions of detail records then become simple key-value *gets* and are very fast. The limitation is that we only handle a fixed set of \"queries\". Adding a new query is difficult as it requires code and lazily recalculating the new values, but that is pretty rare.  ", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44824, "question": "Time-series is just a euphemism for reporting and analytical queries - which are 90% about retrieving immutable data versioned over time.\n\nMySQL, MongoDB, and Cassandra are about the worst solutions in the world at this kind of thing:  MySQL's optimizer is too primitive to run these queries, MongoDB can take 3 hours to query 3TB of data, and Cassandra's vendor DataStax will be the first to admit that they're a transactional database vendor (their words), not reporting. \n\nTime-series data structures in the nosql world means no adhoc analysis, and extremely limited data structures.\n\nThe one solution that you're ignoring is the one that got this right 15-20 years ago and continues to vastly outperform any of the above: parallel relational databases using a data warehouse star-schema model.    Commercial products would include Teradata, Informix, DB2, Netezza, etc in the commercial world.  Or Impala, ~~CitrusDB~~ CitusDB, etc in the open source world.\n\nThese products are designed to support massive queries scanning 100% of a vast database running for hours, or sometimes just a partition or two in under a second - for canned or adhoc queries.  \n\nEDIT: thanks for the CitusDB correction.", "aSentId": 44831, "answer": "You seem knowledgeable about this stuff. What do you think about Microsoft's offerings? I know there's a whole bunch of reporting services/features that tie into SQL Server.\n\nAlso, any idea if Postgres has something similar?\n\nI've never heard of any of the databases you mentioned except DB2. Are Impala and CitrusDB mature?", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44832, "question": "You seem knowledgeable about this stuff. What do you think about Microsoft's offerings? I know there's a whole bunch of reporting services/features that tie into SQL Server.\n\nAlso, any idea if Postgres has something similar?\n\nI've never heard of any of the databases you mentioned except DB2. Are Impala and CitrusDB mature?", "aSentId": 44833, "answer": "Microsoft acquired a vendor a handful of years ago that provides a shared-nothing analytical clustering capability for SQL Server.   I haven't worked with it, but believe that this plus their good optimizer and maturity is probably a very good solution. \n\nDB2 in this kind of configuration works extremely well.  Too bad IBM's pretty much killed it via bad marketing.\n\nPostgres was the basis originally for a *a lot* of these solutions (Netezza, Red Shift, Aster Data, Greenplum, Vertica, etc).  However,  it can't natively do this.  However, a number of solutions are hoping to remedy that: CitrusDB, PostgresXL, and others.  I wouldn't consider them very mature, but worth taking a look at.  Pivotal just announced that they're open sourcing Greenplum - which is very mature and very capable.  Between Greenplum and what it inspires &amp; simplifies in CitrusDB &amp; PostgresXL I think this space is heating up.\n\nImpala is a different scenario.  Not based on Postgres, lives within the Hadoop infrastructure as a faster alternative to Hive and Spark.  Hadoop is more work to set up than a pure db like Greenplum, but it offers some unique opportunities.  One includes the ability to write to columnar storage (Parquet) for Impala access, then replicate that to another cluster for Spark access - to the exact same data model.   That's cool.   Impala is also immature, but it's definitely usable, just need to be a little agile to work around the rough edges.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44834, "question": "Microsoft acquired a vendor a handful of years ago that provides a shared-nothing analytical clustering capability for SQL Server.   I haven't worked with it, but believe that this plus their good optimizer and maturity is probably a very good solution. \n\nDB2 in this kind of configuration works extremely well.  Too bad IBM's pretty much killed it via bad marketing.\n\nPostgres was the basis originally for a *a lot* of these solutions (Netezza, Red Shift, Aster Data, Greenplum, Vertica, etc).  However,  it can't natively do this.  However, a number of solutions are hoping to remedy that: CitrusDB, PostgresXL, and others.  I wouldn't consider them very mature, but worth taking a look at.  Pivotal just announced that they're open sourcing Greenplum - which is very mature and very capable.  Between Greenplum and what it inspires &amp; simplifies in CitrusDB &amp; PostgresXL I think this space is heating up.\n\nImpala is a different scenario.  Not based on Postgres, lives within the Hadoop infrastructure as a faster alternative to Hive and Spark.  Hadoop is more work to set up than a pure db like Greenplum, but it offers some unique opportunities.  One includes the ability to write to columnar storage (Parquet) for Impala access, then replicate that to another cluster for Spark access - to the exact same data model.   That's cool.   Impala is also immature, but it's definitely usable, just need to be a little agile to work around the rough edges.", "aSentId": 44835, "answer": "Sorry to hijack your response here, but maybe you have some advice on a good columnar database for a smaller operation. Basically we are going to deal with a lot of columnar data (up to about 10000 columns) where rows will probably be less than 100,000 per table. My thinking is that we would have a much easier time dealing with this in a columnar way than to try fitting it in a RDBMS.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44836, "question": "Sorry to hijack your response here, but maybe you have some advice on a good columnar database for a smaller operation. Basically we are going to deal with a lot of columnar data (up to about 10000 columns) where rows will probably be less than 100,000 per table. My thinking is that we would have a much easier time dealing with this in a columnar way than to try fitting it in a RDBMS.", "aSentId": 44837, "answer": "Sorry, can't give you a solid recommendation.   A lot depends on other requirements for availability, query type &amp; load, how dynamic your data is, etc.   10000 cols is enough that I'd want to contrast that design against a few alternatives - kv pairs, remodeling the data to reuse common columns, etc.   Good luck.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44838, "question": "Sorry, can't give you a solid recommendation.   A lot depends on other requirements for availability, query type &amp; load, how dynamic your data is, etc.   10000 cols is enough that I'd want to contrast that design against a few alternatives - kv pairs, remodeling the data to reuse common columns, etc.   Good luck.", "aSentId": 44839, "answer": "Ok, thanks.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44834, "question": "Microsoft acquired a vendor a handful of years ago that provides a shared-nothing analytical clustering capability for SQL Server.   I haven't worked with it, but believe that this plus their good optimizer and maturity is probably a very good solution. \n\nDB2 in this kind of configuration works extremely well.  Too bad IBM's pretty much killed it via bad marketing.\n\nPostgres was the basis originally for a *a lot* of these solutions (Netezza, Red Shift, Aster Data, Greenplum, Vertica, etc).  However,  it can't natively do this.  However, a number of solutions are hoping to remedy that: CitrusDB, PostgresXL, and others.  I wouldn't consider them very mature, but worth taking a look at.  Pivotal just announced that they're open sourcing Greenplum - which is very mature and very capable.  Between Greenplum and what it inspires &amp; simplifies in CitrusDB &amp; PostgresXL I think this space is heating up.\n\nImpala is a different scenario.  Not based on Postgres, lives within the Hadoop infrastructure as a faster alternative to Hive and Spark.  Hadoop is more work to set up than a pure db like Greenplum, but it offers some unique opportunities.  One includes the ability to write to columnar storage (Parquet) for Impala access, then replicate that to another cluster for Spark access - to the exact same data model.   That's cool.   Impala is also immature, but it's definitely usable, just need to be a little agile to work around the rough edges.", "aSentId": 44841, "answer": "Curious to get your opinion of Splunk?", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44842, "question": "Curious to get your opinion of Splunk?", "aSentId": 44843, "answer": "I don't have really strong opinions about Splunk - I see them as more of a higher-priced, fullstack solution rather than a more general purpose, lower-cost, higher capacity one.   They've got a lot of adapters, so maybe Splunk offers value in integration alone.   I don't have enough real experience with Splunk to say much more.\n\nIn general, when it comes to building out something strategic and large, I prefer the more general solutions that allow for explicit modeling of the data, rather than implicit, schema-on-demand and searching: data quality is difficult enough in this world without introducing those challenges.\n\n", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44824, "question": "Time-series is just a euphemism for reporting and analytical queries - which are 90% about retrieving immutable data versioned over time.\n\nMySQL, MongoDB, and Cassandra are about the worst solutions in the world at this kind of thing:  MySQL's optimizer is too primitive to run these queries, MongoDB can take 3 hours to query 3TB of data, and Cassandra's vendor DataStax will be the first to admit that they're a transactional database vendor (their words), not reporting. \n\nTime-series data structures in the nosql world means no adhoc analysis, and extremely limited data structures.\n\nThe one solution that you're ignoring is the one that got this right 15-20 years ago and continues to vastly outperform any of the above: parallel relational databases using a data warehouse star-schema model.    Commercial products would include Teradata, Informix, DB2, Netezza, etc in the commercial world.  Or Impala, ~~CitrusDB~~ CitusDB, etc in the open source world.\n\nThese products are designed to support massive queries scanning 100% of a vast database running for hours, or sometimes just a partition or two in under a second - for canned or adhoc queries.  \n\nEDIT: thanks for the CitusDB correction.", "aSentId": 44845, "answer": "Right but what about things like high availability and scaling to huge datasets?  There are single points of failure with the RDBMS systems I've looked at, without easy options to scale horizontally.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44846, "question": "Right but what about things like high availability and scaling to huge datasets?  There are single points of failure with the RDBMS systems I've looked at, without easy options to scale horizontally.", "aSentId": 44847, "answer": "Well, all these solutions scale out horizontally - supporting adhoc queries scanning at least tens of TBs on database sizes of at least hundreds of TBs if not PBs.\n\nBut HA has always been a weakness of the architecture with solutions that are theoretically more complex than what Hadoop, say, offers.   Still, it's worth considering that:\n\n   * Not everyone needs HA\n   * MTBF will still kill you on large clusters of 5000 or so nodes.  However, these databases are far faster than MongoDB or Hadoop map-reduce or Hive.   About five years ago Ebay mentioned beating the current 5000-node terasort benchmark with a 72-node teradata cluster that was running millions of queries a day against about 3PB of data.\n   * So, a 20-node cluster with 24 cores per node has approx 1% the MTBF of a 2000 node hadoop cluster and is capable of delivering blistering performance.   And that's good enough for many people.  And cheap enough to support alternative solutions - like a second, fail-over cluster in a completely different environment.\n   * Finally, solutions like Impala run on top of Hadoop and get most of the failover benefits (queries die, but server continues running).", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44850, "question": "I think Cassandra is pretty good with some time series data.\n\nIt writes faster than reads and if your data is immutable then it's perfect for Cassandra with the way they handle storage and deletion (tombstone). It's just a giant hash table if you think of collumns as buckets. You can have each partition keys by (year,month,day)\nand your primary key can be like so (year,month,day) hour assuming your logging every hour.\n\nThere are apparently lots of companies that are using Cassandra including Reddit.\n\nI also don't get why transactional database means they're bad at time series? Also I'm not entirely sure what definition of transactional database they're using here but Cassandra transactions are definately not isolated, it's eventual consistency goes against this. \n\nThey datastax also bought the group that made the graphdb Titan, I think they're looking to build graph feature into Cassandra albeit it's probably going to be enterprise only.", "aSentId": 44851, "answer": "Even though some vendors would like us to believe that they invented time series and time series databases, the reality is that both have been around a long time.   We just didn't call them time series databases.   We'd call them analytical databases or data warehouses - which are more general-purpose than something that only handles a time-series of key-value pairs.\n\nSo, as I mentioned earlier the reason why transactional databases aren't good at reporting is that these two workloads benefit from a completely different set of optimizations: with transactions you want to keep the hot data in memory, you want small block sizes, etc.  With analytics you give up on keeping all your hot data in memory, and instead hope to keep your sorts in memory, you have huge block sizes, etc.\n\nOne problem with time-series is that as a type of reporting it has the standard characteristic of being very iterative and constantly changing.  But unlike something like a warehouse where you have a general purpose solution with hundreds of attributes to readily support many changes, with time-series you often have nothing to rebuild history with when you need to make changes.   And this is true of Cassandra in general - DataStax is strongly recommending everyone spend a lot of time doing *logical data modeling* prior to implementation - because schema migration is such a nightmare.   That's an astounding challenge for many organizations and lack of adaptability for all.  Not what you want for reporting.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44853, "question": "Absolutely, without question, as long as that's your application. Take, for example, an API consumer. All day long, it must poll an API for changes. When it encounters a change, it must store the data and continue polling. Workers then pick up the data and process it. Cassandra, in this case, would be a great fit. I certainly would look to proven DW technology for traditional analytics. Streaming analytics, however, certainly warrant a reimagining of the traditional.", "aSentId": 44854, "answer": "&gt; Take, for example, an API consumer. All day long, it must poll an API for changes. When it encounters a change, it must store the data and continue polling. Workers then pick up the data and process it. Cassandra, in this case, would be a great fit.\n\nThat describes half of the SQL Server backed applications I've written. ", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44855, "question": "&gt; Take, for example, an API consumer. All day long, it must poll an API for changes. When it encounters a change, it must store the data and continue polling. Workers then pick up the data and process it. Cassandra, in this case, would be a great fit.\n\nThat describes half of the SQL Server backed applications I've written. ", "aSentId": 44856, "answer": "Likely you've spent unnecessary time and money supporting SQL Server.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44857, "question": "Likely you've spent unnecessary time and money supporting SQL Server.", "aSentId": 44858, "answer": "Yes, but that unnecessary time was caused by people doing dumbass shit like using varChar columns to store dates. The scenario that /u/nedtheman described falls somewhere between \"trivial\"  and \"something to do while the coffee brews\".", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44822, "question": "So if you want to store time-series data, Cassandra could be a better system for you. Cassandra stores data on disk according to your primary index. That's just one dimension though. Scale is very important, MySQL and other RDBMSs are very hard to scale because it breaks the close-proximity-data paradigm of the relational system. You end up having to shard your data across multiple server clusters and modify your application to be knowledgeable of your shards. Most NoSQL systems like MongoDB or Cassandra handle that for you. They're built to scale. MySQL Enterprise has dynamic scaling and clustering capabilities, but who really wants to pay for a database these days, amiright?", "aSentId": 44863, "answer": "&gt; who really wants to pay for a database these days, amiright?\n\nThat's like asking who wants to pay for software these days. \n\nTo me the major appeal of open source software are the lack of hassle and the outstanding free 'support' provided by thousands of other users posting and answering the same questions you had all over the internet. Just being able to google for an answer is so much more convenient than having to open a support ticket. Just being able to use a product without worrying about whether you need an extra license for this or that is so convenient. \n\nCustom software development is so expensive in general, the licensing fees add only a fraction to it. The customer doesn't always see this though. Sometimes when you do ask them to buy a commercial license for something, you need to remind them 'you spend that much on developers fees in an hour or two' ", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44864, "question": "&gt; who really wants to pay for a database these days, amiright?\n\nThat's like asking who wants to pay for software these days. \n\nTo me the major appeal of open source software are the lack of hassle and the outstanding free 'support' provided by thousands of other users posting and answering the same questions you had all over the internet. Just being able to google for an answer is so much more convenient than having to open a support ticket. Just being able to use a product without worrying about whether you need an extra license for this or that is so convenient. \n\nCustom software development is so expensive in general, the licensing fees add only a fraction to it. The customer doesn't always see this though. Sometimes when you do ask them to buy a commercial license for something, you need to remind them 'you spend that much on developers fees in an hour or two' ", "aSentId": 44865, "answer": "I figured the \"amiright\" would've tipped you off that I was being facetious. You're totally right, purchasing enterprise commercial software licenses is extremely expensive, but often worth the investment.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44822, "question": "So if you want to store time-series data, Cassandra could be a better system for you. Cassandra stores data on disk according to your primary index. That's just one dimension though. Scale is very important, MySQL and other RDBMSs are very hard to scale because it breaks the close-proximity-data paradigm of the relational system. You end up having to shard your data across multiple server clusters and modify your application to be knowledgeable of your shards. Most NoSQL systems like MongoDB or Cassandra handle that for you. They're built to scale. MySQL Enterprise has dynamic scaling and clustering capabilities, but who really wants to pay for a database these days, amiright?", "aSentId": 44867, "answer": "pgpool-II\n\nand its free!", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44818, "question": "Can you give me one exemple where a RDBMS isn't the right system for the job? I'm talking about RDBMS,not NoSql systems like MongoDB.", "aSentId": 44871, "answer": "Sure:\n\nIf your use case consists entirely or almost entirely of single key/value reads.\n\nLike... maybe you're doing some sort of file hosting service or something?", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44872, "question": "Sure:\n\nIf your use case consists entirely or almost entirely of single key/value reads.\n\nLike... maybe you're doing some sort of file hosting service or something?", "aSentId": 44873, "answer": "Quite ironically PostgreSQL has an engine that implements just that very efficiently.\n\nIMO the debate about SQL vs no SQL is moot because people seem to be forgetting the origin of the problem: using databases as all purpose persistence engines. Configuration, documentation, media, logs, files exported from foreign systems, anything that can't or shouldn't be a part of the code tends to end up in the databases. I've seen a CRM that stores *database schema information* in the database.\n\nFor shared nothing, impersistent platforms (I am looking at you, PHP), this is sort of the norm. And it's going to suck whether you shovel it into MySQL or MongoDB.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44874, "question": "Quite ironically PostgreSQL has an engine that implements just that very efficiently.\n\nIMO the debate about SQL vs no SQL is moot because people seem to be forgetting the origin of the problem: using databases as all purpose persistence engines. Configuration, documentation, media, logs, files exported from foreign systems, anything that can't or shouldn't be a part of the code tends to end up in the databases. I've seen a CRM that stores *database schema information* in the database.\n\nFor shared nothing, impersistent platforms (I am looking at you, PHP), this is sort of the norm. And it's going to suck whether you shovel it into MySQL or MongoDB.", "aSentId": 44875, "answer": "&gt;  I've seen a CRM that stores database schema information in the database.\n\nMost systems that do this implement some sort of user-configurable schema extensions. The prime example in a CRM is custom fields on a (eg) customer record. Instead of storing the custom field values in a some sort of serialized TEXT field, you store it as actual schema. This way you can take advantage of your DB's indexing and contstraints (if the software exposes those though, in my experience, usually not)", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44874, "question": "Quite ironically PostgreSQL has an engine that implements just that very efficiently.\n\nIMO the debate about SQL vs no SQL is moot because people seem to be forgetting the origin of the problem: using databases as all purpose persistence engines. Configuration, documentation, media, logs, files exported from foreign systems, anything that can't or shouldn't be a part of the code tends to end up in the databases. I've seen a CRM that stores *database schema information* in the database.\n\nFor shared nothing, impersistent platforms (I am looking at you, PHP), this is sort of the norm. And it's going to suck whether you shovel it into MySQL or MongoDB.", "aSentId": 44877, "answer": "Oh, I think there are almost always better choices than Mongo and friends for key/value, don't get me wrong.  I'm a huge Postgres fan myself too.\n\nI was just answering the \"why?\" question.  In theory, if you have a very, very focused use case I can sorta make an argument that you can get better performance if you build something with a laser-like focus that just does that use case well...\n\n... but I agree that you'd still almost certainly be better off just using a mature solution like PG. :D", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44884, "question": "Sometimes using a multi-faceted search is much more performant in something like MongoDB, especially if you have an unknown quantity of attributes that can be searched in multiple ways.", "aSentId": 44885, "answer": "This is where an indexed XML or JSON column comes into play. \n\n**********\n\nOr if you want to do it the old school way, use an attribute table.\n\n    SELECT C.Name, C.ID FROM Customer C\n    INNER JOIN Attributes a1 ON a1.Id = C.Id WHERE (a1.Key = 'Childern' AND a1.Value &gt; 2)\n    INNER JOIN Attributes a2 ON a2.Id = C.Id WHERE (a2.Key = 'HouseholdIncome' AND a1.Value &gt; 200000)\n\n", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44887, "question": "Something thats better suited for blob storage perhaps. For instance if you were building a database to hold legal info coming from a ton of different states that all have their own laws and format, it may be better to use a non relational db since the data doesn't all follow a strict schema. Think applications where not everything will have the same columns. If the data is relational by design, you should use a relational database (obviously)", "aSentId": 44888, "answer": "Do you have any idea how many DECADES ago blob storage was added to relational databases?", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44816, "question": "It's all about choosing the right system for the job. Clearly MongoDB wasn't the right system for your application plan. I've never used MongoDB in a scaled application, but it looks pretty promising with the new WiredTiger engine. In any event, nice numbers from NR - Background jobs look pretty beat though.", "aSentId": 44890, "answer": "&gt; Clearly MongoDB wasn't the right system for your application plan\n\nThat's just the thing with MongoDB. I think it's an elegant product, well documented and supported, easy to set up, easier and less irritating to use than similar products, but for the life of me I can't think of a use case for a 'general purpose' non-relational database. Any use case I've come across has been 'special purpose' in niche areas where a different, more specialized document store would have performed better, and I'll always prefer my 'general purpose' data in a relational database. \n\nToo often we've had situations where changing a certain feature requires adding data from another collection, meaning either an orders of magnitude slowdown, or changing the schema, more data duplication and running a data conversion with associated down time. A 'schema-less' DB turns out not to be all that much more flexible than one with a rigid schema in the face of changing requirements. ", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44891, "question": "&gt; Clearly MongoDB wasn't the right system for your application plan\n\nThat's just the thing with MongoDB. I think it's an elegant product, well documented and supported, easy to set up, easier and less irritating to use than similar products, but for the life of me I can't think of a use case for a 'general purpose' non-relational database. Any use case I've come across has been 'special purpose' in niche areas where a different, more specialized document store would have performed better, and I'll always prefer my 'general purpose' data in a relational database. \n\nToo often we've had situations where changing a certain feature requires adding data from another collection, meaning either an orders of magnitude slowdown, or changing the schema, more data duplication and running a data conversion with associated down time. A 'schema-less' DB turns out not to be all that much more flexible than one with a rigid schema in the face of changing requirements. ", "aSentId": 44892, "answer": "So true, but the actual use cases for a schema-less system rely on the application(s) to impose ordinance. Adding data schemes definitely cuts down on the complexity of your application.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44895, "question": "And here I am using MSSQL for everything. So glad my company hasn't had a requirement for a NoSQL database yet.", "aSentId": 44896, "answer": "If they do ask, just write a pretend-Mongo wrapper around MSSQL.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44898, "question": "I recently eradicated MongoDB from an app.  Used MySQL because it was already there, but it was glorious feat anyway.  \n\nDidn't think to write about it so I'll just reference this next time someone asks how it went.", "aSentId": 44899, "answer": "If you wouldn't mind, did you run any tests to compare MongoDB and MySQL? Performance-wise, consistency-wise, something?", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44900, "question": "If you wouldn't mind, did you run any tests to compare MongoDB and MySQL? Performance-wise, consistency-wise, something?", "aSentId": 44901, "answer": "I tested that the app still worked as expected and that the performance did not degrade up to 5x our current usage.\n\nBut otherwise, I removed it in as ill-considered a stroke as it was originally introduced.  Whatever benefit it promised was never realized, because it was never actually needed.\n", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44903, "question": "NoSQL isn't for everybody or every use case. It takes a very very open minded developer to embrace it. There is a lot of immediate downside and a lot more long term upside. You have to have the wherewithal to get past all the upfront headaches. But once you do, oh how you can scale. Scale, scale, scale. Eventual consistency means your tables don't lock, they don't even have to be on the same servers. Records can be sharded across servers, data centers and continents. \n\nOne of the biggest criticisms I hear about NoSQL is how much DB logic leaks into your application. How much knowledge devs are required to take on to use and optimize for NoSQL. This is absolutely true, but I think what a lot of people miss out on is as soon as your SQL database reaches a few Terabytes in size, you'll be doing this any ways. SQL databases can only get you so much mileage before you're refactoring large parts of your server architecture just to stave off the performance regressions. \n\nIMHO at the end of the day, NoSQL force concepts upfront necessary to scale, SQL allows you to get really far without having to think about. Just my $0.02 from using NoSQL for 3 years.\n\n----\n\nEDIT: ZOMG: Of course most apps don't grow to terabytes in size. Most apps are fine on SQL dbs. But some apps do get that big. Some apps get bigger. Pick the right tool, for the right job and stop trolling on /r/programming.\n\n----\n\nEDIT 2: Thanks for the gold kind stranger!", "aSentId": 44904, "answer": "&gt; and a lot more long term upside.\n\nCould you expand on this? I haven't had a project that it seemed suited for and I have a hard time imagining one. ", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44905, "question": "&gt; and a lot more long term upside.\n\nCould you expand on this? I haven't had a project that it seemed suited for and I have a hard time imagining one. ", "aSentId": 44906, "answer": "Not OP, but:\n\n&gt; as soon as your SQL database reaches a few Terabytes in size, you'll be doing this any ways. SQL databases can only get you so much mileage before you're refactoring large parts of your server architecture just to stave off the performance regressions.\n\nSuper easy to shard and scale to massive levels - granted this is only applicable if you think your application is going to need this, and very few actually do. ", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44907, "question": "Not OP, but:\n\n&gt; as soon as your SQL database reaches a few Terabytes in size, you'll be doing this any ways. SQL databases can only get you so much mileage before you're refactoring large parts of your server architecture just to stave off the performance regressions.\n\nSuper easy to shard and scale to massive levels - granted this is only applicable if you think your application is going to need this, and very few actually do. ", "aSentId": 44908, "answer": "Spot on. \n\nMost apps DON'T need this level of scalability. There is no denying that. \n\nBut when you end up with very large datasets, the sharding capabilities of NoSQL are critical. Sharding is important for a whole host of reasons. It can help with lookup, database transaction performance (which some NoSQL DBs do support), database replication, backups/restores, migration. \n\nBottom line is NoSQL allows you to scale horizontally to near infinite (adding more servers until your eyes popout). Traditional SQL does not make this easy/possible past certain thresholds.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44909, "question": "Spot on. \n\nMost apps DON'T need this level of scalability. There is no denying that. \n\nBut when you end up with very large datasets, the sharding capabilities of NoSQL are critical. Sharding is important for a whole host of reasons. It can help with lookup, database transaction performance (which some NoSQL DBs do support), database replication, backups/restores, migration. \n\nBottom line is NoSQL allows you to scale horizontally to near infinite (adding more servers until your eyes popout). Traditional SQL does not make this easy/possible past certain thresholds.", "aSentId": 44910, "answer": "&gt;But when you end up with very large datasets, the sharding capabilities of NoSQL are critical.\n\nIf you're aware of the issues, isn't it sufficient to deal with it when it actually becomes a problem. \n\nI mean if your operation is growing to that scale it probably doesn't just happen while you're away for the weekend, so there will normally be ample time to deal with it.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44911, "question": "&gt;But when you end up with very large datasets, the sharding capabilities of NoSQL are critical.\n\nIf you're aware of the issues, isn't it sufficient to deal with it when it actually becomes a problem. \n\nI mean if your operation is growing to that scale it probably doesn't just happen while you're away for the weekend, so there will normally be ample time to deal with it.", "aSentId": 44912, "answer": "Of course it doesn't just \"happen while you're away for the weekend\".\n\nThe problem isn't that it just sneaks up on you. The problem is often convincing stakeholders to give you the time/money to preform the necessary refactoring/rearching that needs done. These kind of size problems are most common in large orgs that have lots of moving parts and several teams of devs/dba/it/qa/support all working in the same area. When you get that big, changes that should take a day, tend to take weeks. ", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44913, "question": "Of course it doesn't just \"happen while you're away for the weekend\".\n\nThe problem isn't that it just sneaks up on you. The problem is often convincing stakeholders to give you the time/money to preform the necessary refactoring/rearching that needs done. These kind of size problems are most common in large orgs that have lots of moving parts and several teams of devs/dba/it/qa/support all working in the same area. When you get that big, changes that should take a day, tend to take weeks. ", "aSentId": 44914, "answer": "True, \"economies of scale\" do not always scale.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44903, "question": "NoSQL isn't for everybody or every use case. It takes a very very open minded developer to embrace it. There is a lot of immediate downside and a lot more long term upside. You have to have the wherewithal to get past all the upfront headaches. But once you do, oh how you can scale. Scale, scale, scale. Eventual consistency means your tables don't lock, they don't even have to be on the same servers. Records can be sharded across servers, data centers and continents. \n\nOne of the biggest criticisms I hear about NoSQL is how much DB logic leaks into your application. How much knowledge devs are required to take on to use and optimize for NoSQL. This is absolutely true, but I think what a lot of people miss out on is as soon as your SQL database reaches a few Terabytes in size, you'll be doing this any ways. SQL databases can only get you so much mileage before you're refactoring large parts of your server architecture just to stave off the performance regressions. \n\nIMHO at the end of the day, NoSQL force concepts upfront necessary to scale, SQL allows you to get really far without having to think about. Just my $0.02 from using NoSQL for 3 years.\n\n----\n\nEDIT: ZOMG: Of course most apps don't grow to terabytes in size. Most apps are fine on SQL dbs. But some apps do get that big. Some apps get bigger. Pick the right tool, for the right job and stop trolling on /r/programming.\n\n----\n\nEDIT 2: Thanks for the gold kind stranger!", "aSentId": 44916, "answer": "The point everyone's making though is that most projects don't have this terabytes of data, and probably never will. So you're solving a problem where there isn't one.\n\nWhen it does become a problem, however, there may be better tools and services that can help, *at the time when you need them*, rather than the tools that are available today.\n\nAlso, sit down and sketch out a quick data model. It of course doesn't have to be perfect (things never are) but at least then you have an understanding of the problem at hand. If you're just going in and making it up as you go along, I can't imagine what your code is going to look like over the years.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44917, "question": "The point everyone's making though is that most projects don't have this terabytes of data, and probably never will. So you're solving a problem where there isn't one.\n\nWhen it does become a problem, however, there may be better tools and services that can help, *at the time when you need them*, rather than the tools that are available today.\n\nAlso, sit down and sketch out a quick data model. It of course doesn't have to be perfect (things never are) but at least then you have an understanding of the problem at hand. If you're just going in and making it up as you go along, I can't imagine what your code is going to look like over the years.", "aSentId": 44918, "answer": "Yea I know. I literally mentioned that in my post. First sentence.\n\n&gt; NoSQL isn't for everybody or every use case.\n\nAnd have continue to mention this in many followup comment. Most apps don't need terabytes of data. But I've worked in organizations which have. And this is just based on my limited experience. \n", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44917, "question": "The point everyone's making though is that most projects don't have this terabytes of data, and probably never will. So you're solving a problem where there isn't one.\n\nWhen it does become a problem, however, there may be better tools and services that can help, *at the time when you need them*, rather than the tools that are available today.\n\nAlso, sit down and sketch out a quick data model. It of course doesn't have to be perfect (things never are) but at least then you have an understanding of the problem at hand. If you're just going in and making it up as you go along, I can't imagine what your code is going to look like over the years.", "aSentId": 44920, "answer": "&gt; The point everyone's making though is that most projects don't have this terabytes of data, and probably never will. So you're solving a problem where there isn't one.\n\nSome people are making this point. Many others are simply hating on Mongo because it's perceived to be trendy.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44903, "question": "NoSQL isn't for everybody or every use case. It takes a very very open minded developer to embrace it. There is a lot of immediate downside and a lot more long term upside. You have to have the wherewithal to get past all the upfront headaches. But once you do, oh how you can scale. Scale, scale, scale. Eventual consistency means your tables don't lock, they don't even have to be on the same servers. Records can be sharded across servers, data centers and continents. \n\nOne of the biggest criticisms I hear about NoSQL is how much DB logic leaks into your application. How much knowledge devs are required to take on to use and optimize for NoSQL. This is absolutely true, but I think what a lot of people miss out on is as soon as your SQL database reaches a few Terabytes in size, you'll be doing this any ways. SQL databases can only get you so much mileage before you're refactoring large parts of your server architecture just to stave off the performance regressions. \n\nIMHO at the end of the day, NoSQL force concepts upfront necessary to scale, SQL allows you to get really far without having to think about. Just my $0.02 from using NoSQL for 3 years.\n\n----\n\nEDIT: ZOMG: Of course most apps don't grow to terabytes in size. Most apps are fine on SQL dbs. But some apps do get that big. Some apps get bigger. Pick the right tool, for the right job and stop trolling on /r/programming.\n\n----\n\nEDIT 2: Thanks for the gold kind stranger!", "aSentId": 44922, "answer": "&gt; Eventual consistency means(...)\n\nEventual consistency means no consistency. Period. If you can live with that fine. I don't care about the upvotes on reddit either (btw, there you can very often see eventual consistency in action), on anything important to me, I can not live with no consistency. Writing my data to /dev/null is webscale too, but I still prefer ACID.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44923, "question": "&gt; Eventual consistency means(...)\n\nEventual consistency means no consistency. Period. If you can live with that fine. I don't care about the upvotes on reddit either (btw, there you can very often see eventual consistency in action), on anything important to me, I can not live with no consistency. Writing my data to /dev/null is webscale too, but I still prefer ACID.", "aSentId": 44924, "answer": "Not all use cases fit all. If you are developing, say Reddit, eventual consistency is entirely acceptable for a wide range of use cases, such as replying to a comment or up voting (duplicate submissions detection would be better under RDBMS, however).", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44923, "question": "&gt; Eventual consistency means(...)\n\nEventual consistency means no consistency. Period. If you can live with that fine. I don't care about the upvotes on reddit either (btw, there you can very often see eventual consistency in action), on anything important to me, I can not live with no consistency. Writing my data to /dev/null is webscale too, but I still prefer ACID.", "aSentId": 44926, "answer": "[/dev/null as a service](http://devnull-as-a-service.com)\n\nWrite times are super web scale. Read times are so terrible they maybe as well not exist.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44927, "question": "[/dev/null as a service](http://devnull-as-a-service.com)\n\nWrite times are super web scale. Read times are so terrible they maybe as well not exist.", "aSentId": 44928, "answer": "Thank you for that! I'm looking at their pricing plans right now and I'm ready to set up my cloud!", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44923, "question": "&gt; Eventual consistency means(...)\n\nEventual consistency means no consistency. Period. If you can live with that fine. I don't care about the upvotes on reddit either (btw, there you can very often see eventual consistency in action), on anything important to me, I can not live with no consistency. Writing my data to /dev/null is webscale too, but I still prefer ACID.", "aSentId": 44930, "answer": "Many NoSQL databases support some mechanisms of ACID in small pockets. Google's datastore, my current prod database, has a concept of entity groups which supports transactions within a predefined group of records. It's NOT full ACID, but it does cover a wide range of use cases for database transactions. ", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44932, "question": "Eventually consistent databases are consistent. But you should distinguish between *no* consistency, and *eventual* consistency.\n\nEventually consistent datastores are guaranteed to converge to the correct value at some point in the future. Usually not very far in the future, usually there is no need for convergence because the value is effectively consistent anyway.\n\nBut if you have a widely distributed datastore that spans datacenters, or need to handle massive scale, then eventually consistent is really your only choice.\n\nKeep in mind that not all use cases require that all updates to a stored value be always, 100% correct. In those kind of cases, loosening up on consistency improves availability and scale, and the value *will* eventually converge to the expected value.\n\nBut, it is easy to do NoSQL wrong, or apply it to the wrong usecase. NoSQL requires more discipline on the part of the developers since they have to move a lot of the logic that a database normally handles for you into the application layer. But, sometimes there is not other way to do what you want to do with a traditional ACID database.", "aSentId": 44933, "answer": "&gt; Keep in mind that not all use cases require that all updates to a stored value be always, 100% correct.\n\nTrue if you store pictures of cats, upvote counter or something like that.\n\nBut if you store something that matters then eventually consistent is usually not an option. At very least the information that is shown on screen must have a timestamp that shows when it was last updated.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44932, "question": "Eventually consistent databases are consistent. But you should distinguish between *no* consistency, and *eventual* consistency.\n\nEventually consistent datastores are guaranteed to converge to the correct value at some point in the future. Usually not very far in the future, usually there is no need for convergence because the value is effectively consistent anyway.\n\nBut if you have a widely distributed datastore that spans datacenters, or need to handle massive scale, then eventually consistent is really your only choice.\n\nKeep in mind that not all use cases require that all updates to a stored value be always, 100% correct. In those kind of cases, loosening up on consistency improves availability and scale, and the value *will* eventually converge to the expected value.\n\nBut, it is easy to do NoSQL wrong, or apply it to the wrong usecase. NoSQL requires more discipline on the part of the developers since they have to move a lot of the logic that a database normally handles for you into the application layer. But, sometimes there is not other way to do what you want to do with a traditional ACID database.", "aSentId": 44935, "answer": "As soon as at any defined point in time, I can not be sure if I get the data back consistent to what I have written, there is no consistency. If I have no guarantee, I can not assume correct data. ", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44936, "question": "As soon as at any defined point in time, I can not be sure if I get the data back consistent to what I have written, there is no consistency. If I have no guarantee, I can not assume correct data. ", "aSentId": 44937, "answer": "&gt; As soon as at any defined point in time, I can not be sure if I get the data back consistent to what I have written\n\nBut you may not always have that choice. At large scale or in a distributed environment a standard RDBMS with ACID guarantees either may not keep up or have such poor availability that the app is effectively unusable.\n\nUnder those conditions you can use eventual consistent datastores and know that *most* of the time the data you get back is right, and handle the cases where it isn't.\n\nObviously there are use cases where that does not work (banking transactions probably should have ACID guarantees) but a surprisingly large number of typical usecases work fine in eventually consistent datastore. You just have to handle the data convergence correctly.\n\nAnd again, for most small and medium sized apps, a good RDBMS is the preferred solution. ", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44938, "question": "&gt; As soon as at any defined point in time, I can not be sure if I get the data back consistent to what I have written\n\nBut you may not always have that choice. At large scale or in a distributed environment a standard RDBMS with ACID guarantees either may not keep up or have such poor availability that the app is effectively unusable.\n\nUnder those conditions you can use eventual consistent datastores and know that *most* of the time the data you get back is right, and handle the cases where it isn't.\n\nObviously there are use cases where that does not work (banking transactions probably should have ACID guarantees) but a surprisingly large number of typical usecases work fine in eventually consistent datastore. You just have to handle the data convergence correctly.\n\nAnd again, for most small and medium sized apps, a good RDBMS is the preferred solution. ", "aSentId": 44939, "answer": "&gt; Obviously there are use cases where that does not work (banking transactions probably should have ACID guarantees) but a surprisingly large number of typical usecases work fine in eventually consistent datastore. You just have to handle the data convergence correctly.\n\nI'd argue that the usecases where I have to throw ACID out for scaleability is the minority of usecases, but well, we pretty much agree.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44942, "question": "&gt; Eventual consistency means no consistency.\n\nHow is eventual consistency avoidable after a certain scale regardless of if you are using SQL or NoSQL?", "aSentId": 44943, "answer": "Speed Scale Consistency\n\nPick two", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44942, "question": "&gt; Eventual consistency means no consistency.\n\nHow is eventual consistency avoidable after a certain scale regardless of if you are using SQL or NoSQL?", "aSentId": 44945, "answer": "Check out Google's F1 for an example. I don't know of an open solution out there with equivalent capability, but this obviously isn't a fundamental law of nature as it's often presented.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44947, "question": "&gt; Eventual consistency means no consistency.\n\nSimply not true. You see the light from sun about 8 minutes after it left. You are **eventually consistent** with sun.\n ", "aSentId": 44948, "answer": "If that had anything to do with the definition of eventual consistency as in mongo/other non ACID stores, you might be right", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44949, "question": "If that had anything to do with the definition of eventual consistency as in mongo/other non ACID stores, you might be right", "aSentId": 44950, "answer": "Actually, it does. You never see the database as it is *now*; only as it was when it started sending the data to you. So, given that you have no choice but to accept that the information is at least slightly out of date, it stands to reason that if there are occasions when you can tolerate even longer delays, that time can be exploited to buy you scaling opportunities.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44951, "question": "Actually, it does. You never see the database as it is *now*; only as it was when it started sending the data to you. So, given that you have no choice but to accept that the information is at least slightly out of date, it stands to reason that if there are occasions when you can tolerate even longer delays, that time can be exploited to buy you scaling opportunities.", "aSentId": 44952, "answer": "If I read data of Table A in a transaction, which depends on Table B, I have exactly that. Table B will be shared locked, so nobody can write to Table B, while I read data depending on it.\n\nYou might not think that a big deal, but in a relational datamodel you do not work on a persisted hashtable. \n\nThe only way around that in an ACID compliant DBMS is overwriting the transaction isolation to allow dirty reads. At which point you loose data consistency as well.\n\nAlso, when writing the data, I get the confirmation of a committed transaction. I know the data was written the way I wanted it written (at least as long as I don't use mySql scnr). If something goes wrong, I get a rollback and with that a cleanup of whatever got screwed up. \n", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44953, "question": "If I read data of Table A in a transaction, which depends on Table B, I have exactly that. Table B will be shared locked, so nobody can write to Table B, while I read data depending on it.\n\nYou might not think that a big deal, but in a relational datamodel you do not work on a persisted hashtable. \n\nThe only way around that in an ACID compliant DBMS is overwriting the transaction isolation to allow dirty reads. At which point you loose data consistency as well.\n\nAlso, when writing the data, I get the confirmation of a committed transaction. I know the data was written the way I wanted it written (at least as long as I don't use mySql scnr). If something goes wrong, I get a rollback and with that a cleanup of whatever got screwed up. \n", "aSentId": 44954, "answer": "&gt; If I read data of Table A in a transaction, which depends on Table B, I have exactly that. Table B will be shared locked, so nobody can write to Table B, while I read data depending on it.\n\nYou're talking about a different issue. Eventual consistency doesn't mean \"traditional ACID Consistency, later\". It means \"the time delay after a write when you can expect to see that value reflected in all future reads is non-zero but finite\".\n\nMongo makes no attempt to ensure 2 separate collections can be modified atomically so any attempt to make dependent reads is, by definition, not guaranteed to be consistent. If you want that guarantee then you either put the data you need into one document or you change database.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44955, "question": "&gt; If I read data of Table A in a transaction, which depends on Table B, I have exactly that. Table B will be shared locked, so nobody can write to Table B, while I read data depending on it.\n\nYou're talking about a different issue. Eventual consistency doesn't mean \"traditional ACID Consistency, later\". It means \"the time delay after a write when you can expect to see that value reflected in all future reads is non-zero but finite\".\n\nMongo makes no attempt to ensure 2 separate collections can be modified atomically so any attempt to make dependent reads is, by definition, not guaranteed to be consistent. If you want that guarantee then you either put the data you need into one document or you change database.", "aSentId": 44956, "answer": "And if my query to update data in table A relies on the eventually consistent data in table B I have no way of knowing when table B will be consistent. Hence my point, eventual consistency is not consistent at all.\n\nIf you don't like the part of there being a table B, it works just as well as the data manipulation on table A relying on a different field in the same row of table A. So I have Shard 1 doing something, and Shard 2 doing something else, because the same command can result in different outcomes depending on the data present. \n\nHence .... not consistent. Eventual consistency is just a pretty way of saying no consistency, that is my point to begin with.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44957, "question": "And if my query to update data in table A relies on the eventually consistent data in table B I have no way of knowing when table B will be consistent. Hence my point, eventual consistency is not consistent at all.\n\nIf you don't like the part of there being a table B, it works just as well as the data manipulation on table A relying on a different field in the same row of table A. So I have Shard 1 doing something, and Shard 2 doing something else, because the same command can result in different outcomes depending on the data present. \n\nHence .... not consistent. Eventual consistency is just a pretty way of saying no consistency, that is my point to begin with.", "aSentId": 44958, "answer": "&gt;  it works just as well as the data manipulation on table A relying on a different field in the same row of table A. So I have Shard 1 doing something, and Shard 2 doing something else, because the same command can result in different outcomes depending on the data present.\n\nMongoDB only allows writes to 1 node at a time. So, if you issued 2 read-dependent-writes to the same document, they would get queued up and be performed correctly considering the order they arrive in.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44947, "question": "&gt; Eventual consistency means no consistency.\n\nSimply not true. You see the light from sun about 8 minutes after it left. You are **eventually consistent** with sun.\n ", "aSentId": 44960, "answer": "Unless ~~something breaks~~ a plane flies overhead and the ~~data~~ light is lost to me forever.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44961, "question": "Unless ~~something breaks~~ a plane flies overhead and the ~~data~~ light is lost to me forever.", "aSentId": 44962, "answer": "Temporary connection problems exist in sql databases world too. This has nothing to do with eventual consistency. On connection errors you simply retry and eventually get the info. Be it nosql database or sql database.\n\n", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44947, "question": "&gt; Eventual consistency means no consistency.\n\nSimply not true. You see the light from sun about 8 minutes after it left. You are **eventually consistent** with sun.\n ", "aSentId": 44964, "answer": "couldn't find a equally unfitting car analogy eh?\n\nAs soon as at a defined point in time, I can not be sure if I get the consistent to what I have written data back, there is no consistency. If I have no guarantee, I can not assume correct data. \n", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44966, "question": "&gt; Eventual consistency means no consistency. Period\n\nEventual consistency means real world. Period.  Even bank accounts are eventually consistent.  \n\n&gt; I can not live with no consistency. Writing my data to /dev/null is webscale too, but I still prefer ACID.\n\nYou are living in the real physical world (or are you... zing!) so you are living with eventual consistency. Trying to fight and you'll have a bad time.  Google tried, and its solution was to use GPS clocks to synchronize everything (see their F1 project).", "aSentId": 44967, "answer": "Can you explain your claim that bank accounts are \"eventually consistent\"? I can't imagine a system that implement eventual consistent for financial data.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44966, "question": "&gt; Eventual consistency means no consistency. Period\n\nEventual consistency means real world. Period.  Even bank accounts are eventually consistent.  \n\n&gt; I can not live with no consistency. Writing my data to /dev/null is webscale too, but I still prefer ACID.\n\nYou are living in the real physical world (or are you... zing!) so you are living with eventual consistency. Trying to fight and you'll have a bad time.  Google tried, and its solution was to use GPS clocks to synchronize everything (see their F1 project).", "aSentId": 44969, "answer": "&gt;Eventual consistency means real world. Period. Even bank accounts are eventually consistent. \n\nAre you kidding me? You must be kidding me. Do you really believe that?\n\nBtw, google is one of those cases where I don't need consistency, I dont care if one of the 100000 search results is missing. If on my god damn bank account a couple of thousands are missing, I kind of do. Guess what, so would the bank. ", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44970, "question": "&gt;Eventual consistency means real world. Period. Even bank accounts are eventually consistent. \n\nAre you kidding me? You must be kidding me. Do you really believe that?\n\nBtw, google is one of those cases where I don't need consistency, I dont care if one of the 100000 search results is missing. If on my god damn bank account a couple of thousands are missing, I kind of do. Guess what, so would the bank. ", "aSentId": 44971, "answer": "&gt; Do you really believe that?\n\nIt is not about belief, it is about physics. Do you think speed of light if finite? Well, it it doesn't matter if you believe or not, it is finite. We even know its speed. It is not intuitive perhaps, but there is not absolute time, there only time related to a place. So f you change a value in Australia and change it in New York there will be an inconsistency, you can't do it at the same time.\n\n&gt; I dont care if one of the 100000 search results is missing.\n\nThat's not what Spanner/F1 would be used.\n\n&gt; If on my god damn bank account a couple of thousands are missing, I kind of do. Guess what, so would the bank. \n\nSorry, again that is not how banks work. You could click the button at an ATM machine in Australia and New York to withdraw $100 close enough in time that each will get $100 even though you only have $100 in your account.  The system is eventually consistent. That is preferable than leaving you without access to you account because some server in between crashed.  You'll eventually be overdrawn and get a nasty letter and even have to pay penalties.\n\n", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44973, "question": "I don't know many companies using the terabytes of data necessary to see the benefit of NoSQL", "aSentId": 44974, "answer": "There are (at least) two benefits of NoSQL: The scaling benefit you're talking about, and the ease of development that you get from not having to specify a schema up front -- or, more correctly, to be able to trivially modify your schema by adding new fields in code.\n\nIt's the same reason JavaScript/Python/etc. developers can be more productive than C/C++ developers. *Can be*, anyway. Past a certain level of complexity, the lack of structure can bite you. But some problems don't ever need to exceed that level of complexity, and if *your* problem is one of those, then NoSQL can get the job done faster.\n\nNot to say that Mongo is perfect. But the article is clearly about a company that picked a NoSQL database for a problem that needed a SQL database.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44975, "question": "There are (at least) two benefits of NoSQL: The scaling benefit you're talking about, and the ease of development that you get from not having to specify a schema up front -- or, more correctly, to be able to trivially modify your schema by adding new fields in code.\n\nIt's the same reason JavaScript/Python/etc. developers can be more productive than C/C++ developers. *Can be*, anyway. Past a certain level of complexity, the lack of structure can bite you. But some problems don't ever need to exceed that level of complexity, and if *your* problem is one of those, then NoSQL can get the job done faster.\n\nNot to say that Mongo is perfect. But the article is clearly about a company that picked a NoSQL database for a problem that needed a SQL database.", "aSentId": 44976, "answer": "&gt; or, more correctly, to be able to trivially modify your schema by adding new fields in code.\n\nWhat happens to all of your previously created entities when you update your schema and they are now outdated?  Schema-less design makes correct implementation significantly harder.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44977, "question": "&gt; or, more correctly, to be able to trivially modify your schema by adding new fields in code.\n\nWhat happens to all of your previously created entities when you update your schema and they are now outdated?  Schema-less design makes correct implementation significantly harder.", "aSentId": 44978, "answer": "Those are upgraded by a demon in the background. Each document has a version-attribute that is incremented with each migration and by the power of eventual-consistency it all works out just fine!\n\nPerfect web scale.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44977, "question": "&gt; or, more correctly, to be able to trivially modify your schema by adding new fields in code.\n\nWhat happens to all of your previously created entities when you update your schema and they are now outdated?  Schema-less design makes correct implementation significantly harder.", "aSentId": 44980, "answer": "You migrate them or have reasonable defaults in your model classes.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44982, "question": "&gt; But once you do, oh how you can scale. Scale, scale, scale. \n\nCouldn't you write a SQL DB that enables this same perf?  What about NoSQL makes it so easy to scale?  More specifically: is it just coincidental that NoSQL DBs have better scaling feature or is there something about schemalessness that makes it particularly scale-friendly?", "aSentId": 44983, "answer": "Relational databases assume the existence of a single authoritative data store, which is a bad assumption in a distributed system. \n\nOnce you outgrow one machine it becomes very difficult to make a consistent SQL system. You can do it, but it becomes fragile and complicated.\n\nNoSQL databases have a different set of assumptions that are more congenial to multiple machines.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44982, "question": "&gt; But once you do, oh how you can scale. Scale, scale, scale. \n\nCouldn't you write a SQL DB that enables this same perf?  What about NoSQL makes it so easy to scale?  More specifically: is it just coincidental that NoSQL DBs have better scaling feature or is there something about schemalessness that makes it particularly scale-friendly?", "aSentId": 44985, "answer": "It isn't exactly about being schemalessness, but rather about not fulfilling ACID. Most NoSQL databases give up some of the ACID guarantees to give you better performance. Are you familiar with the CAP theorem? It sort of says that you can't have Consistency, Availability and Partition Tolerance at the same time in a system.\n\nNow imagine that you want a fully consistent distributed system. What do you do? You lock some of it until all nodes are consistent with one another. Otherwise, you would risk that some nodes would not be consistent with the others. This clearly means that availability is hindered, because we are locking and preventing further changes until full consistency is achieved.\n\nNoSQL databases opt to have a Basically Available system which has a Soft state during which consistency is not yet guaranteed, but then it is Eventually guaranteed. These are BASE systems. They sort of make it easier to scale because they don't have to deal with the \"hassle\" of ACID. Of course, if you don't have full ACID, you're going to have a bad time if you are not prepared. For instance, Cassandra is optimized for write operations because it caches them before writing them to disk. Yeah, that's brilliant, until the machine crashes and those things left in cache weren't written to disk.\n\nRelational technology is finding new ways to scale better while keeping ACID guarantees, but it's inherently harder. You can't have the whole world. Consider that dropping a single internal connection between nodes would potentially make the system inconsistent, for instance...", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44986, "question": "It isn't exactly about being schemalessness, but rather about not fulfilling ACID. Most NoSQL databases give up some of the ACID guarantees to give you better performance. Are you familiar with the CAP theorem? It sort of says that you can't have Consistency, Availability and Partition Tolerance at the same time in a system.\n\nNow imagine that you want a fully consistent distributed system. What do you do? You lock some of it until all nodes are consistent with one another. Otherwise, you would risk that some nodes would not be consistent with the others. This clearly means that availability is hindered, because we are locking and preventing further changes until full consistency is achieved.\n\nNoSQL databases opt to have a Basically Available system which has a Soft state during which consistency is not yet guaranteed, but then it is Eventually guaranteed. These are BASE systems. They sort of make it easier to scale because they don't have to deal with the \"hassle\" of ACID. Of course, if you don't have full ACID, you're going to have a bad time if you are not prepared. For instance, Cassandra is optimized for write operations because it caches them before writing them to disk. Yeah, that's brilliant, until the machine crashes and those things left in cache weren't written to disk.\n\nRelational technology is finding new ways to scale better while keeping ACID guarantees, but it's inherently harder. You can't have the whole world. Consider that dropping a single internal connection between nodes would potentially make the system inconsistent, for instance...", "aSentId": 44987, "answer": "&gt;  but then it is Eventually guaranteed\n\nExcept mongo isn't eventually guaranteed.  you can have a majority of slaves write to disk and the master can crash and miss the ack -- they won't roll back the write and the client will think it hasn't been written.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44988, "question": "&gt;  but then it is Eventually guaranteed\n\nExcept mongo isn't eventually guaranteed.  you can have a majority of slaves write to disk and the master can crash and miss the ack -- they won't roll back the write and the client will think it hasn't been written.", "aSentId": 44989, "answer": "But you can fine-tune what the write semantics are. IN any case, I wasn't specifically talking about Mongo", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44986, "question": "It isn't exactly about being schemalessness, but rather about not fulfilling ACID. Most NoSQL databases give up some of the ACID guarantees to give you better performance. Are you familiar with the CAP theorem? It sort of says that you can't have Consistency, Availability and Partition Tolerance at the same time in a system.\n\nNow imagine that you want a fully consistent distributed system. What do you do? You lock some of it until all nodes are consistent with one another. Otherwise, you would risk that some nodes would not be consistent with the others. This clearly means that availability is hindered, because we are locking and preventing further changes until full consistency is achieved.\n\nNoSQL databases opt to have a Basically Available system which has a Soft state during which consistency is not yet guaranteed, but then it is Eventually guaranteed. These are BASE systems. They sort of make it easier to scale because they don't have to deal with the \"hassle\" of ACID. Of course, if you don't have full ACID, you're going to have a bad time if you are not prepared. For instance, Cassandra is optimized for write operations because it caches them before writing them to disk. Yeah, that's brilliant, until the machine crashes and those things left in cache weren't written to disk.\n\nRelational technology is finding new ways to scale better while keeping ACID guarantees, but it's inherently harder. You can't have the whole world. Consider that dropping a single internal connection between nodes would potentially make the system inconsistent, for instance...", "aSentId": 44991, "answer": "&gt; For instance, Cassandra is optimized for write operations because it caches them before writing them to disk. Yeah, that's brilliant, until the machine crashes and those things left in cache weren't written to disk.\n\nThey would be retrievable via the commit log, as well as recoverable from other replica nodes.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44986, "question": "It isn't exactly about being schemalessness, but rather about not fulfilling ACID. Most NoSQL databases give up some of the ACID guarantees to give you better performance. Are you familiar with the CAP theorem? It sort of says that you can't have Consistency, Availability and Partition Tolerance at the same time in a system.\n\nNow imagine that you want a fully consistent distributed system. What do you do? You lock some of it until all nodes are consistent with one another. Otherwise, you would risk that some nodes would not be consistent with the others. This clearly means that availability is hindered, because we are locking and preventing further changes until full consistency is achieved.\n\nNoSQL databases opt to have a Basically Available system which has a Soft state during which consistency is not yet guaranteed, but then it is Eventually guaranteed. These are BASE systems. They sort of make it easier to scale because they don't have to deal with the \"hassle\" of ACID. Of course, if you don't have full ACID, you're going to have a bad time if you are not prepared. For instance, Cassandra is optimized for write operations because it caches them before writing them to disk. Yeah, that's brilliant, until the machine crashes and those things left in cache weren't written to disk.\n\nRelational technology is finding new ways to scale better while keeping ACID guarantees, but it's inherently harder. You can't have the whole world. Consider that dropping a single internal connection between nodes would potentially make the system inconsistent, for instance...", "aSentId": 44993, "answer": "&gt; schemalessness\n\nI *never* read that word right the first time...", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44997, "question": "Absolutely spot on. It's evident from the blog post that the author hasn't reached that level of knowledge yet required to use NoSQL. If they get big enough, they are going to be forced to move away from postgres and actually learn about the issues at play here. I highly doubt a site that serves user reviews via an API needs both consistency and availability (although they would probably like both). Rather, in the long term, they no doubt need Availability and Partition Tolerance. ", "aSentId": 44998, "answer": "&gt; Absolutely spot on. It's evident from the blog post that the author hasn't reached that level of knowledge yet required to use NoSQL.\n\nor maybe it wasn't the right tool? this is most likely the case. ", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44999, "question": "&gt; Absolutely spot on. It's evident from the blog post that the author hasn't reached that level of knowledge yet required to use NoSQL.\n\nor maybe it wasn't the right tool? this is most likely the case. ", "aSentId": 45000, "answer": "&gt; or maybe it wasn't the right tool? this is most likely the case.\n\nMaybe. But I doubt it. My point is that if they took the time to understand the trade-offs between NoSQL and RMDBS then they could make an informed decision. They still don't appear to have done that.\n\nEDIT: What I am getting at there is that generally speaking, NoSQL databases have to compramise on either consistency (all nodes see the same data at the same time) or availability (a guarantee that every request receives a response about whether it succeeded or failed). This is because they usually all provide partition tolerance (the system continues to operate despite arbitrary message loss or failure of part of the system) to achieve scalability.  You can't provide all 3.\n\nGenerally speaking - consistency is the one that is sacrificed. For example, with MongoDB when data is shared and replicated, things might not make it to the replica nodes immediately. So, they have forgone consistency to provide availability and partition tolerance.\n\nUsing only the blog post as a guide, it would seem to me that the service they provide would probably be just fine with eventual consistency. That is, there is a slight delay between when new reviews or review edits become visible on all nodes. In return, they get web scale. This only makes sense if they **need** web scale obviously. ", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45002, "question": "&gt;  very very open minded developer \n\nNice euphemism for 'moron'", "aSentId": 45003, "answer": "Oh you must be the other guy. The one who's been doing this for 20 years and knows everything. ", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45004, "question": "Oh you must be the other guy. The one who's been doing this for 20 years and knows everything. ", "aSentId": 45005, "answer": "Yea that's me, been doing databases of all kinds for 20 years now. Mongo is never the 'right tool'. Never.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45006, "question": "Yea that's me, been doing databases of all kinds for 20 years now. Mongo is never the 'right tool'. Never.", "aSentId": 45007, "answer": "Well I was referring to NoSQL in general. But I gather you were too.\n\nYou can have your own opinions about about databases. I'm sure you've got way more experience about working with them than I do. But it's a not good attitude to refer to people who are trying to solve new problems in creative ways as morons. You're likely to wake up one day and find the world around you has changed, and you've failed to keep up.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45010, "question": "His complaints indicate MongoDB was not really the right choice.\n\nApplication driven schema's are for when you want application driven schemas.  That means filtering your ingest and converting.  That may mean scanning and health checking.  That does not mean that code bloat is required.  Why bother reading after he basically declares that MongoDB was not the right choice?", "aSentId": 45011, "answer": "Well stated", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45010, "question": "His complaints indicate MongoDB was not really the right choice.\n\nApplication driven schema's are for when you want application driven schemas.  That means filtering your ingest and converting.  That may mean scanning and health checking.  That does not mean that code bloat is required.  Why bother reading after he basically declares that MongoDB was not the right choice?", "aSentId": 45013, "answer": "&gt; MongoDB was not really the right choice.\n\nMongo is never the right choice.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45010, "question": "His complaints indicate MongoDB was not really the right choice.\n\nApplication driven schema's are for when you want application driven schemas.  That means filtering your ingest and converting.  That may mean scanning and health checking.  That does not mean that code bloat is required.  Why bother reading after he basically declares that MongoDB was not the right choice?", "aSentId": 45015, "answer": "&gt;His complaints indicate MongoDB was not really the right choice.\n\nMongoDB is never the right choice.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45017, "question": "Can we please just all agree on, \"Choose the best solution to a problem, not adjusting the problem to fit a solution\" and be done with this type of thing?", "aSentId": 45018, "answer": "Exactly. Jumping on an anti-[insert trendy tech here] bandwagon is as annoying as jumping on a(n) [insert trendy tech here] bandwagon. \n\nActually.. it might be even more annoying. People who chase after hype might be annoying and naive... but at least they're not being nasty and mean-spirited. The amount of hate in this thread is really pretty upsetting.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45019, "question": "Exactly. Jumping on an anti-[insert trendy tech here] bandwagon is as annoying as jumping on a(n) [insert trendy tech here] bandwagon. \n\nActually.. it might be even more annoying. People who chase after hype might be annoying and naive... but at least they're not being nasty and mean-spirited. The amount of hate in this thread is really pretty upsetting.", "aSentId": 45020, "answer": "There's one thing that radical new technology does do: it tests our convictions of the old ways and forces us to consider a problem from a different angle. \n\nIt's best to just ignore it all, rather than stoke the flames.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45017, "question": "Can we please just all agree on, \"Choose the best solution to a problem, not adjusting the problem to fit a solution\" and be done with this type of thing?", "aSentId": 45022, "answer": "Mongo is the 'best solution' for approximately zero problems though.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45024, "question": "I'm curious. How does rethinkdb fit in the mix? I've used it a little bit for personal projects and really like how it gives you the simplicity of a JSON store, but still mostly implements joins and related functionality that people who've never used an SQL database would not embrace. The language integration also makes it feel natural enough in different languages to avoid writing bad code. However, I know that its joins and similar functionality don't seem as complete as an SQL database, and it is not fully ACID compliant.", "aSentId": 45025, "answer": "Considering it's fairly new I only very briefly looked into it. While it definitely looks more interesting compared to MongoDB I'd rather use something tried and proven instead of repeating past mistakes. If and when we outgrow PostgreSQL or RDBMS' in general we can look into what we need at that point, though I don't expect this to happen in at least the coming 5 years or so.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45028, "question": "I love Postgres but the one thing I wish is had is pessimistic locking. It's just such a huge help when you need multi-statement queries when multiple sources of writes against the same data are coming in.", "aSentId": 45029, "answer": "You can do explicit locking with \"select for update\". You could also tweak transaction isolation levels.\n\nHave you looked at that?\n\nI assume you do all these queries in a single transaction, right?", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45030, "question": "You can do explicit locking with \"select for update\". You could also tweak transaction isolation levels.\n\nHave you looked at that?\n\nI assume you do all these queries in a single transaction, right?", "aSentId": 45031, "answer": "Postgres only has two transaction isolation levels and serialized (the stricter one) does not do this. Being in the same transaction does not do anything in this case because Postgres only locks per-statement. It is possible to do it with a function or stored proc using error handling but then that breaks batch mode operations which were essential for me, a function is also a performance hit. ", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45036, "question": "And they're really going to be up shit creek when they realize all the reasons they gave for why MongoDB didn't work out also apply to Ruby.", "aSentId": 45037, "answer": "Please elaborate.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45038, "question": "Please elaborate.", "aSentId": 45039, "answer": "&gt;we value the following:\nConsistency.\nVisibility of data and the behaviour of the system.\nCorrectness and explicitness.\nScalability.\n\nYou lose all of these to varying degrees with dynamic languages. ", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45038, "question": "Please elaborate.", "aSentId": 45041, "answer": "The trend seems to be moving away from dynamic languages, particularly ones that are: slow, mutable, magical (see monkey patching), and not at all type safe, which are essentially the core attributes of Ruby.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45042, "question": "The trend seems to be moving away from dynamic languages, particularly ones that are: slow, mutable, magical (see monkey patching), and not at all type safe, which are essentially the core attributes of Ruby.", "aSentId": 45043, "answer": "Thanks for that. However, aren't certain trends simply fashion too?\n\nFor example, according to trends, if I shouldn't be using:\n\n* Perl\n* Ruby\n* PHP\n* Java\n* JavaScript\n* Groovy\n* Python\n* ...\n\n...what *should* I be using these days for straight up MVC web development? I know there are lots of alternatives, but what's the most trendy these days that works on Linux?\n\nI'm not trying to be sarcastic or anything, but I've been hearing stuff like this or that programming language is not fashionable anymore for years ;-)\n\nEdit: Forgot about JavaScript.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45044, "question": "Thanks for that. However, aren't certain trends simply fashion too?\n\nFor example, according to trends, if I shouldn't be using:\n\n* Perl\n* Ruby\n* PHP\n* Java\n* JavaScript\n* Groovy\n* Python\n* ...\n\n...what *should* I be using these days for straight up MVC web development? I know there are lots of alternatives, but what's the most trendy these days that works on Linux?\n\nI'm not trying to be sarcastic or anything, but I've been hearing stuff like this or that programming language is not fashionable anymore for years ;-)\n\nEdit: Forgot about JavaScript.", "aSentId": 45045, "answer": "Scala + Play framework is one Linux friendly option.\n\n.NET as per sibling comment, right now with Mono, and apparently soon-ish with the recent OSS move that will make .NET first class on *nix.\n\nCould also go with Haskell + Yesod or Snap; Clojure\\* Noir (or whatever the latest &amp; greatest is)\n\n\\* Clojure is of course a dynamic language, but it strongly favors immutable constructs, a claim that Ruby certainly cannot make ;-), and has Clojure.Typed if one wants compile time checked code/performance.\n\nSaying that, Rails still has a strong following, and is partly what keeps Ruby afloat, but the writing is on the wall, IMO. I mean the language creator is talking about introducing static typing to the language within 10 years, and Python will probably be seeing optional static typing within 5 years at the latest -- therefore, the trend is moving away from dynamic languages...", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45046, "question": "Scala + Play framework is one Linux friendly option.\n\n.NET as per sibling comment, right now with Mono, and apparently soon-ish with the recent OSS move that will make .NET first class on *nix.\n\nCould also go with Haskell + Yesod or Snap; Clojure\\* Noir (or whatever the latest &amp; greatest is)\n\n\\* Clojure is of course a dynamic language, but it strongly favors immutable constructs, a claim that Ruby certainly cannot make ;-), and has Clojure.Typed if one wants compile time checked code/performance.\n\nSaying that, Rails still has a strong following, and is partly what keeps Ruby afloat, but the writing is on the wall, IMO. I mean the language creator is talking about introducing static typing to the language within 10 years, and Python will probably be seeing optional static typing within 5 years at the latest -- therefore, the trend is moving away from dynamic languages...", "aSentId": 45047, "answer": "+1 for Scala + Play Framework. I've used a myriad of languages and frameworks, but nothing has been as quick to get moving as Play. A close runner up is ASP.NET MVC, but then you're coupled to Microsoft (Mono is getting first class status, I know, but to some degree you're still bound to Microsoft).", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45048, "question": "+1 for Scala + Play Framework. I've used a myriad of languages and frameworks, but nothing has been as quick to get moving as Play. A close runner up is ASP.NET MVC, but then you're coupled to Microsoft (Mono is getting first class status, I know, but to some degree you're still bound to Microsoft).", "aSentId": 45049, "answer": "&gt; nothing has been as quick to get moving as Play.\n\nI tried Play (plain Java though, no Scala). Rails is much faster to get into IMHO. But to each their own.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45046, "question": "Scala + Play framework is one Linux friendly option.\n\n.NET as per sibling comment, right now with Mono, and apparently soon-ish with the recent OSS move that will make .NET first class on *nix.\n\nCould also go with Haskell + Yesod or Snap; Clojure\\* Noir (or whatever the latest &amp; greatest is)\n\n\\* Clojure is of course a dynamic language, but it strongly favors immutable constructs, a claim that Ruby certainly cannot make ;-), and has Clojure.Typed if one wants compile time checked code/performance.\n\nSaying that, Rails still has a strong following, and is partly what keeps Ruby afloat, but the writing is on the wall, IMO. I mean the language creator is talking about introducing static typing to the language within 10 years, and Python will probably be seeing optional static typing within 5 years at the latest -- therefore, the trend is moving away from dynamic languages...", "aSentId": 45051, "answer": "Thank you for that great response.\n\nWhich of these are the *least* \"fashionable\"? As in, which of these will *not* be in the same position that languages like Perl, for example, are in now in 10, 20 years time? i.e. which one is C?\n\nI think there's always going to be scope for a choice of approaches, including \"dynamic\", or what used to be more commonly called \"scripting\" languages. The ivory tower will always be there, but most days we just need to get stuff done :-)\n", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45044, "question": "Thanks for that. However, aren't certain trends simply fashion too?\n\nFor example, according to trends, if I shouldn't be using:\n\n* Perl\n* Ruby\n* PHP\n* Java\n* JavaScript\n* Groovy\n* Python\n* ...\n\n...what *should* I be using these days for straight up MVC web development? I know there are lots of alternatives, but what's the most trendy these days that works on Linux?\n\nI'm not trying to be sarcastic or anything, but I've been hearing stuff like this or that programming language is not fashionable anymore for years ;-)\n\nEdit: Forgot about JavaScript.", "aSentId": 45053, "answer": "Reddit only likes C# these days. And while we tolerate Postgres everyone knows SQL Server running on Azure with Microsofts very generous BizSpark programme is obviously the best in all circumstances. And as per most comments above, everything that's lacking a direct analogue in the Microsoft stack is completely ludicrous and used only by idiots. ", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45054, "question": "Reddit only likes C# these days. And while we tolerate Postgres everyone knows SQL Server running on Azure with Microsofts very generous BizSpark programme is obviously the best in all circumstances. And as per most comments above, everything that's lacking a direct analogue in the Microsoft stack is completely ludicrous and used only by idiots. ", "aSentId": 45055, "answer": "Wowzers. So *that* explains why our marketing people are frothing at the mouth so much.\n\n", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45054, "question": "Reddit only likes C# these days. And while we tolerate Postgres everyone knows SQL Server running on Azure with Microsofts very generous BizSpark programme is obviously the best in all circumstances. And as per most comments above, everything that's lacking a direct analogue in the Microsoft stack is completely ludicrous and used only by idiots. ", "aSentId": 45057, "answer": "C# is just a gaming language. It's not weird reddit likes procrastination, so if you are working on something it should be about procrastination. \n", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45042, "question": "The trend seems to be moving away from dynamic languages, particularly ones that are: slow, mutable, magical (see monkey patching), and not at all type safe, which are essentially the core attributes of Ruby.", "aSentId": 45059, "answer": "Source?", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45036, "question": "And they're really going to be up shit creek when they realize all the reasons they gave for why MongoDB didn't work out also apply to Ruby.", "aSentId": 45061, "answer": "Except for the past 5 years we've been using Ruby it never was a problem for us. I don't expect us to ever change away from it.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45062, "question": "Except for the past 5 years we've been using Ruby it never was a problem for us. I don't expect us to ever change away from it.", "aSentId": 45063, "answer": "By the time it causes a problem, it's too late to change away from it. ", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45065, "question": "ah yeah......... sqlmasterrace hehe", "aSentId": 45066, "answer": "All the fun things like arrays, hstore (key-value), and JSON aren't SQL.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45067, "question": "All the fun things like arrays, hstore (key-value), and JSON aren't SQL.", "aSentId": 45068, "answer": "hmmm\n\ni like using sql server.  so i'll answer from my point of view.\n\nbefore i begin--i dont use any of those things you mentioned.  but i did look up some stuff and maybe we can see what we can or cannot do.\n\nhstore....so that is something built into postgres.  i don't know if sql server has it.  but i think i can accomplish the same thing with the XML data type.  using that, i could use xquery to filter on a specific attribute.  \n\nsql server 2008 has pretty good XML support.  in my work i return pretty deeply nested hierarchical XML data.  it's not super performant, but it's super flexible--which meets my needs.  JSON and XML are different representations of data, yes?  i have *never* used JSON, so i may just be wrong.  a quick search turns up: https://www.simple-talk.com/sql/t-sql-programming/producing-json-documents-from-sql-server-queries-via-tsql/ ...seems easy.\n\nfinally arrays.  i guess this is a feature in mongodb?  that's just really a SQL table isn't it?  \n\nanyways.  i'm an average kinda SQL programmer.  been at it for over a dozen years.  i admit i'm a bit biased when it comes to these things.  but learning about it is good for me too.  :)\n", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45067, "question": "All the fun things like arrays, hstore (key-value), and JSON aren't SQL.", "aSentId": 45070, "answer": "Postgres provides some of these ", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45067, "question": "All the fun things like arrays, hstore (key-value), and JSON aren't SQL.", "aSentId": 45072, "answer": "That's why NoSQL doesn't really mean \"No SQL\", it means \"Not Only SQL\". You may use SQL all you want, but the storage mechanism itself, and perhaps the guarantees (ACID, BASE...) might be different.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45074, "question": "&gt; Another problem with MySQL is that any table modification (e.g. adding a column) will result in the table being locked for both reading and writing. This means that any operation using such a table will have to wait until the modification has completed. \n\nIsn't that an outdated statement? InnoDB is the default storage engine since MySQL 5.5 (~six years old) and uses row locking not table locking, as far as I know. \n\n(Are there instances/queries which makes InnoDB create table locks?)", "aSentId": 45075, "answer": "an ALTER TABLE statement still requires an ACCESS EXCLUSIVE lock", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45076, "question": "an ALTER TABLE statement still requires an ACCESS EXCLUSIVE lock", "aSentId": 45077, "answer": "Cool, didn't consider structural changes at all to be honest. Thanks for pointing that out.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45076, "question": "an ALTER TABLE statement still requires an ACCESS EXCLUSIVE lock", "aSentId": 45079, "answer": "Not necessarily (in MySQL 5.6). Some alter table commands e.g. adding a column can run concurrently with read and write transactions on the same table.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45082, "question": "Does anyone know what they are using for measuring those latency graphs?", "aSentId": 45083, "answer": "They are using New Relic.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45088, "question": "Hows that table alter going for ya. The reason a lot of people choose a document db is they dont have to bring the stupid system down to bring in new features.", "aSentId": 45089, "answer": "They talk about it and mention that postgresql doesn't require bringing down the system when the columns are nullable. (which is what you would get with an orthogonal new feature). You could also use a second table if the new column is going to be sparse.\n\nAnd oh, the latest version of postgresql does have a document type too!", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45091, "question": "I accidentally read the \"The Problem Of Schemaless\" heading in the article as \"The Problem Of Shemales\".", "aSentId": 45092, "answer": "I always read it first that way.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45091, "question": "I accidentally read the \"The Problem Of Schemaless\" heading in the article as \"The Problem Of Shemales\".", "aSentId": 45094, "answer": "So did I actually ..I was kind of looking at the photo and trying to figure out the context\n\nAll hail the death of MongoDB", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45097, "question": "One day all this NoSql Bullshit will be gone and we'll all be back to debating the SQL databases. ", "aSentId": 45098, "answer": "Computing stuff goes in cycles.\n\nSome particularly bright and particularly earnest young sprog in *Marketing* will have a synergasm one morning whilst curling out a particularly satisfying shit, and in a welter of inspiration will declare **NewSQL++ X^(&amp;trade;&amp;reg;&amp;copy;&amp;#9786;)** as *the* way forward for the same bollocks that we've been doing all along, but sexier and more arousing.\n\nThe \"X\" doesn't really stand for anything in particular, but as everyone knows, the key thing holding back both NoSQL and it's predecessor, SQL has been the distinct lack of an \"X\" in the naming scheme. Everyone knows that computer products with an \"X\" in the name are more synergistic and have a generous helping of holisticnessness.\n", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45097, "question": "One day all this NoSql Bullshit will be gone and we'll all be back to debating the SQL databases. ", "aSentId": 45100, "answer": "I don't thing so.  RDBMS solves a particular problem for a particular size of dataset.  As you try to go multi-datacenter with failover and no downtime updates.  RDBMS can't do it without so many backflips as to be impractical.  Now that multi-datacenter with failover is a common deployment scenario for so many applications, the document databases and \"eventually consistent\" are here to stay.\n\nRDBMS holds on as \"the ACID king\", and this is a pretty big feature to be sure.  But the flexibility and reliability of MongoDB in highly available multi-datacenter applications keeps me on this document datastore falling back to RDBMS only when I absolutely need ACID transactions.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45104, "question": "oh goodie another database... Just what the world needed..... why can't we just have one and make that great? I'm tired of learning new systems.", "aSentId": 45105, "answer": "\"Another database\" and \"new systems\" as in implying it's a new option in the world of databases? PostgreSQL and its predecessors have been around for longer than every other option discussed in OP's link. And its precursors go back decades; Postgres, the direct precursor but pre-SQL, was begun in the early 1980s as a successor to the Ingres database which had started out in the 70s.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45104, "question": "oh goodie another database... Just what the world needed..... why can't we just have one and make that great? I'm tired of learning new systems.", "aSentId": 45107, "answer": "Did you just call PostgreSQL for \"another database... Just what the world needed\" ?\n\nPostgreSQL is one of the oldest and most successful open source databases around.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45109, "question": "What he just realised about postgresSQL????? If you wanted a proper relational database, should have used that from the start dumbo!!", "aSentId": 45110, "answer": "If I was there when the decision was made to use MongoDB that might've happened. Sadly the decision was made ~1,5 years before I joined.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45111, "question": "If I was there when the decision was made to use MongoDB that might've happened. Sadly the decision was made ~1,5 years before I joined.", "aSentId": 45112, "answer": "Ah right...makes sense.. You can't go wrong with Postgres it's proper established standards compliant ordbms.  It's overkill for small app where speed is key, or other concerns. But if you need complete stability and full standards compliance and longevity with traditional databases, it's the only choice.\nYou can easily move things out of it to anything else, so for development ease and thinking long term old school is the best for an easy life.\n", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45115, "question": "Software Testing From the Perspective of a Hardware Engineer", "aSentId": 45116, "answer": "Great article!\n\nI just want to add that the hardware folks have been doing what we software people call unit testing for decades before us.  I'm not surprised that they've refined the process a little better than us.  I remember hearing that if LSI was going to make one of their semi custom gate arrays for you back in the '80s, part of the contract stipulated 100% \"test bench\" coverage.  This makes sense too.  When a screwup can cost millions of dollars of scrapped silicon (potentially endangering the client's ability to pay LSI!), you make sure to do some due diligence.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45117, "question": "Great article!\n\nI just want to add that the hardware folks have been doing what we software people call unit testing for decades before us.  I'm not surprised that they've refined the process a little better than us.  I remember hearing that if LSI was going to make one of their semi custom gate arrays for you back in the '80s, part of the contract stipulated 100% \"test bench\" coverage.  This makes sense too.  When a screwup can cost millions of dollars of scrapped silicon (potentially endangering the client's ability to pay LSI!), you make sure to do some due diligence.", "aSentId": 45118, "answer": "Isn't this why/how waterfall started?  Industry was applying the methodologies they had experience with to software development?\n\nThe big difference though is that software changes mid development because it can, since it's \"so easy\" to change.  Nobody does this with hardware and expects it to be easy or cheap.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45119, "question": "Isn't this why/how waterfall started?  Industry was applying the methodologies they had experience with to software development?\n\nThe big difference though is that software changes mid development because it can, since it's \"so easy\" to change.  Nobody does this with hardware and expects it to be easy or cheap.", "aSentId": 45120, "answer": "Because of this hardware often has simplified input/output definitions and well defined processing. It also frequently has more reliable subcomponent expectations than software which these days is all networked and sits on much more complicated software and hardware stacks. \n\nrandomizing the permutations on circuit wires is one thing. Randomizing input when you have practically infinitely variable input strings, formats, etc.... yeah.\n", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45119, "question": "Isn't this why/how waterfall started?  Industry was applying the methodologies they had experience with to software development?\n\nThe big difference though is that software changes mid development because it can, since it's \"so easy\" to change.  Nobody does this with hardware and expects it to be easy or cheap.", "aSentId": 45122, "answer": "Yep. If people treated software with the same respect they treat hardware, we'd all be much better off. \n\nBut the cost would also go up by an order of magnitude, which they absolutely aren't ok with. Because for some reason, even though you pay your useless director of marketing $150k/yr with an annual slush fund budget around the same amount, paying a developer anything more than $120k/yr might as well be treason. ", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45115, "question": "Software Testing From the Perspective of a Hardware Engineer", "aSentId": 45124, "answer": "Very nice article. I would *love* to have a tool where I can formally specify some of my API functions, and the order in which they're supposed to be used, and it generates test cases based on that.\n\nBut... I code in C. For embedded hardware. For network devices that have to boot up and register with a server before the API I want to test is even usable.\n\nThe article names of a handful of tools, but most of them appear to be for high-level languages like JavaScript. I'd love to find resources for tools like these that are closer to the level I'm at.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45125, "question": "Very nice article. I would *love* to have a tool where I can formally specify some of my API functions, and the order in which they're supposed to be used, and it generates test cases based on that.\n\nBut... I code in C. For embedded hardware. For network devices that have to boot up and register with a server before the API I want to test is even usable.\n\nThe article names of a handful of tools, but most of them appear to be for high-level languages like JavaScript. I'd love to find resources for tools like these that are closer to the level I'm at.", "aSentId": 45126, "answer": "I'm in the same boat. Sometimes I wish for sw emulation of verilog that you could use to unit test a driver. The best I have now is faking out the register set and using dependency injection to respond to reads and writes however I need to", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45127, "question": "I'm in the same boat. Sometimes I wish for sw emulation of verilog that you could use to unit test a driver. The best I have now is faking out the register set and using dependency injection to respond to reads and writes however I need to", "aSentId": 45128, "answer": "I've actually rigged up a similar thing with GHDL and qemu.  It could be made a lot better though.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45125, "question": "Very nice article. I would *love* to have a tool where I can formally specify some of my API functions, and the order in which they're supposed to be used, and it generates test cases based on that.\n\nBut... I code in C. For embedded hardware. For network devices that have to boot up and register with a server before the API I want to test is even usable.\n\nThe article names of a handful of tools, but most of them appear to be for high-level languages like JavaScript. I'd love to find resources for tools like these that are closer to the level I'm at.", "aSentId": 45130, "answer": "There is absolutely no reason to \"code in C\". You can formally model the whole hardware first and then program against that modelled machine. Yes, this is a huge amount of work, but certainly possible. The key would be to convince your vendor to come up with the semantics of the hardware machine such that you only need to write the application semantics. \n\nThere is no such thing as \"the level you are at\". At some point, when programming, there is a formal model to which you are writing. It could be that you exist the existence of a register, the existence of a certain memory model, or even the existence of a value with a particular probability at some location. All of this can be specified using tools developed in the previous decade. ", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45131, "question": "There is absolutely no reason to \"code in C\". You can formally model the whole hardware first and then program against that modelled machine. Yes, this is a huge amount of work, but certainly possible. The key would be to convince your vendor to come up with the semantics of the hardware machine such that you only need to write the application semantics. \n\nThere is no such thing as \"the level you are at\". At some point, when programming, there is a formal model to which you are writing. It could be that you exist the existence of a register, the existence of a certain memory model, or even the existence of a value with a particular probability at some location. All of this can be specified using tools developed in the previous decade. ", "aSentId": 45132, "answer": "I get why you're mad.  They took your intellectual property and turned it into one 90-minute long gay joke. It was like watching \"Batman &amp; Robin\" all over again.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45131, "question": "There is absolutely no reason to \"code in C\". You can formally model the whole hardware first and then program against that modelled machine. Yes, this is a huge amount of work, but certainly possible. The key would be to convince your vendor to come up with the semantics of the hardware machine such that you only need to write the application semantics. \n\nThere is no such thing as \"the level you are at\". At some point, when programming, there is a formal model to which you are writing. It could be that you exist the existence of a register, the existence of a certain memory model, or even the existence of a value with a particular probability at some location. All of this can be specified using tools developed in the previous decade. ", "aSentId": 45134, "answer": "Sorry, I don't understand what you're getting at, but it sounds like you want to come up with a model (software simulation) of the hardware?\nWhat's the reason why there is \"no reason to 'code in C'\" ?\n", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45115, "question": "Software Testing From the Perspective of a Hardware Engineer", "aSentId": 45136, "answer": "WTF is it with blog articles not having a comment section?  That is so annoying.  I guess I'll email him this question:\n\n&gt; The other option is to build more smarts into the program doing the test generation. There are a ridiculously large number of papers on how to do that, but very few of those papers have turned into practical, robust, software tools. Coveraged-based test generation doesn\u2019t have that many papers on it, but it seems to be effective.\n\nI would like a link to some of these papers.  ", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45138, "question": "There is No Now", "aSentId": 45139, "answer": "But when will then be now? ", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45140, "question": "But when will then be now? ", "aSentId": 45141, "answer": "Soon.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45143, "question": "Flipping Bits in Memory Without Accessing Them: An Experimental Study of DRAM Disturbance Errors", "aSentId": 45144, "answer": "Is it feasible to flip *the right* bits of memory such that you could use this as an exploit? It seemed quite non-deterministic, but then I did just skim the paper.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45145, "question": "Is it feasible to flip *the right* bits of memory such that you could use this as an exploit? It seemed quite non-deterministic, but then I did just skim the paper.", "aSentId": 45146, "answer": "This is the hole point! Google tried it, and it's working. The attack isn't easy but not impossible", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45143, "question": "Flipping Bits in Memory Without Accessing Them: An Experimental Study of DRAM Disturbance Errors", "aSentId": 45148, "answer": "There has been no shortage of hand-wringing over the limited durability of increasingly-popular flash memory in portable devices and SSDs. But it turns out there's a much more serious problem closer to home, so to speak. Sheesh.\n\nIt's like there's a new business principle at work: if there isn't some terrifying hardware or software flaw that leaves a design vulnerable to black hats, then the maker has left some money on the table somewhere. Cut corners until the thing barely works.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45149, "question": "There has been no shortage of hand-wringing over the limited durability of increasingly-popular flash memory in portable devices and SSDs. But it turns out there's a much more serious problem closer to home, so to speak. Sheesh.\n\nIt's like there's a new business principle at work: if there isn't some terrifying hardware or software flaw that leaves a design vulnerable to black hats, then the maker has left some money on the table somewhere. Cut corners until the thing barely works.", "aSentId": 45150, "answer": "&gt; Cut corners until the thing barely works.\r\rThis is not new --  WalMart's entire business model is predicated on it.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45151, "question": "&gt; Cut corners until the thing barely works.\r\rThis is not new --  WalMart's entire business model is predicated on it.", "aSentId": 45152, "answer": "Where do they cut corners? The actual products themselves maybe? I've seen some shoddy things like skateboards... I just watched a video on it so that's stuck in my head. But yeah there are some products that cost around $100 and anything less you just end up with a shoddy product that won't last. Normally if I grab something from Walmart it's food or drink which seems to be cheaper than elsewhere but the same product.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45153, "question": "Where do they cut corners? The actual products themselves maybe? I've seen some shoddy things like skateboards... I just watched a video on it so that's stuck in my head. But yeah there are some products that cost around $100 and anything less you just end up with a shoddy product that won't last. Normally if I grab something from Walmart it's food or drink which seems to be cheaper than elsewhere but the same product.", "aSentId": 45154, "answer": "TVs are the most obvious.  They carry specific models that amazingly cost $100 less than anybody else, while looking _almost_ like the same model.  They aren't the same at all of course but naive consumers never notice the difference.\r\rWalMart coerces suppliers to participate in these shenanigans by threatening to drop them if they don't cooperate.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45155, "question": "TVs are the most obvious.  They carry specific models that amazingly cost $100 less than anybody else, while looking _almost_ like the same model.  They aren't the same at all of course but naive consumers never notice the difference.\r\rWalMart coerces suppliers to participate in these shenanigans by threatening to drop them if they don't cooperate.", "aSentId": 45156, "answer": "I see... yeah Walmart is pretty much a place where I'm fine buying food or drink but If I were to buy something more expensive I'd probably use Amazon, Costco, or some other website that Google shopping finds that has good reviews.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45143, "question": "Flipping Bits in Memory Without Accessing Them: An Experimental Study of DRAM Disturbance Errors", "aSentId": 45158, "answer": "Interesting. Any idea to what extent this skewed the results of all the research in cosmic rays effect? If the researchers accessed memory heavily doing those tests, this effect should be subtracted from the final error count.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45159, "question": "Interesting. Any idea to what extent this skewed the results of all the research in cosmic rays effect? If the researchers accessed memory heavily doing those tests, this effect should be subtracted from the final error count.", "aSentId": 45160, "answer": "This attack works by refreshing RAM lines as frequently as possible, and they are very deliberate about it (accessing just 2 rows and disabling caching). Unless someone researched cosmic rays effects doing exactly that, I doubt their results are compromised.\n", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45162, "question": "&gt;Server-grade systems employ ECC modules with extra DRAM chips, incurring a 12.5% capacity overhead. However, even such modules cannot correct multibit disturbance errors (Section 6.3).\n\nSo this is a problem that even ECC memory cannot avert.\n", "aSentId": 45163, "answer": "With ECC memory, you have a very high (but not 100%) chance that the system detects the fault and crashes before you manage to cause an undetected error.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45164, "question": "With ECC memory, you have a very high (but not 100%) chance that the system detects the fault and crashes before you manage to cause an undetected error.", "aSentId": 45165, "answer": "Are you saying their conclusion \"[ECC modules] cannot correct multibit disturbance errors\" is not accurate?", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45166, "question": "Are you saying their conclusion \"[ECC modules] cannot correct multibit disturbance errors\" is not accurate?", "aSentId": 45167, "answer": "No, that statement is correct.  But \"detect\" is different from \"correct\".  ECC RAM can correct all 1-bit errors, and detect all 2-bit errors, so you'd have to flip 3 bits at once to have anything really bad happen.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45168, "question": "No, that statement is correct.  But \"detect\" is different from \"correct\".  ECC RAM can correct all 1-bit errors, and detect all 2-bit errors, so you'd have to flip 3 bits at once to have anything really bad happen.", "aSentId": 45169, "answer": "And you'd have to flip 3 bits at once *without flipping 2 bits first*, because if you flip 2 bits the machine hard crashes (because that's a detectable hardware fault).\n\nAnd there's still a *chance* that 3-bit flips will be detected (and crash the machine).", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45166, "question": "Are you saying their conclusion \"[ECC modules] cannot correct multibit disturbance errors\" is not accurate?", "aSentId": 45171, "answer": "That's not a conclusion, it is a previously known fact. ECC can correct 1-bit errors, detect 2-bit ones, and anything above that is basically up to your luck. But there are some factors that would make actually compromising systems with ECC much harder.\n\n1) If you generate *any* 1 or 2-bit errors they will be corrected or detected. You can configure your system to halt in case of any uncorrectable errors. That means the privilege escalation is reduced to DoS.  \n2) A subset of 3-bit or larger errors will cause errors as well. Not all of them, but some, and they can also stop exploitation as I mentioned above.  \n3) The tests that succeeded happened in a subset of the laptops they tested, likely because they use low-power and/or low-refresh-rate RAM. They didn't succeed in exploiting any desktops. Low-power server RAM does exist but is not the norm, and it seems that makes servers much more elusive targets.  ", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45173, "question": "Excuse my ignorance, but doesn't refreshing the memory bank fulfill the same criteria that they induced the disturbance errors with? Refreshing is just opening and closing of the rows, which is their strategy to induce those errors. So, shouldn't these errors be present in idling systems just refreshing the DRAM?", "aSentId": 45174, "answer": "They open and close the same row many times in a.. row, without the neighboring rows being refreshed. ", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45176, "question": "Estimation Games - I.T. Project Estimation as politics", "aSentId": 45177, "answer": "These games just show why estimation shouldn't even be attempted; and if you're dealing with the games outlined in the article, look for a job where they don't play them.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45179, "question": "20 Examples of Java 8 Date and Time API", "aSentId": 45180, "answer": "How does Java 8 Date &amp; Time compare to Joda? Honest question here.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45181, "question": "How does Java 8 Date &amp; Time compare to Joda? Honest question here.", "aSentId": 45182, "answer": "[This post](http://stackoverflow.com/questions/24631909/differences-between-java-8-date-time-api-java-time-and-joda-time) covers most of the bases.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45183, "question": "[This post](http://stackoverflow.com/questions/24631909/differences-between-java-8-date-time-api-java-time-and-joda-time) covers most of the bases.", "aSentId": 45184, "answer": "Thanks, that seems to cover it.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45189, "question": "The Pannini Projection \u2013 perspective images with very wide fields of view", "aSentId": 45190, "answer": "The street-walking video was absolutely fantastic!\n\nWhere is this perspective technique in modern first-person video games?\n\nEvery time I play a first person video game, I can't feel like I'm immersed in the game world because I'm playing through the viewport of a toilet paper tube -- and if I crank the field of view higher, everything is round and fish-eyed.\n\nPannini projection for gaming 2015!", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45191, "question": "The street-walking video was absolutely fantastic!\n\nWhere is this perspective technique in modern first-person video games?\n\nEvery time I play a first person video game, I can't feel like I'm immersed in the game world because I'm playing through the viewport of a toilet paper tube -- and if I crank the field of view higher, everything is round and fish-eyed.\n\nPannini projection for gaming 2015!", "aSentId": 45192, "answer": "I suspect it'll come with VR, which needs far higher field of view (somewhere close to our actual FoV) to be even passable.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45189, "question": "The Pannini Projection \u2013 perspective images with very wide fields of view", "aSentId": 45194, "answer": "Great find", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45196, "question": "Why use Event Sourcing", "aSentId": 45197, "answer": "replaying events is only practical in closed systems. once you deal with federated data that is derived from your own events, it is not possible to replay.\n\nfor example, replaying credit card transactions...the card itself could have been deactivated in the interim", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45198, "question": "replaying events is only practical in closed systems. once you deal with federated data that is derived from your own events, it is not possible to replay.\n\nfor example, replaying credit card transactions...the card itself could have been deactivated in the interim", "aSentId": 45199, "answer": "You are taking \"replaying\" too literally. No one ever \"replays\" events as in reproduce all the real world actions.\n\nIt is no different than replaying database transaction log. Credit cards have nothing to do with it. You simply restore the state of the database itself to the latest snapshot, or to any point in time if you like.\n\nAs for the actions you are confusing events with commands. Now commands can indeed call for credit card module. Event is simply the result of a successful command that is recorded to the database.\n", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45196, "question": "Why use Event Sourcing", "aSentId": 45201, "answer": "&gt; We are avoiding impedance mismatch between object oriented and relational world.\n\nBy matching with neither of them.\n\nBut in principle I like it. I want to make a toy log-based filesystem that uses this, but I've never gotten around to it.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45204, "question": "Safe TypeScript: Safe and Efficient Gradual Typing for TypeScript", "aSentId": 45205, "answer": "I've only read the abstract so far, but this seems pretty interesting. Although this part is pretty weird:\n\n&gt; compiling more than 100,000\nlines of existing TypeScript source code.\n\n&gt; ... For instance, we bootstrap the\nSafe TypeScript compiler (90,000 lines including the base TypeScript\ncompiler)\n\nFrom that it sounds like they bootstrapped themselves and checked one other program. I'm sure they did more, but just a weird way to say it.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45204, "question": "Safe TypeScript: Safe and Efficient Gradual Typing for TypeScript", "aSentId": 45207, "answer": "*Safe* TypeScript?\n\n\"So, TypeScript ... what would you say it is you ... do here?\"", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45208, "question": "*Safe* TypeScript?\n\n\"So, TypeScript ... what would you say it is you ... do here?\"", "aSentId": 45209, "answer": "If TypeScript did nothing beyond act as documentation for the API it would still be worlds better than JavaScript. \n\nBut I write in SQL, so what do I know?", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45208, "question": "*Safe* TypeScript?\n\n\"So, TypeScript ... what would you say it is you ... do here?\"", "aSentId": 45211, "answer": "I kinda did a double-take, too. But it turns out TypeScript's type system really does 90% of the work. They just (for large values of \"just\") added a second typechecking pass that catches more errors statically and passes off what it can't to a dynamic RTTI checker. As long as I can get information about what gets fobbed off to runtime so I can decide whether it's worth refactoring to make statically checkable, I think this is good. It sure beats the intentionally unsound alternatives to death.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45204, "question": "Safe TypeScript: Safe and Efficient Gradual Typing for TypeScript", "aSentId": 45213, "answer": "Server error. :)", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45214, "question": "Server error. :)", "aSentId": 45215, "answer": "Looks like it got reddit hugged. Was fine earlier.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45217, "question": "Is this superseded by the integration of AtScript into TS?", "aSentId": 45218, "answer": "No, or at least I don't think so. Hence the push behind Google's SoundScript.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45221, "question": "Efficient WebGL stroking", "aSentId": 45222, "answer": "It's funny how often we have to re-invent the same things. I did *exactly* this for a 2d graphics API I wrote for BeOS 15 years ago. I decomposed lines to fast fillable triangles, and handled all the edge cases, and built masking buffers for filling with arbitrary patterns/gradients/etc.\n\nThis is a cool interactive demo, and it blows my mind to see it on the web, running in webgl/js/etc but man, I feel like we shouldn't have to deal with this in 2015. \n\nStill, awesome work.\n", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45223, "question": "It's funny how often we have to re-invent the same things. I did *exactly* this for a 2d graphics API I wrote for BeOS 15 years ago. I decomposed lines to fast fillable triangles, and handled all the edge cases, and built masking buffers for filling with arbitrary patterns/gradients/etc.\n\nThis is a cool interactive demo, and it blows my mind to see it on the web, running in webgl/js/etc but man, I feel like we shouldn't have to deal with this in 2015. \n\nStill, awesome work.\n", "aSentId": 45224, "answer": "yup. I agree, reinventing the wheel is very common, and more in the javascript world. But most of the time is the only way i get to learn something new. trial and error has been by my side for a long time.\n\nthis code snippet belongs to a bigger concept, a general purpose 2d renderer for webgl. It is not only aiming at stroking, but mainly to bring a canvas-like API for webgl rendering. Most game engines around make the rendering extremely bound to the entities they define, but the idea is to have a higher level abstraction of a renderer, with implementations in webgl and fallback to canvas where not available. Thus the developer could focus more on his game, and less in the engine internals. Each node/actor/entity should be able to have arbitrary drawing capabilities, and that of line stroking is a must. \n\nSo, i guess, i am reinventing a few wheels at the same time lol ;)\n\nThanks for the feedback.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45225, "question": "yup. I agree, reinventing the wheel is very common, and more in the javascript world. But most of the time is the only way i get to learn something new. trial and error has been by my side for a long time.\n\nthis code snippet belongs to a bigger concept, a general purpose 2d renderer for webgl. It is not only aiming at stroking, but mainly to bring a canvas-like API for webgl rendering. Most game engines around make the rendering extremely bound to the entities they define, but the idea is to have a higher level abstraction of a renderer, with implementations in webgl and fallback to canvas where not available. Thus the developer could focus more on his game, and less in the engine internals. Each node/actor/entity should be able to have arbitrary drawing capabilities, and that of line stroking is a must. \n\nSo, i guess, i am reinventing a few wheels at the same time lol ;)\n\nThanks for the feedback.", "aSentId": 45226, "answer": "Hey, keep it up. It looks well done - I certainly didn't intend for my comment to be perceived as criticism. ", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45227, "question": "Hey, keep it up. It looks well done - I certainly didn't intend for my comment to be perceived as criticism. ", "aSentId": 45228, "answer": "hey man, did not took at all your comment as bad criticism. \nyou were totally right ;)", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45221, "question": "Efficient WebGL stroking", "aSentId": 45230, "answer": "Strange... Dragging works in Chrome but not in Firefox.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45221, "question": "Efficient WebGL stroking", "aSentId": 45232, "answer": "Interesting website.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45235, "question": "Strong Mode for JavaScript", "aSentId": 45236, "answer": "Couldn't this be a linter? ", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45238, "question": "Google Code Jam 2015", "aSentId": 45239, "answer": "Don't forget about the Distributed Code Jam! I'm surprised there isn't a thread with discussion about it yet. It's pretty exciting.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45238, "question": "Google Code Jam 2015", "aSentId": 45241, "answer": "&gt; I would like to receive email notifying me about the next Code Jam.   \n&gt;(This box is checked by default because you checked it previously, possibly last year.) \n\n\nDid not get any email :(\n\n\nMight have missed it without this post. Has happened in the past (although this time it is unlikely that I completely   forget about it since I just happen to use the t-shirt of the previous year as cushion atm &amp;#3232;\\_&amp;#3232;\n)\n", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45243, "question": "Inject external html into your webpage (like an iframe, but not).", "aSentId": 45244, "answer": "Interesting feature. Does it bypass the \"same origin\" security policy? ", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45245, "question": "Interesting feature. Does it bypass the \"same origin\" security policy? ", "aSentId": 45246, "answer": "Yahoo is exposing a proxy that circumvents aspects of the SOP using Cross-Origin Resource Sharing (CORS).", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45243, "question": "Inject external html into your webpage (like an iframe, but not).", "aSentId": 45248, "answer": "....via Yahoo and XML. Ewwww.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45243, "question": "Inject external html into your webpage (like an iframe, but not).", "aSentId": 45250, "answer": "No live examples?", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45252, "question": "If you don't have permission to grab it you're stealing. If you did you could just use ajax. ", "aSentId": 45253, "answer": "&gt;If you don't have permission to grab it you're stealing.\n\nThat's weird, I was told that it was sexual assault this morning.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45252, "question": "If you don't have permission to grab it you're stealing. If you did you could just use ajax. ", "aSentId": 45255, "answer": "No one is breaking the law,  it is just an odd Yahoo service.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45252, "question": "If you don't have permission to grab it you're stealing. If you did you could just use ajax. ", "aSentId": 45257, "answer": "It's the user's web browser requesting it, so...", "corpus": "reddit"}]
