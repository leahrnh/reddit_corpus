[{"docID": "t5_2fwo", "qSentId": 43752, "question": "Unity 5 released", "aSentId": 43753, "answer": "*crosses fingers for 64 bit working*", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43754, "question": "*crosses fingers for 64 bit working*", "aSentId": 43755, "answer": "Looks like it's in there:\nhttp://unity3d.com/unity/whats-new/unity-5.0", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43756, "question": "Looks like it's in there:\nhttp://unity3d.com/unity/whats-new/unity-5.0", "aSentId": 43757, "answer": "Maybe ksp is going to work in 64 bit. I can't even anticipate the amount of mods I'm going to install", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43758, "question": "Maybe ksp is going to work in 64 bit. I can't even anticipate the amount of mods I'm going to install", "aSentId": 43759, "answer": "They won't be upgrading to Unity 5 until after release, unfortunately. (According to recent post by Squad).", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43760, "question": "They won't be upgrading to Unity 5 until after release, unfortunately. (According to recent post by Squad).", "aSentId": 43761, "answer": "Ok got it", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43758, "question": "Maybe ksp is going to work in 64 bit. I can't even anticipate the amount of mods I'm going to install", "aSentId": 43763, "answer": "This is just the editor.  Unity has always been able to export to x64.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43758, "question": "Maybe ksp is going to work in 64 bit. I can't even anticipate the amount of mods I'm going to install", "aSentId": 43765, "answer": "Unity has been able to produce 64 bit windows standalones for a while. It is just the editor that wasn't available as 64 bit version before. There are x64 Ksp builds out there I think. (not sure how good they actually work though)", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43766, "question": "Unity has been able to produce 64 bit windows standalones for a while. It is just the editor that wasn't available as 64 bit version before. There are x64 Ksp builds out there I think. (not sure how good they actually work though)", "aSentId": 43767, "answer": "64-bit ksp may be the least stable thing to ever exist...except on linux machines....it works great of linux machines", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43766, "question": "Unity has been able to produce 64 bit windows standalones for a while. It is just the editor that wasn't available as 64 bit version before. There are x64 Ksp builds out there I think. (not sure how good they actually work though)", "aSentId": 43769, "answer": "Just noticed the other day that there's a 64-bit executable in the folder by default. Didn't test it at the time, but looks like it might already be in the default game.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43756, "question": "Looks like it's in there:\nhttp://unity3d.com/unity/whats-new/unity-5.0", "aSentId": 43771, "answer": "Doesn't that just say the editor will be 64-bit?  I didn't think that necessarily means 64-bit is less crashy.  \n\nBut we can hope\u2026", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43752, "question": "Unity 5 released", "aSentId": 43773, "answer": "What a poor website.  I just gave myself a headache from how much my eyes had to jump around the screen and how sensitive it is to scrolling.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43774, "question": "What a poor website.  I just gave myself a headache from how much my eyes had to jump around the screen and how sensitive it is to scrolling.", "aSentId": 43775, "answer": "Worst website ever, showing me stuff I'm not even interested in. Not to mention no indication of \"when\" I will be able to see the actual content, just endless-mindless scrolling. Ugh.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43776, "question": "Worst website ever, showing me stuff I'm not even interested in. Not to mention no indication of \"when\" I will be able to see the actual content, just endless-mindless scrolling. Ugh.", "aSentId": 43777, "answer": "I really hate this trend of 'scrolling' websites. Other people must like it though because it's fucking everywhere. ", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43778, "question": "I really hate this trend of 'scrolling' websites. Other people must like it though because it's fucking everywhere. ", "aSentId": 43779, "answer": "I think this is partly because of the \"mobile friendly\" initiative. When you are on a mobile, just swipe the screen and you end up navigating the site without clicking links. Sweet!\n\nNow doing that on a PC on the other hand...", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43780, "question": "I think this is partly because of the \"mobile friendly\" initiative. When you are on a mobile, just swipe the screen and you end up navigating the site without clicking links. Sweet!\n\nNow doing that on a PC on the other hand...", "aSentId": 43781, "answer": "If we all get together and each give whoever coined the term 'mobile first' a tiny cut, we can't *all* be tried for murder, right?", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43778, "question": "I really hate this trend of 'scrolling' websites. Other people must like it though because it's fucking everywhere. ", "aSentId": 43783, "answer": "That's like saying people like 3D movies because they're everywhere - when in reality, nobody I know or encounter likes them, but some theaters don't even give you an option.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43778, "question": "I really hate this trend of 'scrolling' websites. Other people must like it though because it's fucking everywhere. ", "aSentId": 43785, "answer": "Blame WordPress. ", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43786, "question": "Blame WordPress. ", "aSentId": 43787, "answer": "Why? Is this a built-in default feature of Wordpress that I don't know of?", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43776, "question": "Worst website ever, showing me stuff I'm not even interested in. Not to mention no indication of \"when\" I will be able to see the actual content, just endless-mindless scrolling. Ugh.", "aSentId": 43789, "answer": "Not sure if we are watching the same page. It one of these modern slideshow webpages where a single tick of the scrollwheel forwards you to the next page. It behaves like in powerpoint.\nI don't like these type of pages either, because people don't seem to grasp the idea how to navigate through them.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43790, "question": "Not sure if we are watching the same page. It one of these modern slideshow webpages where a single tick of the scrollwheel forwards you to the next page. It behaves like in powerpoint.\nI don't like these type of pages either, because people don't seem to grasp the idea how to navigate through them.", "aSentId": 43791, "answer": "I get the idea too, but designers must realise that on a touch pad there is not scroll wheel tick. that's the problem. also scroll highjacking is the worst design decision ever. very unnatural and unintuitive.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43792, "question": "I get the idea too, but designers must realise that on a touch pad there is not scroll wheel tick. that's the problem. also scroll highjacking is the worst design decision ever. very unnatural and unintuitive.", "aSentId": 43793, "answer": "Mm, luckily this one works fine (in Chromium...) with arrow keys. Some *don't* :/.\n\nEdit: What? Yes, the site design still sucks. At least this one sucks *less* than the ones that for whatever reason screw up when you use arrow keys.\n\nNot sure what's making people so cranky. If someone could tell me that'd be great.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43776, "question": "Worst website ever, showing me stuff I'm not even interested in. Not to mention no indication of \"when\" I will be able to see the actual content, just endless-mindless scrolling. Ugh.", "aSentId": 43795, "answer": "You see the navigation tool on the right?\n\nYeah, you can click that to navigate through the different sections, grandpa.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43796, "question": "You see the navigation tool on the right?\n\nYeah, you can click that to navigate through the different sections, grandpa.", "aSentId": 43797, "answer": "Yes, I'm old. Maybe when you are older, you will understand that the worth of something is not the sparkles around it but the value it offers. :)\n\nThe current home-page is fine as a slideshow introduction to Unity but definitely not home-page material. I would personally like to see it choke full of real content which someone would look for when they land on the page in search on a game engine (platform list/pricing/forums/download link etc.)", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43798, "question": "Yes, I'm old. Maybe when you are older, you will understand that the worth of something is not the sparkles around it but the value it offers. :)\n\nThe current home-page is fine as a slideshow introduction to Unity but definitely not home-page material. I would personally like to see it choke full of real content which someone would look for when they land on the page in search on a game engine (platform list/pricing/forums/download link etc.)", "aSentId": 43799, "answer": "80 column formatted ascii, oh yeah. :P\n", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43774, "question": "What a poor website.  I just gave myself a headache from how much my eyes had to jump around the screen and how sensitive it is to scrolling.", "aSentId": 43801, "answer": "New school web for the sake of new school web.  The web designers didn't even know why they were doing what they were doing.  Ugh, just terrible.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43802, "question": "New school web for the sake of new school web.  The web designers didn't even know why they were doing what they were doing.  Ugh, just terrible.", "aSentId": 43803, "answer": "Because their boss saw it on other sites and wanted them to make something similar. ", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43804, "question": "Because their boss saw it on other sites and wanted them to make something similar. ", "aSentId": 43805, "answer": "Am web developer, can confirm.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43804, "question": "Because their boss saw it on other sites and wanted them to make something similar. ", "aSentId": 43807, "answer": "Sad but true probably.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43802, "question": "New school web for the sake of new school web.  The web designers didn't even know why they were doing what they were doing.  Ugh, just terrible.", "aSentId": 43809, "answer": "It's 'new school' because it scales for mobile and can be used easily on tablets. Shitty and lazy.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43774, "question": "What a poor website.  I just gave myself a headache from how much my eyes had to jump around the screen and how sensitive it is to scrolling.", "aSentId": 43811, "answer": "I love the site... Great color scheme, not too distracting design and everything summed up cleanly.\n\n&amp;nbsp;\n\nEdit: FUCK, I was talking about the old Unity5 page, I just saw the new one and you are completely right.\n\n", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43812, "question": "I love the site... Great color scheme, not too distracting design and everything summed up cleanly.\n\n&amp;nbsp;\n\nEdit: FUCK, I was talking about the old Unity5 page, I just saw the new one and you are completely right.\n\n", "aSentId": 43813, "answer": "&gt; not too distracting design\n\nThis is textbook distracting design.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43814, "question": "&gt; not too distracting design\n\nThis is textbook distracting design.", "aSentId": 43815, "answer": "Oooops I just saw the new page, what I said was about the old Unity 5 page.\n\nThis is reaally distracting.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43812, "question": "I love the site... Great color scheme, not too distracting design and everything summed up cleanly.\n\n&amp;nbsp;\n\nEdit: FUCK, I was talking about the old Unity5 page, I just saw the new one and you are completely right.\n\n", "aSentId": 43817, "answer": "Different strokes :)  I lean towards function more than form, and given the question of \"How well does it communicate what Unity 5 is?\" In my opinion it does a poor job.  \n\nHaving content slide in from multiple directions is distracting.  Having the page scroll trigger those slides as opposed to letting me scroll means my eyes have to jump around my browser window as opposed to them staying mostly stationary as the text scrolls underneath my vision.\n\nIn the side-by-side states, they alternate between image on left and image on right which means more eyes jumping all over the place.\n\nIt's aesthetically pleasing, but to me, the experience is consistent with my previous experience with Unity as a whole:  Nice flash, looks great on the surface but as you dig deeper, not so nice.   ", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43818, "question": "Different strokes :)  I lean towards function more than form, and given the question of \"How well does it communicate what Unity 5 is?\" In my opinion it does a poor job.  \n\nHaving content slide in from multiple directions is distracting.  Having the page scroll trigger those slides as opposed to letting me scroll means my eyes have to jump around my browser window as opposed to them staying mostly stationary as the text scrolls underneath my vision.\n\nIn the side-by-side states, they alternate between image on left and image on right which means more eyes jumping all over the place.\n\nIt's aesthetically pleasing, but to me, the experience is consistent with my previous experience with Unity as a whole:  Nice flash, looks great on the surface but as you dig deeper, not so nice.   ", "aSentId": 43819, "answer": "Sorry, I was talking about the old page and I overlooked the new one.\n\nDefinitely distracting.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43825, "question": "Looks awesome on mobile", "aSentId": 43826, "answer": "I choose all my game development platforms on my phone.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43828, "question": "I think that style of site is called parallax. It looks wonderful when done right but most people fuck it up.", "aSentId": 43829, "answer": "Parallax is a related trick, that involves two layers moving at different speeds to give the impression of depth. This is almost just a scroll-activated slideshow presentation, and the technique of using the scroll for things it's not meant to be used for is called 'scroll-jacking'.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43752, "question": "Unity 5 released", "aSentId": 43831, "answer": "Still no linux editor :/\n", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43832, "question": "Still no linux editor :/\n", "aSentId": 43833, "answer": "Just built the unreal editor on my arch box last night, so I'll be sticking with unreal for the forseeable future.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43834, "question": "Just built the unreal editor on my arch box last night, so I'll be sticking with unreal for the forseeable future.", "aSentId": 43835, "answer": "Yeah I did that too, but still have some problems, performance wise is not the best, and for some reason keeps opening windows every time a tooltip appears or a hover over a menu is done, those are invisible, but is pretty annoying in the taskbar.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43836, "question": "Yeah I did that too, but still have some problems, performance wise is not the best, and for some reason keeps opening windows every time a tooltip appears or a hover over a menu is done, those are invisible, but is pretty annoying in the taskbar.", "aSentId": 43837, "answer": "Yeah, those effing tooltips are already driving me crazy", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43838, "question": "Yeah, those effing tooltips are already driving me crazy", "aSentId": 43839, "answer": "At least we know it's going to get better, unreal seem quite committed to Linux as of now.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43834, "question": "Just built the unreal editor on my arch box last night, so I'll be sticking with unreal for the forseeable future.", "aSentId": 43841, "answer": "Yeah i'm going to stick with unreal as well, since their pricing is really nice now as well + source access.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43832, "question": "Still no linux editor :/\n", "aSentId": 43843, "answer": "You would think getting the editor to run under linux wouldn't be much harder than getting it to run under osx.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43832, "question": "Still no linux editor :/\n", "aSentId": 43845, "answer": "But I thought\n\n&gt; **Your opinion counts**\n\n&gt; Help us make things better. Share your great idea for improving Unity or vote for other people\u2019s.\n\nhttp://feedback.unity3d.com/forums/unity/suggestions?utf8=%E2%9C%93&amp;status=&amp;category=&amp;view=most_voted", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43846, "question": "But I thought\n\n&gt; **Your opinion counts**\n\n&gt; Help us make things better. Share your great idea for improving Unity or vote for other people\u2019s.\n\nhttp://feedback.unity3d.com/forums/unity/suggestions?utf8=%E2%9C%93&amp;status=&amp;category=&amp;view=most_voted", "aSentId": 43847, "answer": "Exactly, that alone is a reason to use another engine.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43852, "question": "As a person with some basic programming skills, would learning Unity be trying to jump too large of a skill gap?", "aSentId": 43853, "answer": "As a hardcore coder, I find unity geared towards being user friendly with 3D modellers, and less so towards coders.\n\nSo... If you have plenty of Maya or 3DS Max experience, I think it'd be relatively easy to start making games with zero experience. ", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43854, "question": "As a hardcore coder, I find unity geared towards being user friendly with 3D modellers, and less so towards coders.\n\nSo... If you have plenty of Maya or 3DS Max experience, I think it'd be relatively easy to start making games with zero experience. ", "aSentId": 43855, "answer": "This is what I struggle with. What engines are you using instead?", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43856, "question": "This is what I struggle with. What engines are you using instead?", "aSentId": 43857, "answer": "Personally I use libgdx right now, it has a bit of a learning curve, but incredibly powerful. ", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43854, "question": "As a hardcore coder, I find unity geared towards being user friendly with 3D modellers, and less so towards coders.\n\nSo... If you have plenty of Maya or 3DS Max experience, I think it'd be relatively easy to start making games with zero experience. ", "aSentId": 43859, "answer": "This is why I gave up on it when I saw it. I really hated feeling like I was in 3ds max or something. I just want a nice text editor with syntax highlighting. ", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43860, "question": "This is why I gave up on it when I saw it. I really hated feeling like I was in 3ds max or something. I just want a nice text editor with syntax highlighting. ", "aSentId": 43861, "answer": "Use VS instead? The engine is just a visual guiding tool. You code the rest of the stuffs with different tools specialized for it.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43862, "question": "Use VS instead? The engine is just a visual guiding tool. You code the rest of the stuffs with different tools specialized for it.", "aSentId": 43863, "answer": "I'm strictly a Mac and Linux user. The only reason I have Windows is for games I can't play on my two preferred platforms. If I could have a JetBrains IDE for C# I'd be so happy, but as of right now, JetBrains only makes ReSharper, which is a VS plugin, and thus Windows-only. \n\nHopefully this will change now that there is actual interest in C# on Mac/Linux, with the open-sourcing of .NET Core.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43864, "question": "I'm strictly a Mac and Linux user. The only reason I have Windows is for games I can't play on my two preferred platforms. If I could have a JetBrains IDE for C# I'd be so happy, but as of right now, JetBrains only makes ReSharper, which is a VS plugin, and thus Windows-only. \n\nHopefully this will change now that there is actual interest in C# on Mac/Linux, with the open-sourcing of .NET Core.", "aSentId": 43865, "answer": "MonoDevelop", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43866, "question": "MonoDevelop", "aSentId": 43867, "answer": "Hmm, I haven't actually ever used it. I should give it a shot. Thanks.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43852, "question": "As a person with some basic programming skills, would learning Unity be trying to jump too large of a skill gap?", "aSentId": 43869, "answer": "I'm currently using it for a game design class and don't think it's too hard. Most everything that isn't obvious can be found easily with a google search.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43852, "question": "As a person with some basic programming skills, would learning Unity be trying to jump too large of a skill gap?", "aSentId": 43871, "answer": "I'm just starting to learn Unity 4 (there don't seem to be significant chagnes with Unity 5 at this level, as far as I can tell from reading the release notes) using this tutorial:\n\nhttp://cgcookie.com/unity/cgc-courses/crash-course-learn-unity/", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43875, "question": "With Unreal Engine 4 out for free, the competition here is gonna get pretty tight. ", "aSentId": 43876, "answer": "I was thinking of trying out unreal but now unity supports webGl and has some new features so I don't know what to do now.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43877, "question": "I was thinking of trying out unreal but now unity supports webGl and has some new features so I don't know what to do now.", "aSentId": 43878, "answer": "Try both", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43877, "question": "I was thinking of trying out unreal but now unity supports webGl and has some new features so I don't know what to do now.", "aSentId": 43880, "answer": "If I recall correctly they were able to port UE game to browser with asm.js too. ", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43875, "question": "With Unreal Engine 4 out for free, the competition here is gonna get pretty tight. ", "aSentId": 43882, "answer": "I wouldn't call 5% royalties free.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43883, "question": "I wouldn't call 5% royalties free.", "aSentId": 43884, "answer": "After the first $3000 made.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43885, "question": "After the first $3000 made.", "aSentId": 43886, "answer": "*Free for crappy games that don't sell well.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43887, "question": "*Free for crappy games that don't sell well.", "aSentId": 43888, "answer": "Which sounds pretty fair to me. Hobbyists get the engine for free and can seamlessly transfer to the commercial world later on if need be.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43889, "question": "Which sounds pretty fair to me. Hobbyists get the engine for free and can seamlessly transfer to the commercial world later on if need be.", "aSentId": 43890, "answer": "It's the same for Unity now, really.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43891, "question": "It's the same for Unity now, really.", "aSentId": 43892, "answer": "Not really, no source access and very limited toolset available to those who want to make crappy games - rather than the unlimited toolset available to Unreal users.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43891, "question": "It's the same for Unity now, really.", "aSentId": 43894, "answer": "Is Unity being used by any AAA games? I know Unreal Engine has a large array of AAA games under its belt. The last comparison of the two engines I read basically said for mobile use Unity, otherwise use Unreal.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43895, "question": "Is Unity being used by any AAA games? I know Unreal Engine has a large array of AAA games under its belt. The last comparison of the two engines I read basically said for mobile use Unity, otherwise use Unreal.", "aSentId": 43896, "answer": "I agree with the mobile part, but I was really saying that for both engines, hobbyists basically get them for free, and can switch to being more 'commercial' if they grow.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43887, "question": "*Free for crappy games that don't sell well.", "aSentId": 43898, "answer": "99.99% games out there.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43887, "question": "*Free for crappy games that don't sell well.", "aSentId": 43900, "answer": "And if there were no royalties for games that do sell well then it wouldn't be available *at all in the first place*. The way some people are talking you'd think they'd prefer that it didn't even exist!", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43885, "question": "After the first $3000 made.", "aSentId": 43903, "answer": "That's $3000 per quarter per product. Yes, $12k isn't anything to write home about, but if you could manage to get multiple small time games going you could start netting yourself a decent amount of money. Hell, if you can get even 1 going that might let someone quit their job and work full time on an even more successful game.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43905, "question": "First, UE4 becoming free, and now this? awh lord!", "aSentId": 43906, "answer": "GDC - everyone is making their announcements.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43909, "question": "Has anyone made a AAA title in Unity yet? All I see is apps and flappy bird clones.", "aSentId": 43910, "answer": "Depends on your definition of AAA. Hearthstone is pretty popular. If you mean big budget (100+million), idk. Nothing close to the scale of battlefield or call of duty at least. ", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43912, "question": "I thought that Unity 5 was going to have Linux support. I still don't see a Linux button on their download page. What the fuck.", "aSentId": 43913, "answer": "They probably meant deployable to Linux. ", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43914, "question": "They probably meant deployable to Linux. ", "aSentId": 43915, "answer": "AFAIK you could deploy to Linux in Unity 4 too.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43912, "question": "I thought that Unity 5 was going to have Linux support. I still don't see a Linux button on their download page. What the fuck.", "aSentId": 43917, "answer": "Man get a grip just get a decent box and run it in virtual windows box! Windows programs run better that way!\n", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43920, "question": "Release notes: http://unity3d.com/unity/whats-new/unity-5.0", "aSentId": 43921, "answer": "Are compute shaders still windows only?", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43922, "question": "Are compute shaders still windows only?", "aSentId": 43923, "answer": "Yup. I'm sticking with Unreal. ", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43925, "question": "Can you Deploy to ios iphone for free?  They have a ios pro version, so what is that ???? ", "aSentId": 43926, "answer": "Yes. Pro version removes the Unity personal splash screen and is required if you don't meet the revenue requirements.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43927, "question": "Yes. Pro version removes the Unity personal splash screen and is required if you don't meet the revenue requirements.", "aSentId": 43928, "answer": "Wow that's pretty cool!", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43925, "question": "Can you Deploy to ios iphone for free?  They have a ios pro version, so what is that ???? ", "aSentId": 43930, "answer": "No Unity splash screen.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43935, "question": "Could this be related to Unreal 4's release for free? Lets hope it is not rushed.", "aSentId": 43936, "answer": "It's GDC, where everyone is announcing all their everything.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43937, "question": "It's GDC, where everyone is announcing all their everything.", "aSentId": 43938, "answer": "I'm not complaining. This direction of free engines is great for the indie developer.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43940, "question": "You would think that for a tool meant for programmers would come with a website that doesn't have retina destroying, bright-white backgrounds. But of course, that would be too much to ask for.", "aSentId": 43941, "answer": "Nevermind the actual tools. All-bright backgrounds. Want a dark skin? lol, nope, only with pro license.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43940, "question": "You would think that for a tool meant for programmers would come with a website that doesn't have retina destroying, bright-white backgrounds. But of course, that would be too much to ask for.", "aSentId": 43943, "answer": "It's funny, since I'm reading this in the programming subreddit, which also has a bright-white background.\n\n(Full disclosure:  Am a programmer that doesn't mind white backgrounds.)", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43944, "question": "It's funny, since I'm reading this in the programming subreddit, which also has a bright-white background.\n\n(Full disclosure:  Am a programmer that doesn't mind white backgrounds.)", "aSentId": 43945, "answer": "RES night mode bro. Some of us probably forget that Reddit is normally white.\n\nMyself, I forgot to enable night mode :|. Reddit's much easier on the eyes now :).", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43944, "question": "It's funny, since I'm reading this in the programming subreddit, which also has a bright-white background.\n\n(Full disclosure:  Am a programmer that doesn't mind white backgrounds.)", "aSentId": 43947, "answer": "Everyone knows green on black means your haxing.  But seriously, white backgrounds is where is is at.  I never much liked syntax highlighting over dark.  \n\nAnd I have been using a screen long enough that it my eyes don't get tired anymore.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43944, "question": "It's funny, since I'm reading this in the programming subreddit, which also has a bright-white background.\n\n(Full disclosure:  Am a programmer that doesn't mind white backgrounds.)", "aSentId": 43949, "answer": "The site doesn't work very well with the mods I've made to my instance of firefox to force a dark background, so I had to load it in chrome and immediately regretted my decision. Reddit works just fine with BYM though, so I get a nice dark background all the time here. Oh and besides... reddit isn't a tool made for programmers. They don't have to know any better.\n\n&gt;  Am a programmer that doesn't mind white backgrounds\n\nCurious... how often are you in front of a computer?", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43950, "question": "The site doesn't work very well with the mods I've made to my instance of firefox to force a dark background, so I had to load it in chrome and immediately regretted my decision. Reddit works just fine with BYM though, so I get a nice dark background all the time here. Oh and besides... reddit isn't a tool made for programmers. They don't have to know any better.\n\n&gt;  Am a programmer that doesn't mind white backgrounds\n\nCurious... how often are you in front of a computer?", "aSentId": 43951, "answer": "&gt;Oh and besides... reddit isn't a tool made for programmers. They don't have to know any better.\n\nTrue, although /r/programming is.\n\n&gt;Curious... how often are you in front of a computer?\n\nWhat, do we have to play \"prove your programming chops\" now? :P  On average, I probably spend 6-8 hours per day in front of a computer for work, and another 2-3 most evenings at home.\n\nThe \"dark backgrounds are better\" thing isn't some hard rule.  It's just what some people find preferable.  Which is fine!  People should do whatever makes them the most comfortable.  Just not, you know, confuse personal preference with universal truth. :)", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43952, "question": "&gt;Oh and besides... reddit isn't a tool made for programmers. They don't have to know any better.\n\nTrue, although /r/programming is.\n\n&gt;Curious... how often are you in front of a computer?\n\nWhat, do we have to play \"prove your programming chops\" now? :P  On average, I probably spend 6-8 hours per day in front of a computer for work, and another 2-3 most evenings at home.\n\nThe \"dark backgrounds are better\" thing isn't some hard rule.  It's just what some people find preferable.  Which is fine!  People should do whatever makes them the most comfortable.  Just not, you know, confuse personal preference with universal truth. :)", "aSentId": 43953, "answer": "I'm only asking how long you spent in front of a computer because it matters. The more time you spend in front of the machine, the more stressfull a bright background is to you. I'm usually in front of my machine 10+ hours a day. After several years of this, it started really, really hurting my eyes. Switching to all dark everything was the only way to keep going. As soon as I switched, the pain went away.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43954, "question": "I'm only asking how long you spent in front of a computer because it matters. The more time you spend in front of the machine, the more stressfull a bright background is to you. I'm usually in front of my machine 10+ hours a day. After several years of this, it started really, really hurting my eyes. Switching to all dark everything was the only way to keep going. As soon as I switched, the pain went away.", "aSentId": 43955, "answer": "Well, again, I suspect that's more of a \"true for some people\" sort of thing, than a \"true for everyone\" thing.  Since I've certainly spent years spending 10+ staring at screens, most of them with white backgrounds, and it has never been an issue for me.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43956, "question": "Well, again, I suspect that's more of a \"true for some people\" sort of thing, than a \"true for everyone\" thing.  Since I've certainly spent years spending 10+ staring at screens, most of them with white backgrounds, and it has never been an issue for me.", "aSentId": 43957, "answer": "Well, yes, everyone is affected differently. That doesn't make it a matter of preference. I cannot simply prefer a bright background. I *have* to use a dark background or I cannot work. My body won't let me.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43958, "question": "Well, yes, everyone is affected differently. That doesn't make it a matter of preference. I cannot simply prefer a bright background. I *have* to use a dark background or I cannot work. My body won't let me.", "aSentId": 43959, "answer": "I'm sure you *could*, it would just be painful and inefficient. I think you're confusing \"preference\" with \"choice\".\n\n(e.g. gay men prefer other men, but didn't choose their preference)", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43958, "question": "Well, yes, everyone is affected differently. That doesn't make it a matter of preference. I cannot simply prefer a bright background. I *have* to use a dark background or I cannot work. My body won't let me.", "aSentId": 43961, "answer": "Sure, and no one is suggesting otherwise.  The only thing I was disputing was your implied claim, in the original comment, that all actual programmers prefer things other than \"white, retina-destroying backgrounds\"  Maybe preference was the wrong word, but either way, white vs. dark backgrounds is a choice that is made per-person, rather than a sweeping generalization.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43962, "question": "Sure, and no one is suggesting otherwise.  The only thing I was disputing was your implied claim, in the original comment, that all actual programmers prefer things other than \"white, retina-destroying backgrounds\"  Maybe preference was the wrong word, but either way, white vs. dark backgrounds is a choice that is made per-person, rather than a sweeping generalization.", "aSentId": 43963, "answer": "Yeah, exactly. You made up a strawman and happily started arguing away. It isn't that all programmers have a preference, it's that if you know you're going to be marketing to a group of people *where a significant portion* (but not all) have sensitive eyes, maybe you should consider the option that won't actually hurt them in an attempt to be more inclusive. No, clearly I'm saying that all programmers have to prefer dark backgrounds, right?", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43940, "question": "You would think that for a tool meant for programmers would come with a website that doesn't have retina destroying, bright-white backgrounds. But of course, that would be too much to ask for.", "aSentId": 43965, "answer": "Switching between dark and and bright text background is worse than having only bright backgrounds. And as most websites out there have a bright background I'm using bright colors in my editors as well. ", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43969, "question": "At $75/month its going to keep a lot of people away.", "aSentId": 43970, "answer": "Just use the personal edition...?", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43971, "question": "Just use the personal edition...?", "aSentId": 43972, "answer": "Anyone know if the personal edition plays well with version control? I seem to remember that version control required a team license, which was only available with pro.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43973, "question": "Anyone know if the personal edition plays well with version control? I seem to remember that version control required a team license, which was only available with pro.", "aSentId": 43974, "answer": "I use the free version of 4 and don't have an issue.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43973, "question": "Anyone know if the personal edition plays well with version control? I seem to remember that version control required a team license, which was only available with pro.", "aSentId": 43976, "answer": "It works the same as any other version, unity has its own team server thingy that yes requires pro, but good old git or svn works fine too.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43973, "question": "Anyone know if the personal edition plays well with version control? I seem to remember that version control required a team license, which was only available with pro.", "aSentId": 43978, "answer": "So long as you set your assets to save in text instead of binary, you should be fine.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43981, "question": "What type of version control? Me and a mate use SVN, works pretty decent if your team is small.", "aSentId": 43982, "answer": "I don't understand why people still use SVN today. Git is superior in every aspect.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43983, "question": "I don't understand why people still use SVN today. Git is superior in every aspect.", "aSentId": 43984, "answer": "Not for Unity", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43985, "question": "Not for Unity", "aSentId": 43986, "answer": "Why not?", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43983, "question": "I don't understand why people still use SVN today. Git is superior in every aspect.", "aSentId": 43988, "answer": "Git does not handle large binary files well, which is almost every asset in a Unity3D game, excluding scripts.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43989, "question": "Git does not handle large binary files well, which is almost every asset in a Unity3D game, excluding scripts.", "aSentId": 43990, "answer": "Neither does SVN. Really you'd want Perforce or PlasticSCM for that. Also as far as I'm aware if you set it up correctly, every Unity engine associated file is text-based (materials, prefabs, etc...), by enabling `Force Text` in `Edit \u2192 Project Settings \u2192 Editor \u2192 Asset Serialization Mode`", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43983, "question": "I don't understand why people still use SVN today. Git is superior in every aspect.", "aSentId": 43992, "answer": "&gt; Git is superior in every aspect.\n\nExcept simplicity. ", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43993, "question": "&gt; Git is superior in every aspect.\n\nExcept simplicity. ", "aSentId": 43994, "answer": "Care to explain? I've used both and generally find Git to always be simpler. /u/forthex makes a good point, though. It does struggle with large binary files.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43995, "question": "Care to explain? I've used both and generally find Git to always be simpler. /u/forthex makes a good point, though. It does struggle with large binary files.", "aSentId": 43996, "answer": "Neither handles binary files very well. If you want to version your binary assets, use PlasticSCM or Perforce.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43997, "question": "Neither handles binary files very well. If you want to version your binary assets, use PlasticSCM or Perforce.", "aSentId": 43998, "answer": "Huh, I suppose I never did much large blob handling it SVN. I'll keep that in mind, thanks.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43999, "question": "Huh, I suppose I never did much large blob handling it SVN. I'll keep that in mind, thanks.", "aSentId": 44000, "answer": "Also note that you can make Unity use text instead of binary for most of its files by selecting `Force Text` under `Edit \u2192 Project Settings \u2192 Editor \u2192 Asset Serialization Mode`", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43995, "question": "Care to explain? I've used both and generally find Git to always be simpler. /u/forthex makes a good point, though. It does struggle with large binary files.", "aSentId": 44002, "answer": "Svn commit\n\nvs\n\ngit pull git commit -A git merge git push", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44003, "question": "Svn commit\n\nvs\n\ngit pull git commit -A git merge git push", "aSentId": 44004, "answer": "It's more like\n\n    svn update\n    # do the edit\n    svn commit\n\nvs \n\n    git pull\n    # do the edit\n    git commit -A\n    git push\n\nYou don't need the `git merge` for this simple case, and you need to update SVN's local copy just like you need to update Git's.\n\nBut then if you need to have multiple developers working on the same thing at the same time, Git's branching system is definitely cleaner. I also like the one \".git\" directory vs the massive number of \".svn\" directories.\n\nSVN isn't necessarily better and in *some* cases is simpler, but Git is more flexible and much simpler for many *other* cases.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44005, "question": "It's more like\n\n    svn update\n    # do the edit\n    svn commit\n\nvs \n\n    git pull\n    # do the edit\n    git commit -A\n    git push\n\nYou don't need the `git merge` for this simple case, and you need to update SVN's local copy just like you need to update Git's.\n\nBut then if you need to have multiple developers working on the same thing at the same time, Git's branching system is definitely cleaner. I also like the one \".git\" directory vs the massive number of \".svn\" directories.\n\nSVN isn't necessarily better and in *some* cases is simpler, but Git is more flexible and much simpler for many *other* cases.", "aSentId": 44006, "answer": "SVN only has one .svn directory since version 1.7. ", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44003, "question": "Svn commit\n\nvs\n\ngit pull git commit -A git merge git push", "aSentId": 44008, "answer": "And if you want a local branch, etc...? Simpler doesn't necessarily equal superiority. Git isn't particularly that much more complex than svn.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44009, "question": "And if you want a local branch, etc...? Simpler doesn't necessarily equal superiority. Git isn't particularly that much more complex than svn.", "aSentId": 44010, "answer": "I never said it was better. Only that it is simpler. \n\nI use git for most of my projects. ", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43971, "question": "Just use the personal edition...?", "aSentId": 44012, "answer": "Does personal edition have shadows (hard and soft) for omnidirectional lights?", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44013, "question": "Does personal edition have shadows (hard and soft) for omnidirectional lights?", "aSentId": 44014, "answer": "The personal edition includes all engine features.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44013, "question": "Does personal edition have shadows (hard and soft) for omnidirectional lights?", "aSentId": 44016, "answer": "It does now", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44013, "question": "Does personal edition have shadows (hard and soft) for omnidirectional lights?", "aSentId": 44018, "answer": "Personal edition includes everything except\n\n* Unity Cloud Build Pro\n\n* Access to Betas/Previews\n\n* Unity Analytics Pro\n\n* Game Performance Reporting\n\n* Unity Asset Store Level 11 Deals\n\nBut for the Personal Edition, your project must have revenue/funding less than $100 000", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44019, "question": "Personal edition includes everything except\n\n* Unity Cloud Build Pro\n\n* Access to Betas/Previews\n\n* Unity Analytics Pro\n\n* Game Performance Reporting\n\n* Unity Asset Store Level 11 Deals\n\nBut for the Personal Edition, your project must have revenue/funding less than $100 000", "aSentId": 44020, "answer": "5% is so much easier to process, isn't it?", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44021, "question": "5% is so much easier to process, isn't it?", "aSentId": 44022, "answer": "5% of gross (Unreal) is a lot harder to process than 0% royalties (Unity) with a yearly subscription if you ask me, and potentially more expensive.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44023, "question": "5% of gross (Unreal) is a lot harder to process than 0% royalties (Unity) with a yearly subscription if you ask me, and potentially more expensive.", "aSentId": 44024, "answer": "No there is more...\nFor Unity 5 Professional Edition\n\n&gt;Unity 5 Professional customers who earned/received more than $100,000 in &gt;revenue/funding in the previous fiscal year must purchase iOS Pro and/or Android Pro &gt;deployment add-ons to deploy to these platforms. The iOS and Android Pro add-ons enable &gt;deployment without the Personal Edition splash screen.\n&gt;\n&gt;Unity 5 Professional customers who earned/received less than $100,000 in revenue/funding &gt;in the previous fiscal year can deploy with included iOS and Android support with the &gt;Personal Edition splash screen.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44025, "question": "No there is more...\nFor Unity 5 Professional Edition\n\n&gt;Unity 5 Professional customers who earned/received more than $100,000 in &gt;revenue/funding in the previous fiscal year must purchase iOS Pro and/or Android Pro &gt;deployment add-ons to deploy to these platforms. The iOS and Android Pro add-ons enable &gt;deployment without the Personal Edition splash screen.\n&gt;\n&gt;Unity 5 Professional customers who earned/received less than $100,000 in revenue/funding &gt;in the previous fiscal year can deploy with included iOS and Android support with the &gt;Personal Edition splash screen.", "aSentId": 44026, "answer": "Yes but that's a flat rate you pay annually, and it doesn't change along with your revenue unlike royalties. You pay nothing until you reach $100,000 then you pay a flat X every year. That's it.\n\nOver at Unreal you have to pay 5% of gross after the first $3000 per quarter. So first you have to calculate how much gross income the game made (that's before expenses, taxes, and whatever cut Google/Apple/Whoever takes). Anything more than $3000 you have to cut a check to Epic for 5% of *that*. And you have to do that *quarterly*. That's a lot of accounting.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44027, "question": "Yes but that's a flat rate you pay annually, and it doesn't change along with your revenue unlike royalties. You pay nothing until you reach $100,000 then you pay a flat X every year. That's it.\n\nOver at Unreal you have to pay 5% of gross after the first $3000 per quarter. So first you have to calculate how much gross income the game made (that's before expenses, taxes, and whatever cut Google/Apple/Whoever takes). Anything more than $3000 you have to cut a check to Epic for 5% of *that*. And you have to do that *quarterly*. That's a lot of accounting.", "aSentId": 44028, "answer": "Its one multiplication operation. That is not a lot of accounting. I sure hope developer is keeping track of gross income and other distribution fees - which has nothing to do with Epic and you'd have to do it anyway with flat fees.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44029, "question": "Its one multiplication operation. That is not a lot of accounting. I sure hope developer is keeping track of gross income and other distribution fees - which has nothing to do with Epic and you'd have to do it anyway with flat fees.", "aSentId": 44030, "answer": "A tiered multiplication operation is still more complex than a tiered flat rate.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44033, "question": "It appears that way. The only features missing is customizable splash screen, team collaboration tools (what is it?), and cloud services for profiling and performance. And dark theme that is just petty to not give away for free.\n\nI am not sure if one can profile the game without those features. Its kind of a big deal to some. Splash screen is a small annoyance.\n\nThere is another engine out there with much simpler licensing model where I dont have to worry about any of this. But yes in case of great success it will cost more.", "aSentId": 44034, "answer": "ALL the old Pro features are available in the Personal edition (except the dark skin) including the profiler. They really messed up the messaging on this one..", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44035, "question": "ALL the old Pro features are available in the Personal edition (except the dark skin) including the profiler. They really messed up the messaging on this one..", "aSentId": 44036, "answer": "thx for clarifying this one!", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44033, "question": "It appears that way. The only features missing is customizable splash screen, team collaboration tools (what is it?), and cloud services for profiling and performance. And dark theme that is just petty to not give away for free.\n\nI am not sure if one can profile the game without those features. Its kind of a big deal to some. Splash screen is a small annoyance.\n\nThere is another engine out there with much simpler licensing model where I dont have to worry about any of this. But yes in case of great success it will cost more.", "aSentId": 44038, "answer": "Having setup VS and Reddit and GMail and everything I can as a dark theme, being forced to use a bright theme in Unity is a huge pain in the ass for me. I may be overreacting but this really makes me want to use Unreal instead.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44039, "question": "Having setup VS and Reddit and GMail and everything I can as a dark theme, being forced to use a bright theme in Unity is a huge pain in the ass for me. I may be overreacting but this really makes me want to use Unreal instead.", "aSentId": 44040, "answer": "Its just petty. Like their old licensing model. Its not a feature that is going to deter anyone from paying for the engine, neither is splash screen - its just a small annoyance which is designed to irritate. \n\nOk fine I'll give you $75 a month my eyes hurt!", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44041, "question": "Its just petty. Like their old licensing model. Its not a feature that is going to deter anyone from paying for the engine, neither is splash screen - its just a small annoyance which is designed to irritate. \n\nOk fine I'll give you $75 a month my eyes hurt!", "aSentId": 44042, "answer": "Yea, I agree. I don't see why they had to put that as a pro feature. It's not like it's going to make anyone buy it for it. I really think it should be customizable instead, as the editor clearly supports it. It'd be kind of like making color-blind features available only in Pro.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44033, "question": "It appears that way. The only features missing is customizable splash screen, team collaboration tools (what is it?), and cloud services for profiling and performance. And dark theme that is just petty to not give away for free.\n\nI am not sure if one can profile the game without those features. Its kind of a big deal to some. Splash screen is a small annoyance.\n\nThere is another engine out there with much simpler licensing model where I dont have to worry about any of this. But yes in case of great success it will cost more.", "aSentId": 44044, "answer": "Team license info @ http://unity3d.com/unity/collaboration\n\nCan apparently purchase it with personal edition for $20/mo .  Basically seems to be more official support for version control.  They link to asset store addons that apparently add support for things like GIT but are not officially supported.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44047, "question": "Microsoft should immediately start porting Minecraft to Unity so people can be freed of the java cancer and all the retarded crapware bundled with it. (and shut the fuck up the mouths of all the linturds who claimed MS was going to remove Minecraft support for non MS platforms, and all that bullshit)", "aSentId": 44048, "answer": "I'm betting the overhead from using a general purpose engine will just make it even slower. Games like Minecraft really need a purpose-built engine.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44049, "question": "I'm betting the overhead from using a general purpose engine will just make it even slower. Games like Minecraft really need a purpose-built engine.", "aSentId": 44050, "answer": "Sort of. The major issue with Minecraft is the server's performance. That should definitely be written in pure C++.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44051, "question": "Sort of. The major issue with Minecraft is the server's performance. That should definitely be written in pure C++.", "aSentId": 44052, "answer": "Rewriting the server in C++ will never improve the speed of the algorithms. If it's O(n\u00b2) in Java, it's still O(n\u00b2) in C++", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44053, "question": "Rewriting the server in C++ will never improve the speed of the algorithms. If it's O(n\u00b2) in Java, it's still O(n\u00b2) in C++", "aSentId": 44054, "answer": "Yes, because big O notation is obviously the only measure of performance in computers, right? I mean, the algorithms still run in O(n^2 ) in Perl. Should we write the server in Perl?", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44053, "question": "Rewriting the server in C++ will never improve the speed of the algorithms. If it's O(n\u00b2) in Java, it's still O(n\u00b2) in C++", "aSentId": 44056, "answer": "but after spending millions to completely re write, the software will run these n^2 algorithms 20% faster!! \n\n/s", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44051, "question": "Sort of. The major issue with Minecraft is the server's performance. That should definitely be written in pure C++.", "aSentId": 44058, "answer": "You mean in go.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44047, "question": "Microsoft should immediately start porting Minecraft to Unity so people can be freed of the java cancer and all the retarded crapware bundled with it. (and shut the fuck up the mouths of all the linturds who claimed MS was going to remove Minecraft support for non MS platforms, and all that bullshit)", "aSentId": 44060, "answer": "Reading down and see you say retarded in every comment. What a vocabulary. I think I can port your comments to another language pretty easily because it's so simplistic. ", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44061, "question": "Reading down and see you say retarded in every comment. What a vocabulary. I think I can port your comments to another language pretty easily because it's so simplistic. ", "aSentId": 44062, "answer": "I don't give a fuck.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44063, "question": "I don't give a fuck.", "aSentId": 44064, "answer": "Aww you didn't say retarded that time. I'm disappointed man. ", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44063, "question": "I don't give a fuck.", "aSentId": 44066, "answer": "What a retarded come back", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44047, "question": "Microsoft should immediately start porting Minecraft to Unity so people can be freed of the java cancer and all the retarded crapware bundled with it. (and shut the fuck up the mouths of all the linturds who claimed MS was going to remove Minecraft support for non MS platforms, and all that bullshit)", "aSentId": 44068, "answer": "What about the mods though?", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44069, "question": "What about the mods though?", "aSentId": 44070, "answer": "java code can be automatically ported to C# since java is basically a retarded subset of C# 2.0 from 2005. There can be a *convert-your-crappy-java-code-from-the-90s-to-a-proper-decent-modern-non-retarded-language-as-a-service* in the cloud or something.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44071, "question": "java code can be automatically ported to C# since java is basically a retarded subset of C# 2.0 from 2005. There can be a *convert-your-crappy-java-code-from-the-90s-to-a-proper-decent-modern-non-retarded-language-as-a-service* in the cloud or something.", "aSentId": 44072, "answer": "&gt; java code can be automatically ported to C#\n\nEr. No. No it can't.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44071, "question": "java code can be automatically ported to C# since java is basically a retarded subset of C# 2.0 from 2005. There can be a *convert-your-crappy-java-code-from-the-90s-to-a-proper-decent-modern-non-retarded-language-as-a-service* in the cloud or something.", "aSentId": 44074, "answer": "It's that easy? If that's true then my teachers should have taught me about c# rather than java", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44075, "question": "It's that easy? If that's true then my teachers should have taught me about c# rather than java", "aSentId": 44076, "answer": "It's not. /u/agleiv is a troll.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44077, "question": "It's not. /u/agleiv is a troll.", "aSentId": 44078, "answer": "Oh ok. \n\nWhen thinking about it: java got a lot of development and works rather different from c# afaik (im not experienced in programming) ", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44075, "question": "It's that easy? If that's true then my teachers should have taught me about c# rather than java", "aSentId": 44080, "answer": "To be fair I would say that c# is a more powerful language than java (purposefully avoiding \"better\" as it's so subjective). C# being developed after java was able to take many of the positive features while scraping the negative ones. Also to some extent /u/agleiv is correct about java code being easily ported to c# (it's almost a subset of c#), but I'm sure the result would need some manual touch up. Obviously he has a strong personal vendetta against java, but if platform independence isn't of concern c# is an excellent idea and supports many low level features (structs, unsafe memory, etc) that could be conducive to game development.\n\nNote: There is mono - http://www.mono-project.com/ for cross-platform c#, but haven't used it personally", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44081, "question": "To be fair I would say that c# is a more powerful language than java (purposefully avoiding \"better\" as it's so subjective). C# being developed after java was able to take many of the positive features while scraping the negative ones. Also to some extent /u/agleiv is correct about java code being easily ported to c# (it's almost a subset of c#), but I'm sure the result would need some manual touch up. Obviously he has a strong personal vendetta against java, but if platform independence isn't of concern c# is an excellent idea and supports many low level features (structs, unsafe memory, etc) that could be conducive to game development.\n\nNote: There is mono - http://www.mono-project.com/ for cross-platform c#, but haven't used it personally", "aSentId": 44082, "answer": "Thanks for the nice explanation", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44081, "question": "To be fair I would say that c# is a more powerful language than java (purposefully avoiding \"better\" as it's so subjective). C# being developed after java was able to take many of the positive features while scraping the negative ones. Also to some extent /u/agleiv is correct about java code being easily ported to c# (it's almost a subset of c#), but I'm sure the result would need some manual touch up. Obviously he has a strong personal vendetta against java, but if platform independence isn't of concern c# is an excellent idea and supports many low level features (structs, unsafe memory, etc) that could be conducive to game development.\n\nNote: There is mono - http://www.mono-project.com/ for cross-platform c#, but haven't used it personally", "aSentId": 44084, "answer": "&gt; platform independence \n\nI love how people keep coming up with that, dismissing the fact that java isn't even officially supported on iOS (without resorting to a third party \"plugin\" of dubious quality that's in beta atm), and not even properly supported on Android itself (since java 8 isn't supported there), while C# can reach 21 platforms thru Unity alone (and Unity supports C# as opposed to retarded worthless java).", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44085, "question": "&gt; platform independence \n\nI love how people keep coming up with that, dismissing the fact that java isn't even officially supported on iOS (without resorting to a third party \"plugin\" of dubious quality that's in beta atm), and not even properly supported on Android itself (since java 8 isn't supported there), while C# can reach 21 platforms thru Unity alone (and Unity supports C# as opposed to retarded worthless java).", "aSentId": 44086, "answer": "C# isn't officially supported on iOS either.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44085, "question": "&gt; platform independence \n\nI love how people keep coming up with that, dismissing the fact that java isn't even officially supported on iOS (without resorting to a third party \"plugin\" of dubious quality that's in beta atm), and not even properly supported on Android itself (since java 8 isn't supported there), while C# can reach 21 platforms thru Unity alone (and Unity supports C# as opposed to retarded worthless java).", "aSentId": 44088, "answer": "Personally I'm not much of an Apple fan so lack of iOS support is a non-issue for me. The emphasis on platform independence was attempting to highlight that java is officially supported on OSX, Linux, and Windows rather than only through a third party (mono) that I can't personally vouch for (although I've heard good things). Also I don't know that I'd say Android isn't a valid platform target solely because it doesn't support java 8... it's certainly unfortunate that it doesn't support the latest version, but java 8 is less than a year old. However point taken - cross platform support with c# has improved greatly in recent years.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44089, "question": "Personally I'm not much of an Apple fan so lack of iOS support is a non-issue for me. The emphasis on platform independence was attempting to highlight that java is officially supported on OSX, Linux, and Windows rather than only through a third party (mono) that I can't personally vouch for (although I've heard good things). Also I don't know that I'd say Android isn't a valid platform target solely because it doesn't support java 8... it's certainly unfortunate that it doesn't support the latest version, but java 8 is less than a year old. However point taken - cross platform support with c# has improved greatly in recent years.", "aSentId": 44090, "answer": "Fingers crossed for official Linux .NET. I'm not a big fan of Java either. I don't have-my-balls-bitten-off hate it, but I generally find C# superior *except* in the cross-platform regard.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44093, "question": "Mozilla not accepted for Google Summer of Code 2015", "aSentId": 44094, "answer": "I'm not surprised about this, Mozilla is a very big organization. I'm more surprised by the Blender rejection.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44095, "question": "I'm not surprised about this, Mozilla is a very big organization. I'm more surprised by the Blender rejection.", "aSentId": 44096, "answer": "Me too, that's quite a blow.\nTye Blender Foundation team aren't exactly living like rock stars in downtown SF like Mozilla. ", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44093, "question": "Mozilla not accepted for Google Summer of Code 2015", "aSentId": 44098, "answer": "Aren't Mozilla big enough to offer there own summer of code thing?", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44099, "question": "Aren't Mozilla big enough to offer there own summer of code thing?", "aSentId": 44100, "answer": "I'll start my own Summer of Code with hookers and blackjack", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44101, "question": "I'll start my own Summer of Code with hookers and blackjack", "aSentId": 44102, "answer": "I'm funding my own Summer of Hookers and Blackjack with code...\n", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44103, "question": "I'm funding my own Summer of Hookers and Blackjack with code...\n", "aSentId": 44104, "answer": "I'm funding my own Summer of Hookers and Blackjack with cocaine, I mean code...yeah....code...lots of code...\n\nEdit: TIL Cocaine is a no no, even in a joke :D", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44101, "question": "I'll start my own Summer of Code with hookers and blackjack", "aSentId": 44106, "answer": "Don't forget the blow.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44099, "question": "Aren't Mozilla big enough to offer there own summer of code thing?", "aSentId": 44108, "answer": "What's their source of revenue?", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44109, "question": "What's their source of revenue?", "aSentId": 44110, "answer": "As far as I'm aware they take a load in donations and they get paid A LOT by google to make them the default search engine.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44111, "question": "As far as I'm aware they take a load in donations and they get paid A LOT by google to make them the default search engine.", "aSentId": 44112, "answer": "They aren't the default any more, last I checked it was Yahoo.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44113, "question": "They aren't the default any more, last I checked it was Yahoo.", "aSentId": 44114, "answer": "Google is the default for me ", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44115, "question": "Google is the default for me ", "aSentId": 44116, "answer": "It's now Yahoo, you probably still have config files from a earlier release, it only changes to yahoo when you do a new clean install IIRC.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44117, "question": "It's now Yahoo, you probably still have config files from a earlier release, it only changes to yahoo when you do a new clean install IIRC.", "aSentId": 44118, "answer": "IIRC, Yahoo is the new default search provider only for the U.S.A.\n\nI've installed Firefox 35 in a new machine down here in Argentina, and Google is still the default search engine.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44119, "question": "IIRC, Yahoo is the new default search provider only for the U.S.A.\n\nI've installed Firefox 35 in a new machine down here in Argentina, and Google is still the default search engine.", "aSentId": 44120, "answer": "Yes, in China it's Baidu and in Russia it's Yandex.\n", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44117, "question": "It's now Yahoo, you probably still have config files from a earlier release, it only changes to yahoo when you do a new clean install IIRC.", "aSentId": 44122, "answer": "Makes sense, it might be a little outdated too cause I just installed Ubuntu and it came with it already installed. ", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44117, "question": "It's now Yahoo, you probably still have config files from a earlier release, it only changes to yahoo when you do a new clean install IIRC.", "aSentId": 44124, "answer": "Also it depends on your country. Yahoo replaced Google only in the US.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44125, "question": "Also it depends on your country. Yahoo replaced Google only in the US.", "aSentId": 44126, "answer": "Ahh ok, I didn't know that.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44093, "question": "Mozilla not accepted for Google Summer of Code 2015", "aSentId": 44129, "answer": "Jitsi also disappeared :(", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44131, "question": "Reminds me of my time when I applied to work at Google, got to the final round of interviews, and then a rejection with the reason of \"we don't give a reason, try again next year.\"", "aSentId": 44132, "answer": "Most companies won't give you a reason. Sucks, but hardly surprising. Chances are the reason is, you know, you weren't qualified.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44133, "question": "Most companies won't give you a reason. Sucks, but hardly surprising. Chances are the reason is, you know, you weren't qualified.", "aSentId": 44134, "answer": "No, most likely he/she is in fact qualified. Rejections at a very late stage are at the point where qualifications are usually well-determined and known to be present.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44135, "question": "No, most likely he/she is in fact qualified. Rejections at a very late stage are at the point where qualifications are usually well-determined and known to be present.", "aSentId": 44136, "answer": "Rejections at the final stage are usually a question of fit. ", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44137, "question": "Rejections at the final stage are usually a question of fit. ", "aSentId": 44138, "answer": "Yeah. In my experience, either \"fit\", or some internal change (position was canceled, or taken by another department, or the definition of it changed somehow), for rejections at the very final stage.\n", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44135, "question": "No, most likely he/she is in fact qualified. Rejections at a very late stage are at the point where qualifications are usually well-determined and known to be present.", "aSentId": 44140, "answer": "Maybe they were on the fence, and the guy failed a final round of tiebreaking interviews\n", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44135, "question": "No, most likely he/she is in fact qualified. Rejections at a very late stage are at the point where qualifications are usually well-determined and known to be present.", "aSentId": 44142, "answer": "How many rounds of interviews? You could be right, sure.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44133, "question": "Most companies won't give you a reason. Sucks, but hardly surprising. Chances are the reason is, you know, you weren't qualified.", "aSentId": 44144, "answer": "Eeeeh really? In this job climate I'd say the biggest factor is they have the complete upper hand. Positions are very competitive. If you're going for a Google job and made it to last rounds I'd be surprised if the reason was 'unqualified'. ", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44145, "question": "Eeeeh really? In this job climate I'd say the biggest factor is they have the complete upper hand. Positions are very competitive. If you're going for a Google job and made it to last rounds I'd be surprised if the reason was 'unqualified'. ", "aSentId": 44146, "answer": "Google specifically might have the \"complete upper hand\" because they're seen as a very popular place to work.  But for software development in general, I think it probably swings the other way.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44133, "question": "Most companies won't give you a reason. Sucks, but hardly surprising. Chances are the reason is, you know, you weren't qualified.", "aSentId": 44148, "answer": "If you make it to interviews, you just didn't interview well enough. ", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44150, "question": "Mozilla collaborates with Google's competitor now. \n\n&gt;&gt; not accepting Mozilla was a difficult decision for them. \n\nNo.", "aSentId": 44151, "answer": "This isn't even the only suspected reason. Tons of other major projects were left off and many people think its to give smaller organizations a chance. Someone also mentioned that many of the GSoC orgs are focused on the sciences. I think Google would be dumb to use GSoC to try to fight their competitor as if they singled out Mozilla, there would be backlash. They have much better ways....", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44152, "question": "This isn't even the only suspected reason. Tons of other major projects were left off and many people think its to give smaller organizations a chance. Someone also mentioned that many of the GSoC orgs are focused on the sciences. I think Google would be dumb to use GSoC to try to fight their competitor as if they singled out Mozilla, there would be backlash. They have much better ways....", "aSentId": 44153, "answer": "I don't think Blender is that \"big\". Considering ffmpeg made it, and they are probably a bigger project in terms of developer effort (since its in VLC and is huge).", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44154, "question": "I don't think Blender is that \"big\". Considering ffmpeg made it, and they are probably a bigger project in terms of developer effort (since its in VLC and is huge).", "aSentId": 44155, "answer": "Blender is huge, with it's own conferences etc, compared to ffmpeg", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44150, "question": "Mozilla collaborates with Google's competitor now. \n\n&gt;&gt; not accepting Mozilla was a difficult decision for them. \n\nNo.", "aSentId": 44157, "answer": "Google seems to be getting more closed off, which is interesting given the recent changes by Microsoft towards being more open.  While Google is still much more open then Microsoft it seems they may each find a balance so somewhere in the middle. ", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44159, "question": "Makes a lot of sense - Google dropped the \"don't do evil\" and Mozilla is now something that Google would rather like to see go.\n\nSo here is an alternative suggestion:\n\nStop being lazy and dependend on Google. Get together and collaborate and offer something similar to Google, but inclusive of other open source based projects.\n\nMozilla should have enough revenue to easily more than cover for mozilla-related development, even mentoring; so get together with other similarly interested parties.\n\nHaving depended partially on Google for such a long time never was a good idea really - Google has its own thing going, just look at Dart and Go and Chromium, it's the big octopus going to swallow everything eventually if it is swallow-worthy.", "aSentId": 44160, "answer": "&gt; Stop being lazy and dependend on Google.\n\nhttps://duckduckgo.com/", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44161, "question": "&gt; Stop being lazy and dependend on Google.\n\nhttps://duckduckgo.com/", "aSentId": 44162, "answer": "I think /u/shevegen was addressing Mozilla there.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44159, "question": "Makes a lot of sense - Google dropped the \"don't do evil\" and Mozilla is now something that Google would rather like to see go.\n\nSo here is an alternative suggestion:\n\nStop being lazy and dependend on Google. Get together and collaborate and offer something similar to Google, but inclusive of other open source based projects.\n\nMozilla should have enough revenue to easily more than cover for mozilla-related development, even mentoring; so get together with other similarly interested parties.\n\nHaving depended partially on Google for such a long time never was a good idea really - Google has its own thing going, just look at Dart and Go and Chromium, it's the big octopus going to swallow everything eventually if it is swallow-worthy.", "aSentId": 44164, "answer": "&gt; Mozilla is now something that Google would rather like to see go.\n\nWhat's that?", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44167, "question": "Ever since Firefox switched to Bing-Yahoo as default, we know they're corrupt in the sense that they allow money to push out software that's detrimental to users.", "aSentId": 44168, "answer": "Wasn't it Google that dropped them? Once chrome established dominance. Forcing them to find an alternative.. ", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44169, "question": "Wasn't it Google that dropped them? Once chrome established dominance. Forcing them to find an alternative.. ", "aSentId": 44170, "answer": "If you consider \"stop paying them money\" as \"dropping them\", yeah.\n\nBut it was still mozillas choice to put Bing/Yahoo as default search-engines (perhaps because those are now paying mozilla?) rather than doing something like putting DDG as default, which -- in my opinion -- would be much more in the interest of the users...", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44171, "question": "If you consider \"stop paying them money\" as \"dropping them\", yeah.\n\nBut it was still mozillas choice to put Bing/Yahoo as default search-engines (perhaps because those are now paying mozilla?) rather than doing something like putting DDG as default, which -- in my opinion -- would be much more in the interest of the users...", "aSentId": 44172, "answer": "Yes it would be much more in the interest of the users but they need the money and they made Yahoo honor the Do Not Track in firefox.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44171, "question": "If you consider \"stop paying them money\" as \"dropping them\", yeah.\n\nBut it was still mozillas choice to put Bing/Yahoo as default search-engines (perhaps because those are now paying mozilla?) rather than doing something like putting DDG as default, which -- in my opinion -- would be much more in the interest of the users...", "aSentId": 44174, "answer": "Unless you suppose all their developers should keep working for free and apply for food stamps logically they had to partner with someone else. Are you really suggesting they should have stayed with Google and earned no revenue? Do you have an alternative plan? ", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44175, "question": "Unless you suppose all their developers should keep working for free and apply for food stamps logically they had to partner with someone else. Are you really suggesting they should have stayed with Google and earned no revenue? Do you have an alternative plan? ", "aSentId": 44176, "answer": "- I'm merely rejecting the notion that google is the bad guy to blame here for \"dropping\" them. Google basically paid them for doing the thing that was best for their users anyway, now they've stopped. So mozilla stopped doing the thing that was best for their users.\n- Mozilla loves to run their mouth about how much they care about the users all day long. They literally never shut up about how much they love the web and empowering the users. So... you know... it's not unreasonable to expect them to do the right thing rather than... make people use bing?", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44177, "question": "- I'm merely rejecting the notion that google is the bad guy to blame here for \"dropping\" them. Google basically paid them for doing the thing that was best for their users anyway, now they've stopped. So mozilla stopped doing the thing that was best for their users.\n- Mozilla loves to run their mouth about how much they care about the users all day long. They literally never shut up about how much they love the web and empowering the users. So... you know... it's not unreasonable to expect them to do the right thing rather than... make people use bing?", "aSentId": 44178, "answer": "Mozilla would cease to exist if they did that. Firefox with bing as a default is surely preferable to no Firefox, and you're free to change the search engine if you want to. ", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44179, "question": "Mozilla would cease to exist if they did that. Firefox with bing as a default is surely preferable to no Firefox, and you're free to change the search engine if you want to. ", "aSentId": 44180, "answer": "&gt; Mozilla would cease to exist\n\n[citation needed]. And besides, even if that's so, then they just need to do a better job at finding ways to make revenue without doing things that are bad for their users. They are certainly not on a good track with FxOS either...\n\n&gt; you're free to change the search engine if you want to.\n\nOf course, but we all know that doesn't matter. The users who are not technically inclined enough to do this are the ones who are most dependent on mozilla making the right choice for them, and suffer the most if mozilla does not. Similarly to how users who buy laptops with windows + a bunch of bloat, spy- and beg-ware pre-installed are the ones that are not technically inclined enough to wipe it with a fresh install, and hence are most dependent on the software they are using working in their interest, rather than the software using them for someone elses interest.\n\nObviously firefox is still a long shot from being that bad, but IMO it's not a step into a healthy direction...", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44181, "question": "&gt; Mozilla would cease to exist\n\n[citation needed]. And besides, even if that's so, then they just need to do a better job at finding ways to make revenue without doing things that are bad for their users. They are certainly not on a good track with FxOS either...\n\n&gt; you're free to change the search engine if you want to.\n\nOf course, but we all know that doesn't matter. The users who are not technically inclined enough to do this are the ones who are most dependent on mozilla making the right choice for them, and suffer the most if mozilla does not. Similarly to how users who buy laptops with windows + a bunch of bloat, spy- and beg-ware pre-installed are the ones that are not technically inclined enough to wipe it with a fresh install, and hence are most dependent on the software they are using working in their interest, rather than the software using them for someone elses interest.\n\nObviously firefox is still a long shot from being that bad, but IMO it's not a step into a healthy direction...", "aSentId": 44182, "answer": "It's incredibly easy to change your search engine, and DDG is already an entry in the drop-down box.  At least it is on mine and I certainly don't remember adding it there.  Anyone who cares even a little bit can change their search engine in literally under a minute.  Truth is, for better or for worse, most people really don't give a shit, at all.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44177, "question": "- I'm merely rejecting the notion that google is the bad guy to blame here for \"dropping\" them. Google basically paid them for doing the thing that was best for their users anyway, now they've stopped. So mozilla stopped doing the thing that was best for their users.\n- Mozilla loves to run their mouth about how much they care about the users all day long. They literally never shut up about how much they love the web and empowering the users. So... you know... it's not unreasonable to expect them to do the right thing rather than... make people use bing?", "aSentId": 44184, "answer": "Nobody is forced to use bing.  With a few clicks they can change the search provider. Also how do they keep the lights on? ", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44186, "question": "Khronos unveils Vulkan: OpenGL built for modern systems", "aSentId": 44187, "answer": "This is fantastic news. A modern, standardized graphics programming API to replace the extremely archaic OpenGL APIs is long overdue.\n\nThe shader bytecode bit is interesting to me. Will this reduce load times in a noticeable way by eliminating the time spent on shader compilation?", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44188, "question": "This is fantastic news. A modern, standardized graphics programming API to replace the extremely archaic OpenGL APIs is long overdue.\n\nThe shader bytecode bit is interesting to me. Will this reduce load times in a noticeable way by eliminating the time spent on shader compilation?", "aSentId": 44189, "answer": "Yes. What's more, a ton more can now be optimised by the application instead of the driver.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44188, "question": "This is fantastic news. A modern, standardized graphics programming API to replace the extremely archaic OpenGL APIs is long overdue.\n\nThe shader bytecode bit is interesting to me. Will this reduce load times in a noticeable way by eliminating the time spent on shader compilation?", "aSentId": 44191, "answer": "As it stands now, OpenGL shaders are compiled by the drivers, meaning they have to do their own parsing which can lead to some strange behavior in some cases (e.g. if AMD's driver is more strict about a certain type of syntax than NVIDIA, it might work fine on AMD cards but fail on NVIDIA cards, as an extreme example)\n\nCompare that to DirectX's HLSL which is usually compiled first by fxc.exe. That provides a compiled, optimized bytecode that leaves very little room for driver interpretation and gives developers consistency across GPU vendors. It also prevents the industry from duplicating work--NVIDIA, AMD, and Intel all benefit from not having to write general program optimizations because it's been optimized by the compiler. They can instead implement their own vendor-specific optimizations to make shaders work as best as they can on their hardware. In the case of OpenGL, NVIDIA might have a better first-pass optimizer than AMD which can of course lead to performance variance not necessarily related to hardware.\n\nI *much* prefer precompiled shaders. Programming at that level you want to remove as many variables as you possibly can and vendor quirkiness isn't something I or probably anyone else wants to deal with.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44192, "question": "As it stands now, OpenGL shaders are compiled by the drivers, meaning they have to do their own parsing which can lead to some strange behavior in some cases (e.g. if AMD's driver is more strict about a certain type of syntax than NVIDIA, it might work fine on AMD cards but fail on NVIDIA cards, as an extreme example)\n\nCompare that to DirectX's HLSL which is usually compiled first by fxc.exe. That provides a compiled, optimized bytecode that leaves very little room for driver interpretation and gives developers consistency across GPU vendors. It also prevents the industry from duplicating work--NVIDIA, AMD, and Intel all benefit from not having to write general program optimizations because it's been optimized by the compiler. They can instead implement their own vendor-specific optimizations to make shaders work as best as they can on their hardware. In the case of OpenGL, NVIDIA might have a better first-pass optimizer than AMD which can of course lead to performance variance not necessarily related to hardware.\n\nI *much* prefer precompiled shaders. Programming at that level you want to remove as many variables as you possibly can and vendor quirkiness isn't something I or probably anyone else wants to deal with.", "aSentId": 44193, "answer": "&gt; It also prevents the industry from duplicating work--NVIDIA, AMD, and Intel all benefit from not having to write general program optimizations because it's been optimized by the compiler.\n\n[citation needed]  I find it very hard to believe that they don't all go ahead and convert the intermediate code back into SSA form followed by running it through a compiler optimization passes again.\n\nIt is nice to not have to have a tokenizer/lexer, but that's not really a huge deal.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44194, "question": "&gt; It also prevents the industry from duplicating work--NVIDIA, AMD, and Intel all benefit from not having to write general program optimizations because it's been optimized by the compiler.\n\n[citation needed]  I find it very hard to believe that they don't all go ahead and convert the intermediate code back into SSA form followed by running it through a compiler optimization passes again.\n\nIt is nice to not have to have a tokenizer/lexer, but that's not really a huge deal.", "aSentId": 44195, "answer": "It appears that the IR is already in SSA form. The whitepaper has a section on which optimizations they recommend should be done offline vs online. It even supports explicit optimization controls:\n\n&gt; Instead of doing such undesirable optimizations off line, SPIR-V has optimization control enumerants for loops, functions, and branches that allow communicating, say, that a loop is faster if not unrolled, based on some knowledge not present in the module itself. Such controls should be respected by target devices. See, for example, DontUnroll or InLine in the specification.\n\nPretty neat.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44196, "question": "It appears that the IR is already in SSA form. The whitepaper has a section on which optimizations they recommend should be done offline vs online. It even supports explicit optimization controls:\n\n&gt; Instead of doing such undesirable optimizations off line, SPIR-V has optimization control enumerants for loops, functions, and branches that allow communicating, say, that a loop is faster if not unrolled, based on some knowledge not present in the module itself. Such controls should be respected by target devices. See, for example, DontUnroll or InLine in the specification.\n\nPretty neat.", "aSentId": 44197, "answer": "Awesome, it look like you're right!  Yeah, I guess that I was referring more to the way it's done in DirectX, which isn't in SSA form.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44194, "question": "&gt; It also prevents the industry from duplicating work--NVIDIA, AMD, and Intel all benefit from not having to write general program optimizations because it's been optimized by the compiler.\n\n[citation needed]  I find it very hard to believe that they don't all go ahead and convert the intermediate code back into SSA form followed by running it through a compiler optimization passes again.\n\nIt is nice to not have to have a tokenizer/lexer, but that's not really a huge deal.", "aSentId": 44199, "answer": "&gt;  I find it very hard to believe that they don't all go ahead and convert the intermediate code back into SSA form followed by running it through a compiler optimization passes again\n\nBecause it would be an utterly pointless waste of effort. The effort they'd have to go to in order to convert bytecode to SSA would be much larger than what it would take to convert that bytecode into whatever format they need. That's the point of bytecode, it's simpler for machines to understand. ", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44200, "question": "&gt;  I find it very hard to believe that they don't all go ahead and convert the intermediate code back into SSA form followed by running it through a compiler optimization passes again\n\nBecause it would be an utterly pointless waste of effort. The effort they'd have to go to in order to convert bytecode to SSA would be much larger than what it would take to convert that bytecode into whatever format they need. That's the point of bytecode, it's simpler for machines to understand. ", "aSentId": 44201, "answer": "They would go through the effort if they wanted to do additional general optimization passes (which they almost certainly do).  Additionally, converting to SSA form isn't nearly as complex as you're making it out to be, you just rename registers as they're written to.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44202, "question": "They would go through the effort if they wanted to do additional general optimization passes (which they almost certainly do).  Additionally, converting to SSA form isn't nearly as complex as you're making it out to be, you just rename registers as they're written to.", "aSentId": 44203, "answer": "&gt; They would go through the effort if they wanted to do additional general optimization passes\n\nNo they wouldn't because you can *optimise the bytecode*. Again, it's much simpler than the SSA so it's much simpler to optimise. This is the basic way LLVM works, convert to the intermediate bytecode and optimise that, that way all of your frontend language compilers can work with the same optimisation engine. Why would driver developers want to convert from a simple form to a more complex form just to optimise just to compile back to a simple form again? It doesn't make sense.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44204, "question": "&gt; They would go through the effort if they wanted to do additional general optimization passes\n\nNo they wouldn't because you can *optimise the bytecode*. Again, it's much simpler than the SSA so it's much simpler to optimise. This is the basic way LLVM works, convert to the intermediate bytecode and optimise that, that way all of your frontend language compilers can work with the same optimisation engine. Why would driver developers want to convert from a simple form to a more complex form just to optimise just to compile back to a simple form again? It doesn't make sense.", "aSentId": 44205, "answer": "All SSA form means is that you only write to each location once.  If you write to a location a second time you just give it another name.  You go to this form because it makes certain classes of optimization easier to validate and apply.  A three address pseudo assembly byte code like directx shader assembly can be in SSA form as long as each register is only written once.  To convert from three address non-SSA to SSA you just iterate over the bytecode and rename the registers to a larger namespace as they're written to.\n\nExample:\n\n    add r0, r1, r2\n    sub r0, r0, r4\n\nconverts to\n\n    add r0'0, r1,'0, r2'0\n    sub r0'1, r0'0, r4'0\n\nI'm really getting the sense that you think that SSA form is something that it's not.  For reference, LLVM IR is in SSA form, for the reasons that I've stated.\n\nEdit:  It looks like the new Khronos SPIR-V is also in SSA form.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44206, "question": "All SSA form means is that you only write to each location once.  If you write to a location a second time you just give it another name.  You go to this form because it makes certain classes of optimization easier to validate and apply.  A three address pseudo assembly byte code like directx shader assembly can be in SSA form as long as each register is only written once.  To convert from three address non-SSA to SSA you just iterate over the bytecode and rename the registers to a larger namespace as they're written to.\n\nExample:\n\n    add r0, r1, r2\n    sub r0, r0, r4\n\nconverts to\n\n    add r0'0, r1,'0, r2'0\n    sub r0'1, r0'0, r4'0\n\nI'm really getting the sense that you think that SSA form is something that it's not.  For reference, LLVM IR is in SSA form, for the reasons that I've stated.\n\nEdit:  It looks like the new Khronos SPIR-V is also in SSA form.", "aSentId": 44207, "answer": "Sooo...basically, it's already in the format that's best suited for them and doesn't need to be \"converted\" to be optimised or anything like that.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44208, "question": "Sooo...basically, it's already in the format that's best suited for them and doesn't need to be \"converted\" to be optimised or anything like that.", "aSentId": 44209, "answer": "No, it still needs to be converted into SSA form in order to be useful for a large class of optimizations.  It's slightly more complex than I listed above for flow analysis reasons. You need to recognize stuff like basic blocks, and tag register writes to block scopes so that you recognize that something like:\n\n    int x = 0;\n    for( int i = 0; i &lt; n; i++ ) {\n        x += 5;\n    }\n\nactually has n different writes to x (and thus each iteration through the loop is a write to a separate location in SSA form).\n\nThe point of my original post is that they already, with bytecode, are doing optimization passes; this doesn't save them much on back end of their compiler.  What you gain is having a (hopefully at least more) consistent front end translating from something like GLSL to an IR.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44188, "question": "This is fantastic news. A modern, standardized graphics programming API to replace the extremely archaic OpenGL APIs is long overdue.\n\nThe shader bytecode bit is interesting to me. Will this reduce load times in a noticeable way by eliminating the time spent on shader compilation?", "aSentId": 44211, "answer": "I think correctness is the biggest boon here.  Compilers are difficult complex beasts.  Getting them right is a challenge, making them optimize is even harder.\n\nBytecodes are much simpler to optimize and interpret.  Which means any given driver manufacturer will more likely get them right.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44213, "question": "The most amazing part about the shader byte code bit is the ability for me to use anything to write my shaders as long as it compiles to the right byte code. \n\nOh you want to write your shaders in Rust? Python? Some other language-like shader syntax? Sure as long as you write a compiler. \n\nAs someone who hates some aspects of GLSL, this is huge. Also, precompiling shaders is an option now. My current build process with shaders is overly complicated and frustrating just so I don't have to load them at run time.\n\nI'm losing my mind I'm so excited for Vulkan. ", "aSentId": 44214, "answer": "Yea, hopefully it will result in 1-2 good languages emerging and not something that's happening with JS where we have the framework of the week", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44213, "question": "The most amazing part about the shader byte code bit is the ability for me to use anything to write my shaders as long as it compiles to the right byte code. \n\nOh you want to write your shaders in Rust? Python? Some other language-like shader syntax? Sure as long as you write a compiler. \n\nAs someone who hates some aspects of GLSL, this is huge. Also, precompiling shaders is an option now. My current build process with shaders is overly complicated and frustrating just so I don't have to load them at run time.\n\nI'm losing my mind I'm so excited for Vulkan. ", "aSentId": 44216, "answer": "I suspect it's an even bigger win for GPGPU than for graphics. It opens the door to high-level languages and languages that don't resemble C to much more easily target GPUs with little or no changes to the high-level source code. When combined with the other improvements to CPU overhead, we're probably a lot closer to being able to make a MATLAB replacement that can efficiently do all the numerical heavy lifting on a GPU with the data *staying* on the GPU except when it needs to be delivered to the CPU for I/O.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44186, "question": "Khronos unveils Vulkan: OpenGL built for modern systems", "aSentId": 44219, "answer": "At long last, the vulkan reunification of the desktop and mobile APIs.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44186, "question": "Khronos unveils Vulkan: OpenGL built for modern systems", "aSentId": 44221, "answer": "Graphics APIs, making \"Hello Triangle\" more complicated since 1999.\n\nJust kidding, appreciate the additional control on the client-side. I guess it's hard to give more control while retaining accessibility for beginners.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44222, "question": "Graphics APIs, making \"Hello Triangle\" more complicated since 1999.\n\nJust kidding, appreciate the additional control on the client-side. I guess it's hard to give more control while retaining accessibility for beginners.", "aSentId": 44223, "answer": "OpenGL was quite a nightmare for a beginner once you want to go beyond triangle stage.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44224, "question": "OpenGL was quite a nightmare for a beginner once you want to go beyond triangle stage.", "aSentId": 44225, "answer": "I remember writing my DirectX-based engine last year wanting to incorporate this awesome atmospheric scattering technique by Eric Bruneton, looking at the OpenGL code and wondering what in the flying fuck was going on. I eventually figured it out, even though I never got the effect to work, but ever since resigned to adding OpenGL support until glNext came out.\n\n*shudders*", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44226, "question": "I remember writing my DirectX-based engine last year wanting to incorporate this awesome atmospheric scattering technique by Eric Bruneton, looking at the OpenGL code and wondering what in the flying fuck was going on. I eventually figured it out, even though I never got the effect to work, but ever since resigned to adding OpenGL support until glNext came out.\n\n*shudders*", "aSentId": 44227, "answer": "It's the same amount of complexity (and about 99% the same syntax) if you implement it in GLSL or HLSL.  They're nearly identical languages.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44228, "question": "It's the same amount of complexity (and about 99% the same syntax) if you implement it in GLSL or HLSL.  They're nearly identical languages.", "aSentId": 44229, "answer": "No, I meant the C++ code that comprised the application and actually ran the effect. ", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44230, "question": "No, I meant the C++ code that comprised the application and actually ran the effect. ", "aSentId": 44231, "answer": "Setting up FBOs and rendering with geometry shaders to multiple texture layers?  It's not too bad.  I'm replying because I spent a few weekends implementing the Bruneton scattering in both OpenGL and DirectX, and I didn't think one was any more complicated than the other.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44232, "question": "Setting up FBOs and rendering with geometry shaders to multiple texture layers?  It's not too bad.  I'm replying because I spent a few weekends implementing the Bruneton scattering in both OpenGL and DirectX, and I didn't think one was any more complicated than the other.", "aSentId": 44233, "answer": "I can't remember exactly how I did it but I remember being frustrated because I had no idea if any of my intermediate or lookup textures were even close to what they were supposed to look like because I couldn't get Bruneton's code to run on my machine to compare with.\n\nI must've been 95% of the way there but just couldn't figure out the last 5%. It's probably important to note that was early in my \"let's build a game engine to force myself to learn C++ in a practical way\" stage.\n\nMaybe I should revisit that now since I'm a few years on. Are there any more recent approaches or is Bruneton still the best for near-surface and far-away (IIRC there's approaches that do in-atmosphere really well OR they do extra-atmosphere really well, Bruneton did both)?\n\nEDIT: I found the OpenGL more complicated and harder to follow because it seemed very far from object-oriented and so the concepts I had learned in DirectX didn't really carry over. Again, it's been a while, I may go revisit this tonight.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44234, "question": "I can't remember exactly how I did it but I remember being frustrated because I had no idea if any of my intermediate or lookup textures were even close to what they were supposed to look like because I couldn't get Bruneton's code to run on my machine to compare with.\n\nI must've been 95% of the way there but just couldn't figure out the last 5%. It's probably important to note that was early in my \"let's build a game engine to force myself to learn C++ in a practical way\" stage.\n\nMaybe I should revisit that now since I'm a few years on. Are there any more recent approaches or is Bruneton still the best for near-surface and far-away (IIRC there's approaches that do in-atmosphere really well OR they do extra-atmosphere really well, Bruneton did both)?\n\nEDIT: I found the OpenGL more complicated and harder to follow because it seemed very far from object-oriented and so the concepts I had learned in DirectX didn't really carry over. Again, it's been a while, I may go revisit this tonight.", "aSentId": 44235, "answer": "Bruneton's is the full approximation, such that you can seemlessly view the atmosphere from any point (in/out) and get the correct scattering.  I think his is still the best solution, although it's a bit expensive.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44224, "question": "OpenGL was quite a nightmare for a beginner once you want to go beyond triangle stage.", "aSentId": 44237, "answer": "Nice use of the past tense!", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44224, "question": "OpenGL was quite a nightmare for a beginner once you want to go beyond triangle stage.", "aSentId": 44239, "answer": "I'm trying to learn OpenGL and I'm very new. I'm finding it really difficult to wrap my head around all the interactions of the endless number of state changing calls. I hope these newer graphics APIs make more sense for beginners. Even if it requires more code to get something done, at least i can see what's actually going on.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44222, "question": "Graphics APIs, making \"Hello Triangle\" more complicated since 1999.\n\nJust kidding, appreciate the additional control on the client-side. I guess it's hard to give more control while retaining accessibility for beginners.", "aSentId": 44242, "answer": "&gt; Graphics APIs, making \"Hello Triangle\" more complicated since 1999.\n\nWhich is the key difference between an graphics API and a 3D graphics engine for CAD work or games. Many people have trouble seeing the difference.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44243, "question": "&gt; Graphics APIs, making \"Hello Triangle\" more complicated since 1999.\n\nWhich is the key difference between an graphics API and a 3D graphics engine for CAD work or games. Many people have trouble seeing the difference.", "aSentId": 44244, "answer": "I realize what it's for. But everyone has to start somewhere and I'm merely lamenting all the state that you have to setup to get your first results. I mean even when learning something like assembly you usually start up with a few instructions to give you a program that just does \"program has exited with code 1\" or whatever. But the minimal viable program with output for graphics APIs just keeps on getting more complicated.\n", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44245, "question": "I realize what it's for. But everyone has to start somewhere and I'm merely lamenting all the state that you have to setup to get your first results. I mean even when learning something like assembly you usually start up with a few instructions to give you a program that just does \"program has exited with code 1\" or whatever. But the minimal viable program with output for graphics APIs just keeps on getting more complicated.\n", "aSentId": 44246, "answer": "That is because computer graphics is to some extent complicated. Even more so when APIs have to accommodate hardware. If people want a gentle introduction to computer graphics, they should pick up a graphics engine to ease out the learning curve. Or start small from the beginning and learn the fundamentals. Which means making their own rasterizer with a plain framebuffer, where they can focus on the pure graphics theory instead of all the extra details of talking to hardware and upload data to video memory.\n\nSo what you suggest is already possible. But people don't do that.\n\nAlso: Fixed-function OpenGL before the introduction of shaders wasn't made that way *because* of ease-of-use. The API design was made that way because of how the hardware worked at the time. GPUs could accelerate very specific things, so generalizing the API like we have today would make performance suffer.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44245, "question": "I realize what it's for. But everyone has to start somewhere and I'm merely lamenting all the state that you have to setup to get your first results. I mean even when learning something like assembly you usually start up with a few instructions to give you a program that just does \"program has exited with code 1\" or whatever. But the minimal viable program with output for graphics APIs just keeps on getting more complicated.\n", "aSentId": 44248, "answer": "drawing a triangle with assembly isn't exactly easy", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44249, "question": "drawing a triangle with assembly isn't exactly easy", "aSentId": 44250, "answer": "     section .data  \n    triangle    db \"\u25b2\", 0  \n     section .text  \n     extern puts  \n     global _start  \n    _start:  \n     mov edi, triangle  \n     call puts  \n     xor ebx, ebx  \n     mov eax, 1  \n     int 0x80  \n\nx86_64 Linux  \nnasm -f elf64 -o triangle.o triangle.asm  \nld triangle.o -o triangle -lc --dynamic-linker /lib/ld-linux-x86-64.so.2", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44251, "question": "     section .data  \n    triangle    db \"\u25b2\", 0  \n     section .text  \n     extern puts  \n     global _start  \n    _start:  \n     mov edi, triangle  \n     call puts  \n     xor ebx, ebx  \n     mov eax, 1  \n     int 0x80  \n\nx86_64 Linux  \nnasm -f elf64 -o triangle.o triangle.asm  \nld triangle.o -o triangle -lc --dynamic-linker /lib/ld-linux-x86-64.so.2", "aSentId": 44252, "answer": "This reply reminds me of [this classic from bash.org.](http://bash.org/?152037)", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44251, "question": "     section .data  \n    triangle    db \"\u25b2\", 0  \n     section .text  \n     extern puts  \n     global _start  \n    _start:  \n     mov edi, triangle  \n     call puts  \n     xor ebx, ebx  \n     mov eax, 1  \n     int 0x80  \n\nx86_64 Linux  \nnasm -f elf64 -o triangle.o triangle.asm  \nld triangle.o -o triangle -lc --dynamic-linker /lib/ld-linux-x86-64.so.2", "aSentId": 44254, "answer": "Well that's about a dozen characters shorter than Hello, World ", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44251, "question": "     section .data  \n    triangle    db \"\u25b2\", 0  \n     section .text  \n     extern puts  \n     global _start  \n    _start:  \n     mov edi, triangle  \n     call puts  \n     xor ebx, ebx  \n     mov eax, 1  \n     int 0x80  \n\nx86_64 Linux  \nnasm -f elf64 -o triangle.o triangle.asm  \nld triangle.o -o triangle -lc --dynamic-linker /lib/ld-linux-x86-64.so.2", "aSentId": 44256, "answer": "and here I thought you were going to draw a triangle in the frame buffer using a loop to draw 3 lines.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44249, "question": "drawing a triangle with assembly isn't exactly easy", "aSentId": 44258, "answer": "It's not hard. Getting a window to draw to is more work than actually doing the drawing. :)", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44259, "question": "It's not hard. Getting a window to draw to is more work than actually doing the drawing. :)", "aSentId": 44260, "answer": "Oh god, don't get me started. There's only a couple of libraries that do it, and getting them to compile successfully on Windows, Linux AND Mac is a PITA", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44249, "question": "drawing a triangle with assembly isn't exactly easy", "aSentId": 44262, "answer": "Isn't it? This is one of the few things I've written in Assembly. Essentially, it consisted of a loop incrementing an offset by screen width + (dx/dy) for the start position and end position, and using STOSB to set the value.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44245, "question": "I realize what it's for. But everyone has to start somewhere and I'm merely lamenting all the state that you have to setup to get your first results. I mean even when learning something like assembly you usually start up with a few instructions to give you a program that just does \"program has exited with code 1\" or whatever. But the minimal viable program with output for graphics APIs just keeps on getting more complicated.\n", "aSentId": 44264, "answer": "People interested in graphics programming should now start with Unity3D, not OpenGL.  The \"newbie-friendly-abstraction\" is now the game engine.  Vulkan, DX12, etc is the handshake between game engines and hardware manufactures.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44222, "question": "Graphics APIs, making \"Hello Triangle\" more complicated since 1999.\n\nJust kidding, appreciate the additional control on the client-side. I guess it's hard to give more control while retaining accessibility for beginners.", "aSentId": 44266, "answer": "I bet further opening up the GPU black box is going to make debugging much easier even for basic users. Nothing makes you want to throw your laptop at the wall when you write shiny new shader or mesh handling code, and all you see is a blank screen, and know there is virtually no way of understanding what is going wrong.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44267, "question": "I bet further opening up the GPU black box is going to make debugging much easier even for basic users. Nothing makes you want to throw your laptop at the wall when you write shiny new shader or mesh handling code, and all you see is a blank screen, and know there is virtually no way of understanding what is going wrong.", "aSentId": 44268, "answer": "Yeah, really glad that they actually wrote Vulkan with debugging facilities in mind. Most likely due to what they call \"an unprecedented level of participation from game engine ISVs\"", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44270, "question": "Should anyone other than engine coders be messing with shader programming?  Shouldn't, for instance, indie stuff be done at a higher level?", "aSentId": 44271, "answer": "Depends what you mean by \"should\". One of the great things about being an indie is that you can do shit nobody else has thought about or wanted to risk doing. That also means that there may not be an engine out there that suits your needs.\n\nMind you, shaders go beyond engine coders. Really, even artists should be familiar with shaders as they're pushing what the final product looks like.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44270, "question": "Should anyone other than engine coders be messing with shader programming?  Shouldn't, for instance, indie stuff be done at a higher level?", "aSentId": 44273, "answer": "Actually, in many big studios there is a role called \"technical artist\" which is generally made up of artists who can program and write shaders. They don't write the best code in the world (some of them even learn programming while being in the company) and often need assistance from the engine programmers, but a lot of the effects and good looking stuff you see in the games come from those guys.\n\nAlthough from their point of view i don't see much changing with Vulkan.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44275, "question": "&gt;OpenGL won't go away. The lower level control afforded by Vulkan means that it may not be a good fit for all programs. For them, traditional OpenGL, with the driver handling a greater part of the workload, could be the better fit.\n\nI wonder if instead of having the drivers handle openGL in the future, openGL could have a standard front end on top of Vulkan?  I am not familiar with graphics programming, so I would be interested to know opinions of people who are.", "aSentId": 44276, "answer": "This seems likely.  That is basically what was happening with GL in the driver already...now that will just be moved up into a library.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44275, "question": "&gt;OpenGL won't go away. The lower level control afforded by Vulkan means that it may not be a good fit for all programs. For them, traditional OpenGL, with the driver handling a greater part of the workload, could be the better fit.\n\nI wonder if instead of having the drivers handle openGL in the future, openGL could have a standard front end on top of Vulkan?  I am not familiar with graphics programming, so I would be interested to know opinions of people who are.", "aSentId": 44278, "answer": "Mesa on Linux has already broken into the high level driver (Mesa) and the low level driver (Gallium).  One Mesa with many Galliums.  If Vulkan easily fits in at the Gallium level then Mesa could easily be retooled into a cross platform open source GL implementation that can run anywhere Volcan exists.  AMD has been putting a ton of work into Mesa over the last year so I suspect this is the plan.  To let them was h their hands of GL drivers forever once Vulcan is out.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44275, "question": "&gt;OpenGL won't go away. The lower level control afforded by Vulkan means that it may not be a good fit for all programs. For them, traditional OpenGL, with the driver handling a greater part of the workload, could be the better fit.\n\nI wonder if instead of having the drivers handle openGL in the future, openGL could have a standard front end on top of Vulkan?  I am not familiar with graphics programming, so I would be interested to know opinions of people who are.", "aSentId": 44280, "answer": "Sounds possible, but might be hairy. I'm not sure how similar vulcans shading language would be to GLSL, so a translation layer may need to convert GLSL to SPIRV/whatever vulcan will use.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44281, "question": "Sounds possible, but might be hairy. I'm not sure how similar vulcans shading language would be to GLSL, so a translation layer may need to convert GLSL to SPIRV/whatever vulcan will use.", "aSentId": 44282, "answer": "There still needs to be high level languages for developers to write shaders in, so Khronos is writing a reference GLSL-&gt;SPIR-V compiler.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44283, "question": "There still needs to be high level languages for developers to write shaders in, so Khronos is writing a reference GLSL-&gt;SPIR-V compiler.", "aSentId": 44284, "answer": "I expected as much, but I'm not sure in how far the Vulkan GLSL will match up with the capabilities of GL GLSL exactly (for instance will there be geometry shaders?) A compatibility layer may have ambitions for exact compatibility beyond what the V-GLSL/GLSL likeness offers.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44285, "question": "I expected as much, but I'm not sure in how far the Vulkan GLSL will match up with the capabilities of GL GLSL exactly (for instance will there be geometry shaders?) A compatibility layer may have ambitions for exact compatibility beyond what the V-GLSL/GLSL likeness offers.", "aSentId": 44286, "answer": "Right now there is a pretty good match between SPIR-V and GLSL. The preliminary spec as support for geometry and tessellation shaders. The best part is that it is less complex than GLSL, so their should be fewer vendor issues and differences.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44289, "question": "Vulkan is available as a preview, and later today in San Francisco at GDC, Valve and others are going to demonstrate early 3D engines based on early Vulkan drivers and code.\u00a0\n\nOoohhh..", "aSentId": 44290, "answer": "A new 3D engine by Vlave? Could there be a game that they want to release with that engine?", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44291, "question": "A new 3D engine by Vlave? Could there be a game that they want to release with that engine?", "aSentId": 44292, "answer": "Ricochet 2 confirmed!", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44291, "question": "A new 3D engine by Vlave? Could there be a game that they want to release with that engine?", "aSentId": 44294, "answer": "Aside from the joke, there is speculation that [Dota 2 will be upgraded to Source2](http://blog.dota2.com/2014/12/future-changes-frostivus/).", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44291, "question": "A new 3D engine by Vlave? Could there be a game that they want to release with that engine?", "aSentId": 44296, "answer": "You mean Left 4 Dead 3? I suppose...", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44298, "question": "&gt;SPIR has previously been Khronos' intermediate language for compute shaders, used for harnessing the GPU's power for non-graphical workloads using the OpenCL API. \n\n&gt;there are, among others, JavaScript, C++, Python, Java, and Haskell-based languages for writing these GPU compute programs, with the compilers producing SPIR code.\n\nDoes this mean we can use languages like Haskell for GPGPU workloads or when they say \"X-Based Language\", is this their own custom language/syntax for using the API?", "aSentId": 44299, "answer": "It's similar to LLVM - there are language frontends that compile to SPIR-V bytecode, and drivers compile the bytecode to native GPU machine code. You could write a compiler for any language to SPIR-V, although you have to keep in mind many GPUs cannot use things like stacks (which rules out recursive functions) or indexed arrays in shaders.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44300, "question": "It's similar to LLVM - there are language frontends that compile to SPIR-V bytecode, and drivers compile the bytecode to native GPU machine code. You could write a compiler for any language to SPIR-V, although you have to keep in mind many GPUs cannot use things like stacks (which rules out recursive functions) or indexed arrays in shaders.", "aSentId": 44301, "answer": "Thanks for the explanation.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44300, "question": "It's similar to LLVM - there are language frontends that compile to SPIR-V bytecode, and drivers compile the bytecode to native GPU machine code. You could write a compiler for any language to SPIR-V, although you have to keep in mind many GPUs cannot use things like stacks (which rules out recursive functions) or indexed arrays in shaders.", "aSentId": 44303, "answer": "&gt; indexed arrays in shaders.\n\nI've never seen them in use but HLSL has these features, although whether it's just syntactical sugar I don't know.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44304, "question": "&gt; indexed arrays in shaders.\n\nI've never seen them in use but HLSL has these features, although whether it's just syntactical sugar I don't know.", "aSentId": 44305, "answer": "Depends if it is dynamically indexed. A lot of mobile GPUs especially do not natively support it. I've seen a workaround, but it takes O(n) time to read or write elements.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44298, "question": "&gt;SPIR has previously been Khronos' intermediate language for compute shaders, used for harnessing the GPU's power for non-graphical workloads using the OpenCL API. \n\n&gt;there are, among others, JavaScript, C++, Python, Java, and Haskell-based languages for writing these GPU compute programs, with the compilers producing SPIR code.\n\nDoes this mean we can use languages like Haskell for GPGPU workloads or when they say \"X-Based Language\", is this their own custom language/syntax for using the API?", "aSentId": 44307, "answer": "I don't think there was anything stopping people from emitting GLSL from other languages (I mean people already did) or compiling other languages to GLSL. It's just that a more strict intermediate representation makes it a little easier. Although, as always, shader complexity restrictions apply.\n\nThe thing that I most look forward to is maybe mobile device driver developers not having as many bugs in their SPIR-V compilers as they have in their GLSL compilers. A man can dream, right?", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44298, "question": "&gt;SPIR has previously been Khronos' intermediate language for compute shaders, used for harnessing the GPU's power for non-graphical workloads using the OpenCL API. \n\n&gt;there are, among others, JavaScript, C++, Python, Java, and Haskell-based languages for writing these GPU compute programs, with the compilers producing SPIR code.\n\nDoes this mean we can use languages like Haskell for GPGPU workloads or when they say \"X-Based Language\", is this their own custom language/syntax for using the API?", "aSentId": 44309, "answer": "In principle yes, but I'm not sure if you'd really be able to meaningfully compile haskell for the GPU. A fairly restricted subset, perhaps.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44310, "question": "In principle yes, but I'm not sure if you'd really be able to meaningfully compile haskell for the GPU. A fairly restricted subset, perhaps.", "aSentId": 44311, "answer": "Thats correct. I suspect they refer to [accelerate](https://github.com/AccelerateHS/accelerate/), essentially an embedded DSL for writing GPU accelerated programms. Although every backend except the CUDA backend seems to be somewhat lacking at the moment. If they have an update in the pipeline for Vulkan / SPIR, that would be very nice!", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44315, "question": "Is there anything in there to help find out what the hell is wrong with my shader? I love graphics programming, I love shaders, but I hate debugging them.", "aSentId": 44316, "answer": "Apparently one of the focuses of the new standard was improving the debugging situation - in particular, paving the way for cross-vendor debuggers - without affecting production performance. So it sounds like you'll probably like it, although the lack of details is killing me. The upcoming demos cannot come soon enough!", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44318, "question": "Anyone want to place bets on when Mesa will get a working Vulkan implementation?  Two years?  Three?  We still don't have OpenGL 4.0 support.  Vulkan sounds awesome but we won't be seeing the benefits anytime soon in the Linux world.", "aSentId": 44319, "answer": "One part of the point is that since Vulkan is lower level, the driver has to do less, and requires less resources to develop. So if they commit to it, maybe it won't take that long.\n\nI'd also expect the GPU vendors to be pretty fast with Linux drivers.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44320, "question": "One part of the point is that since Vulkan is lower level, the driver has to do less, and requires less resources to develop. So if they commit to it, maybe it won't take that long.\n\nI'd also expect the GPU vendors to be pretty fast with Linux drivers.", "aSentId": 44321, "answer": "Because of AMD's involvement with Vulkan and Valve's push for Linux gaming, I'm going to *assume* that AMD will have a Vulkan implantation for Linux ASAP. Whether that is Catalyst or mesa, however...", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44320, "question": "One part of the point is that since Vulkan is lower level, the driver has to do less, and requires less resources to develop. So if they commit to it, maybe it won't take that long.\n\nI'd also expect the GPU vendors to be pretty fast with Linux drivers.", "aSentId": 44323, "answer": "Hopefully, I much prefer open drivers to proprietary, especially on AMD so I don't really care about vendors pushing it.  We need a Mesa/Gallium implementation.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44318, "question": "Anyone want to place bets on when Mesa will get a working Vulkan implementation?  Two years?  Three?  We still don't have OpenGL 4.0 support.  Vulkan sounds awesome but we won't be seeing the benefits anytime soon in the Linux world.", "aSentId": 44325, "answer": "Nvidia is always good about releasing quality drivers right when the spec is announced.  I expect to see them added to the binary blob on linux soon.  Vulcan is based on AMD's mantle so I suspect they will be early too for once, since its their technology.  Mesa is divided into a common high level part (mesa) and a low level (gallium) already.  If SPIR-V fits in nicely at the gallium level then Mesa-on-Vulkan should be working soon.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44326, "question": "Nvidia is always good about releasing quality drivers right when the spec is announced.  I expect to see them added to the binary blob on linux soon.  Vulcan is based on AMD's mantle so I suspect they will be early too for once, since its their technology.  Mesa is divided into a common high level part (mesa) and a low level (gallium) already.  If SPIR-V fits in nicely at the gallium level then Mesa-on-Vulkan should be working soon.", "aSentId": 44327, "answer": "Linux is an open source OS.  I don't consider Linux to truly \"have\" a feature until an open source implementation exists.  Proprietary drivers are just hold-overs until Mesa can come out with a proper implementation.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44318, "question": "Anyone want to place bets on when Mesa will get a working Vulkan implementation?  Two years?  Three?  We still don't have OpenGL 4.0 support.  Vulkan sounds awesome but we won't be seeing the benefits anytime soon in the Linux world.", "aSentId": 44329, "answer": "Both AMD and Intel are behind Vulkan and contribute to Mesa, so I expect to see it fairly quickly.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44331, "question": "I wonder what this means for WebGL. WebGL 2 (ES 3) was in progress, maybe they'll skip straight to Vulcan.", "aSentId": 44332, "answer": "Its not gonna happen, WebGL has many layers only to ensure you cannot crash the browser/machine, and precisely thats what Vulkan is good about, removing intermediate layers.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44331, "question": "I wonder what this means for WebGL. WebGL 2 (ES 3) was in progress, maybe they'll skip straight to Vulcan.", "aSentId": 44334, "answer": "very unlikely.  web standards move at a snails pace, and they are exactly known for picking up the latest unproven technology.\n\nIt's possible that some implementations of WebGL could use Vulcan under the covers though.  I believe IE is using DirectX to implement WebGL, and maybe even DirectX 12 on Win10.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44336, "question": "&gt; it will render AMD's Mantle largely obsolete.\n\nI thought Mantle and Vulkan are basically the same thing, just rebranded and modified.", "aSentId": 44337, "answer": "My understanding was that Vulkan (GLnext) was an independant effort from a number of players in the GPU \"developer\" arena - game technologists like engine developers along with GPU manufacturers like Intel (and others like Kronos of course, apologies to anyone i've forgotten).\n\nAMD graciously waived any IP protections on Mantle allowing that working group to borrow/use things from Mantle without fear of lawsuits.\n\nI think given AMD's manpower versus manpower of a number of industry players Mantle was a rather optimistic project for them anyway. Being a single GPU manufacturer API dooms Mantle to being an also ran pretty much by default.\n\nThe nice thing is that AMD will have explored and provided solutions to some of the sticking points for an API like this which means a faster Vulkan.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44338, "question": "My understanding was that Vulkan (GLnext) was an independant effort from a number of players in the GPU \"developer\" arena - game technologists like engine developers along with GPU manufacturers like Intel (and others like Kronos of course, apologies to anyone i've forgotten).\n\nAMD graciously waived any IP protections on Mantle allowing that working group to borrow/use things from Mantle without fear of lawsuits.\n\nI think given AMD's manpower versus manpower of a number of industry players Mantle was a rather optimistic project for them anyway. Being a single GPU manufacturer API dooms Mantle to being an also ran pretty much by default.\n\nThe nice thing is that AMD will have explored and provided solutions to some of the sticking points for an API like this which means a faster Vulkan.", "aSentId": 44339, "answer": "&gt; AMD graciously waived any IP protections on Mantle allowing that working group to borrow/use things from Mantle without fear of lawsuits.\n\nAs someone how did not see the Mantle API/specs ever I would be quite interested to hear how much of Mantle is in Vulkan at this point.  From my understanding it's not little.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44346, "question": "CamelCase vs underscores: Scientific showdown", "aSentId": 44347, "answer": "There's a third option which is always better, called  \"Internally Consistent With Whatever The Project Already Uses\" :p", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44348, "question": "There's a third option which is always better, called  \"Internally Consistent With Whatever The Project Already Uses\" :p", "aSentId": 44349, "answer": "Being internally consistent is, as always, the most important thing. \n\nBut consider, too, what is generally considered correct style for the language(s) you're using. Most libraries are going to follow the accepted conventions of the language (hopefully, the good ones, at least).\n\nFrankly, this is a holy war that I don't understand. It's not hard to switch between the two, use what is appropriate for the project/language you're working on.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44350, "question": "Being internally consistent is, as always, the most important thing. \n\nBut consider, too, what is generally considered correct style for the language(s) you're using. Most libraries are going to follow the accepted conventions of the language (hopefully, the good ones, at least).\n\nFrankly, this is a holy war that I don't understand. It's not hard to switch between the two, use what is appropriate for the project/language you're working on.", "aSentId": 44351, "answer": "It's a bike-shedding phenomenon. \n\n1. It's simple-enough to comprehend that everybody *can* have an opinion in it. \n2. It's widespread-enough that everybody cares at least a little bit about how it affects them.\n\n", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44350, "question": "Being internally consistent is, as always, the most important thing. \n\nBut consider, too, what is generally considered correct style for the language(s) you're using. Most libraries are going to follow the accepted conventions of the language (hopefully, the good ones, at least).\n\nFrankly, this is a holy war that I don't understand. It's not hard to switch between the two, use what is appropriate for the project/language you're working on.", "aSentId": 44353, "answer": "&gt; But consider, too, what is generally considered correct style for the language(s) you're using.\n\nThis is the guideline that, unfortunately, escapes the vast majority of developers. Thinking they can have opinions about certain style elements when they should just be mimicking what the language already prescribes.\n\nIt's kinda retarded to have a \"be consistent\" golden rule in your style guide and break consistency with the language in the first line of code you write.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44354, "question": "&gt; But consider, too, what is generally considered correct style for the language(s) you're using.\n\nThis is the guideline that, unfortunately, escapes the vast majority of developers. Thinking they can have opinions about certain style elements when they should just be mimicking what the language already prescribes.\n\nIt's kinda retarded to have a \"be consistent\" golden rule in your style guide and break consistency with the language in the first line of code you write.", "aSentId": 44355, "answer": "&gt;Thinking they can have opinions about certain style elements when they should just be mimicking what the language already prescribes.\n\nWhat annoys me is that in C++ code that uses the standard library but doesn't use underscores_everywhere is *horrifyingly* ugly. Yet people claim that CamelCase is standard. It absolutely isn't.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44354, "question": "&gt; But consider, too, what is generally considered correct style for the language(s) you're using.\n\nThis is the guideline that, unfortunately, escapes the vast majority of developers. Thinking they can have opinions about certain style elements when they should just be mimicking what the language already prescribes.\n\nIt's kinda retarded to have a \"be consistent\" golden rule in your style guide and break consistency with the language in the first line of code you write.", "aSentId": 44357, "answer": "honestly if your biggest problems are consistent style issues you are spoiled. I say you can worry about style once all your naming architecture and algorithmic issues are resolved. ", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44348, "question": "There's a third option which is always better, called  \"Internally Consistent With Whatever The Project Already Uses\" :p", "aSentId": 44359, "answer": "That's Spaced Camel Case.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44360, "question": "That's Spaced Camel Case.", "aSentId": 44361, "answer": "I would've gotten away with it too, if it weren't for you meddling kids!", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44360, "question": "That's Spaced Camel Case.", "aSentId": 44363, "answer": "That's Title Case.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44348, "question": "There's a third option which is always better, called  \"Internally Consistent With Whatever The Project Already Uses\" :p", "aSentId": 44365, "answer": "This is called when in Rome.\n\nHowever, my preference is for _ everything except in Java and some OO for a demonstrable reason. It is better suited to meta coding.\n\nVisually it is more distinct as well and less prone to the problems that camel case has being closer to spoken languages.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44346, "question": "CamelCase vs underscores: Scientific showdown", "aSentId": 44371, "answer": "I found it funny how the title suggests a scientific approach only to have him completely disregard the research. Anyway, I'm in the mixed camp with snake case for everything except objects. ", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44372, "question": "I found it funny how the title suggests a scientific approach only to have him completely disregard the research. Anyway, I'm in the mixed camp with snake case for everything except objects. ", "aSentId": 44373, "answer": "The author argues that the basis for the conclusion the study describes is flawed when it comes to reading/writing code. The author then removes all the results in their opinion that are irrelevant, which leaves only one result to consider.  All the data that was gathered in the study, was gathered in a scietific way.\n\n&amp;nbsp;\n\nThe author does make a conclusion based on scientific results, the question is, do you agree with the author's reasoning for throwing out some of the results?", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44374, "question": "The author argues that the basis for the conclusion the study describes is flawed when it comes to reading/writing code. The author then removes all the results in their opinion that are irrelevant, which leaves only one result to consider.  All the data that was gathered in the study, was gathered in a scietific way.\n\n&amp;nbsp;\n\nThe author does make a conclusion based on scientific results, the question is, do you agree with the author's reasoning for throwing out some of the results?", "aSentId": 44375, "answer": "Not at all. \"Correctness isn\u2019t of much importance\"... did he forgot that is talking about programming?", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44376, "question": "Not at all. \"Correctness isn\u2019t of much importance\"... did he forgot that is talking about programming?", "aSentId": 44377, "answer": "Exactly. Correctness should be the *most* important.\n\nThe experiment is interesting. The OP's cherry picking of the results isn't.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44376, "question": "Not at all. \"Correctness isn\u2019t of much importance\"... did he forgot that is talking about programming?", "aSentId": 44379, "answer": "Except he's right, as he said:\n\n&gt; This is not a common scenario when programming.\n\nThe need to quickly differentiate **very similar** identifiers is rare in programming.  The need to read through code is very common in programming.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44380, "question": "Except he's right, as he said:\n\n&gt; This is not a common scenario when programming.\n\nThe need to quickly differentiate **very similar** identifiers is rare in programming.  The need to read through code is very common in programming.", "aSentId": 44381, "answer": "That is not rare at all, check any property file or configuration file or package and you'll see a lot of similar names, and if that is not enough any IDE is going to suggest them together (sorted alphabetically) when you ask for completion.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44382, "question": "That is not rare at all, check any property file or configuration file or package and you'll see a lot of similar names, and if that is not enough any IDE is going to suggest them together (sorted alphabetically) when you ask for completion.", "aSentId": 44383, "answer": "It is incredibly rare actually relative to how much code you are reading, it doesn't nothing but hurt the process of reading.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44384, "question": "It is incredibly rare actually relative to how much code you are reading, it doesn't nothing but hurt the process of reading.", "aSentId": 44385, "answer": "I'm looking at code and is not rare at all. And i'd rather spend 13% more time reading code than a day due to a wrong name being used somewhere, that from what it says in the article is going to be 51% harder to detect.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44386, "question": "I'm looking at code and is not rare at all. And i'd rather spend 13% more time reading code than a day due to a wrong name being used somewhere, that from what it says in the article is going to be 51% harder to detect.", "aSentId": 44387, "answer": "If you waste 1 day finding a name conflict that was impacted by differentiating similar names, you would have lost 2/3 of one day without that 51% increase.  If you are using wrong names and spending that long finding them at a rate of once every four days or fewer, then you have far more serious issues to address.\n\nYour job is based on being logical, stop digging your heals and fighting against logic just to defend a personal preference.  You are objectively wrong, be logical.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44388, "question": "If you waste 1 day finding a name conflict that was impacted by differentiating similar names, you would have lost 2/3 of one day without that 51% increase.  If you are using wrong names and spending that long finding them at a rate of once every four days or fewer, then you have far more serious issues to address.\n\nYour job is based on being logical, stop digging your heals and fighting against logic just to defend a personal preference.  You are objectively wrong, be logical.", "aSentId": 44389, "answer": "My point is not against or in favor of one method or the other since I use both and never noticed any difference among them, my point is that stating that correctness \"isn't of much importance\" because the IDE has autocompletion... is far from correct, because that's how the IDE suggests things, by finding something similar to what you are writing.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44390, "question": "My point is not against or in favor of one method or the other since I use both and never noticed any difference among them, my point is that stating that correctness \"isn't of much importance\" because the IDE has autocompletion... is far from correct, because that's how the IDE suggests things, by finding something similar to what you are writing.", "aSentId": 44391, "answer": "He did not say that correctness is not of importance due to IDE's autocompletion.  That was just a side point he made.  Likely this was due to the test that was constructed to assess \"correctness\" giving you a variable on one screen and then having you select it amongst 3 other distractors (intentionally similar and wrong, more likely to NOT exist than to exist) which were all in clouds and moving on the screen.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44384, "question": "It is incredibly rare actually relative to how much code you are reading, it doesn't nothing but hurt the process of reading.", "aSentId": 44393, "answer": "It's definitely more complicated than that.\n\nEven if it is quite rare, those sort of mistakes can be quite difficult to debug.  Sometimes, you'll see the problem while debugging, but not even notice it the first time around.  Subtle typos are a significant source of errors and frustrations.\n\nYou can certainly argue both ways, and claiming objectivity while interpreting results is ridiculous.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44394, "question": "It's definitely more complicated than that.\n\nEven if it is quite rare, those sort of mistakes can be quite difficult to debug.  Sometimes, you'll see the problem while debugging, but not even notice it the first time around.  Subtle typos are a significant source of errors and frustrations.\n\nYou can certainly argue both ways, and claiming objectivity while interpreting results is ridiculous.", "aSentId": 44395, "answer": "Having something be 50% more difficult on the rare occasion is better than having something be 20% more difficult on the every-day common occasion.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44372, "question": "I found it funny how the title suggests a scientific approach only to have him completely disregard the research. Anyway, I'm in the mixed camp with snake case for everything except objects. ", "aSentId": 44397, "answer": "A single small study is not scientifically conclusive and it is fair for it to be open to interpretation. The argument misses some functional aspects of the two approaches however.\n\nAn example of it being open to interpretation, the better error spotting for camel case may be related to the fact that it takes longer to read.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44346, "question": "CamelCase vs underscores: Scientific showdown", "aSentId": 44399, "answer": "Someday, in the glorious future, when the world has come to its senses, people will realize that we should have been using hyphens the whole time.  If only the languages-i-use-that-aren't-lisps supported them as identifier-characters.  Sigh.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44400, "question": "Someday, in the glorious future, when the world has come to its senses, people will realize that we should have been using hyphens the whole time.  If only the languages-i-use-that-aren't-lisps supported them as identifier-characters.  Sigh.", "aSentId": 44401, "answer": "    some-variable - other-var -third-one- oh-jesus-christ-why-would+you-do-this", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44402, "question": "    some-variable - other-var -third-one- oh-jesus-christ-why-would+you-do-this", "aSentId": 44403, "answer": "    (- some-variable \n       other-var \n       third-one \n       (+ oh-jesus-christ-why-would \n            you-do-this))", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44402, "question": "    some-variable - other-var -third-one- oh-jesus-christ-why-would+you-do-this", "aSentId": 44405, "answer": "So I never need to use the shift key to type a variable name.  And I'm used to using spaces to separate language tokens, so the idea of writing addition or subtraction as (a - b) or (a + b) doesn't seem terribly onerous.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44406, "question": "So I never need to use the shift key to type a variable name.  And I'm used to using spaces to separate language tokens, so the idea of writing addition or subtraction as (a - b) or (a + b) doesn't seem terribly onerous.", "aSentId": 44407, "answer": "Tried swapping underscore with hyphen? Some editors (emacs at least) allow hooks for whatever context you're in. Clojure -&gt; hyphen is default. Python -&gt; underscore. ", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44402, "question": "    some-variable - other-var -third-one- oh-jesus-christ-why-would+you-do-this", "aSentId": 44409, "answer": "Meanwhile in C:\n\n    int x = 0;\n    x = x - --x -x--;\n    printf(\"%d\\n\",x)\n\nWhat's the output?", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44410, "question": "Meanwhile in C:\n\n    int x = 0;\n    x = x - --x -x--;\n    printf(\"%d\\n\",x)\n\nWhat's the output?", "aSentId": 44411, "answer": "42! It looks like you found the ultimate question. ", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44410, "question": "Meanwhile in C:\n\n    int x = 0;\n    x = x - --x -x--;\n    printf(\"%d\\n\",x)\n\nWhat's the output?", "aSentId": 44413, "answer": "Trick question, it's undefined.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44400, "question": "Someday, in the glorious future, when the world has come to its senses, people will realize that we should have been using hyphens the whole time.  If only the languages-i-use-that-aren't-lisps supported them as identifier-characters.  Sigh.", "aSentId": 44415, "answer": "How about this one: variables are whatever, in brackets or the like.\n\n`[this is a variable] + [Another variable, nice.] == 936 * [cool]`", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44416, "question": "How about this one: variables are whatever, in brackets or the like.\n\n`[this is a variable] + [Another variable, nice.] == 936 * [cool]`", "aSentId": 44417, "answer": "Syntax error. You forgot the trailing space in the first variable name.\n\n    [this is a variable ] + [Another variable, nice.] == 936 * [cool]\n\n(Not a joke. I actually deal with databases with trailing spaces in column names.)", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44418, "question": "Syntax error. You forgot the trailing space in the first variable name.\n\n    [this is a variable ] + [Another variable, nice.] == 936 * [cool]\n\n(Not a joke. I actually deal with databases with trailing spaces in column names.)", "aSentId": 44419, "answer": "I hope they pay accordingly.\n\n", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44420, "question": "I hope they pay accordingly.\n\n", "aSentId": 44421, "answer": "I caught it early enough to only waste half a day. So we're talking about hundreds, not thousands, of dollars of wasted time billed back to the customer.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44416, "question": "How about this one: variables are whatever, in brackets or the like.\n\n`[this is a variable] + [Another variable, nice.] == 936 * [cool]`", "aSentId": 44423, "answer": "Works in Tcl:\n\n    set {foo bar} \"I hate you if you actually do this!\"\n    puts ${foo bar}", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44400, "question": "Someday, in the glorious future, when the world has come to its senses, people will realize that we should have been using hyphens the whole time.  If only the languages-i-use-that-aren't-lisps supported them as identifier-characters.  Sigh.", "aSentId": 44425, "answer": "&gt; If only the languages-i-use-that-aren't-lisps supported them as identifier-characters. \n\nPerl6 does.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44427, "question": "The problem with snake case (I saw it called kebab case elsewhere) is that double clicking on part of the identifier in most environments doesn't select the whole identifier, only the part between the hyphens.\n\nAaaand you know when a topic is bike-shedding when I of all people can comment on it.", "aSentId": 44428, "answer": "Double click selects by word, not identifier, just double click and drag.  When navigating/editing with Ctrl, you also move/delete in words.  Maybe it's preference, but that's the way I think it should be.  In any decent editor, you should be able to change your the word chars to include underscores too.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44429, "question": "Double click selects by word, not identifier, just double click and drag.  When navigating/editing with Ctrl, you also move/delete in words.  Maybe it's preference, but that's the way I think it should be.  In any decent editor, you should be able to change your the word chars to include underscores too.", "aSentId": 44430, "answer": "Yeah it's usually when I'm outside an editor that it bothers me, like on front-end stuff.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44433, "question": "For some reason I associate camel case with object oriented programming", "aSentId": 44434, "answer": "You know, I do too.  When I program in python, I use underscore_names for functions and camelNames for methods.  I thought I read that in PEP 8 a long time ago, but I think I just imagined I did.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44435, "question": "You know, I do too.  When I program in python, I use underscore_names for functions and camelNames for methods.  I thought I read that in PEP 8 a long time ago, but I think I just imagined I did.", "aSentId": 44436, "answer": "PEP 8 prescribes underscores for functions and methods alike.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44437, "question": "PEP 8 prescribes underscores for functions and methods alike.", "aSentId": 44438, "answer": "No, yeah, I see that now.  I'd been doing it the other way because of some lie I put into my head a long time ago.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44435, "question": "You know, I do too.  When I program in python, I use underscore_names for functions and camelNames for methods.  I thought I read that in PEP 8 a long time ago, but I think I just imagined I did.", "aSentId": 44440, "answer": "I do the same, I was under the impression it was the python standard as well. I am sure I read it somewhere a few years ago, and the source must have looked legit to me at the time.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44441, "question": "I do the same, I was under the impression it was the python standard as well. I am sure I read it somewhere a few years ago, and the source must have looked legit to me at the time.", "aSentId": 44442, "answer": "Great!  I thought I was crazy.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44441, "question": "I do the same, I was under the impression it was the python standard as well. I am sure I read it somewhere a few years ago, and the source must have looked legit to me at the time.", "aSentId": 44444, "answer": "&gt; I was under the impression it was the python standard as well\n\nStandard library doesn't always follow it as can be seen by unittest.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44433, "question": "For some reason I associate camel case with object oriented programming", "aSentId": 44446, "answer": "Me too! I used to work at a place where we had a load of code in C and some more recent stuff in C++.  The C code was all underscores the C++ camel case.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44433, "question": "For some reason I associate camel case with object oriented programming", "aSentId": 44448, "answer": "usually because most OO (by sheer LOC) is written in java, which is usually done in camel.  JS OO is terrible.  PHP is slightly better.  python, meh.\n\nthe major thing I don't like about camel is that it gets in fights with certain stacks and ORMs.  many database layers suck with capital letters, and that means you lose a lot of power in dynamic inheritance (the kind that gets rid of huge amounts of boilerplate) unless you use underscores.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44450, "question": "My preference is actually a mixture. Use snake_case for variables and common identifiers, camelCase for functions and methods, PascalCase for types and namespaces (except in python, I stick with lower case module names because reasons), and finally UPPER_SNAKE_CASE for constants. It just acts as extra hinting, and then everyone gets represented (except lispers, because dashes are terrible). ", "aSentId": 44451, "answer": "That's what I see people do a lot in java. ", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44452, "question": "That's what I see people do a lot in java. ", "aSentId": 44453, "answer": "Sans snake case local variables, I'd say. Java tends to be rather camel-case heavy outside of enums and other constants.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44454, "question": "Sans snake case local variables, I'd say. Java tends to be rather camel-case heavy outside of enums and other constants.", "aSentId": 44455, "answer": "Oh you're right, didn't notice that. ", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44450, "question": "My preference is actually a mixture. Use snake_case for variables and common identifiers, camelCase for functions and methods, PascalCase for types and namespaces (except in python, I stick with lower case module names because reasons), and finally UPPER_SNAKE_CASE for constants. It just acts as extra hinting, and then everyone gets represented (except lispers, because dashes are terrible). ", "aSentId": 44457, "answer": "Another useful tactic, particularly in the loosely-typed languages and ecosystems systems of the web-world, is to use camelCase for your code-variables, and snake_case for stuff like HTML form names or data that goes-into/arrives-from a different context. \n\n    $customerName = $request-&gt;getParam(\"customer_name\");\n    $totalAmount = $row-&gt;total_amount\n\nIt makes it a lot easier to find things and refactor.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44458, "question": "Another useful tactic, particularly in the loosely-typed languages and ecosystems systems of the web-world, is to use camelCase for your code-variables, and snake_case for stuff like HTML form names or data that goes-into/arrives-from a different context. \n\n    $customerName = $request-&gt;getParam(\"customer_name\");\n    $totalAmount = $row-&gt;total_amount\n\nIt makes it a lot easier to find things and refactor.", "aSentId": 44459, "answer": "I do this, anything that crosses systems or is i/o gets snake_case and anything that is wholly internal to the system gets camelCase. This helps remember that things with snake_case are potentially unsafe and must be validated and cleansed before working with.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44458, "question": "Another useful tactic, particularly in the loosely-typed languages and ecosystems systems of the web-world, is to use camelCase for your code-variables, and snake_case for stuff like HTML form names or data that goes-into/arrives-from a different context. \n\n    $customerName = $request-&gt;getParam(\"customer_name\");\n    $totalAmount = $row-&gt;total_amount\n\nIt makes it a lot easier to find things and refactor.", "aSentId": 44461, "answer": "To add to this, you could use spinal-case/kebab-case for anything related to CSS as that relates to another context, so to speak.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44450, "question": "My preference is actually a mixture. Use snake_case for variables and common identifiers, camelCase for functions and methods, PascalCase for types and namespaces (except in python, I stick with lower case module names because reasons), and finally UPPER_SNAKE_CASE for constants. It just acts as extra hinting, and then everyone gets represented (except lispers, because dashes are terrible). ", "aSentId": 44463, "answer": "Mine's exactly the same. I used to use camelCase for variable names too, but I do a lot of programming where variable names are based on mathematical nomenclature, so things like: \n\n    float cos_omega_io = dot(omega_i, omega_o);\n\ndoing the same In camel case is minging:\n\n    float cosOmegaIo = dot(omegaI, omegaO);\n\n", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44465, "question": "Programming is about logic, the only purpose for higher level languages is to facilitate humans reading the code, so the only logical conclusion here is the one that speeds up readability.  Stick to underscores guys, logic is your job.", "aSentId": 44466, "answer": "Logic is pointless without telos.\n\nOur telos should be beauty and rigor.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44467, "question": "Logic is pointless without telos.\n\nOur telos should be beauty and rigor.", "aSentId": 44468, "answer": "Our telos is readability and maintainability, that is the only telos of higher level languages outside of the speed of creation (which is also hampered by pure aesthetics).  Aesthetics itself has absolutely no purpose in programming.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44470, "question": "how-about-none? (lisp)", "aSentId": 44471, "answer": "    HWABT0 (FORTRAN IV)\n\nFixed (even works with `IMPLICIT`).", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44470, "question": "how-about-none? (lisp)", "aSentId": 44473, "answer": "Kebab-case FTW.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44470, "question": "how-about-none? (lisp)", "aSentId": 44475, "answer": "    (itym how-about-none-p)", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44478, "question": "Hyphenation is just so much better than either CamelCase or underscoring. It irks me that most languages don't support it.", "aSentId": 44479, "answer": "I'm curious about how you would handle the unary minus operator.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44480, "question": "I'm curious about how you would handle the unary minus operator.", "aSentId": 44481, "answer": "Pick one of two restrictions to deal with it:\n\nRequire a space in front of it.\n\n    - an-ident\n\nOr simply disallow identifiers that start with a hyphen.\n\n    -an-ident\n\nNot sure which way I like better. I'd probably go with both restrictions. Numeric literals are different though: `-3` is a valid literal negative three.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44482, "question": "Pick one of two restrictions to deal with it:\n\nRequire a space in front of it.\n\n    - an-ident\n\nOr simply disallow identifiers that start with a hyphen.\n\n    -an-ident\n\nNot sure which way I like better. I'd probably go with both restrictions. Numeric literals are different though: `-3` is a valid literal negative three.", "aSentId": 44483, "answer": "What about binary subtraction?  Add spaces?  To a language that probably gives zero fucks about whitespace?  ", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44484, "question": "What about binary subtraction?  Add spaces?  To a language that probably gives zero fucks about whitespace?  ", "aSentId": 44485, "answer": "Yeah, operators must be surrounded by spaces in my imaginary language. I personally think this is just good style. I'm not entirely convinced that unary operators should be space-separated from their operand, though.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44487, "question": "Nice write up.  I'm curious how many in either camp have actually used both styles and switched between them, more than once.\n\n&amp;nbsp;\n\nPersonall I started with camel case, switched to underscores, and am now(not by choice) back to camel case.  Having used and switched between both, I prefer underscores.\n\n&amp;nbsp;\n\nThen again, it seems like I also like using whitespace in my code more than most devs.  This may be due to starting out as a C dev and getting tired of reading code people wrote like they only have a 40 character wide terminal(can't be 80 since you \"need\" multiple terminals open).", "aSentId": 44488, "answer": "I mainly use underscores, probably due to most of my professional work being in Perl. I know I've used camel case in the past, and I'm trying to think of whether I ever still use it. I feel like maybe I do for short variables, but I don't know - even $dog_a looks better to me than $dogA", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44489, "question": "I mainly use underscores, probably due to most of my professional work being in Perl. I know I've used camel case in the past, and I'm trying to think of whether I ever still use it. I feel like maybe I do for short variables, but I don't know - even $dog_a looks better to me than $dogA", "aSentId": 44490, "answer": "Is it just me or does anyone else find it ironic that Perl doesn't use camel case?  Funnily enough, OCamel seems to use a mixture.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44491, "question": "Is it just me or does anyone else find it ironic that Perl doesn't use camel case?  Funnily enough, OCamel seems to use a mixture.", "aSentId": 44492, "answer": "I've actually never thought about that. Maybe it's just another way for Perl to confuse non-Perl programmers.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44491, "question": "Is it just me or does anyone else find it ironic that Perl doesn't use camel case?  Funnily enough, OCamel seems to use a mixture.", "aSentId": 44494, "answer": "&gt; Perl doesn't use camel case?\n\nit really should be the spaghetti book, not camel book.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44487, "question": "Nice write up.  I'm curious how many in either camp have actually used both styles and switched between them, more than once.\n\n&amp;nbsp;\n\nPersonall I started with camel case, switched to underscores, and am now(not by choice) back to camel case.  Having used and switched between both, I prefer underscores.\n\n&amp;nbsp;\n\nThen again, it seems like I also like using whitespace in my code more than most devs.  This may be due to starting out as a C dev and getting tired of reading code people wrote like they only have a 40 character wide terminal(can't be 80 since you \"need\" multiple terminals open).", "aSentId": 44496, "answer": "My reason for not using underscores is quite simple: they make me pause mentally. It gets a bit weird reading code like that. Plus, camelCase just looks and feels better to me, probably mostly because I'm used to it. ", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44487, "question": "Nice write up.  I'm curious how many in either camp have actually used both styles and switched between them, more than once.\n\n&amp;nbsp;\n\nPersonall I started with camel case, switched to underscores, and am now(not by choice) back to camel case.  Having used and switched between both, I prefer underscores.\n\n&amp;nbsp;\n\nThen again, it seems like I also like using whitespace in my code more than most devs.  This may be due to starting out as a C dev and getting tired of reading code people wrote like they only have a 40 character wide terminal(can't be 80 since you \"need\" multiple terminals open).", "aSentId": 44498, "answer": "I've switched between them more than once. 5 times in a single file even! And when creating table and field names for use in SQL statements I make sure to switch between at least 4 different naming schemes so I'm the only one who can use the db efficiently. ", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44503, "question": "Cant_We_Have_Both?", "aSentId": 44504, "answer": "disgusting", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44505, "question": "disgusting", "aSentId": 44506, "answer": "It's actually the convention in the GNAT Ada coding style. I don't hate it anymore, and it *is* surprisingly readable.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44505, "question": "disgusting", "aSentId": 44508, "answer": "I think it's super readable. It's what I do in C\n\n    ModuleName_SomeFunction(ModuleName_SomeType *arg);", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44509, "question": "I think it's super readable. It's what I do in C\n\n    ModuleName_SomeFunction(ModuleName_SomeType *arg);", "aSentId": 44510, "answer": "In the absence of an actual namespace mechanism... it's not bad.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44509, "question": "I think it's super readable. It's what I do in C\n\n    ModuleName_SomeFunction(ModuleName_SomeType *arg);", "aSentId": 44512, "answer": "For module consts do you name them\n\n    ModuleName_CONSTANT //or\n    MODULE_NAME_CONSTANT\n?", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44513, "question": "For module consts do you name them\n\n    ModuleName_CONSTANT //or\n    MODULE_NAME_CONSTANT\n?", "aSentId": 44514, "answer": "I use all caps for constants:\n\n    typedef enum\n    {\n        GPIO_MODE_OUTPUT_PUSHPULL,\n        GPIO_MODE_INPUT_PULLUP,\n        GPIO_MODE_WHATEVER\n    } GPIO_Mode;\n\n    GPIO_SetPinMode(GPIOA, 19, GPIO_MODE_OUTPUT_PUSHPULL);", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44503, "question": "Cant_We_Have_Both?", "aSentId": 44516, "answer": "__oH_hAI_gUYS", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44503, "question": "Cant_We_Have_Both?", "aSentId": 44518, "answer": "Would it not be:  \ncant_We_Have_Both", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44519, "question": "Would it not be:  \ncant_We_Have_Both", "aSentId": 44520, "answer": "Camel case looks so off balance to me.  The lower case part was meant to be type information (`flRand`) or namespace (`glGenBuffers`)--not the first word.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44523, "question": "$camelCase variables type like a breeze, $underscore_variables are easier to read.\n\nFor me, it's like a flipFlop vs. high_heels discussion. Yes... it's easier to wear flip-flops, but women look waaaay sexier with high heels.\n\nFor the code that wants to be cozy, and doesn't care that their partner (team) likes the high heels better... Keep on doing the cozy thing with easier typing.\n\nIf you want your code wanted (readable), put some effort in it, and put on those damn high_heels!", "aSentId": 44524, "answer": "I wouldn't say snake case is objectively easier to read. I'm fairly certain it isn't to me. ", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44525, "question": "I wouldn't say snake case is objectively easier to read. I'm fairly certain it isn't to me. ", "aSentId": 44526, "answer": "If camelCase is easier to read for you, go get them flipFlop girls! ;)\n\n(Seriously.. If cc is better readable for your team --or whatever-- use that. Don't listen to some guys on the internet who say something *should* be better readable)", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44531, "question": "I've used both in different projects and always have liked camel case more.  Camel case looks cleaner to me.  I find it much easier to read.  Something about underscores just feels like part of a sigil based language.  Adds extra ugly junk to the variable names.\n\nAbout the only time I use underscores is for constants.  \n\nI can switch between either one though.  After a while you just get used to different styles.  Probably the only one that I'm seriously dead set against is people who do this:  \n\n    if(x==5)\n        {\n        printf(\"meh\");\n        more statements...\n        }\n        ", "aSentId": 44532, "answer": "I'm betting you'd probably love this style:\n\n    if(x==5)\n      {\n        printf(\"meh\");\n      }", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44533, "question": "I'm betting you'd probably love this style:\n\n    if(x==5)\n      {\n        printf(\"meh\");\n      }", "aSentId": 44534, "answer": "Oh GNU...\n\nIt actually makes the most sense from a grammar point of view. But it looks like shit.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44533, "question": "I'm betting you'd probably love this style:\n\n    if(x==5)\n      {\n        printf(\"meh\");\n      }", "aSentId": 44536, "answer": "It's not ideal, but I'd prefer that over it being inline with the braces.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44542, "question": "&gt;Seriously, as a programmer it is your duty to learn blind typing with all ten fingers\n\nSTRONGLY DISAGREE!\n\nI have been programming since 1972\n\nI have completed many, many successful projects for satisfied customers who paid me well..I believe I can honestly call myself a successful programmer\n\nI tried, and failed, to learn to touch type with all 10 fingers. I also tried, and failed, to learn to play the piano\n\nAnd, I am not alone. I once saw a video of Arthur C Clarke..typing with 2 fingers\n\n..BTW.. I vote for Camel Case", "aSentId": 44543, "answer": "This cognitive dissonance among developers has long baffled me. We know we're supposed to produce well thought out code that is easy to read and maintain but somehow our value is tied to the speed of our typing and we can't bear lifting our hand to touch the mouse because that \"slows us down\"...", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44544, "question": "This cognitive dissonance among developers has long baffled me. We know we're supposed to produce well thought out code that is easy to read and maintain but somehow our value is tied to the speed of our typing and we can't bear lifting our hand to touch the mouse because that \"slows us down\"...", "aSentId": 44545, "answer": "I think this sort of stuff is usually less about raw speed and more about being able to manipulate your UI without having to think about it. Once I learn keyboard shortcuts for something and use them a few times, I don't have to pause and think about how to perform that action anymore. I can do it reflexively, which means I don't lose my train of thought.\n\nBut to each their own. As long as you get the job done, do whatever works best for you.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44544, "question": "This cognitive dissonance among developers has long baffled me. We know we're supposed to produce well thought out code that is easy to read and maintain but somehow our value is tied to the speed of our typing and we can't bear lifting our hand to touch the mouse because that \"slows us down\"...", "aSentId": 44547, "answer": "&gt;but somehow our value is tied to the speed of our typing\n\nYES!\n\nWriting good code has nothing whatsoever to do with manual skill as a typist\n\n", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44548, "question": "&gt;but somehow our value is tied to the speed of our typing\n\nYES!\n\nWriting good code has nothing whatsoever to do with manual skill as a typist\n\n", "aSentId": 44549, "answer": "I'd be curious to learn if there is research on this. My gut says it might make a difference. When you type faster, you translate your thoughts into code, possibly leaving more time to think about the problem.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44542, "question": "&gt;Seriously, as a programmer it is your duty to learn blind typing with all ten fingers\n\nSTRONGLY DISAGREE!\n\nI have been programming since 1972\n\nI have completed many, many successful projects for satisfied customers who paid me well..I believe I can honestly call myself a successful programmer\n\nI tried, and failed, to learn to touch type with all 10 fingers. I also tried, and failed, to learn to play the piano\n\nAnd, I am not alone. I once saw a video of Arthur C Clarke..typing with 2 fingers\n\n..BTW.. I vote for Camel Case", "aSentId": 44551, "answer": "Unfortunately, nobody cares what you think, because you are, at this very moment, at ground zero of the 20-30 year old world. A world where 1972 and 1772 are more-or-less the same era.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44552, "question": "Unfortunately, nobody cares what you think, because you are, at this very moment, at ground zero of the 20-30 year old world. A world where 1972 and 1772 are more-or-less the same era.", "aSentId": 44553, "answer": "I'm still getting paid very well to write code", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44552, "question": "Unfortunately, nobody cares what you think, because you are, at this very moment, at ground zero of the 20-30 year old world. A world where 1972 and 1772 are more-or-less the same era.", "aSentId": 44555, "answer": "That would have been a very good sarcastic joke. I would have upvoted it. Unfortunately you didnt add \"/s\" so it was too rude. Here, have my downvote", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44557, "question": "In C-style languages with a lot of syntactic redundancy, we could just be using whitespace:\n\n    enum Connectedness {\n       WEAKLY CONNECTED,\n       STRONGLY CONNECTED\n    };\n\n    common friends = intersect(friends of(x), friends of(y));\n    if (common friends.length() &lt; 5)\n        return WEAKLY CONNECTED;\n    return STRONGLY CONNECTED;\n\nOf course, identifiers couldn\u2019t include (or at least start with) keywords, and you probably wouldn\u2019t want to break identifiers across lines.\n", "aSentId": 44558, "answer": "Please stay away from my codebase", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44559, "question": "Please stay away from my codebase", "aSentId": 44560, "answer": "Could you explain? No mainstream language offers the feature of multi-token identifiers, so your codebase is safe from whatever it is about such a feature that threatens you.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44561, "question": "Could you explain? No mainstream language offers the feature of multi-token identifiers, so your codebase is safe from whatever it is about such a feature that threatens you.", "aSentId": 44562, "answer": "Clever programmers are dangerous", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44563, "question": "Clever programmers are dangerous", "aSentId": 44564, "answer": "Hah, okay, I\u2019m assuming you\u2019re just joking, because this has nothing to do with programmer cleverness.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44567, "question": "Underscores screw up my naming conventions in databases. The standard pattern for an index across two columns is \n\n    [indexType]_[tableName]_[Column1]_[Column2]\n\nConsider this index name:\n\n    IX_Foo_Bar_Baz_Blah\n\nWhat's the table name? Foo? Foo_Bar? \n\nIt is is Foo, then are the columns Bar_Baz and Blah? Or Bar and Baz_Blah?\n\n***\n\nI bring up databases because if we have different conventions in the database and the application code, mapping between the two becomes a royal pain in the ass.", "aSentId": 44568, "answer": "Mapping can be a pain in the ass, but at least you centralize your pain in the ass into that one location (the module you wrote that interfaces with your DB).\n\nNow all your code that uses your module can continue using the conventions of the rest of your codebase, without you having to change your DB conventions to match your codebase.  Added bonus: Multiple codebases do not need to all follow the same conventions,   so your Go code can still look like Go code and your perl can stay perly.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44570, "question": "Anyone who has spent any significant amount of time modifying other people's code could have told you this very quickly.\n\nThe problem is all these \"artists\" who came in and decided that readability meant aesthetics.  So you get CamelCase, overly descriptive names, single-parameter-per-line conventions.  A whole bunch of nonsense to make it look pretty from the outside, but yet ultimately slows readability significantly, making it take far more time and effort to read and understand.", "aSentId": 44571, "answer": "I don't see how single parameter per line and overly descriptive name (I've never seen one BTW) decrease readability", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44572, "question": "I don't see how single parameter per line and overly descriptive name (I've never seen one BTW) decrease readability", "aSentId": 44573, "answer": "Single parameter per line adds excessive spacing/paragraphing, putting less information on the screen at any one time, and slowing down the natural process of jumping around while reading.  It decreases readability, but it does look pretty.\n\nOverly descriptive names add excessive context that is either always unnecessary or only needed the first time it is read and thereafter is unnecessary.  Quick examples would be adding type information to variables in a strongly typed language (e.g. class ballClass) and refusing to abbreviate (e.g. CopyString vs strcpy).\n\nThese things are more visually appealing but slow down the process of reading the code.  \n\n", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44574, "question": "Single parameter per line adds excessive spacing/paragraphing, putting less information on the screen at any one time, and slowing down the natural process of jumping around while reading.  It decreases readability, but it does look pretty.\n\nOverly descriptive names add excessive context that is either always unnecessary or only needed the first time it is read and thereafter is unnecessary.  Quick examples would be adding type information to variables in a strongly typed language (e.g. class ballClass) and refusing to abbreviate (e.g. CopyString vs strcpy).\n\nThese things are more visually appealing but slow down the process of reading the code.  \n\n", "aSentId": 44575, "answer": "&gt; (e.g. CopyString vs strcpy)\n\nI would consider CopyString to be much easier (and most likely much faster) to read.\n\nEven if parsing that abbreviation is done in an instant, that is still ages compared to the difference in speed of reading a word that is 10 characters rather than 6.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44576, "question": "&gt; (e.g. CopyString vs strcpy)\n\nI would consider CopyString to be much easier (and most likely much faster) to read.\n\nEven if parsing that abbreviation is done in an instant, that is still ages compared to the difference in speed of reading a word that is 10 characters rather than 6.", "aSentId": 44577, "answer": "You would be wrong, but you can continue believing that if you would like.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44578, "question": "You would be wrong, but you can continue believing that if you would like.", "aSentId": 44579, "answer": "I agree with him. Seems that your _opinion_ could be incorrect. Ever consider that possibility?", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44580, "question": "I agree with him. Seems that your _opinion_ could be incorrect. Ever consider that possibility?", "aSentId": 44581, "answer": "Arguing over whose subjective opinion is correct is stupid even for reddit. ", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44574, "question": "Single parameter per line adds excessive spacing/paragraphing, putting less information on the screen at any one time, and slowing down the natural process of jumping around while reading.  It decreases readability, but it does look pretty.\n\nOverly descriptive names add excessive context that is either always unnecessary or only needed the first time it is read and thereafter is unnecessary.  Quick examples would be adding type information to variables in a strongly typed language (e.g. class ballClass) and refusing to abbreviate (e.g. CopyString vs strcpy).\n\nThese things are more visually appealing but slow down the process of reading the code.  \n\n", "aSentId": 44583, "answer": "&gt; These things are more visually appealing but slow down the process of reading the code.\n\n\"... for me\", you should have added.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44584, "question": "&gt; These things are more visually appealing but slow down the process of reading the code.\n\n\"... for me\", you should have added.", "aSentId": 44585, "answer": "For human programmers.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44586, "question": "For human programmers.", "aSentId": 44587, "answer": "You see, this is one of the issues with software engineering. While everyone would agree that turning it into actual engineering, with proper research done on how we should practice it would be great, most claims that are being thrown around are just personal opinions based on anecdotal evidence, with sample size close to 1.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44588, "question": "You see, this is one of the issues with software engineering. While everyone would agree that turning it into actual engineering, with proper research done on how we should practice it would be great, most claims that are being thrown around are just personal opinions based on anecdotal evidence, with sample size close to 1.", "aSentId": 44589, "answer": "Not quite, as we see here with research showing a 20% reduction in read time of CamelCase variables.  There's also a lot of research into natural language, which is directly applicable.\n\nAll extra bits that do not add information but do add verbosity, *objectively* hurt readability.  For example sc would be extremely terse but not give you enough information, strcmp is less terse but not verbose while giving you all information you need, and StringCompare is verbose without adding any information over strcmp.\n\nSure we can absolutely use more science in this matter, but let's not pretend we are just shooting in the dark with opinions on everything.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44588, "question": "You see, this is one of the issues with software engineering. While everyone would agree that turning it into actual engineering, with proper research done on how we should practice it would be great, most claims that are being thrown around are just personal opinions based on anecdotal evidence, with sample size close to 1.", "aSentId": 44591, "answer": "I love this. Have an upvote.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44574, "question": "Single parameter per line adds excessive spacing/paragraphing, putting less information on the screen at any one time, and slowing down the natural process of jumping around while reading.  It decreases readability, but it does look pretty.\n\nOverly descriptive names add excessive context that is either always unnecessary or only needed the first time it is read and thereafter is unnecessary.  Quick examples would be adding type information to variables in a strongly typed language (e.g. class ballClass) and refusing to abbreviate (e.g. CopyString vs strcpy).\n\nThese things are more visually appealing but slow down the process of reading the code.  \n\n", "aSentId": 44593, "answer": "Eh, do you see websites filling up every piece of screen real estate?\n\nWhitespace in code is like non-verbal communication.  You are subconsciously telling the programmer how to read the code, making it easier to follow the flow.  Having too much on screen results in you just glancing over it, without actually reading it or making you become fatigued quicker.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44594, "question": "Eh, do you see websites filling up every piece of screen real estate?\n\nWhitespace in code is like non-verbal communication.  You are subconsciously telling the programmer how to read the code, making it easier to follow the flow.  Having too much on screen results in you just glancing over it, without actually reading it or making you become fatigued quicker.", "aSentId": 44595, "answer": "Did you see me arguing to remove spacing and indentation?  What's good for a web site is also not exactly what's good for code...", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44599, "question": "asm.js Speedups Everywhere", "aSentId": 44600, "answer": "I was curious about what performance Chrome was bringing to asm.js so I ran some Emscripten demos yesterday. I updated both the Canary and beta versions of Chrome which should have had better support for asm.js.\n\nI confess I was impressed at running some of the games. Although some of the games had outdated look&amp;feel. But it was very exciting to see them working on the browser without plugins.\n\nThe downside was that the mouse and keyboard controls did not feel right all the time. In some 3D games I wanted the character to look up, and it was mostly looking down. I didn't feel I had the proper control of the characters.\n\nLoading time was also pretty bad at times. In one of them, Chrome was unresponsive for a while.\n\nMy experience showed that it's not just a matter of having the games barely work on the browser without plugins. It seemed to have an impedance mismatch.\n\nMaybe in a few years things will be better.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44601, "question": "I was curious about what performance Chrome was bringing to asm.js so I ran some Emscripten demos yesterday. I updated both the Canary and beta versions of Chrome which should have had better support for asm.js.\n\nI confess I was impressed at running some of the games. Although some of the games had outdated look&amp;feel. But it was very exciting to see them working on the browser without plugins.\n\nThe downside was that the mouse and keyboard controls did not feel right all the time. In some 3D games I wanted the character to look up, and it was mostly looking down. I didn't feel I had the proper control of the characters.\n\nLoading time was also pretty bad at times. In one of them, Chrome was unresponsive for a while.\n\nMy experience showed that it's not just a matter of having the games barely work on the browser without plugins. It seemed to have an impedance mismatch.\n\nMaybe in a few years things will be better.", "aSentId": 44602, "answer": "it already is - people who want to write games that people will pay for and actually play realized a long time ago that the web stack is a dead-end\n\nthe only org that cares at all about html5 gaming is mozilla, and maybe microsoft in a desperate attempt to get some traction for their mobile platforms (otherwise they don't, they already have xbox and pc gaming in their wheelhouse). google and apple (96% of the mobile market) do not care at all about html5 gaming...why should they, they already have something superior that they can control and users are familiar with that has known revenue models for developers\n\nwhy does proggit continue to care about html5 gaming when it is clear that no one else does?", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44603, "question": "it already is - people who want to write games that people will pay for and actually play realized a long time ago that the web stack is a dead-end\n\nthe only org that cares at all about html5 gaming is mozilla, and maybe microsoft in a desperate attempt to get some traction for their mobile platforms (otherwise they don't, they already have xbox and pc gaming in their wheelhouse). google and apple (96% of the mobile market) do not care at all about html5 gaming...why should they, they already have something superior that they can control and users are familiar with that has known revenue models for developers\n\nwhy does proggit continue to care about html5 gaming when it is clear that no one else does?", "aSentId": 44604, "answer": "There is a huge market of browser games out there. Millions of people are at this very moment playing some game on their browsers. The diversity of the gamers on the browser is hard to match. Maybe mobile comes close. But mobile is still more limited than what people have on their laptops and desktops. It ranges from players as young as 3 years old to players as old as 100 years old. From people playing at home to people playing the games at work.\n\nMozilla have revamped their browser with the challenge of the Firefox OS and just as an effort to stay competitive in the browser market. I think companies like Mozilla that have their own custom platform just want to make it possible for developers targeting other systems to also automatically support their platform.\n\nRunning some jsPerf benchmarks on Firefox can be quite surprising at times. Those micro-benchmarks can be much faster on Firefox than on Chrome. The problem for browsers like Firefox is that frameworks may target one browser better than another one. And that may make the performance difference bigger in larger applications. So although Firefox may be good at micro-benchmarks, at larger application benchmarks, it may still lag behind.\n\nWith technologies like asm.js that avoid some of the legacy of the browsers, it may be possible for browsers to catch up to one another and deliver good general performance. It may also push browsers into unlocking more of the JavaScript power that they haven't felt they needed to in the past.\n\nOne of the best features of browser games is that users don't have to download untrustworthy files from the internet that would run without a proper sandbox to contain their threats. Installing and \"uninstalling\" them is also as easy as opening and closing a browser tab. Plus, it may be the only way to create cross-platform applications with just a single backend. Although for now the promise of asm.js is only possible for the toolsets that support multiple backends. :-)", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44605, "question": "There is a huge market of browser games out there. Millions of people are at this very moment playing some game on their browsers. The diversity of the gamers on the browser is hard to match. Maybe mobile comes close. But mobile is still more limited than what people have on their laptops and desktops. It ranges from players as young as 3 years old to players as old as 100 years old. From people playing at home to people playing the games at work.\n\nMozilla have revamped their browser with the challenge of the Firefox OS and just as an effort to stay competitive in the browser market. I think companies like Mozilla that have their own custom platform just want to make it possible for developers targeting other systems to also automatically support their platform.\n\nRunning some jsPerf benchmarks on Firefox can be quite surprising at times. Those micro-benchmarks can be much faster on Firefox than on Chrome. The problem for browsers like Firefox is that frameworks may target one browser better than another one. And that may make the performance difference bigger in larger applications. So although Firefox may be good at micro-benchmarks, at larger application benchmarks, it may still lag behind.\n\nWith technologies like asm.js that avoid some of the legacy of the browsers, it may be possible for browsers to catch up to one another and deliver good general performance. It may also push browsers into unlocking more of the JavaScript power that they haven't felt they needed to in the past.\n\nOne of the best features of browser games is that users don't have to download untrustworthy files from the internet that would run without a proper sandbox to contain their threats. Installing and \"uninstalling\" them is also as easy as opening and closing a browser tab. Plus, it may be the only way to create cross-platform applications with just a single backend. Although for now the promise of asm.js is only possible for the toolsets that support multiple backends. :-)", "aSentId": 44606, "answer": "&gt; With technologies like asm.js that avoid some of the legacy of the browsers,\n\nDon't kid yourself: asm.js is Mozilla compiling C to a special form that is special-cased by their browser and no one else's, and only has a chance of running acceptably on theirs.  It's a platform play from a company without its own operating system or hardware.\n\nOnline card and board games have been around forever, and lots of people enjoy playing them; if you want to do \"mobile gaming,\" do that.  Make a nice online bridge site or something, and plenty of people will want to play.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44607, "question": "&gt; With technologies like asm.js that avoid some of the legacy of the browsers,\n\nDon't kid yourself: asm.js is Mozilla compiling C to a special form that is special-cased by their browser and no one else's, and only has a chance of running acceptably on theirs.  It's a platform play from a company without its own operating system or hardware.\n\nOnline card and board games have been around forever, and lots of people enjoy playing them; if you want to do \"mobile gaming,\" do that.  Make a nice online bridge site or something, and plenty of people will want to play.", "aSentId": 44608, "answer": "Recently Microsoft also announced that they plan to special-case asm.js subset.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44605, "question": "There is a huge market of browser games out there. Millions of people are at this very moment playing some game on their browsers. The diversity of the gamers on the browser is hard to match. Maybe mobile comes close. But mobile is still more limited than what people have on their laptops and desktops. It ranges from players as young as 3 years old to players as old as 100 years old. From people playing at home to people playing the games at work.\n\nMozilla have revamped their browser with the challenge of the Firefox OS and just as an effort to stay competitive in the browser market. I think companies like Mozilla that have their own custom platform just want to make it possible for developers targeting other systems to also automatically support their platform.\n\nRunning some jsPerf benchmarks on Firefox can be quite surprising at times. Those micro-benchmarks can be much faster on Firefox than on Chrome. The problem for browsers like Firefox is that frameworks may target one browser better than another one. And that may make the performance difference bigger in larger applications. So although Firefox may be good at micro-benchmarks, at larger application benchmarks, it may still lag behind.\n\nWith technologies like asm.js that avoid some of the legacy of the browsers, it may be possible for browsers to catch up to one another and deliver good general performance. It may also push browsers into unlocking more of the JavaScript power that they haven't felt they needed to in the past.\n\nOne of the best features of browser games is that users don't have to download untrustworthy files from the internet that would run without a proper sandbox to contain their threats. Installing and \"uninstalling\" them is also as easy as opening and closing a browser tab. Plus, it may be the only way to create cross-platform applications with just a single backend. Although for now the promise of asm.js is only possible for the toolsets that support multiple backends. :-)", "aSentId": 44610, "answer": "&gt; Millions of people are at this very moment playing some game on their browsers. The diversity of the gamers on the browser is hard to match. Maybe mobile comes close.\n\nwhat diversity do you speak? user demographics? the mobile gaming audience dwarfs the web gaming audience by a factor of 10? 100? and what about monetization? your best bet for web games is low-tier ads, which are almost guaranteed to net you 5% of what mobile in-app purchases will....where is the candy crush of web gaming? the only thing that comes close is shady online gambling sites...thats proabably the only place where there is real money changing hands for web \"gaming\"\n\nif it is device diversity you speak of....well, this is something developers are actively trying to avoid, for good reason. \n\n&gt; One of the best features of browser games is that users don't have to download untrustworthy files from the internet that would run without a proper sandbox to contain their threats.\n\nneither do mobile users. as flawed as the app store model might be, i trust it far more than arbitrary urls on the web.\n\n&gt; Plus, it may be the only way to create cross-platform applications with just a single backend\n\nno one cares about this anymore, it is a pipe dream. no one thinks you can make a competitive game that can be delivered to mobile and the web from one codebase.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44603, "question": "it already is - people who want to write games that people will pay for and actually play realized a long time ago that the web stack is a dead-end\n\nthe only org that cares at all about html5 gaming is mozilla, and maybe microsoft in a desperate attempt to get some traction for their mobile platforms (otherwise they don't, they already have xbox and pc gaming in their wheelhouse). google and apple (96% of the mobile market) do not care at all about html5 gaming...why should they, they already have something superior that they can control and users are familiar with that has known revenue models for developers\n\nwhy does proggit continue to care about html5 gaming when it is clear that no one else does?", "aSentId": 44612, "answer": "&gt; why does proggit continue to care about html5 gaming when it is clear that no one else does?\n\nSome of us have been around long enough to know what happens when you relax too much in your walled garden.\n\nYou should support HTML5 gaming, _if for no other reason than it will keep your mobile world honest_. Even if you're perfectly happy in your garden, the last thing you want is for the door to slam shut.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44603, "question": "it already is - people who want to write games that people will pay for and actually play realized a long time ago that the web stack is a dead-end\n\nthe only org that cares at all about html5 gaming is mozilla, and maybe microsoft in a desperate attempt to get some traction for their mobile platforms (otherwise they don't, they already have xbox and pc gaming in their wheelhouse). google and apple (96% of the mobile market) do not care at all about html5 gaming...why should they, they already have something superior that they can control and users are familiar with that has known revenue models for developers\n\nwhy does proggit continue to care about html5 gaming when it is clear that no one else does?", "aSentId": 44614, "answer": "You can't say no one else cares when the biggest names like unity do.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44615, "question": "You can't say no one else cares when the biggest names like unity do.", "aSentId": 44616, "answer": "yawn, this is a proof-of-concept demo. wake me when they make a fundamental business bet on this. they won't, because they know the tech is DOA and users go to app stores to look for games, not urls", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44617, "question": "yawn, this is a proof-of-concept demo. wake me when they make a fundamental business bet on this. they won't, because they know the tech is DOA and users go to app stores to look for games, not urls", "aSentId": 44618, "answer": "You can tell that a lot of users are excited about WebGL on the unity forums,\n\nhttp://forum.unity3d.com/threads/unity-5-is-coming-and-more.234931/\n\nOn that thread and others you can see that WebGL has been a feature that lots of unity devs have wanted for a long time.\n\nObviously WebGL isn't interesting for everyone, it sounds like you don't see a point in it, and that's cool. But lots of other people do think it's great.\n", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44619, "question": "You can tell that a lot of users are excited about WebGL on the unity forums,\n\nhttp://forum.unity3d.com/threads/unity-5-is-coming-and-more.234931/\n\nOn that thread and others you can see that WebGL has been a feature that lots of unity devs have wanted for a long time.\n\nObviously WebGL isn't interesting for everyone, it sounds like you don't see a point in it, and that's cool. But lots of other people do think it's great.\n", "aSentId": 44620, "answer": "a few developers might be interested, but no USERS want this tech!\n\nseriously, what gamer wants to run WebGL games??? no one. mobile gaming is already solved. PC gaming is already solved. the audience for html5 games is nonexistant, except to the mozilla employees who downvote my posts without responding. WebGL games are basically crappy old PC games + the added fun of your computer melting. who is in the market for this????\n\nthere isn't one metric (performance, users, revenue) from the real world that says html5 gaming is viable...why do people continue to score posts on proggit as if this was the case?", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44621, "question": "a few developers might be interested, but no USERS want this tech!\n\nseriously, what gamer wants to run WebGL games??? no one. mobile gaming is already solved. PC gaming is already solved. the audience for html5 games is nonexistant, except to the mozilla employees who downvote my posts without responding. WebGL games are basically crappy old PC games + the added fun of your computer melting. who is in the market for this????\n\nthere isn't one metric (performance, users, revenue) from the real world that says html5 gaming is viable...why do people continue to score posts on proggit as if this was the case?", "aSentId": 44622, "answer": "It is possible that the biggest game engines are all wrong, and you are right. Also that the users of those game engines that are asking for HTML5 support are all wrong, and you are right. Finally, it is possible that the developers shipping HTML5 games right now (like the one in the link) are all wrong and you are right.\n\nBut my guess is that you are looking at a different segment of the gaming market. For the stuff you care about, sure, HTML5 doesn't make sense. All those other people, though, have thought about it and realized that for their use cases, it does.\n\nSo they are all right, and you are right as well, just about different things.\n", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44599, "question": "asm.js Speedups Everywhere", "aSentId": 44624, "answer": "death to html/css/javascript.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44599, "question": "asm.js Speedups Everywhere", "aSentId": 44626, "answer": "They can make it as fast as they want, I don't want to be bound by their sandbox.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44627, "question": "They can make it as fast as they want, I don't want to be bound by their sandbox.", "aSentId": 44628, "answer": "It's feature - I don't want you to have access to my filesystem.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44630, "question": "Unreal Engine 4 available for free", "aSentId": 44631, "answer": "Excellent news for those of us who just want to tinker and try things out without it being a financial commitment :)\n", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44632, "question": "Excellent news for those of us who just want to tinker and try things out without it being a financial commitment :)\n", "aSentId": 44633, "answer": "You never really needed a financial commitment to tinker before except a copy of unreal tournament.  And back then if you had any interest in developing an FPS you probably owned at least 1 unreal engine game... Even 1 gave you access to unreal script, which gives you a lot of control over the engine, enough to turn it into an entirely new game.\n\n\nEpic has always been really good about giving all the little game devleopment tinkerers access to their engine without any fee outside of owning one of their games.\n\n\nThe only and biggest difference here is you get the full source to the engine as well, now that's damn awesome.\n\n\nsource: had a college class on unreal engine, we just all got a copy of the game and a book.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44634, "question": "You never really needed a financial commitment to tinker before except a copy of unreal tournament.  And back then if you had any interest in developing an FPS you probably owned at least 1 unreal engine game... Even 1 gave you access to unreal script, which gives you a lot of control over the engine, enough to turn it into an entirely new game.\n\n\nEpic has always been really good about giving all the little game devleopment tinkerers access to their engine without any fee outside of owning one of their games.\n\n\nThe only and biggest difference here is you get the full source to the engine as well, now that's damn awesome.\n\n\nsource: had a college class on unreal engine, we just all got a copy of the game and a book.", "aSentId": 44635, "answer": "How in depth did the course go? Was it at a state school or something else?", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44636, "question": "How in depth did the course go? Was it at a state school or something else?", "aSentId": 44637, "answer": "It was at your run of the mill average school with a CS program.  We actually did 2 sesmesters with the unreal engine. The class was definitely there to draw kids into a lesser school, I was just poor. \n\n\nThe first one was on Unreal Editor and creating maps.  We went through how to use all the 3d modeling tools for the first half of the semester, then the second half we all each made our own maps.  I made one with a bridge over some lava hanging from the ceiling, some jump pads and huge gaps in it etc, then on each end was just some caves and a few that interconnected everything.\n\n\nThe second class we learned the unreal scripting language and how all that worked and then we had to make a mod in a group project.  One group made some weird chess FPS game, our group made kind of a pod racing meets mario cart kind of game, one group was just lazy and made a map and didn't do any modding.  Another group spent a humongous amount of time making an acurate to scale X-wing with all working details and then basically only got around to having it fly through the windows star screensaver.\n\n\nI wish I still had the DVD set that had all the group projects on it from our year.  It's probably somewhere in my house, i've moved so many times though.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44634, "question": "You never really needed a financial commitment to tinker before except a copy of unreal tournament.  And back then if you had any interest in developing an FPS you probably owned at least 1 unreal engine game... Even 1 gave you access to unreal script, which gives you a lot of control over the engine, enough to turn it into an entirely new game.\n\n\nEpic has always been really good about giving all the little game devleopment tinkerers access to their engine without any fee outside of owning one of their games.\n\n\nThe only and biggest difference here is you get the full source to the engine as well, now that's damn awesome.\n\n\nsource: had a college class on unreal engine, we just all got a copy of the game and a book.", "aSentId": 44639, "answer": "Im a comp sci student about to graduate with only one hard class this semester, so my desire to tinker is high. I bought the engine about a month ago. I've also been playing the new UT. Love that shit. Anywho, what were the major topics in the class and in what order were they covered? Ive watched a few of the tutorial vids, but I need to set Visual Studio back up now that I have reformated and upgraded to 8.1 ", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44640, "question": "Im a comp sci student about to graduate with only one hard class this semester, so my desire to tinker is high. I bought the engine about a month ago. I've also been playing the new UT. Love that shit. Anywho, what were the major topics in the class and in what order were they covered? Ive watched a few of the tutorial vids, but I need to set Visual Studio back up now that I have reformated and upgraded to 8.1 ", "aSentId": 44641, "answer": "First was mapping, basically because you're going to have to build a map for everything as that's how the unreal engine worked.  Everything lived in this giant cube of game space and you had to map within it.  (this was years ago, I think unreal engine 2 which was just an iterative update to one.)  \n\n\nThen we were just taught the ins and outs of how the unreal engine worked.  What we needed to override where, etc.  It was all basic OO programming in unreal script.\n\n\nI am not sure if the engine is still script based and map based, I can't imagine it's not.  We had the book Unreal sold for the engine though, it's pretty pricey.  You'd just have to read up on it.  The hardest part is thinking of something to make.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44640, "question": "Im a comp sci student about to graduate with only one hard class this semester, so my desire to tinker is high. I bought the engine about a month ago. I've also been playing the new UT. Love that shit. Anywho, what were the major topics in the class and in what order were they covered? Ive watched a few of the tutorial vids, but I need to set Visual Studio back up now that I have reformated and upgraded to 8.1 ", "aSentId": 44643, "answer": "Unrelated but how hard is comp sci? ", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44644, "question": "Unrelated but how hard is comp sci? ", "aSentId": 44645, "answer": "I excelled at some things. Not so much at others. I found teaching others what I knew made me a better student and programmer. Some things were hard. Linear Algebra slapped me around quite a bit. So did Probability and Statistics. Find the great math teachers. Work with other people often and use whiteboards. It will give you friends and prevent you from getting stuck on stupid shit. It was tougher than nuclear power school in the Navy. I would rate it at a 7/10.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44632, "question": "Excellent news for those of us who just want to tinker and try things out without it being a financial commitment :)\n", "aSentId": 44647, "answer": "They've been offering the previous release version free for years. \n\nCryEngine works the same way.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44632, "question": "Excellent news for those of us who just want to tinker and try things out without it being a financial commitment :)\n", "aSentId": 44649, "answer": "I guess you haven't found rich", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44630, "question": "Unreal Engine 4 available for free", "aSentId": 44651, "answer": "Its free, current subscribers will get refund and $30 in store credit at marketplace.\n\nEpic is epic.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44652, "question": "Its free, current subscribers will get refund and $30 in store credit at marketplace.\n\nEpic is epic.", "aSentId": 44653, "answer": "It says they want 5% royalties on releases made with the engine.\n\nIs that ALL? No other fees? Because that sounds like an insane dream for small developers, for who fixed price can be a problem when the first results won't sell.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44654, "question": "It says they want 5% royalties on releases made with the engine.\n\nIs that ALL? No other fees? Because that sounds like an insane dream for small developers, for who fixed price can be a problem when the first results won't sell.", "aSentId": 44655, "answer": "5% of a cornered market is a gold mine.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44656, "question": "5% of a cornered market is a gold mine.", "aSentId": 44657, "answer": "Yeah, but its also nice for smaller studio. \n\nThe developers have less risks + sligthly lower profit, which is cool. ", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44658, "question": "Yeah, but its also nice for smaller studio. \n\nThe developers have less risks + sligthly lower profit, which is cool. ", "aSentId": 44659, "answer": "&gt; The developers have less risks\n\nThat isn't necessarily true. If someone finds a security flaw in the Unreal Engine, it's likely that every game will be affected, and it'll be up to Epic (whose employees clearly understand the engine the most) to deliver a timely patch. What if, in a few years, Epic slows down on development, and the Engine is no longer properly maintained? Then, it'd be up to the smaller studios to deal with the hefty engine to get the results they want on modern hardware, and what if they want to continue supporting an existing game for a long time? There's no telling how Epic is going to hold up their end of the deal, but either way, they get 5%.\n\nNow, I don't think that's necessarily what's going to happen! In fact, they may very well be the most reputable company around when it comes to exactly this sort of thing, and they have made impressive advancements despite the dry competition. (Unity caters to a different audience, and CryEngine is a large expense for the same or worse performance in the real world).", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44660, "question": "&gt; The developers have less risks\n\nThat isn't necessarily true. If someone finds a security flaw in the Unreal Engine, it's likely that every game will be affected, and it'll be up to Epic (whose employees clearly understand the engine the most) to deliver a timely patch. What if, in a few years, Epic slows down on development, and the Engine is no longer properly maintained? Then, it'd be up to the smaller studios to deal with the hefty engine to get the results they want on modern hardware, and what if they want to continue supporting an existing game for a long time? There's no telling how Epic is going to hold up their end of the deal, but either way, they get 5%.\n\nNow, I don't think that's necessarily what's going to happen! In fact, they may very well be the most reputable company around when it comes to exactly this sort of thing, and they have made impressive advancements despite the dry competition. (Unity caters to a different audience, and CryEngine is a large expense for the same or worse performance in the real world).", "aSentId": 44661, "answer": "I agree with you - but failing with your game (that you may even develop in your free time, as student project, ...) is much more likely than Epic saying \"fuck it\"...", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44662, "question": "I agree with you - but failing with your game (that you may even develop in your free time, as student project, ...) is much more likely than Epic saying \"fuck it\"...", "aSentId": 44663, "answer": "Yeah, that's pretty true. Like I said, Epic has a pretty good thing going, and they're the ones I would trust the most when it comes to game engines simply because they've been the leader, and have stayed the leader, for a very long time, even with plenty of opportunity for competition.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44660, "question": "&gt; The developers have less risks\n\nThat isn't necessarily true. If someone finds a security flaw in the Unreal Engine, it's likely that every game will be affected, and it'll be up to Epic (whose employees clearly understand the engine the most) to deliver a timely patch. What if, in a few years, Epic slows down on development, and the Engine is no longer properly maintained? Then, it'd be up to the smaller studios to deal with the hefty engine to get the results they want on modern hardware, and what if they want to continue supporting an existing game for a long time? There's no telling how Epic is going to hold up their end of the deal, but either way, they get 5%.\n\nNow, I don't think that's necessarily what's going to happen! In fact, they may very well be the most reputable company around when it comes to exactly this sort of thing, and they have made impressive advancements despite the dry competition. (Unity caters to a different audience, and CryEngine is a large expense for the same or worse performance in the real world).", "aSentId": 44665, "answer": "Epic has decades of track record to set precedent so your concerns are literally unfounded in their decades of history.\n\n5% is also a fucking steal considering Apple and Google take 30% for placement on a mobile store (and apple charges yearly for dev licenses)", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44656, "question": "5% of a cornered market is a gold mine.", "aSentId": 44667, "answer": "Note that the announcement came within days of Valve announcing their partnership with HTC - VR hardware is going to be competitive and coming hard soon. Epic has an engine that supports that stuff, and by doing this, they are going to corner a growing market. \n\nIf VR ends up being the future, it puts them in a really good position.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44654, "question": "It says they want 5% royalties on releases made with the engine.\n\nIs that ALL? No other fees? Because that sounds like an insane dream for small developers, for who fixed price can be a problem when the first results won't sell.", "aSentId": 44669, "answer": "It's 5% after the first $3000 each ~~year~~ quarter. ~~Before $3000, they just give you the money... not sure about taxes and how they pay out, though.~~\n\nSounds like I misunderstood the nature of the marketplace - you report earnings to them, not the other way around.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44670, "question": "It's 5% after the first $3000 each ~~year~~ quarter. ~~Before $3000, they just give you the money... not sure about taxes and how they pay out, though.~~\n\nSounds like I misunderstood the nature of the marketplace - you report earnings to them, not the other way around.", "aSentId": 44671, "answer": "Woah, so even better then. I really got to look into this.\n\nThe announcement even says per product per quarter. That's even much much better... it means you can make up to 12k per release per year without any fees...", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44672, "question": "Woah, so even better then. I really got to look into this.\n\nThe announcement even says per product per quarter. That's even much much better... it means you can make up to 12k per release per year without any fees...", "aSentId": 44673, "answer": "That's right. Do keep in mind that that's 12k of gross revenue, not 12k of profits. Still a great deal, though, especially for smaller indies and solo developers.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44674, "question": "That's right. Do keep in mind that that's 12k of gross revenue, not 12k of profits. Still a great deal, though, especially for smaller indies and solo developers.", "aSentId": 44675, "answer": "For games, this isn't much of an issue. Development is mostly up-front costs, with some support and distribution costs paid out during/after release. ", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44676, "question": "For games, this isn't much of an issue. Development is mostly up-front costs, with some support and distribution costs paid out during/after release. ", "aSentId": 44677, "answer": "It's a huge issue. Steam/app store/etc are going to take 30%, you report what you sold BEFORE the distributor takes their cut. That can be the difference between reporting 70k or 100k.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44678, "question": "It's a huge issue. Steam/app store/etc are going to take 30%, you report what you sold BEFORE the distributor takes their cut. That can be the difference between reporting 70k or 100k.", "aSentId": 44679, "answer": "Right, they're asking for gross. I'm saying that, outside of distribution (that 30%), there aren't any substantial further outlays -- at that point, money is flowing in after months or years of money flowing out. ", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44670, "question": "It's 5% after the first $3000 each ~~year~~ quarter. ~~Before $3000, they just give you the money... not sure about taxes and how they pay out, though.~~\n\nSounds like I misunderstood the nature of the marketplace - you report earnings to them, not the other way around.", "aSentId": 44681, "answer": "Actually, it's the first $3000 each quarter. So every 3 months.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44670, "question": "It's 5% after the first $3000 each ~~year~~ quarter. ~~Before $3000, they just give you the money... not sure about taxes and how they pay out, though.~~\n\nSounds like I misunderstood the nature of the marketplace - you report earnings to them, not the other way around.", "aSentId": 44683, "answer": "You just sell your game normally, however you want. You're expected to report your earnings to them if you make over the cutoff and pay the fee.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44685, "question": "After the first $3000 *per product*.  Make ten games that sell $1000/quarter, you'll make $10000/quarter.\n\nTheir license's annotation on crowdfunding, though, is...  legally interesting.", "aSentId": 44686, "answer": "Or make 10 games, give them away as freeware and...?", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44687, "question": "Or make 10 games, give them away as freeware and...?", "aSentId": 44688, "answer": "Then nobody makes any money. I don't see a problem here.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44691, "question": "5% of revenue though, not profit.", "aSentId": 44692, "answer": "No Hollywood accounting for these guys!\n", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44654, "question": "It says they want 5% royalties on releases made with the engine.\n\nIs that ALL? No other fees? Because that sounds like an insane dream for small developers, for who fixed price can be a problem when the first results won't sell.", "aSentId": 44694, "answer": "For small projects that's nothing.\n\nBut for big projects where the net profits are only a small portion of the royalties, that seems like a lot to me. But I'm no expert.\n\nEpic is epic!\n\nedit: as another user pointed out, if you sell 2800 copies at $10 each, you could've bought a Unity license for the same price. If you sell 100k copies, you will pay ~36 times the price of Unity.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44695, "question": "For small projects that's nothing.\n\nBut for big projects where the net profits are only a small portion of the royalties, that seems like a lot to me. But I'm no expert.\n\nEpic is epic!\n\nedit: as another user pointed out, if you sell 2800 copies at $10 each, you could've bought a Unity license for the same price. If you sell 100k copies, you will pay ~36 times the price of Unity.", "aSentId": 44696, "answer": "Oh certainly. But as I said, for beginners it's simply heaven. I am working on projects like that where I find time besides my studies,  and thinking about the expenses for licenses made me worry a lot. Having a game engine that comes *completely* for free to use is just awesome.\n\nOthers can be used for free to develop projects, but require license payments in the ballpark of some hundred $ before one can publish stuff. That the only money Unreal Engine wants is deducted from sales and there is no fixed payment at all, makes it all so much easier.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44697, "question": "Oh certainly. But as I said, for beginners it's simply heaven. I am working on projects like that where I find time besides my studies,  and thinking about the expenses for licenses made me worry a lot. Having a game engine that comes *completely* for free to use is just awesome.\n\nOthers can be used for free to develop projects, but require license payments in the ballpark of some hundred $ before one can publish stuff. That the only money Unreal Engine wants is deducted from sales and there is no fixed payment at all, makes it all so much easier.", "aSentId": 44698, "answer": "Yeah, I'm very excited too. I was planning to stick to graphic programming as a hobby and never worry about trying to make a full game, but now that it's basically free I will probably try my hand at Unreal.\n\nBut I'm concerned that this might scare successful game devs away from Unreal, turning it into an indie-only engine. Which would result in it becoming a shittier engine in the long run.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44699, "question": "Yeah, I'm very excited too. I was planning to stick to graphic programming as a hobby and never worry about trying to make a full game, but now that it's basically free I will probably try my hand at Unreal.\n\nBut I'm concerned that this might scare successful game devs away from Unreal, turning it into an indie-only engine. Which would result in it becoming a shittier engine in the long run.", "aSentId": 44700, "answer": "I don't worry much about that. We have several great engines for indie devs now that will keep competing, and graphics quality is the last thing that the AAA market needs to worry about.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44652, "question": "Its free, current subscribers will get refund and $30 in store credit at marketplace.\n\nEpic is epic.", "aSentId": 44702, "answer": "I had it for 1 month (January). It cost me $19, they've given me $30 credit. Epic pretty much gave me $11 for no reason other than trying their software. ", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44652, "question": "Its free, current subscribers will get refund and $30 in store credit at marketplace.\n\nEpic is epic.", "aSentId": 44704, "answer": "Hah, I just bought a subscription a week ago. This is just perfect.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44705, "question": "Hah, I just bought a subscription a week ago. This is just perfect.", "aSentId": 44706, "answer": "I gave a guy the money to get a license a couple of weeks back, he must be happy lol", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44710, "question": "Current subscribers being the ones that have spent money on the engine period, or those that are currently subscribed for this month?  I cancelled my subscription at 4.6.1 like any other sane human being would, am I getting money back or just the $30?  Anyone know?\n\nI mean, I'm grateful either way.", "aSentId": 44711, "answer": "The money back was just retrograded for current subs. For example I had 15 days left on my sub so they gave me 10 bucks back.\n\nThe 30$ I believe is for anyone who subbed at all.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44712, "question": "The money back was just retrograded for current subs. For example I had 15 days left on my sub so they gave me 10 bucks back.\n\nThe 30$ I believe is for anyone who subbed at all.", "aSentId": 44713, "answer": "Cool, thanks.  Yeah, I got the $30, just wanted to make sure.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44630, "question": "Unreal Engine 4 available for free", "aSentId": 44715, "answer": "So as an enthusiast game dev (read web dev who wants to get more into games), is this a good platform to start with? I've fiddled with Unity a bit but I'm never too happy with the results and Unreal just has a much better look. I'm just worried about documentation, community, support, etc.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44716, "question": "So as an enthusiast game dev (read web dev who wants to get more into games), is this a good platform to start with? I've fiddled with Unity a bit but I'm never too happy with the results and Unreal just has a much better look. I'm just worried about documentation, community, support, etc.", "aSentId": 44717, "answer": "There is very little reason to not try it out.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44716, "question": "So as an enthusiast game dev (read web dev who wants to get more into games), is this a good platform to start with? I've fiddled with Unity a bit but I'm never too happy with the results and Unreal just has a much better look. I'm just worried about documentation, community, support, etc.", "aSentId": 44719, "answer": "Unity is easier to get into and in my opinion easier to work with, although I have to admit that I only tried Unreal for about a week. Getting good graphics is definitely easier in Unreal, but that should change with Unity 5, at least to a degree. If you are just beginning I'd recommend you not to concentrate on graphics, I know that it's very tempting but if you aren't a good 3D modeller and texturer you won't be getting there anyway, no matter which engine you are using.\n\nJust concentrate on the gameplay for now, maybe make a clone of a simple game (like breakout or tetris) on both engines to see how they work and then just choose what you like best. By the way, it is quite possible to have great graphics in Unity, even with the current version. The biggest problem are the default shaders, they are responsible for the typical \"Unity-Look\" and they are one of the things that will be replaced in Unity 5.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44720, "question": "Unity is easier to get into and in my opinion easier to work with, although I have to admit that I only tried Unreal for about a week. Getting good graphics is definitely easier in Unreal, but that should change with Unity 5, at least to a degree. If you are just beginning I'd recommend you not to concentrate on graphics, I know that it's very tempting but if you aren't a good 3D modeller and texturer you won't be getting there anyway, no matter which engine you are using.\n\nJust concentrate on the gameplay for now, maybe make a clone of a simple game (like breakout or tetris) on both engines to see how they work and then just choose what you like best. By the way, it is quite possible to have great graphics in Unity, even with the current version. The biggest problem are the default shaders, they are responsible for the typical \"Unity-Look\" and they are one of the things that will be replaced in Unity 5.", "aSentId": 44721, "answer": "I'm not trying to do anything too crazy at first but I want to make sure I start off in a platform that will give me plenty of runway to improve and make great games in the future.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44722, "question": "I'm not trying to do anything too crazy at first but I want to make sure I start off in a platform that will give me plenty of runway to improve and make great games in the future.", "aSentId": 44723, "answer": "That really can be said of both of them. As far as I've seen Unity is a bit more focused on mobile gaming and Unreal a bit more on AAA titles. That sounds a bit off putting for Unity, but has a few immediate advantages, for examples it's better for fast prototyping and small games and supports importing models from Blender without exporting to other formats.\n\nBut as I said, in the end what matters is that you like the engine itself, as they are both able to do more or less the same.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44724, "question": "That really can be said of both of them. As far as I've seen Unity is a bit more focused on mobile gaming and Unreal a bit more on AAA titles. That sounds a bit off putting for Unity, but has a few immediate advantages, for examples it's better for fast prototyping and small games and supports importing models from Blender without exporting to other formats.\n\nBut as I said, in the end what matters is that you like the engine itself, as they are both able to do more or less the same.", "aSentId": 44725, "answer": "From my experience with Unity, my biggest issue was difficulty in collaborating with other people. I tried using Git but projects just don't cleanly import. Even rolling back code seems to break things since Unity uses so many support files.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44726, "question": "From my experience with Unity, my biggest issue was difficulty in collaborating with other people. I tried using Git but projects just don't cleanly import. Even rolling back code seems to break things since Unity uses so many support files.", "aSentId": 44727, "answer": "That's my biggest and really only big issue with it as well. There are a few good git ignore files on stack overflow and github that can help a lot, but that still doesn't completely solve the issue, even when all files are set to \"text only\", especially when trying to merge scenes.\n\nI think there are some scripts on the asset store that can help with that, but I really think that this is a huge failure on Unity's side and hope they'll fix it soon. All those sudden material changes after a merge are seriously annoying.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44728, "question": "That's my biggest and really only big issue with it as well. There are a few good git ignore files on stack overflow and github that can help a lot, but that still doesn't completely solve the issue, even when all files are set to \"text only\", especially when trying to merge scenes.\n\nI think there are some scripts on the asset store that can help with that, but I really think that this is a huge failure on Unity's side and hope they'll fix it soon. All those sudden material changes after a merge are seriously annoying.", "aSentId": 44729, "answer": "I think Unity didn't implement a good solution at first because they offered their own solution. Hopefully they've figured out that was a stupid idea and are making moves to fix that.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44730, "question": "I think Unity didn't implement a good solution at first because they offered their own solution. Hopefully they've figured out that was a stupid idea and are making moves to fix that.", "aSentId": 44731, "answer": "I think so too, but I really think that was a bad decision. It's more of a basic thing to have, a necessity, not a feature you'd have to buy. Let's just hope they figured it out and patch it soon.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44728, "question": "That's my biggest and really only big issue with it as well. There are a few good git ignore files on stack overflow and github that can help a lot, but that still doesn't completely solve the issue, even when all files are set to \"text only\", especially when trying to merge scenes.\n\nI think there are some scripts on the asset store that can help with that, but I really think that this is a huge failure on Unity's side and hope they'll fix it soon. All those sudden material changes after a merge are seriously annoying.", "aSentId": 44733, "answer": "Yeah last time I used it our scenes completely broke even though me and the guy I was collaborating with were working in two separate scenes and he was just composing his 3D assets where I was doing the code. Silly it caused all materials etc to break. Ended up just opening his project and copy pasting my code logic over &gt;__&lt;", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44734, "question": "Yeah last time I used it our scenes completely broke even though me and the guy I was collaborating with were working in two separate scenes and he was just composing his 3D assets where I was doing the code. Silly it caused all materials etc to break. Ended up just opening his project and copy pasting my code logic over &gt;__&lt;", "aSentId": 44735, "answer": "That may not be the case with Unreal now,  I don't know, but it will probably improve a lot faster now it's free.  \n", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44734, "question": "Yeah last time I used it our scenes completely broke even though me and the guy I was collaborating with were working in two separate scenes and he was just composing his 3D assets where I was doing the code. Silly it caused all materials etc to break. Ended up just opening his project and copy pasting my code logic over &gt;__&lt;", "aSentId": 44737, "answer": "Yeah, I think the way to work around it would be to completely split art and programming, only merge the art when there's a important change, or at the end of a project, but of course that's not really the best way to do things in a small project. ", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44726, "question": "From my experience with Unity, my biggest issue was difficulty in collaborating with other people. I tried using Git but projects just don't cleanly import. Even rolling back code seems to break things since Unity uses so many support files.", "aSentId": 44739, "answer": "I work on Unity with a team of 10. This is gold: http://docs.unity3d.com/Manual/ExternalVersionControlSystemSupport.html\n\nAMA?", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44716, "question": "So as an enthusiast game dev (read web dev who wants to get more into games), is this a good platform to start with? I've fiddled with Unity a bit but I'm never too happy with the results and Unreal just has a much better look. I'm just worried about documentation, community, support, etc.", "aSentId": 44741, "answer": "My tuppence here (as ex-game dev and current university lecturer in game dev): for tinkering, prototyping, and learning on your own, Unity is king, and Unreal Engine is overkill.\n\nOnce you form a moderately sized team and have a proper 3D art pipeline (and the people/skills to make it work efficiently), Unreal Engine starts to become worth it. ", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44742, "question": "My tuppence here (as ex-game dev and current university lecturer in game dev): for tinkering, prototyping, and learning on your own, Unity is king, and Unreal Engine is overkill.\n\nOnce you form a moderately sized team and have a proper 3D art pipeline (and the people/skills to make it work efficiently), Unreal Engine starts to become worth it. ", "aSentId": 44743, "answer": "Well said.  And I've always found UDK docs to be mediocre, it just happens to have an insane amount of community documentation.  (Source: UDK 3 docs sort of suck a lot of ass)", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44742, "question": "My tuppence here (as ex-game dev and current university lecturer in game dev): for tinkering, prototyping, and learning on your own, Unity is king, and Unreal Engine is overkill.\n\nOnce you form a moderately sized team and have a proper 3D art pipeline (and the people/skills to make it work efficiently), Unreal Engine starts to become worth it. ", "aSentId": 44745, "answer": "Unreal is much better if you're looking to get into the industry though, since it's largely a C++ market. The skills are transferable, but all other things being equal, Unreal will be better for you.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44749, "question": "I remember competing in the make something unreal contest in the hopes of getting an engine license. Back then the thought of targeting consoles or using a real engine were so far beyond the grasp of a college student. And now today you can get amazing engines for free, publish to brand new consoles for nothing. Truly a great time but can't help but feel like I was born too early (as opposed to too late as I usually feel)", "aSentId": 44750, "answer": "Why would you feel that you were born too late, all the good tech is in the future!", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44751, "question": "Why would you feel that you were born too late, all the good tech is in the future!", "aSentId": 44752, "answer": "/r/collapse disagrees with this statement.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44751, "question": "Why would you feel that you were born too late, all the good tech is in the future!", "aSentId": 44754, "answer": "Some feel all the fun tech is in the past.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44751, "question": "Why would you feel that you were born too late, all the good tech is in the future!", "aSentId": 44756, "answer": "Because every day something new and original is invented, which seems to raise the bar for creating something novel in one's lifetime.  \n\nIt's how I feel sometimes in the engineering world in general.  Every day the wealth of human knowledge grows, making future accomplishments that much more difficult to achieve.  ", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44749, "question": "I remember competing in the make something unreal contest in the hopes of getting an engine license. Back then the thought of targeting consoles or using a real engine were so far beyond the grasp of a college student. And now today you can get amazing engines for free, publish to brand new consoles for nothing. Truly a great time but can't help but feel like I was born too early (as opposed to too late as I usually feel)", "aSentId": 44758, "answer": "I remember adults talking about how great my childhood was. We had legos and transformers and video games and computers. Of course that generation helped push things forward to ease things for the internet generation.\n\nSo sure, the internet generation gets a great time too - internet from day one, open source already established, engines like this.\n\nJust wait until the robot &amp; maker generation gets going though. In time we'll be talking about how great kids have it because they have home robots and the college kids will be excited how multi-material laser sintered 3d printers came down to consumer prices.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44759, "question": "I remember adults talking about how great my childhood was. We had legos and transformers and video games and computers. Of course that generation helped push things forward to ease things for the internet generation.\n\nSo sure, the internet generation gets a great time too - internet from day one, open source already established, engines like this.\n\nJust wait until the robot &amp; maker generation gets going though. In time we'll be talking about how great kids have it because they have home robots and the college kids will be excited how multi-material laser sintered 3d printers came down to consumer prices.", "aSentId": 44760, "answer": "&gt; Just wait until the robot &amp; maker generation gets going though.\n\nDude Lego Mindstorms had robotics easily accessible in the 1990s :p", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44761, "question": "&gt; Just wait until the robot &amp; maker generation gets going though.\n\nDude Lego Mindstorms had robotics easily accessible in the 1990s :p", "aSentId": 44762, "answer": "Well technically we did too - with either the Big Trax or even the Nintendo Robot. Still though, even now they are basically 'dumb' robots. I expect kids to increasingly have 'smart' robots'", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44759, "question": "I remember adults talking about how great my childhood was. We had legos and transformers and video games and computers. Of course that generation helped push things forward to ease things for the internet generation.\n\nSo sure, the internet generation gets a great time too - internet from day one, open source already established, engines like this.\n\nJust wait until the robot &amp; maker generation gets going though. In time we'll be talking about how great kids have it because they have home robots and the college kids will be excited how multi-material laser sintered 3d printers came down to consumer prices.", "aSentId": 44764, "answer": "This is why I need an immortality potion. Have all the things ever!", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44749, "question": "I remember competing in the make something unreal contest in the hopes of getting an engine license. Back then the thought of targeting consoles or using a real engine were so far beyond the grasp of a college student. And now today you can get amazing engines for free, publish to brand new consoles for nothing. Truly a great time but can't help but feel like I was born too early (as opposed to too late as I usually feel)", "aSentId": 44766, "answer": "Just in time to post dank meems. ", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44767, "question": "Just in time to post dank meems. ", "aSentId": 44768, "answer": "Is saying a meme is a dank meme also a meme? If so, is it a dank meme. It would be like WINE, where WINE stands for the W.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44773, "question": "I was part of the first 1mil contest they started. Were you involved with Frag-Ops or Red Orchestra (who won)?\n\nI was also a college student. But what a learning experience..", "aSentId": 44774, "answer": "Red orchestra won. I was part of a game that didn't get released. Einmarsch. Was creator and sole dev. I was overly ambitious and couldn't keep a clear focus. I put RTS elements in. I wanted a semi persistent world. Now I'm a pessimistic old man at 32 heh. ", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44776, "question": "so, has anyone here tried it?", "aSentId": 44777, "answer": "Yep, been a subscriber since 4.0 was released. It's pretty awesome, get's regular updates, they do regular weekly twitch live streams to go over updates, community content, etc, they have a nice market place, they are active on forums and answer hub (its their stack exchange basically).\n\nDocumentation initially sucked but it's a lot better.\n\nThings just keep getting better.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44778, "question": "Yep, been a subscriber since 4.0 was released. It's pretty awesome, get's regular updates, they do regular weekly twitch live streams to go over updates, community content, etc, they have a nice market place, they are active on forums and answer hub (its their stack exchange basically).\n\nDocumentation initially sucked but it's a lot better.\n\nThings just keep getting better.", "aSentId": 44779, "answer": "im really impressed with how transparent they are and they have a truly community driven development process, its awesome", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44776, "question": "so, has anyone here tried it?", "aSentId": 44781, "answer": "Its photoshop for games. Took week and half to recreate my unity project which took 2 months to put together in unity, and its now moving at 10x the pace thx to Blueprint and general UE4 workflow.\n\nThey killed it. There is no competition right now.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44782, "question": "Its photoshop for games. Took week and half to recreate my unity project which took 2 months to put together in unity, and its now moving at 10x the pace thx to Blueprint and general UE4 workflow.\n\nThey killed it. There is no competition right now.", "aSentId": 44783, "answer": "That's unfair to Unity. I am sure that if it took me 2 months to do a project in UE4, it would only take me a month to re-do it in Unity. Learning how to do something had a cost that you didn't factor.\n\nHowever, I have used UE4, and I can say that it's a damn fine engine", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44784, "question": "That's unfair to Unity. I am sure that if it took me 2 months to do a project in UE4, it would only take me a month to re-do it in Unity. Learning how to do something had a cost that you didn't factor.\n\nHowever, I have used UE4, and I can say that it's a damn fine engine", "aSentId": 44785, "answer": "You're right, it was a lot of prototyping and figuring out the game dynamic. I promise you though, if I had to do it from scratch in UE4 - it would be far quicker. Blueprint is really robust.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44786, "question": "You're right, it was a lot of prototyping and figuring out the game dynamic. I promise you though, if I had to do it from scratch in UE4 - it would be far quicker. Blueprint is really robust.", "aSentId": 44787, "answer": "How much programming experience do you have?\n\nI ask because I went from Android development (Java), then I decided to teach myself Unity, which uses C#. Luckily C# is very very similar to Java. \n\nBut programming is a hobby so I don't have all the time in the world to keep learning new stuff. My real job is nothing computer related.\n\nSo how is C++ which UE4 uses? That's the only thing that's keeping me from swtiching. ", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44788, "question": "How much programming experience do you have?\n\nI ask because I went from Android development (Java), then I decided to teach myself Unity, which uses C#. Luckily C# is very very similar to Java. \n\nBut programming is a hobby so I don't have all the time in the world to keep learning new stuff. My real job is nothing computer related.\n\nSo how is C++ which UE4 uses? That's the only thing that's keeping me from swtiching. ", "aSentId": 44789, "answer": "About 20 years with a number of technologies and languages. I was writing C# for 10 of those. Learned C++ and wrote a few OpenGL games for iOS starting in 2011.\n\nC++ is very bare bones language but rich, and modern version of it is far less intimidating than 99 version. Don't be intimidated, jump in. I was the same way - it all looked like greek to me, but its totally approachable. UE4 is not COM, its more like Qt - clean, simplified C++. In general game engine C++ tends to be a lot simpler than system C++. \n\nMake sure you install Visual Assist X for VS, it makes intellisense on par with .NET.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44790, "question": "About 20 years with a number of technologies and languages. I was writing C# for 10 of those. Learned C++ and wrote a few OpenGL games for iOS starting in 2011.\n\nC++ is very bare bones language but rich, and modern version of it is far less intimidating than 99 version. Don't be intimidated, jump in. I was the same way - it all looked like greek to me, but its totally approachable. UE4 is not COM, its more like Qt - clean, simplified C++. In general game engine C++ tends to be a lot simpler than system C++. \n\nMake sure you install Visual Assist X for VS, it makes intellisense on par with .NET.", "aSentId": 44791, "answer": "I would go far as to even say modern day C++ is not even the same language as legacy C++.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44792, "question": "I would go far as to even say modern day C++ is not even the same language as legacy C++.", "aSentId": 44793, "answer": "I would completely agree with you. auto alone changed syntax so drastically its unclear at first look if its C++.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44782, "question": "Its photoshop for games. Took week and half to recreate my unity project which took 2 months to put together in unity, and its now moving at 10x the pace thx to Blueprint and general UE4 workflow.\n\nThey killed it. There is no competition right now.", "aSentId": 44795, "answer": "Yeah, I don't really think so. While I have to admit that Unity is loosing ground and that I have only tested Unreal for about a week, I think it's still unfair to say that Unreal has won. The Unity editor is a lot more customizeable (with editor scripts) than Unreal and does a lot less \"magic\" in the background, for example it's not very clear what spawnes the main actor and similar things. Of course those are things that will become manageable after some time, but it just seems to me that some things are unnecessarily complicated in Unreal. Unity on the other hand is rather easy: everything that does logic is a component. That's about it. There is almost no hidden functionality.\n\nAlso, while I have to admit that the blueprints are just really cool, I'd choose C# over C++ anytime. It just seems to me that blueprint is too limited (Not limited in power, but visual programming just isn't that great for complex systems) and C++ is simply overkill for even the most complex gameplay code.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44796, "question": "Yeah, I don't really think so. While I have to admit that Unity is loosing ground and that I have only tested Unreal for about a week, I think it's still unfair to say that Unreal has won. The Unity editor is a lot more customizeable (with editor scripts) than Unreal and does a lot less \"magic\" in the background, for example it's not very clear what spawnes the main actor and similar things. Of course those are things that will become manageable after some time, but it just seems to me that some things are unnecessarily complicated in Unreal. Unity on the other hand is rather easy: everything that does logic is a component. That's about it. There is almost no hidden functionality.\n\nAlso, while I have to admit that the blueprints are just really cool, I'd choose C# over C++ anytime. It just seems to me that blueprint is too limited (Not limited in power, but visual programming just isn't that great for complex systems) and C++ is simply overkill for even the most complex gameplay code.", "aSentId": 44797, "answer": "&gt; and C++ is simply overkill for even the most complex gameplay code.\n\nC++ doesn't have to be that complex. If you stick to a standard they're both fairly similar. The only thing that's really more complex that's necessary is knowing about pointers/references, which is relatively small. You don't *need* to know much about either language to be functional in Unreal or Unity.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44798, "question": "&gt; and C++ is simply overkill for even the most complex gameplay code.\n\nC++ doesn't have to be that complex. If you stick to a standard they're both fairly similar. The only thing that's really more complex that's necessary is knowing about pointers/references, which is relatively small. You don't *need* to know much about either language to be functional in Unreal or Unity.", "aSentId": 44799, "answer": "You're right, I've actually been working on a small engine myself. Just a small fun project, nothing serious. Programmed in C++ and it's not that bad, but there are a lot of unnecessary steps involved, like headers, includes and everything that's too close to the hardware. Don't get me wrong, I quite like it as a change from Unity, just having so much power over everything you are doing, but for gameplay code all that additional work just seems... unnecessary. I just want to concentrate on the game itself, not think about cyclic dependencies and wether or not a weak_ptr would be better in a situation.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44796, "question": "Yeah, I don't really think so. While I have to admit that Unity is loosing ground and that I have only tested Unreal for about a week, I think it's still unfair to say that Unreal has won. The Unity editor is a lot more customizeable (with editor scripts) than Unreal and does a lot less \"magic\" in the background, for example it's not very clear what spawnes the main actor and similar things. Of course those are things that will become manageable after some time, but it just seems to me that some things are unnecessarily complicated in Unreal. Unity on the other hand is rather easy: everything that does logic is a component. That's about it. There is almost no hidden functionality.\n\nAlso, while I have to admit that the blueprints are just really cool, I'd choose C# over C++ anytime. It just seems to me that blueprint is too limited (Not limited in power, but visual programming just isn't that great for complex systems) and C++ is simply overkill for even the most complex gameplay code.", "aSentId": 44801, "answer": "The one thing that drives me crazy about blueprints are the \n\n    [ ] context sensitive\n\ncheck boxes when right clicking in the event graph. When checked it gives you a list of all overwritten, and implemented functions and variables. When unchecked it searches through a scope of what can be overridden and inherited.\n\nIt took me longer than I care to admit to finally remember that it was there, and to uncheck it.\n\nThe C++ is swell. Careful when compiling through the Editor with visual studio open. It will hotreload, but it won't remove the previous compilation of your code. So I go to add my new node foo to my graph and end up with the choice of two identical foo nodes. One node being the newest hotreload, and the latter being the older. This is UE4.5 though; 4.7 just came out this or last week.\n\nAlso, I don't know where I'd be without Rama.\n\nAlso, UE4 is most definitely still not finished. 4.7 fixed A LOT that was wrong with the BP and C++ like specialized constructors. **There's still a ways to go before UE4 is finished, and largely bug free.**\n\nOh yeah; and for christ's sake. If there's a variable, or pointer and the Editor says it's immutable, or the value cannot be changed. DON'T try and find a way to get around it and change the value. I bricked my project file this way and had to delete everything and pull from my repo.\n\nThere's also a cool way to make a custom BP node in C++ where the input is also it's output that also crashes the editor until you fix and recompile your C++", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44796, "question": "Yeah, I don't really think so. While I have to admit that Unity is loosing ground and that I have only tested Unreal for about a week, I think it's still unfair to say that Unreal has won. The Unity editor is a lot more customizeable (with editor scripts) than Unreal and does a lot less \"magic\" in the background, for example it's not very clear what spawnes the main actor and similar things. Of course those are things that will become manageable after some time, but it just seems to me that some things are unnecessarily complicated in Unreal. Unity on the other hand is rather easy: everything that does logic is a component. That's about it. There is almost no hidden functionality.\n\nAlso, while I have to admit that the blueprints are just really cool, I'd choose C# over C++ anytime. It just seems to me that blueprint is too limited (Not limited in power, but visual programming just isn't that great for complex systems) and C++ is simply overkill for even the most complex gameplay code.", "aSentId": 44803, "answer": "Having no experience with Unreal, I'd appreciate it if people explained why this comment is being downvoted.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44804, "question": "Having no experience with Unreal, I'd appreciate it if people explained why this comment is being downvoted.", "aSentId": 44805, "answer": "Because this post is about Unreal, so discussion is complete unreasonable, obviously. But seriously I don't really understand people who just downvote because someone doesn't have the same opinion as they do.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44804, "question": "Having no experience with Unreal, I'd appreciate it if people explained why this comment is being downvoted.", "aSentId": 44807, "answer": "Probably the C++ dismissal, which sounds like the standard \"I have used this technology a little bit and I'm positive it's worse than the one I have used a lot.\" I didn't downvote, but it did make me kind of look sideways.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44809, "question": "Unreal is a full C++ 3d engine. It's not kids stuff, it's for super fast high end stuff.  Which means you need serious real coding chops.  Unity is meant to make it all easier. Unreal is overkill for average indie games. \nBut if you want to compete with the big boys on consoles this is a dream come true !!", "aSentId": 44810, "answer": "If you wanna compete with the big boys the 25$/month fee that they dropped will be the least of your problems.    \n\nThe biggest hurdle if ypu want to compete is $$$. You need to blow 100K++ on marketing to get anywhere today", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44811, "question": "If you wanna compete with the big boys the 25$/month fee that they dropped will be the least of your problems.    \n\nThe biggest hurdle if ypu want to compete is $$$. You need to blow 100K++ on marketing to get anywhere today", "aSentId": 44812, "answer": "Well times have changed. Naturally to compete with the big boys you need massive budgets.  But these day a loan indie code can make a few million. That's more than enough to live the good life and do what you want. That doesn't need much marketing just focus on making a real fun game and make sure every game blogger and you tuber gets a free copy.  You can made 100-500k even off a mediocre game.\nBut most people 99% don't have the daily work discipline and focus to develop a game in the first year. The days it really is just time, the tools are all free now. \nAll the game success stories are indie developers with razor sharp focus and discipline.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44809, "question": "Unreal is a full C++ 3d engine. It's not kids stuff, it's for super fast high end stuff.  Which means you need serious real coding chops.  Unity is meant to make it all easier. Unreal is overkill for average indie games. \nBut if you want to compete with the big boys on consoles this is a dream come true !!", "aSentId": 44814, "answer": "I just get the feeling that this sort of dream often fails. Especially when you're trying to compete with the big boys. Better stick to the basics. Apparently that works better for indie games.. I haven't seen many of those with AAA graphics.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44815, "question": "I just get the feeling that this sort of dream often fails. Especially when you're trying to compete with the big boys. Better stick to the basics. Apparently that works better for indie games.. I haven't seen many of those with AAA graphics.", "aSentId": 44816, "answer": "For sure, this just means at last indie games can have the same tools and tech as a AAA console game. So it's great news for the more professional end and console developers. If you are just doing a small indie game unity is still better.  As you can focus more on game design than coding chops.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44818, "question": "&gt; C++ is simply overkill for even the most complex gameplay code.\n\nThere's also \"Unreal Script\" or whatever they call it.", "aSentId": 44819, "answer": "Nope, UnrealScript was declared dead after UE3. They have Blueprint now, which is a visual scripting system. Xamarin seems to be trying to get C# support, but it's spotty at best.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44820, "question": "Nope, UnrealScript was declared dead after UE3. They have Blueprint now, which is a visual scripting system. Xamarin seems to be trying to get C# support, but it's spotty at best.", "aSentId": 44821, "answer": "Ah, I see. I thought it was still a thing since it offered to make a project template using it back when I tried UE4 last.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44820, "question": "Nope, UnrealScript was declared dead after UE3. They have Blueprint now, which is a visual scripting system. Xamarin seems to be trying to get C# support, but it's spotty at best.", "aSentId": 44823, "answer": "It's for serious coders you have the source code you can add scripting support for anything you want. ", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44818, "question": "&gt; C++ is simply overkill for even the most complex gameplay code.\n\nThere's also \"Unreal Script\" or whatever they call it.", "aSentId": 44825, "answer": "I thought they dropped support for it. But I did hear of a rather nice alternative: somebody tried to implement C# as scripting language in Unreal. Official support would be a lot better, but I guess that would still be a great addition for the engine.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44827, "question": "5% seems extremely generous, especially since the first $3k are royalty-free.", "aSentId": 44828, "answer": "Until you realize it's 5% of *gross revenue*.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44829, "question": "Until you realize it's 5% of *gross revenue*.", "aSentId": 44830, "answer": "Would be extremely easy to cheat the system otherwise.\n\n\"Oh, you want money from the one billion copies I just sold? Nah, everything went to salaries so...\"", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44831, "question": "Would be extremely easy to cheat the system otherwise.\n\n\"Oh, you want money from the one billion copies I just sold? Nah, everything went to salaries so...\"", "aSentId": 44832, "answer": "Good old Hollywood accounting.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44833, "question": "Good old Hollywood accounting.", "aSentId": 44834, "answer": "There was a really good podcast episode about why huge movies technically don't make a profit. Notice how movies don't talk about how much profit they make, but rather how much money they made from ticket sales? I forget who actually did the podcast though. I thought it was Planet Money but I can't find it right now. It may have been Freakonomics too. ", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44831, "question": "Would be extremely easy to cheat the system otherwise.\n\n\"Oh, you want money from the one billion copies I just sold? Nah, everything went to salaries so...\"", "aSentId": 44836, "answer": "Edit: sorry, misread comment", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44831, "question": "Would be extremely easy to cheat the system otherwise.\n\n\"Oh, you want money from the one billion copies I just sold? Nah, everything went to salaries so...\"", "aSentId": 44838, "answer": "That's why it's 5% of gross. If you had the option to give it all to salaries, it would be 5% of net. That's what's wrong with Hollywood accounting: everything goes to the grosses.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44839, "question": "That's why it's 5% of gross. If you had the option to give it all to salaries, it would be 5% of net. That's what's wrong with Hollywood accounting: everything goes to the grosses.", "aSentId": 44840, "answer": "Yes, that's what I said...", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44841, "question": "Yes, that's what I said...", "aSentId": 44842, "answer": "Nevermind me, I somehow managed to miss the word 'otherwise' in your sentence. Sorry about that!", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44829, "question": "Until you realize it's 5% of *gross revenue*.", "aSentId": 44844, "answer": "Still pretty generous.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44829, "question": "Until you realize it's 5% of *gross revenue*.", "aSentId": 44846, "answer": "You can renegotiate when you get big enough - for example getting greenlit. I have no idea what those terms are and I'm sure they are under strict NDA but I'd imagine the bigger developers are getting a better deal.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44847, "question": "You can renegotiate when you get big enough - for example getting greenlit. I have no idea what those terms are and I'm sure they are under strict NDA but I'd imagine the bigger developers are getting a better deal.", "aSentId": 44848, "answer": "I think the 'deals' is to pay for an upfront license to use it. I doubt they're going to go lower than 5%.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44851, "question": "Not really. I would have assumed gross revenue. That's super normal.", "aSentId": 44852, "answer": "Yeah, I mean I don't think any indie dev who knows what they are doing should ever have positive net revenue, unless I misunderstand how small businesses work. All profit goes to developers' salaries and that's it, there's no shareholders who would want any of the net revenue written down as an actual firm's profit.\n\nOr do I misunderstand how accounting works?", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44853, "question": "Yeah, I mean I don't think any indie dev who knows what they are doing should ever have positive net revenue, unless I misunderstand how small businesses work. All profit goes to developers' salaries and that's it, there's no shareholders who would want any of the net revenue written down as an actual firm's profit.\n\nOr do I misunderstand how accounting works?", "aSentId": 44854, "answer": "Generally. Depends on the dev. A single person might work you're way, but a group might want to leave money in the company itself for good reasons. ", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44855, "question": "Generally. Depends on the dev. A single person might work you're way, but a group might want to leave money in the company itself for good reasons. ", "aSentId": 44856, "answer": "&gt; but a group might want to leave money in the company itself for good reasons.\n\nYeah, I can think of quite a few, but probably not when there's this extra 5% tax from Epic that can be trivially avoided. So that's why it's entirely reasonable for Epic to not go that way at all.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44853, "question": "Yeah, I mean I don't think any indie dev who knows what they are doing should ever have positive net revenue, unless I misunderstand how small businesses work. All profit goes to developers' salaries and that's it, there's no shareholders who would want any of the net revenue written down as an actual firm's profit.\n\nOr do I misunderstand how accounting works?", "aSentId": 44858, "answer": "You'd have to ask an accountant because it will differ by jurisdiction.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44861, "question": "So, would that be 66.5% after steam, or 65%? Does gross revenue count total sale costs, or total amount coming to you as a developer?", "aSentId": 44862, "answer": "Gross, meaning if your game costs the end user $100 (assuming no ad revenue etc, just POS), you owe Unreal $5.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44863, "question": "Gross, meaning if your game costs the end user $100 (assuming no ad revenue etc, just POS), you owe Unreal $5.", "aSentId": 44864, "answer": "Interesting. It's not that much of a difference considering that it would be $66.50 to you vs $65. \n\nI have to admit, my first reaction was \"sheesh, he's overreacting a bit\" before I realized what thread this was.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44865, "question": "Interesting. It's not that much of a difference considering that it would be $66.50 to you vs $65. \n\nI have to admit, my first reaction was \"sheesh, he's overreacting a bit\" before I realized what thread this was.", "aSentId": 44866, "answer": "If Steam gets 30%, then yes, you would be left with 65%. This may not seem like much but it adds up, specially after taxes and if you've spent a lot of money to make the game come to fruition. For a game priced at $10, you only need to sell more than 2800 copies for UE4 to end up being more expensive than Unity. If you sold 100k copies, you just paid Unreal $50k. That's quite a bit more than Unity Pro's $1400 (not to mention you can still make games for _free_ with Unity Free and sell it without royalties).", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44867, "question": "If Steam gets 30%, then yes, you would be left with 65%. This may not seem like much but it adds up, specially after taxes and if you've spent a lot of money to make the game come to fruition. For a game priced at $10, you only need to sell more than 2800 copies for UE4 to end up being more expensive than Unity. If you sold 100k copies, you just paid Unreal $50k. That's quite a bit more than Unity Pro's $1400 (not to mention you can still make games for _free_ with Unity Free and sell it without royalties).", "aSentId": 44868, "answer": "I'm pulling the 30% from various rumors I hear on /r/gamedev. That's supposedly the standard steam cut for indie dev. (IMO pretty reasonable, considering how easy it is in comparison to marketing on your own)", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44869, "question": "I'm pulling the 30% from various rumors I hear on /r/gamedev. That's supposedly the standard steam cut for indie dev. (IMO pretty reasonable, considering how easy it is in comparison to marketing on your own)", "aSentId": 44870, "answer": "I read it varies between 30-40. It's kind of reasonable, but I think it's a tad too high. 25-30 would sound better. Steam is good, but honestly it could be so much better that I wouldn't cry over it if a better platform came about which had lower royalty cuts. Although I think that's really unlikely to happen, considering Apple Store and Google Play both take 30% as well.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44871, "question": "I read it varies between 30-40. It's kind of reasonable, but I think it's a tad too high. 25-30 would sound better. Steam is good, but honestly it could be so much better that I wouldn't cry over it if a better platform came about which had lower royalty cuts. Although I think that's really unlikely to happen, considering Apple Store and Google Play both take 30% as well.", "aSentId": 44872, "answer": "And Steam has a ridiculous user base, all tied to the money they've already spent. The platform has immense hold over the PC gaming space right now.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44869, "question": "I'm pulling the 30% from various rumors I hear on /r/gamedev. That's supposedly the standard steam cut for indie dev. (IMO pretty reasonable, considering how easy it is in comparison to marketing on your own)", "aSentId": 44874, "answer": "It is indeed 30%.   \nSource: Am dev.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44867, "question": "If Steam gets 30%, then yes, you would be left with 65%. This may not seem like much but it adds up, specially after taxes and if you've spent a lot of money to make the game come to fruition. For a game priced at $10, you only need to sell more than 2800 copies for UE4 to end up being more expensive than Unity. If you sold 100k copies, you just paid Unreal $50k. That's quite a bit more than Unity Pro's $1400 (not to mention you can still make games for _free_ with Unity Free and sell it without royalties).", "aSentId": 44876, "answer": "Bit of a tangent, if your game costs $10 and you sell 1000 copies on Steam, they take $3000 leaving you with $6000. Do you pay taxes on $10000 or $6000?", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44877, "question": "Bit of a tangent, if your game costs $10 and you sell 1000 copies on Steam, they take $3000 leaving you with $6000. Do you pay taxes on $10000 or $6000?", "aSentId": 44878, "answer": "$6000. You never see the other $4000, so it is not revenue as far as taxes are concerned.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44879, "question": "$6000. You never see the other $4000, so it is not revenue as far as taxes are concerned.", "aSentId": 44880, "answer": "Even if you did, expenses like this are deductions from taxable income. ", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44877, "question": "Bit of a tangent, if your game costs $10 and you sell 1000 copies on Steam, they take $3000 leaving you with $6000. Do you pay taxes on $10000 or $6000?", "aSentId": 44882, "answer": "You would pay taxes on profits, you can deduct all kinds of expenses.\n", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44867, "question": "If Steam gets 30%, then yes, you would be left with 65%. This may not seem like much but it adds up, specially after taxes and if you've spent a lot of money to make the game come to fruition. For a game priced at $10, you only need to sell more than 2800 copies for UE4 to end up being more expensive than Unity. If you sold 100k copies, you just paid Unreal $50k. That's quite a bit more than Unity Pro's $1400 (not to mention you can still make games for _free_ with Unity Free and sell it without royalties).", "aSentId": 44884, "answer": "This is assuming that you are a single developer (otherwise you need a unity pro license for each) who is not interested in deploying to mobile.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44885, "question": "This is assuming that you are a single developer (otherwise you need a unity pro license for each) who is not interested in deploying to mobile.", "aSentId": 44886, "answer": "If you're not a single developer, that means you have more expenses and thus 5% can be even more crippling.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44889, "question": "Somehow I'm more excited to wait and see how would Unity3D act. If Unity3D would go open source it would be xmas everyday this year.", "aSentId": 44890, "answer": "Unreal rendering is light years ahead of Unity though.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44891, "question": "Unreal rendering is light years ahead of Unity though.", "aSentId": 44892, "answer": "Isn't it really just a couple of software-development years ahead tho?\n\n Or maybe just a couple of regular years? ", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44893, "question": "Isn't it really just a couple of software-development years ahead tho?\n\n Or maybe just a couple of regular years? ", "aSentId": 44894, "answer": "A software-development year is at least 3 years.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44895, "question": "A software-development year is at least 3 years.", "aSentId": 44896, "answer": "In agile or waterfall? Cause some of those sprints could be 3 weeks ", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44897, "question": "In agile or waterfall? Cause some of those sprints could be 3 weeks ", "aSentId": 44898, "answer": "In agile.  But only if they're using Hadoop and Cassandra so they can be web scale. ", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44899, "question": "In agile.  But only if they're using Hadoop and Cassandra so they can be web scale. ", "aSentId": 44900, "answer": "Hadoop is okay, but Hadoop.js requires much less configuration and installs anywhere nodejs can. And instead of writing pig scripts, you can write pig.js scripts and have cloud-level capabilities in 15 minutes flat ", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44901, "question": "Hadoop is okay, but Hadoop.js requires much less configuration and installs anywhere nodejs can. And instead of writing pig scripts, you can write pig.js scripts and have cloud-level capabilities in 15 minutes flat ", "aSentId": 44902, "answer": "What about an API? Does it connect to Omniture?", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44901, "question": "Hadoop is okay, but Hadoop.js requires much less configuration and installs anywhere nodejs can. And instead of writing pig scripts, you can write pig.js scripts and have cloud-level capabilities in 15 minutes flat ", "aSentId": 44904, "answer": "So. Many. Buzzwords.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44905, "question": "So. Many. Buzzwords.", "aSentId": 44906, "answer": "Bro do you even synergy?", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44907, "question": "Bro do you even synergy?", "aSentId": 44908, "answer": "Never make fun of synergy Lemon.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44907, "question": "Bro do you even synergy?", "aSentId": 44910, "answer": "web scale", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44901, "question": "Hadoop is okay, but Hadoop.js requires much less configuration and installs anywhere nodejs can. And instead of writing pig scripts, you can write pig.js scripts and have cloud-level capabilities in 15 minutes flat ", "aSentId": 44912, "answer": "it all depends if they can make a .net UI to zoom into the render details and stabilize the image.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44899, "question": "In agile.  But only if they're using Hadoop and Cassandra so they can be web scale. ", "aSentId": 44914, "answer": "Hadoop isn't real-time enough, so last year.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44899, "question": "In agile.  But only if they're using Hadoop and Cassandra so they can be web scale. ", "aSentId": 44916, "answer": "You should put /s because I think some people don't get it.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44917, "question": "You should put /s because I think some people don't get it.", "aSentId": 44918, "answer": "Well, they clearly need to attend the stand-ups then.  You're either the chicken or the pig, ya know?  Who do these people think they are?  The farmer???", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44919, "question": "Well, they clearly need to attend the stand-ups then.  You're either the chicken or the pig, ya know?  Who do these people think they are?  The farmer???", "aSentId": 44920, "answer": "DUDE SOME OF US ARE HERE TO HIDE OUT FROM WORK", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44891, "question": "Unreal rendering is light years ahead of Unity though.", "aSentId": 44922, "answer": "I don't know enough about Unreal, but even Unity 5? Unity 5 is an enormous leap forward from Unity 4. Maybe still not quite Unreal level lighting, but certainly doesn't seem light years away anymore. (Tell me if I'm wrong though, I don't know much about Unreal)", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44923, "question": "I don't know enough about Unreal, but even Unity 5? Unity 5 is an enormous leap forward from Unity 4. Maybe still not quite Unreal level lighting, but certainly doesn't seem light years away anymore. (Tell me if I'm wrong though, I don't know much about Unreal)", "aSentId": 44924, "answer": "I honestly can't tell the difference in quality between Unity 5 and UE4. As usual, how it looks is more to do with how good the artists are, really.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44925, "question": "I honestly can't tell the difference in quality between Unity 5 and UE4. As usual, how it looks is more to do with how good the artists are, really.", "aSentId": 44926, "answer": "Unity 5 supports physically-based rendering and has improved a lot with shadow generation and a new animation system. UE4 probably has all of that as well, but yea, not sure about the differences in quality. For consoles I'd pick UE4, for mobile I'd probably choose Unity 5. If my game needed to work on all platforms I'd choose Unity 5.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44927, "question": "Unity 5 supports physically-based rendering and has improved a lot with shadow generation and a new animation system. UE4 probably has all of that as well, but yea, not sure about the differences in quality. For consoles I'd pick UE4, for mobile I'd probably choose Unity 5. If my game needed to work on all platforms I'd choose Unity 5.", "aSentId": 44928, "answer": "I think you hit the nail on the head.  6-8 core console support with low level GPU access makes the difference.  (Also, people shouldn't actually forget that any serious console developer is still going to go into the source and optimize parts of the SCE / Microsoft render paths).  Lets also not forget DX12 is around the corner, giving better low level access, while mobile sits in some kind of limbo between OpenGL and other non-DX solutions.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44925, "question": "I honestly can't tell the difference in quality between Unity 5 and UE4. As usual, how it looks is more to do with how good the artists are, really.", "aSentId": 44930, "answer": "Try building a large project with either, you will see why unity wont get you far in the future.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44931, "question": "Try building a large project with either, you will see why unity wont get you far in the future.", "aSentId": 44932, "answer": "So instead of providing info for your reasoning, you're saying I should spend thousands of man hours using an engine that you say isn't worth it?", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44891, "question": "Unreal rendering is light years ahead of Unity though.", "aSentId": 44934, "answer": "Thats because the engines are at cross purposes in this regard.  Unity is targeting much wider range of developers, UE4 wanted many AAA games on it.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44935, "question": "Thats because the engines are at cross purposes in this regard.  Unity is targeting much wider range of developers, UE4 wanted many AAA games on it.", "aSentId": 44936, "answer": "UE4 targets a huge range of developers. The problem with UE is that people associate it with AAA and assume it won't function well for mobile or small projects, which hasn't been the case for a while.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44937, "question": "UE4 targets a huge range of developers. The problem with UE is that people associate it with AAA and assume it won't function well for mobile or small projects, which hasn't been the case for a while.", "aSentId": 44938, "answer": "UE4 is still not good for mobile unless you're targetting very new tech. And even then, not necessarily. I'm developing a freemium game, so large range of hardware support is needed. Crashes instantly on newest gen Kindle Fire devices.\n\nAlso I would have to develop Amazon integration myself. With Unity I could simply buy plugins for whatever platforms I want (iOS, GPlay, Amazon, Win phone store, etc.) I know UE4 has a marketplace and all now, but none of that exists. Since the base features are built into engine source I'm not sure how easy it would be either. And although Epic has developed IAP etc for iOS and some GPlay integration for Android, last I checked they did not support IAP on Android. And even on iOS there is no support for permanent IAPs, only consummables. There is currently no \"restore purchases\" functionality either which is tied into this.\n\nOn a 2012 Nexus 7 (I know nothing fancy) a scene with &lt; 2k polys and 5 materials can't even display all 5 materials, and it's at ~30 fps. With Unity same device, exact same models, all materials show correctly and it hits vsync (60 fps).\n\nAt this point as much as I love UE4, I would only recommend it for desktop games unless you want to only target new gen mobile hardware running on Google Play ecosystem.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44939, "question": "UE4 is still not good for mobile unless you're targetting very new tech. And even then, not necessarily. I'm developing a freemium game, so large range of hardware support is needed. Crashes instantly on newest gen Kindle Fire devices.\n\nAlso I would have to develop Amazon integration myself. With Unity I could simply buy plugins for whatever platforms I want (iOS, GPlay, Amazon, Win phone store, etc.) I know UE4 has a marketplace and all now, but none of that exists. Since the base features are built into engine source I'm not sure how easy it would be either. And although Epic has developed IAP etc for iOS and some GPlay integration for Android, last I checked they did not support IAP on Android. And even on iOS there is no support for permanent IAPs, only consummables. There is currently no \"restore purchases\" functionality either which is tied into this.\n\nOn a 2012 Nexus 7 (I know nothing fancy) a scene with &lt; 2k polys and 5 materials can't even display all 5 materials, and it's at ~30 fps. With Unity same device, exact same models, all materials show correctly and it hits vsync (60 fps).\n\nAt this point as much as I love UE4, I would only recommend it for desktop games unless you want to only target new gen mobile hardware running on Google Play ecosystem.", "aSentId": 44940, "answer": "Good points on IAP support.\n\n&gt; On a 2012 Nexus 7 (I know nothing fancy) a scene with &lt; 2k polys and 5 materials can't even display all 5 materials, and it's at ~30 fps. With Unity same device, exact same models, all materials show correctly and it hits vsync (60 fps).\n\nWhich lighting settings were you using? That seems absurdly simple unless you're doing something really ridiculous in your materials or using lighting settings that are bad for performance.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44941, "question": "Good points on IAP support.\n\n&gt; On a 2012 Nexus 7 (I know nothing fancy) a scene with &lt; 2k polys and 5 materials can't even display all 5 materials, and it's at ~30 fps. With Unity same device, exact same models, all materials show correctly and it hits vsync (60 fps).\n\nWhich lighting settings were you using? That seems absurdly simple unless you're doing something really ridiculous in your materials or using lighting settings that are bad for performance.", "aSentId": 44942, "answer": "In unreal, I had it set to unlit. In unity default lighting with mobile defuse nothing fancy.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44939, "question": "UE4 is still not good for mobile unless you're targetting very new tech. And even then, not necessarily. I'm developing a freemium game, so large range of hardware support is needed. Crashes instantly on newest gen Kindle Fire devices.\n\nAlso I would have to develop Amazon integration myself. With Unity I could simply buy plugins for whatever platforms I want (iOS, GPlay, Amazon, Win phone store, etc.) I know UE4 has a marketplace and all now, but none of that exists. Since the base features are built into engine source I'm not sure how easy it would be either. And although Epic has developed IAP etc for iOS and some GPlay integration for Android, last I checked they did not support IAP on Android. And even on iOS there is no support for permanent IAPs, only consummables. There is currently no \"restore purchases\" functionality either which is tied into this.\n\nOn a 2012 Nexus 7 (I know nothing fancy) a scene with &lt; 2k polys and 5 materials can't even display all 5 materials, and it's at ~30 fps. With Unity same device, exact same models, all materials show correctly and it hits vsync (60 fps).\n\nAt this point as much as I love UE4, I would only recommend it for desktop games unless you want to only target new gen mobile hardware running on Google Play ecosystem.", "aSentId": 44944, "answer": "Yea basically its SUPER MEGA HYPER overkill for mobile.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44937, "question": "UE4 targets a huge range of developers. The problem with UE is that people associate it with AAA and assume it won't function well for mobile or small projects, which hasn't been the case for a while.", "aSentId": 44946, "answer": "I think another big difference is that it was free to try and get used to unity, while not to many people where keen on paying for UE before they knew if they would like or use it. The people who are already used to unity are even less likely to want to pay for a EU if they don't have a verry good reason to swithch. \n\nI really think this is the reason why unity has become the standard in the indie scene, and that this is the main reason epic is making this move.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44949, "question": "It's a good thing gamers don't care about graphics. ;)", "aSentId": 44950, "answer": "\\&gt;implying console peasants are actually gamers\n\n^^^^^^PCMR!", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44951, "question": "\\&gt;implying console peasants are actually gamers\n\n^^^^^^PCMR!", "aSentId": 44952, "answer": "Hail brother!", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44954, "question": "&gt;rendering\n\n&gt;light years\n\nI see what you did there.", "aSentId": 44955, "answer": "Really? I don't. I'm almost 100% sure no computer can accurately render a lightyear.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44956, "question": "Really? I don't. I'm almost 100% sure no computer can accurately render a lightyear.", "aSentId": 44957, "answer": "Isn't the point of rending to simulate the behavior of light?\n\nI guess it was a bit of a stretch of pun. Sorry.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44958, "question": "Isn't the point of rending to simulate the behavior of light?\n\nI guess it was a bit of a stretch of pun. Sorry.", "aSentId": 44959, "answer": "A lightyear is distance, to render distance you must fill it, and no computer can fill that distance.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44960, "question": "A lightyear is distance, to render distance you must fill it, and no computer can fill that distance.", "aSentId": 44961, "answer": "Yes you could. You'd just lose precision in the same way that say, rendering a room isn't accurate at the atomic level.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44889, "question": "Somehow I'm more excited to wait and see how would Unity3D act. If Unity3D would go open source it would be xmas everyday this year.", "aSentId": 44963, "answer": "They can't. They are too dependent on licensed stuff at this point. Epic did a lot of work on UE4 to strip out the obscene amount of middleware they had with UE3. Such a thing would not be possible until Unity 6 or even 7.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44889, "question": "Somehow I'm more excited to wait and see how would Unity3D act. If Unity3D would go open source it would be xmas everyday this year.", "aSentId": 44965, "answer": "I know right? Meanwhile unity pro is like\n\n&gt;75$ a month also pay for a year also pro is 1500$ no were srs pls", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44968, "question": "Because C++ (of UnrealEngine) is too hard?\n\nEDIT: not digging at anyone, C++ is too hard for me as well ;)", "aSentId": 44969, "answer": "Because unity has a lower initial learning curve (pro) but if something internally breaks you can't see the full call stack (con)", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44970, "question": "Because unity has a lower initial learning curve (pro) but if something internally breaks you can't see the full call stack (con)", "aSentId": 44971, "answer": "Unity also has some iffy software design choices (I am not a fan of their entity system specifically), and Unreal has an awesome visual programming system for people who want to use it.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44972, "question": "Unity also has some iffy software design choices (I am not a fan of their entity system specifically), and Unreal has an awesome visual programming system for people who want to use it.", "aSentId": 44973, "answer": "Their integration of the components system into the editor is an interesting concept (I liked it at first and had a similar idea before I saw Unity), but it seems to add more cognitive overhead in practice.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44970, "question": "Because unity has a lower initial learning curve (pro) but if something internally breaks you can't see the full call stack (con)", "aSentId": 44975, "answer": "This has been a huge con in games I've made on unity. The time spent learning unreal would have been less than dealing with unity problems.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44976, "question": "This has been a huge con in games I've made on unity. The time spent learning unreal would have been less than dealing with unity problems.", "aSentId": 44977, "answer": "Coming from a GameMaker background (where it's so simple/limited that it can't be fucked up) I also spent an uncomfortable amount of time wondering if it was my code, a unity bug, or an undocumented \"feature\"", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44976, "question": "This has been a huge con in games I've made on unity. The time spent learning unreal would have been less than dealing with unity problems.", "aSentId": 44979, "answer": "Until you find the problems in Unreal....  Realistically both engines have walls that developers have to overcome.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44980, "question": "Until you find the problems in Unreal....  Realistically both engines have walls that developers have to overcome.", "aSentId": 44981, "answer": "On the other hand, with Unreal you do have the ability of making changes to the engine, making it easier to overcome design limitations.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44968, "question": "Because C++ (of UnrealEngine) is too hard?\n\nEDIT: not digging at anyone, C++ is too hard for me as well ;)", "aSentId": 44983, "answer": "In my experience, C is harder than C++. Because C itself is so small, and the standard library is sensitive to newbies (not to mention the naming conventions) programmers keep inventing idioms and macro hacks. Some behaviours and things like tags are outright counterintuitive although they make perfect sense in the proper context. C++ was surprisingly easier for me to grok. I heartedly recommend Bruce Eckel's \"Thinking in C++\" because it gives just the right amount of information for somebody who wrote code in other languages before.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44968, "question": "Because C++ (of UnrealEngine) is too hard?\n\nEDIT: not digging at anyone, C++ is too hard for me as well ;)", "aSentId": 44985, "answer": "Because if you're just experimenting you don't want the slow C++ compiler to sit in the way of rapid development? Don't know if that's a problem, but difficulty is not the only reason. ", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44986, "question": "Because if you're just experimenting you don't want the slow C++ compiler to sit in the way of rapid development? Don't know if that's a problem, but difficulty is not the only reason. ", "aSentId": 44987, "answer": "UE4 has some tricks that let you implement C++ code on the fly while you're running.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44988, "question": "UE4 has some tricks that let you implement C++ code on the fly while you're running.", "aSentId": 44989, "answer": "I'm pretty sure both an do this can't they? And i don't think it's that complicated of a trick is it? There are answers on SO from 2010 describing how to do it.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44990, "question": "I'm pretty sure both an do this can't they? And i don't think it's that complicated of a trick is it? There are answers on SO from 2010 describing how to do it.", "aSentId": 44991, "answer": "Yea. I only mentioned UE because it was the one being called out.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44986, "question": "Because if you're just experimenting you don't want the slow C++ compiler to sit in the way of rapid development? Don't know if that's a problem, but difficulty is not the only reason. ", "aSentId": 44993, "answer": "First compile can take a minute or two, subsequent compiles shouldn't take more than 20-30 seconds (mine takes 8 seconds). I've had Unity projects that had longer compile times.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44995, "question": "My only worry with Unreal are the C++ compile times. What are they like for quickly changing a few lines of actor class code and recompiling to see the result?", "aSentId": 44996, "answer": "compile each component to seperate object files -&gt; every compile completes in under 10 seconds", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44997, "question": "compile each component to seperate object files -&gt; every compile completes in under 10 seconds", "aSentId": 44998, "answer": "Change the precompiled header -&gt; Watch LOTR Extended", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44999, "question": "Change the precompiled header -&gt; Watch LOTR Extended", "aSentId": 45000, "answer": "As much as I love this engine, this is kinda true. Though I believe they may have actually fixed this somewhat in 4.7", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44999, "question": "Change the precompiled header -&gt; Watch LOTR Extended", "aSentId": 45002, "answer": "&gt; watch \"Das Boot\" director's cut. \n\nCore i7 owner here. ", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44995, "question": "My only worry with Unreal are the C++ compile times. What are they like for quickly changing a few lines of actor class code and recompiling to see the result?", "aSentId": 45004, "answer": "The AMAZING thing is that you can compile your code while the editor is running, and see the changes live, without having to restart anything (basically, the engine just swaps the compiled libraries)\n\nIt's incredible for productivity, you can literally compile any amount of C++ and it will add it live.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45005, "question": "The AMAZING thing is that you can compile your code while the editor is running, and see the changes live, without having to restart anything (basically, the engine just swaps the compiled libraries)\n\nIt's incredible for productivity, you can literally compile any amount of C++ and it will add it live.", "aSentId": 45006, "answer": "Oooo!  Huge improvement on UDK.  UDK is just like \"Nope, you fuck off now guy, close it all down to do any script recompilation\".", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45005, "question": "The AMAZING thing is that you can compile your code while the editor is running, and see the changes live, without having to restart anything (basically, the engine just swaps the compiled libraries)\n\nIt's incredible for productivity, you can literally compile any amount of C++ and it will add it live.", "aSentId": 45008, "answer": "&gt;  you can literally compile any amount of C++ and it will add it live.\n\nPedantic Dickweed's Advocate: I don't think it will be able to cope with hot-patches to the hot-patching system :P", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45009, "question": "&gt;  you can literally compile any amount of C++ and it will add it live.\n\nPedantic Dickweed's Advocate: I don't think it will be able to cope with hot-patches to the hot-patching system :P", "aSentId": 45010, "answer": "Why should that be a problem? It could reload itself as a newer version: Serialise all state, fire up new version, have that version import the state, off you go. Probably going to need a giant engine lock to do that, but then there's worse things.\n\nOnly thing that would not work is hot-patching a hot-patching system that can't do that, of course.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45005, "question": "The AMAZING thing is that you can compile your code while the editor is running, and see the changes live, without having to restart anything (basically, the engine just swaps the compiled libraries)\n\nIt's incredible for productivity, you can literally compile any amount of C++ and it will add it live.", "aSentId": 45012, "answer": "I've only played with it a little, but found that every time I changed a header file I had to relaunch Unreal completely. Is there a way around that I didn't miss? Can I change any code without having to relaunch Unreal?", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45013, "question": "I've only played with it a little, but found that every time I changed a header file I had to relaunch Unreal completely. Is there a way around that I didn't miss? Can I change any code without having to relaunch Unreal?", "aSentId": 45014, "answer": "It depends when you did it. Before 4.7, you couldn't add a class / function / member variable, or change the included headers. You could only change what was going inside a function. Since 4.7, I think you can do all of that. I may be wrong about headers though.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45015, "question": "It depends when you did it. Before 4.7, you couldn't add a class / function / member variable, or change the included headers. You could only change what was going inside a function. Since 4.7, I think you can do all of that. I may be wrong about headers though.", "aSentId": 45016, "answer": "That's incredibly cool and makes the workflow about 1000 times better. At least when you're starting out and have no idea what you're doing... :P", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 44995, "question": "My only worry with Unreal are the C++ compile times. What are they like for quickly changing a few lines of actor class code and recompiling to see the result?", "aSentId": 45018, "answer": "Reduce coupling, use forward declarations whenever possible. Reduce coupling, don't include other headers inside headers unless it is impossible to avoid them. Reduce coupling, prefer static functions to private methods declared in the header. Reduce coupling, it shouldn't be necessary to recompile everything unless you got high coupling.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45019, "question": "Reduce coupling, use forward declarations whenever possible. Reduce coupling, don't include other headers inside headers unless it is impossible to avoid them. Reduce coupling, prefer static functions to private methods declared in the header. Reduce coupling, it shouldn't be necessary to recompile everything unless you got high coupling.", "aSentId": 45020, "answer": "I think one of my least favorite things about Unity is that it almost forces you to increase coupling. Every time I use it I always feel a little bit dirty as far as sound software design goes.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45019, "question": "Reduce coupling, use forward declarations whenever possible. Reduce coupling, don't include other headers inside headers unless it is impossible to avoid them. Reduce coupling, prefer static functions to private methods declared in the header. Reduce coupling, it shouldn't be necessary to recompile everything unless you got high coupling.", "aSentId": 45022, "answer": "&gt; Reduce coupling, prefer static functions to private methods declared in the so .\n\npester C++ committee to accept UFCS proposal so its' easier to refactor toward static functions , whilst still getting the autocomplete / less-nested benefits of method call syntax\n", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45027, "question": "Just a (not badly meant) reminder: free as in beer (almost,that is), not free as in freedom.", "aSentId": 45028, "answer": "More like \"first time is free\".", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45027, "question": "Just a (not badly meant) reminder: free as in beer (almost,that is), not free as in freedom.", "aSentId": 45030, "answer": "Thanks Stallman", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45031, "question": "Thanks Stallman", "aSentId": 45032, "answer": "Well, from the title of the post (\"*set it free*\") once could assume, that they had the second meaning in mind.\n\nMake something free of charge isn't 'setting it free'.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45033, "question": "Well, from the title of the post (\"*set it free*\") once could assume, that they had the second meaning in mind.\n\nMake something free of charge isn't 'setting it free'.", "aSentId": 45034, "answer": "As a huge open-source fan, \"available for free\" definitely did not imply free-as-in-freedom to me.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45033, "question": "Well, from the title of the post (\"*set it free*\") once could assume, that they had the second meaning in mind.\n\nMake something free of charge isn't 'setting it free'.", "aSentId": 45036, "answer": "&gt; Well, from the title of the post (\"set it free\") once could assume, that they had the second meaning in mind.\n\nNot really. I only assume the second meaning when someone who is likely to argue about such a definition says it in regard to software, and I know that's a likely scenario based on understanding their positions and background. Outside of that tiny subset of the times I experience the word \"free,\" I assume people use it financially, because it solely makes sense as financial in 99% of the times I hear it.\n\nI think making that assumption makes you a member of a subset of people, and you shouldn't hold the alternative interpretation against the rest of us who don't automatically assume everything orbits copyleft.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45037, "question": "&gt; Well, from the title of the post (\"set it free\") once could assume, that they had the second meaning in mind.\n\nNot really. I only assume the second meaning when someone who is likely to argue about such a definition says it in regard to software, and I know that's a likely scenario based on understanding their positions and background. Outside of that tiny subset of the times I experience the word \"free,\" I assume people use it financially, because it solely makes sense as financial in 99% of the times I hear it.\n\nI think making that assumption makes you a member of a subset of people, and you shouldn't hold the alternative interpretation against the rest of us who don't automatically assume everything orbits copyleft.", "aSentId": 45038, "answer": "First of all, copyleft is only a--to use your favorite word--subset of free software. There is plenty of non-copylefted free software, perhaps a sizeable minority or even majority these days. Regardless, copyleft is a concept that means *keep* software free, not *make* software free.\n\nSecond of all, yes, it's true that free as in beer as become associated with software but that doesn't mean it's meaningful. Do you have the same issue with trade? Nope. 99% of the time when talking about free in economic terms, it is referring to freedom. That's why those of us who support free as in freedom software keep using the term and clarifying it. It's just inherently difficult because English failed to get that one right.\n\nPerhaps we should switch entirely over to libre/gratis distinction. Would you like to help propagate that instead?", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45039, "question": "First of all, copyleft is only a--to use your favorite word--subset of free software. There is plenty of non-copylefted free software, perhaps a sizeable minority or even majority these days. Regardless, copyleft is a concept that means *keep* software free, not *make* software free.\n\nSecond of all, yes, it's true that free as in beer as become associated with software but that doesn't mean it's meaningful. Do you have the same issue with trade? Nope. 99% of the time when talking about free in economic terms, it is referring to freedom. That's why those of us who support free as in freedom software keep using the term and clarifying it. It's just inherently difficult because English failed to get that one right.\n\nPerhaps we should switch entirely over to libre/gratis distinction. Would you like to help propagate that instead?", "aSentId": 45040, "answer": "I'd like to \"help propagate\" neither, as I don't give a shit and was simply clarifying what most people think.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45041, "question": "I'd like to \"help propagate\" neither, as I don't give a shit and was simply clarifying what most people think.", "aSentId": 45042, "answer": "I'm sorry you don't care but hey, plenty of stuff I don't care about either. If you change your mind and would consider helping out, you may always contact me directly to work on any kind of project to spread the idea of liberty in computing.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45027, "question": "Just a (not badly meant) reminder: free as in beer (almost,that is), not free as in freedom.", "aSentId": 45044, "answer": "Free as in 5% off the top. Wow.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45045, "question": "Free as in 5% off the top. Wow.", "aSentId": 45046, "answer": "5% on anything over 3,000$ in a quarter.\n\nSo in 1 fiscal quarter your gross revenue is 3001$ you only owe Epic Games 5cents.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45045, "question": "Free as in 5% off the top. Wow.", "aSentId": 45048, "answer": "I mentioned this elsewhere in this thread but, what happens if you choose to release the game as freeware?\n\n(Yes I know freeware has sadly become unpopular these days. But it does still exist.)", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45045, "question": "Free as in 5% off the top. Wow.", "aSentId": 45050, "answer": "Which most people would consider a much better deal than paying $5000 (or whatever) just to mess around with it.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45053, "question": "&gt;Just a (not badly meant) reminder: free as in beer (almost,that is), not free as in freedom.\n\nNo reminder needed, I don't think anyone thought the unreal engine  has been opensourced.", "aSentId": 45054, "answer": "Open source software != free software. So often the two are conflated that people forget that open source literally means that the source code is available, and no more. It's just that generally open source software is also free software that you can distribute and modify without restriction; it's rare to see a commercial, non-free program release its source code.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45055, "question": "Open source software != free software. So often the two are conflated that people forget that open source literally means that the source code is available, and no more. It's just that generally open source software is also free software that you can distribute and modify without restriction; it's rare to see a commercial, non-free program release its source code.", "aSentId": 45056, "answer": "The OSI disagrees with you. They claim that the words \"open source software\" only applies to software with specific licenses: http://opensource.org/osd-annotated\n\nI don't agree with them, but there is at some precedence.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45057, "question": "The OSI disagrees with you. They claim that the words \"open source software\" only applies to software with specific licenses: http://opensource.org/osd-annotated\n\nI don't agree with them, but there is at some precedence.", "aSentId": 45058, "answer": "I don't agree with OSI either.\n\nUnreal Engine is still open source. In fact, even if we use the OSI definition, any software distributed with the Linux version of Unreal Engine editor, and targeted for Linux, would have to be considered more \"open source\" than every single \"open source\" project ever created for Windows. Everyone accepts open source as a normal term for \"open source\" software released on Windows, despite the fact that they don't/can't redistribute or even access the source code of the win kernel and libraries.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45059, "question": "I don't agree with OSI either.\n\nUnreal Engine is still open source. In fact, even if we use the OSI definition, any software distributed with the Linux version of Unreal Engine editor, and targeted for Linux, would have to be considered more \"open source\" than every single \"open source\" project ever created for Windows. Everyone accepts open source as a normal term for \"open source\" software released on Windows, despite the fact that they don't/can't redistribute or even access the source code of the win kernel and libraries.", "aSentId": 45060, "answer": "Why do you think that they don't consider windows open source projects to be open source? It pretty much says the opposite on the page I linked (#9).", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45061, "question": "Why do you think that they don't consider windows open source projects to be open source? It pretty much says the opposite on the page I linked (#9).", "aSentId": 45062, "answer": "I hadn't read that list in years. Thanks for pointing that out. I didn't realize OSI's entire definition specifically discludes types of software that are conventionally considered \"open source\" yet that have certain perpetuating licenses. Yet they say GPL2/3 is fine. Uh. Frankly, trying to make sense of their definition is even less worthwhile now. \n\nIn any case, my comment will only apply against people who are vehement in saying UE isn't \"open source\" due to lack of source redistribution, yet who call other projects built for Windows \"open source.\"", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45063, "question": "I hadn't read that list in years. Thanks for pointing that out. I didn't realize OSI's entire definition specifically discludes types of software that are conventionally considered \"open source\" yet that have certain perpetuating licenses. Yet they say GPL2/3 is fine. Uh. Frankly, trying to make sense of their definition is even less worthwhile now. \n\nIn any case, my comment will only apply against people who are vehement in saying UE isn't \"open source\" due to lack of source redistribution, yet who call other projects built for Windows \"open source.\"", "aSentId": 45064, "answer": "I can redistribute the source of the GIMP but I can't redistribute the source of Windows. This is the first time I've heard someone with your definition of open source, it is not conventional at all.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45059, "question": "I don't agree with OSI either.\n\nUnreal Engine is still open source. In fact, even if we use the OSI definition, any software distributed with the Linux version of Unreal Engine editor, and targeted for Linux, would have to be considered more \"open source\" than every single \"open source\" project ever created for Windows. Everyone accepts open source as a normal term for \"open source\" software released on Windows, despite the fact that they don't/can't redistribute or even access the source code of the win kernel and libraries.", "aSentId": 45066, "answer": "No. Something can be open source and still run on closed platforms like the GIMP on Windows, JQuery on IE, and Linux on closed firmware.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45067, "question": "No. Something can be open source and still run on closed platforms like the GIMP on Windows, JQuery on IE, and Linux on closed firmware.", "aSentId": 45068, "answer": "That's according to a conventional use of the term \"open source.\" I know. My comment was against the narrative of people who say UE can't be called open source due to lack or redistribution, yet they turn a blind eye to other programs whose entire existence (I consider) inextricably linked to Windows -- *even though these same people are apparently correct that UE isn't \"open source\" but for other reasons (rule #9), which I fully concede to, if we're to accept that the definition of open source hasn't conventionally expanded since the 90s*. No matter. I prefer Free/GPL source so none of this matters either way.\n\nI'm still happy Epic is willing to take such a major step in sharing/opening the engine's source to public scrutiny.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45055, "question": "Open source software != free software. So often the two are conflated that people forget that open source literally means that the source code is available, and no more. It's just that generally open source software is also free software that you can distribute and modify without restriction; it's rare to see a commercial, non-free program release its source code.", "aSentId": 45070, "answer": "You're wrong. You're talking about shared source, not open source.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45055, "question": "Open source software != free software. So often the two are conflated that people forget that open source literally means that the source code is available, and no more. It's just that generally open source software is also free software that you can distribute and modify without restriction; it's rare to see a commercial, non-free program release its source code.", "aSentId": 45072, "answer": "Also, I don't really see GPL'ed software as 'free', since it's a perpetuatuing license with quite a bit of restrictions.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45053, "question": "&gt;Just a (not badly meant) reminder: free as in beer (almost,that is), not free as in freedom.\n\nNo reminder needed, I don't think anyone thought the unreal engine  has been opensourced.", "aSentId": 45074, "answer": "Why not? Just put it under GPL or AGPL and then sell a license for proprietary use. It's the same model that Qt used successfully (I think they changed it a while ago). When I first read the heading, I really hoped that this was what happened.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45076, "question": "Not even free as in beer....\n\n&gt; *\"When you ship a game or application, you pay a 5% royalty on gross revenue after the first $3,000 per product, per quarter.\"*", "aSentId": 45077, "answer": "Free as in beer until you try and sell that beer to someone else", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45078, "question": "Free as in beer until you try and sell that beer to someone else", "aSentId": 45079, "answer": "And your beer gets you 3k on gross revenue per quarter", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45076, "question": "Not even free as in beer....\n\n&gt; *\"When you ship a game or application, you pay a 5% royalty on gross revenue after the first $3,000 per product, per quarter.\"*", "aSentId": 45081, "answer": "You're equivocating. They said available for free. It is. You can go get it without spending a dime. Being able to use it commercially is a only a subset of possible uses.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45083, "question": "Freedom isn't free!", "aSentId": 45084, "answer": "No, there's a hefty fuckin' fee.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45083, "question": "Freedom isn't free!", "aSentId": 45086, "answer": "Freedom is just another word for nothing left to lose", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45089, "question": "Anyone know how beginner friendly this is? I'm curious about getting into it", "aSentId": 45090, "answer": "Trial by fire.  But thankfully, that fire only burns as fast as you want to toss kindling onto it.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45089, "question": "Anyone know how beginner friendly this is? I'm curious about getting into it", "aSentId": 45092, "answer": "blueprints are really getting better with each release, and make relying on solely c++ a thing of the past. clearly u have more control if ur writing code but blueprints are pretty awesome and they have a lot of sample apps in the marketplace to see how it works", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45093, "question": "blueprints are really getting better with each release, and make relying on solely c++ a thing of the past. clearly u have more control if ur writing code but blueprints are pretty awesome and they have a lot of sample apps in the marketplace to see how it works", "aSentId": 45094, "answer": "Nice", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45096, "question": "&gt; When you ship a game or application, you pay a 5% royalty on gross revenue after the first $3,000 per product, per quarter.\n\nI made $5K in 2nd quarter, so I pay Unreal $250 in 2nd quarter.\nI made another $5K in 3rd quarter, so do I pay Unreal in 3rd quarter $250 on this new revenue, or do I pay $500 for gross revenue?", "aSentId": 45097, "answer": "You only pay for revenue over 3k per quarter, so if you made 5k in the 2nd quarter, that is 2k that you would have to pay royalty on. So that would only be $100 on $5,000 made. So that would be $200 for the both quarters together. I could be wrong though. ", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45098, "question": "You only pay for revenue over 3k per quarter, so if you made 5k in the 2nd quarter, that is 2k that you would have to pay royalty on. So that would only be $100 on $5,000 made. So that would be $200 for the both quarters together. I could be wrong though. ", "aSentId": 45099, "answer": "Agreed. $5k per quarter results in you paying Epic $100 each quarter", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45096, "question": "&gt; When you ship a game or application, you pay a 5% royalty on gross revenue after the first $3,000 per product, per quarter.\n\nI made $5K in 2nd quarter, so I pay Unreal $250 in 2nd quarter.\nI made another $5K in 3rd quarter, so do I pay Unreal in 3rd quarter $250 on this new revenue, or do I pay $500 for gross revenue?", "aSentId": 45101, "answer": "What kind of platform do you target by using an engine like this? ", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45102, "question": "What kind of platform do you target by using an engine like this? ", "aSentId": 45103, "answer": "Whatever you desire. It seems to be generally geared towards PC/Console, but is perfectly capable of making mobile games as well.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45096, "question": "&gt; When you ship a game or application, you pay a 5% royalty on gross revenue after the first $3,000 per product, per quarter.\n\nI made $5K in 2nd quarter, so I pay Unreal $250 in 2nd quarter.\nI made another $5K in 3rd quarter, so do I pay Unreal in 3rd quarter $250 on this new revenue, or do I pay $500 for gross revenue?", "aSentId": 45105, "answer": "Gross quarterly revenue doesn't add over quarters. Gross just means before your costs (stuff like paying your distribution channel, advertising, and development). The reason they are using gross instead of net is because if they used net all you'd have to do is increase your salary by whatever your gross revenue is and then you have 0 net revenue = 0 fees.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45107, "question": "Ok, now someone make UT 2015 and shut up and take my money.", "aSentId": 45108, "answer": "They are making a UT game. And you can work with them on coding some of it.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45114, "question": "This is big. Competition between UE4 and Unity3D should ultimately improve the quality of both. Good time to be a game developer!", "aSentId": 45115, "answer": "I downvote you because im jealous because I am no game developer.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45117, "question": "&gt;Pay a 5% royalty on games and applications you release.\n\nI'm not here to diminish the significance of going to a royalty-only structure, just that my thought process upon seeing the headline was: \"that crazy, it can't be true *click* oh, yup, it not\"", "aSentId": 45118, "answer": "Surely you are not expecting them to sell their souls, are you?", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45117, "question": "&gt;Pay a 5% royalty on games and applications you release.\n\nI'm not here to diminish the significance of going to a royalty-only structure, just that my thought process upon seeing the headline was: \"that crazy, it can't be true *click* oh, yup, it not\"", "aSentId": 45120, "answer": "I don't see how the headline is wrong. Even the source code is available for free. You only have to pay once you actually make money by using their product.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45121, "question": "I don't see how the headline is wrong. Even the source code is available for free. You only have to pay once you actually make money by using their product.", "aSentId": 45122, "answer": "&gt; You only have to pay once you actually make money by using their product.\n\nwell not exactly. \n\nThey are very careful to explain that you are to pay after 3000 of Gross Revenues.\n\nGross Revenues are all incomes earned in relation to this game. \n\nGross means basically before deductions... like:\n\n* sales Discount\n* refunds\n\nBut that isn't your profit, the money you get to take home as yours. \n\nTo get that you got to do the following math:\n\n    Revenues - Expenses = Profit/Loss\n    Revenues &gt; Expenses = Profit\n    Revenues &lt; Expenses = Loss\n\nSo Expenses like Paying your devs a salary, Purchasing of Assets like models and other licenses to develop this game, Licensing costs for music and trademarks... etc. \n\nAll these things would have to be calculated and taken away before you get the actual take home money. \n\nAnd if you have high expenses, you might end up paying these royalties while you are still in a loss. If your Expenses were greater than 3000 to develop this game, you would end up paying the royalties fee well before you could make any money on the product. \n\nI am not saying this is a bad strategy, but people would need to carefully understand what they are getting into before they think they are going to make bank.\n\nI will say, of the restrictions and limitations in their terms, Theirs are fairly straightforward and even a non accountant could figure it out. Compared to others I have seen, it is fairly reasonable and still low cost. especially if they are going to enter into a niche market and earn little revenue.\n\nBut a Major franchise would end up paying more in the long run and would probably be more likely to just buy Unreal engine outright and claim that as a tax writeoff as a expense for business purposes. \n", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45123, "question": "&gt; You only have to pay once you actually make money by using their product.\n\nwell not exactly. \n\nThey are very careful to explain that you are to pay after 3000 of Gross Revenues.\n\nGross Revenues are all incomes earned in relation to this game. \n\nGross means basically before deductions... like:\n\n* sales Discount\n* refunds\n\nBut that isn't your profit, the money you get to take home as yours. \n\nTo get that you got to do the following math:\n\n    Revenues - Expenses = Profit/Loss\n    Revenues &gt; Expenses = Profit\n    Revenues &lt; Expenses = Loss\n\nSo Expenses like Paying your devs a salary, Purchasing of Assets like models and other licenses to develop this game, Licensing costs for music and trademarks... etc. \n\nAll these things would have to be calculated and taken away before you get the actual take home money. \n\nAnd if you have high expenses, you might end up paying these royalties while you are still in a loss. If your Expenses were greater than 3000 to develop this game, you would end up paying the royalties fee well before you could make any money on the product. \n\nI am not saying this is a bad strategy, but people would need to carefully understand what they are getting into before they think they are going to make bank.\n\nI will say, of the restrictions and limitations in their terms, Theirs are fairly straightforward and even a non accountant could figure it out. Compared to others I have seen, it is fairly reasonable and still low cost. especially if they are going to enter into a niche market and earn little revenue.\n\nBut a Major franchise would end up paying more in the long run and would probably be more likely to just buy Unreal engine outright and claim that as a tax writeoff as a expense for business purposes. \n", "aSentId": 45124, "answer": "&gt; If your Expenses were greater than 3000 to develop this game, you would end up paying the royalties fee well before you could make any money on the product.\n\nAnd the reason it is this way is so that Unreal makes money, even if you try to use Hollywood accounting. Of course this arrangement sucks for you if you are legitimately operating at a loss, but them's the breaks.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45123, "question": "&gt; You only have to pay once you actually make money by using their product.\n\nwell not exactly. \n\nThey are very careful to explain that you are to pay after 3000 of Gross Revenues.\n\nGross Revenues are all incomes earned in relation to this game. \n\nGross means basically before deductions... like:\n\n* sales Discount\n* refunds\n\nBut that isn't your profit, the money you get to take home as yours. \n\nTo get that you got to do the following math:\n\n    Revenues - Expenses = Profit/Loss\n    Revenues &gt; Expenses = Profit\n    Revenues &lt; Expenses = Loss\n\nSo Expenses like Paying your devs a salary, Purchasing of Assets like models and other licenses to develop this game, Licensing costs for music and trademarks... etc. \n\nAll these things would have to be calculated and taken away before you get the actual take home money. \n\nAnd if you have high expenses, you might end up paying these royalties while you are still in a loss. If your Expenses were greater than 3000 to develop this game, you would end up paying the royalties fee well before you could make any money on the product. \n\nI am not saying this is a bad strategy, but people would need to carefully understand what they are getting into before they think they are going to make bank.\n\nI will say, of the restrictions and limitations in their terms, Theirs are fairly straightforward and even a non accountant could figure it out. Compared to others I have seen, it is fairly reasonable and still low cost. especially if they are going to enter into a niche market and earn little revenue.\n\nBut a Major franchise would end up paying more in the long run and would probably be more likely to just buy Unreal engine outright and claim that as a tax writeoff as a expense for business purposes. \n", "aSentId": 45126, "answer": "Its pretty similar to what the various online markets do, except you have to send it to them. Steam/Apple/Google all take a 30% cut upfront. Unreal just expects you to forward another 5% of that same number to them. ", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45127, "question": "Its pretty similar to what the various online markets do, except you have to send it to them. Steam/Apple/Google all take a 30% cut upfront. Unreal just expects you to forward another 5% of that same number to them. ", "aSentId": 45128, "answer": "Unless I develop browser-based games, correct?", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45123, "question": "&gt; You only have to pay once you actually make money by using their product.\n\nwell not exactly. \n\nThey are very careful to explain that you are to pay after 3000 of Gross Revenues.\n\nGross Revenues are all incomes earned in relation to this game. \n\nGross means basically before deductions... like:\n\n* sales Discount\n* refunds\n\nBut that isn't your profit, the money you get to take home as yours. \n\nTo get that you got to do the following math:\n\n    Revenues - Expenses = Profit/Loss\n    Revenues &gt; Expenses = Profit\n    Revenues &lt; Expenses = Loss\n\nSo Expenses like Paying your devs a salary, Purchasing of Assets like models and other licenses to develop this game, Licensing costs for music and trademarks... etc. \n\nAll these things would have to be calculated and taken away before you get the actual take home money. \n\nAnd if you have high expenses, you might end up paying these royalties while you are still in a loss. If your Expenses were greater than 3000 to develop this game, you would end up paying the royalties fee well before you could make any money on the product. \n\nI am not saying this is a bad strategy, but people would need to carefully understand what they are getting into before they think they are going to make bank.\n\nI will say, of the restrictions and limitations in their terms, Theirs are fairly straightforward and even a non accountant could figure it out. Compared to others I have seen, it is fairly reasonable and still low cost. especially if they are going to enter into a niche market and earn little revenue.\n\nBut a Major franchise would end up paying more in the long run and would probably be more likely to just buy Unreal engine outright and claim that as a tax writeoff as a expense for business purposes. \n", "aSentId": 45130, "answer": "They will negotiate terms with larger parties.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45132, "question": "Wow, $3,000 gross is tiny.", "aSentId": 45133, "answer": "Luckily, most of us will never be successful", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45134, "question": "Luckily, most of us will never be successful", "aSentId": 45135, "answer": "\"Avoid success at all COSTS!!!\"", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45132, "question": "Wow, $3,000 gross is tiny.", "aSentId": 45137, "answer": "It's per quarter though, which makes it a little more reasonable.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45132, "question": "Wow, $3,000 gross is tiny.", "aSentId": 45139, "answer": "Is it really? 5% of anything over $3,000 per quarter? That's incredibly reasonable.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45121, "question": "I don't see how the headline is wrong. Even the source code is available for free. You only have to pay once you actually make money by using their product.", "aSentId": 45141, "answer": "Unity does the same thing, don't they?  This is almost certainly geared towards indie devs.  I imagine that if a game becomes a reasonable enough success, that you can negotiate a licensing deal for the long term, which is what they probably are after.  If you are making more than pocket change off of their product, then they want to negotiate a better deal.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45142, "question": "Unity does the same thing, don't they?  This is almost certainly geared towards indie devs.  I imagine that if a game becomes a reasonable enough success, that you can negotiate a licensing deal for the long term, which is what they probably are after.  If you are making more than pocket change off of their product, then they want to negotiate a better deal.", "aSentId": 45143, "answer": "Unity is royalty-free and has always been. The pro version just costs way too much (for smaller indie devs).", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45121, "question": "I don't see how the headline is wrong. Even the source code is available for free. You only have to pay once you actually make money by using their product.", "aSentId": 45145, "answer": "Couldn't you just copy paste the source into your own engine?", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45146, "question": "Couldn't you just copy paste the source into your own engine?", "aSentId": 45147, "answer": "Not without being sued into the Stone Age.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45148, "question": "Not without being sued into the Stone Age.", "aSentId": 45149, "answer": "That's fine. You only need to gather 500 Food to reach the Tool Age.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45146, "question": "Couldn't you just copy paste the source into your own engine?", "aSentId": 45151, "answer": "Yeah and then get sued for millions if anything you make catches the eye of the general public and tips them off.\n\nGood luck with that...", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45153, "question": "\"Unreal Engine 4 available for free\"\n\n[...]\n\n\"with conditions\".", "aSentId": 45154, "answer": "It is **available** for free. You just can't sell games made with it for free. Don't think they are really misrepresenting it.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45155, "question": "It is **available** for free. You just can't sell games made with it for free. Don't think they are really misrepresenting it.", "aSentId": 45156, "answer": "Usually you make games to sell them.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45155, "question": "It is **available** for free. You just can't sell games made with it for free. Don't think they are really misrepresenting it.", "aSentId": 45158, "answer": "But they are making the most sensationalist headline they could without really lying.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45159, "question": "But they are making the most sensationalist headline they could without really lying.", "aSentId": 45160, "answer": "Not really. I mean, maybe if you aren't a game developer, aren't familiar with Unreal Engine or their existing pricing model, you might be a little confused but they state the revenue model in the *second* paragraph of the blog post.\n\nNo reasonable individual would read the headline and think they cancelled their royalty payment model. They have to make money after all.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45159, "question": "But they are making the most sensationalist headline they could without really lying.", "aSentId": 45162, "answer": "not really - users (like myself) were paying a very minimal monthly fee to be a part of an excellent community, and now they are getting rid of even that, allowing even more devs to have access and to help it grow. i dont believe that was their intent at all (sensationalism)", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45153, "question": "\"Unreal Engine 4 available for free\"\n\n[...]\n\n\"with conditions\".", "aSentId": 45164, "answer": "No, the engine is still very much available for free. You can do what you want with it without ever paying them a cent. You just can't make money on it. But that does not mean it isn't available.\n\nPlus, if you release your game for free, you don't pay anything still.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45153, "question": "\"Unreal Engine 4 available for free\"\n\n[...]\n\n\"with conditions\".", "aSentId": 45166, "answer": "True for everything ever. Even linux comes under the condition that if you want something done right, you should make it yourself.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45167, "question": "True for everything ever. Even linux comes under the condition that if you want something done right, you should make it yourself.", "aSentId": 45168, "answer": "Linux is actually free software, i.e. a permissive license.  You can modify and sell Linux all you want, so long as you release your modified source.  This is not \"free\" as in \"free software\".  It's open source but not permissively licensed.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45117, "question": "&gt;Pay a 5% royalty on games and applications you release.\n\nI'm not here to diminish the significance of going to a royalty-only structure, just that my thought process upon seeing the headline was: \"that crazy, it can't be true *click* oh, yup, it not\"", "aSentId": 45171, "answer": "Previously it was $19/mo PLUS the 5%.\n\nAt least this way more people will be tempted to get hold of it and try it out. We might even see some actual *games* using it in a year or two.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45173, "question": "Is 5% a better or worse deal than $20 a month? Was it $20 a month PLUS 5% over 3k?", "aSentId": 45174, "answer": "The previous plan was both.  Otherwise they would have been basically giving their product away to the console developers (I don't know what deal they get, but it's probably not the published one).", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45175, "question": "The previous plan was both.  Otherwise they would have been basically giving their product away to the console developers (I don't know what deal they get, but it's probably not the published one).", "aSentId": 45176, "answer": "Any AAA developer is most likely going to be signing a different contract with them anyway. No one expecting millions on sales is going to accept giving 5% of revenue forever- they get a different license in exchange for a lump sum or a much smaller % (possibly in net?) in the end, still a good deal for Epic.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45177, "question": "Any AAA developer is most likely going to be signing a different contract with them anyway. No one expecting millions on sales is going to accept giving 5% of revenue forever- they get a different license in exchange for a lump sum or a much smaller % (possibly in net?) in the end, still a good deal for Epic.", "aSentId": 45178, "answer": "Never in net. It's quite easy to have a wildly successful property technically be a net loss.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45179, "question": "Never in net. It's quite easy to have a wildly successful property technically be a net loss.", "aSentId": 45180, "answer": "Oh I work in film. Trust me when I say I know all about \"net.\"\n\nSometimes it's all the points you can get depending on how big the other company is. ", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45177, "question": "Any AAA developer is most likely going to be signing a different contract with them anyway. No one expecting millions on sales is going to accept giving 5% of revenue forever- they get a different license in exchange for a lump sum or a much smaller % (possibly in net?) in the end, still a good deal for Epic.", "aSentId": 45182, "answer": "Generally a lump sum, I think. ", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45173, "question": "Is 5% a better or worse deal than $20 a month? Was it $20 a month PLUS 5% over 3k?", "aSentId": 45184, "answer": "&gt; Was it $20 a month PLUS 5% over 3k?\n\nIirc was $20 and 5% (don't know about the 3k).", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45173, "question": "Is 5% a better or worse deal than $20 a month? Was it $20 a month PLUS 5% over 3k?", "aSentId": 45186, "answer": "It was $20 a month PLUS the 5%.\n\nI think it was more than 3k but I might be remembering it wrong.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45187, "question": "It was $20 a month PLUS the 5%.\n\nI think it was more than 3k but I might be remembering it wrong.", "aSentId": 45188, "answer": "I think it actually was 50k.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45189, "question": "I think it actually was 50k.", "aSentId": 45190, "answer": "That was the UDK. $100 entry fee, no royalties for the first 50k over the product's lifetime, then 25% of each sale after that. UE4 has always been far more reasonable, especially for indie development.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45193, "question": "How are they going to enforce that?\n\nAlso, can this be used for mobile games?", "aSentId": 45194, "answer": "&gt; How are they going to enforce that?\n\nWith lawsuits for the games that get popular enough that 5% of their business is a big enough number, lawyer nastrygrams for smaller successes and hope everyone else falls in line.  And not worrying about the rest because 5% of next to nothing is nothing.\n\nEdit: I read some more, they don't collect royalties unless they'll make $150/quarter off of your project.  They care about getting a cut of _Dead Island 2_, not the fact you're fleecing them out $5k/yr.  If the cost of obtaining a cut from the next small-budget surprise sensation is letting unsuccessful projects fly under their radar and get experience in their ecosystem, who cares?", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45195, "question": "&gt; How are they going to enforce that?\n\nWith lawsuits for the games that get popular enough that 5% of their business is a big enough number, lawyer nastrygrams for smaller successes and hope everyone else falls in line.  And not worrying about the rest because 5% of next to nothing is nothing.\n\nEdit: I read some more, they don't collect royalties unless they'll make $150/quarter off of your project.  They care about getting a cut of _Dead Island 2_, not the fact you're fleecing them out $5k/yr.  If the cost of obtaining a cut from the next small-budget surprise sensation is letting unsuccessful projects fly under their radar and get experience in their ecosystem, who cares?", "aSentId": 45196, "answer": "&gt; not the fact you're fleecing them out $5k/yr\n\nThat would be grossing $100k/yr which they probably would notice. Also their contract includes the ever nasty \"you have to pay for our lawyers if they get involved\" clause.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45197, "question": "&gt; not the fact you're fleecing them out $5k/yr\n\nThat would be grossing $100k/yr which they probably would notice. Also their contract includes the ever nasty \"you have to pay for our lawyers if they get involved\" clause.", "aSentId": 45198, "answer": "Well, if they sue you, and you lose, they can also go after court costs, this is nothing new.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45199, "question": "Well, if they sue you, and you lose, they can also go after court costs, this is nothing new.", "aSentId": 45200, "answer": "I don't know how you could win, either you agree to the terms that say they get 5% or you pirate it.\n\nIn the former you have no defense, you said you would pay them 5%. In the latter you are even more screwed as they can go after you for a lot more than 5%.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45197, "question": "&gt; not the fact you're fleecing them out $5k/yr\n\nThat would be grossing $100k/yr which they probably would notice. Also their contract includes the ever nasty \"you have to pay for our lawyers if they get involved\" clause.", "aSentId": 45202, "answer": "It would be $112k/yr, the first $3k of each quarter is royalty free.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45197, "question": "&gt; not the fact you're fleecing them out $5k/yr\n\nThat would be grossing $100k/yr which they probably would notice. Also their contract includes the ever nasty \"you have to pay for our lawyers if they get involved\" clause.", "aSentId": 45204, "answer": "Any freelancer, or person who is expecting payment after something is provided would have that clause. It makes it more cost effective for them to go after deadbeats.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45205, "question": "Any freelancer, or person who is expecting payment after something is provided would have that clause. It makes it more cost effective for them to go after deadbeats.", "aSentId": 45206, "answer": "I use nasty because the impact of it is nasty, you will be lucky to only have to pay 20% extra if they go after you, and that is assuming you don't fight.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45195, "question": "&gt; How are they going to enforce that?\n\nWith lawsuits for the games that get popular enough that 5% of their business is a big enough number, lawyer nastrygrams for smaller successes and hope everyone else falls in line.  And not worrying about the rest because 5% of next to nothing is nothing.\n\nEdit: I read some more, they don't collect royalties unless they'll make $150/quarter off of your project.  They care about getting a cut of _Dead Island 2_, not the fact you're fleecing them out $5k/yr.  If the cost of obtaining a cut from the next small-budget surprise sensation is letting unsuccessful projects fly under their radar and get experience in their ecosystem, who cares?", "aSentId": 45209, "answer": "And they also care because if your 5k a year game uses their engine (when it wouldn't use it before) that's now more developers who know their engine and might get hired to make an AAA game.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45210, "question": "And they also care because if your 5k a year game uses their engine (when it wouldn't use it before) that's now more developers who know their engine and might get hired to make an AAA game.", "aSentId": 45211, "answer": "The only thing worse than someone pirating your software is someone pirating your competitor's software :-)", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45212, "question": "The only thing worse than someone pirating your software is someone pirating your competitor's software :-)", "aSentId": 45213, "answer": "or perhaps,  as part of the motivation for this... someone who doesn't need to pirate (or acquire) your software at all because your competitor is giving theirs away for free.\n \ntough to compete with that, for sure.\n \n", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45195, "question": "&gt; How are they going to enforce that?\n\nWith lawsuits for the games that get popular enough that 5% of their business is a big enough number, lawyer nastrygrams for smaller successes and hope everyone else falls in line.  And not worrying about the rest because 5% of next to nothing is nothing.\n\nEdit: I read some more, they don't collect royalties unless they'll make $150/quarter off of your project.  They care about getting a cut of _Dead Island 2_, not the fact you're fleecing them out $5k/yr.  If the cost of obtaining a cut from the next small-budget surprise sensation is letting unsuccessful projects fly under their radar and get experience in their ecosystem, who cares?", "aSentId": 45215, "answer": "$150 or $150k?", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45216, "question": "$150 or $150k?", "aSentId": 45217, "answer": "According to the page:\n\n&gt;you pay a 5% royalty on gross revenue after the first $3,000 per product, per quarter.\n\nThe hypothetical $5k I used may have been misleading and interpreted as within the free tier, but was meant as a made up figure beyond the free tier but small enough that it might fly under the radar.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45218, "question": "According to the page:\n\n&gt;you pay a 5% royalty on gross revenue after the first $3,000 per product, per quarter.\n\nThe hypothetical $5k I used may have been misleading and interpreted as within the free tier, but was meant as a made up figure beyond the free tier but small enough that it might fly under the radar.", "aSentId": 45219, "answer": "ahh that makes more sense, thanks.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45193, "question": "How are they going to enforce that?\n\nAlso, can this be used for mobile games?", "aSentId": 45223, "answer": "It's probably enforced by contract, and I imagine that unreal has deals with distribution platforms to snuff out this sort of thing (app stores, steam) if not that I'm sure there is something like a clause Microsoft has in their business contracts, where they can just audit you.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45193, "question": "How are they going to enforce that?\n\nAlso, can this be used for mobile games?", "aSentId": 45225, "answer": "I don't know how they'd audit the amounts royalties but there's no way to hide the fact that your game uses Unreal Engine if someone takes the time to inspect it.\n\nA modern full featured 3d engine is too complex for a small team to produce so they just have to look at your game and the binaries and figure out which engine you're using.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45226, "question": "I don't know how they'd audit the amounts royalties but there's no way to hide the fact that your game uses Unreal Engine if someone takes the time to inspect it.\n\nA modern full featured 3d engine is too complex for a small team to produce so they just have to look at your game and the binaries and figure out which engine you're using.", "aSentId": 45227, "answer": "I would imagine once they prove you used their engine they would get a court order for your earnings. ", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45229, "question": "I expect some kind of terms of service agreement when signing up?\n", "aSentId": 45230, "answer": "That's not enforcing it, most concise would be how will they know how much or if youre using their engine.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45231, "question": "That's not enforcing it, most concise would be how will they know how much or if youre using their engine.", "aSentId": 45232, "answer": "I guess they don't have to. Either you fail and no one buys your game, or you become successful enough for them to notice you.\n\nWhat's wrong with being honest these days?", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45231, "question": "That's not enforcing it, most concise would be how will they know how much or if youre using their engine.", "aSentId": 45234, "answer": "Well if you signed in with that program and try to sell your game it gets noticed obviously. There aren't many places for digital distribution in the pc market so that can get enforced quite easily. If you do you'll probably get sued. That way they are surely able to make some money as well and they have all the rights to do so.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45237, "question": "On the whole it's a great move but does it mean that they make more in places with higher sales taxes? E.g. a product that sells at $10 in the US would have to be $12 in the UK where VAT is 20% for the developer to make the same per unit sold. Would the developer have to pay 5% on the higher amount?", "aSentId": 45238, "answer": "You have been downvoted without anyone telling you why:\n\nThat 20% taxes never reaches the developer, so it's not part of their revenue. Normally, the developer/publisher sets the price at 10$, then the retailer adds the taxes on top of it. The only difference is that you see the VAT included price on the tablet, while for example in US and Canada the price is added at the register, but technically, the amount of money going to the developer is the same (if the price is consistant with the change rate everywhere).", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45239, "question": "You have been downvoted without anyone telling you why:\n\nThat 20% taxes never reaches the developer, so it's not part of their revenue. Normally, the developer/publisher sets the price at 10$, then the retailer adds the taxes on top of it. The only difference is that you see the VAT included price on the tablet, while for example in US and Canada the price is added at the register, but technically, the amount of money going to the developer is the same (if the price is consistant with the change rate everywhere).", "aSentId": 45240, "answer": "I picked up on the 'gross' but missed the significance of the 'revenue'. Thanks for the info.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45237, "question": "On the whole it's a great move but does it mean that they make more in places with higher sales taxes? E.g. a product that sells at $10 in the US would have to be $12 in the UK where VAT is 20% for the developer to make the same per unit sold. Would the developer have to pay 5% on the higher amount?", "aSentId": 45242, "answer": "Gross revenue doesn't include sales taxes.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45250, "question": "Wow I was literally about to buy this yesterday. Holy shit.\n", "aSentId": 45251, "answer": "You would have been refunded and also given $30 in marketplace credit!", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45252, "question": "You would have been refunded and also given $30 in marketplace credit!", "aSentId": 45253, "answer": "Aww! I wouldn't know what to buy with it :p", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45255, "question": "Windows + Mac only, oh well, not for me then, but still a good news.", "aSentId": 45256, "answer": "Linux version can be built from GitHub. The repo is private but you get access after signing the EULA.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45257, "question": "Linux version can be built from GitHub. The repo is private but you get access after signing the EULA.", "aSentId": 45258, "answer": "Thanks for the info, I already signed the EULA, so I'll give that a try.\n", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45257, "question": "Linux version can be built from GitHub. The repo is private but you get access after signing the EULA.", "aSentId": 45260, "answer": "why is this 404.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45261, "question": "why is this 404.", "aSentId": 45262, "answer": "Because it's a private repo, which appears as a 404 if you don't have access. You get access when you create an Unreal Engine account.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45265, "question": "What about porting a unity driven game to UE4? I'm looking at you, /r/kerbalspaceprogram", "aSentId": 45266, "answer": "While this would be amazing, I'd say it's never gonna happen. Too much code to port over. ", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45267, "question": "While this would be amazing, I'd say it's never gonna happen. Too much code to port over. ", "aSentId": 45268, "answer": "We can dream. ", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45269, "question": "We can dream. ", "aSentId": 45270, "answer": "Honestly, unreal can be just as buggy.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45271, "question": "Honestly, unreal can be just as buggy.", "aSentId": 45272, "answer": "It wouldn't get any buggier than breaking the entire physics engine and camera perspective if it's launched in a non-english system locale. Like, you know, the current Linux version of KSP.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45273, "question": "It wouldn't get any buggier than breaking the entire physics engine and camera perspective if it's launched in a non-english system locale. Like, you know, the current Linux version of KSP.", "aSentId": 45274, "answer": "Just saying man, the grass isn't always greener.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45275, "question": "Just saying man, the grass isn't always greener.", "aSentId": 45276, "answer": "I know, and was just joking while using a real bug as an example. They're pretty late into development and have a nearly finished game, which leaves them with zero reasons to ever switch to another engine.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45271, "question": "Honestly, unreal can be just as buggy.", "aSentId": 45278, "answer": "I'm not concerned with the bugs as I am with the poor utilization of CPU and GPU cores. ", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45279, "question": "I'm not concerned with the bugs as I am with the poor utilization of CPU and GPU cores. ", "aSentId": 45280, "answer": "Would Unreal help with that?", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45281, "question": "Would Unreal help with that?", "aSentId": 45282, "answer": "I'm not sure but I'd like to see somehow. If only I was a Dev :/", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45284, "question": "So quick question - how can this be ported to say PS4/Xbone? Alternatively, how does development on those consoles usually work?  Is it a difficult procedure? ", "aSentId": 45285, "answer": "Already runs on PS4/XBone, but you need a license/devkit for the console. AFAIK you need to contact Epic directly for the Xbox/PS4 specific parts", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45284, "question": "So quick question - how can this be ported to say PS4/Xbone? Alternatively, how does development on those consoles usually work?  Is it a difficult procedure? ", "aSentId": 45287, "answer": "They already support those platforms. However, they can't distribute the proper libraries needed. You have to send them proof of being accepted into the developer program for those consoles before they send them to you.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45284, "question": "So quick question - how can this be ported to say PS4/Xbone? Alternatively, how does development on those consoles usually work?  Is it a difficult procedure? ", "aSentId": 45289, "answer": "Yea it fully builds easily.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45292, "question": "Gotta give a shoutout to Cliffyb /u/BossKeyCEO even though he's not with them anymore ... Epic Games is one of my favorite companies because of him.\n\nI loved UT 99 and played it forever. Map making made me decide to switch careers to software developer and I enjoy it immensely.", "aSentId": 45293, "answer": "loved him on the Joe Rogan podcast", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45299, "question": "Hey, I'm currently learning Unity at the moment. Any opinions on whether it makes sense to learn both Unreal and Unity or one over the other?", "aSentId": 45300, "answer": "Depends on what platforms you are targeting. I prefer unreal, way more modern than unity.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45304, "question": "The only thing is their marketplace doesn't have much of anything good for $30 in it; everything is far more expensive. So it makes sense they'd make it for free because they can get more purchases on the marketplace to take a cut from as well as the 5% royalties.\n\nThis is genius on their part.", "aSentId": 45305, "answer": "Are you serious ?? You are getting a professional engine for virtually free and can't chip in for some assets ??? Just download from torrents if you that skint.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45306, "question": "Are you serious ?? You are getting a professional engine for virtually free and can't chip in for some assets ??? Just download from torrents if you that skint.", "aSentId": 45307, "answer": "&gt; Are you serious ?? You are getting a professional engine for virtually free and can't chip in for some assets ???\n\nWho said I couldn't? I'm just pointing out this isn't something they did for the goodwill of humanity; they did it to make money and I'd guarantee they will make more money this way than the previous way they were selling it.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45308, "question": "&gt; Are you serious ?? You are getting a professional engine for virtually free and can't chip in for some assets ???\n\nWho said I couldn't? I'm just pointing out this isn't something they did for the goodwill of humanity; they did it to make money and I'd guarantee they will make more money this way than the previous way they were selling it.", "aSentId": 45309, "answer": "For sure this is a very smart move. They will make more money I the long run. There does seem to be some good will, at least it will shake things up.  Really great news for the professional end of the market! ", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45319, "question": "from where do you download the engine exactly? I pressed get unreal and downloaded the client (Epic Games launcher) and it says that no engine is installed in Unreal Engine tab. There is no other link on the page to download the Unreal Engine Launcher, only Epic Games Launcher (In dashboard, both for Unreal Engine and Unreal Tournament, they download the same client).", "aSentId": 45320, "answer": "I had the same problem, it is not intuitive. You need to go to the \"Market\" tab. There is a button called \"Add Engine\" there.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45321, "question": "I had the same problem, it is not intuitive. You need to go to the \"Market\" tab. There is a button called \"Add Engine\" there.", "aSentId": 45322, "answer": "wow, thank you for that! Talk about bad experience ....", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45327, "question": "I'd be happy for someone to chime in with an explanation, because I'm not sure I follow why everyone's not just fine, but very happy about this.\n\nI am not a game developer by any stretch (though I did make a couple of bucks through a simple Android game), so the typical dynamics of this domain of IT may be foreign to me. But I'll use an analogy to the one I'm familiar with: web development.\n\nLet's say you have a hobby project, or even a small startup, offering something like SaaS with a monthly subscription fee. You ~~developed~~ cobbled together a web application for it using one of the myriad of available frameworks. You reached some usable milestone, deployed it, and -- thanks to ~~your marketing skills~~ the lunar phase and favorable alignment of stars -- you are looking at a steady cash flow coming from your subscribers.\n\nNow, if the analogy holds, it means you now owe 5% royalties to authors of the web framework you've used. Ludicrous! Even if you went not with open source solutions but e.g. Microsoft stack, you'd pay only some per-unit licensing fees, rather than percentage of your revenue. Most people, of course, would just go with some OSS stack instead, especially if you start small and have little to no funding.\n\nWhat makes game dev so different, then, that even small/indie studios are willing to cope with the usurious skimming of your gross revenue for a piece of software scaffolding? We're not even talking about, say, App Store royalties that have plenty of tangible benefits behind them, like access to a huge distribution platform with millions of potential customers. Are the commercial game engines so much better than their free / open-source equivalents that this transaction still makes financial sense for the studios?", "aSentId": 45328, "answer": "&gt; Are the commercial game engines so much better than their free / open-source equivalents that this transaction still makes financial sense for the studios?\n\nYes.\n\nWriting a game engine is not just difficult, but *extraordinarily* difficult. Writing a good modern 3D game engine is so difficult that it might as well be impossible for anyone outside of a major AAA game studio.\n\nAnd the commercial game engines are much more than frameworks. Comparing, say, UE4 with Backbone.js is like comparing Maya with Paint. I don't know if you've ever played around with one of them, but since UE4 is free now, you could take a look.\n\nThere are a small number of free and open source game engines, but none of them are anywhere near as powerful and generalizable as the big-name proprietary engines.\n\nAnd since the vast majority of indie game developers won't even make $3,000/quarter/title, \"free with royalties on revenue over $3000/quarter\" is a whole lot better than \"$1500/platform upfront\" for Unity or \"$10/month\" for Cryengine. If a studio reaches the point where the royalties are significant, they can work out a custom licensing deal for their next project.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45327, "question": "I'd be happy for someone to chime in with an explanation, because I'm not sure I follow why everyone's not just fine, but very happy about this.\n\nI am not a game developer by any stretch (though I did make a couple of bucks through a simple Android game), so the typical dynamics of this domain of IT may be foreign to me. But I'll use an analogy to the one I'm familiar with: web development.\n\nLet's say you have a hobby project, or even a small startup, offering something like SaaS with a monthly subscription fee. You ~~developed~~ cobbled together a web application for it using one of the myriad of available frameworks. You reached some usable milestone, deployed it, and -- thanks to ~~your marketing skills~~ the lunar phase and favorable alignment of stars -- you are looking at a steady cash flow coming from your subscribers.\n\nNow, if the analogy holds, it means you now owe 5% royalties to authors of the web framework you've used. Ludicrous! Even if you went not with open source solutions but e.g. Microsoft stack, you'd pay only some per-unit licensing fees, rather than percentage of your revenue. Most people, of course, would just go with some OSS stack instead, especially if you start small and have little to no funding.\n\nWhat makes game dev so different, then, that even small/indie studios are willing to cope with the usurious skimming of your gross revenue for a piece of software scaffolding? We're not even talking about, say, App Store royalties that have plenty of tangible benefits behind them, like access to a huge distribution platform with millions of potential customers. Are the commercial game engines so much better than their free / open-source equivalents that this transaction still makes financial sense for the studios?", "aSentId": 45330, "answer": "&gt;Now, if the analogy holds, it means you now owe 5% royalties to authors of the web framework you've used.\n\nIf you made a game in UE4 prior to this event, you were *already* paying the 5% royalties. You're saving money because you're no longer paying the ~$20/mo fee on top of the 5%.\n\n\n&gt;What makes game dev so different, then, that even small/indie studios are willing to cope with the usurious skimming of your gross revenue for a piece of software scaffolding? We're not even talking about, say, App Store royalties that have plenty of tangible benefits behind them, like access to a huge distribution platform with millions of potential customers.\n\n&gt;***usurious***\n\nWhoa, dial it back a bit.\n\nA few of the many tangible benefits of an engine like UE4 and Unity are that you can focus on the content and game logic instead of mucking about with figuring out how to render quickly, or supporting various hardware combos, or building a content pipeline that doesn't blow ass when you chuck more than four textures at it. You gain a set of first-class tools that help you build your game. Sure, you can build a game with a free and open source engine, but it's probably not going to be as \"easy\" or as optimized as an engine that has a team like Epic behind it.\n\n&gt;Are the commercial game engines so much better than their free / open-source equivalents that this transaction still makes financial sense for the studios?\n\nYes.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45327, "question": "I'd be happy for someone to chime in with an explanation, because I'm not sure I follow why everyone's not just fine, but very happy about this.\n\nI am not a game developer by any stretch (though I did make a couple of bucks through a simple Android game), so the typical dynamics of this domain of IT may be foreign to me. But I'll use an analogy to the one I'm familiar with: web development.\n\nLet's say you have a hobby project, or even a small startup, offering something like SaaS with a monthly subscription fee. You ~~developed~~ cobbled together a web application for it using one of the myriad of available frameworks. You reached some usable milestone, deployed it, and -- thanks to ~~your marketing skills~~ the lunar phase and favorable alignment of stars -- you are looking at a steady cash flow coming from your subscribers.\n\nNow, if the analogy holds, it means you now owe 5% royalties to authors of the web framework you've used. Ludicrous! Even if you went not with open source solutions but e.g. Microsoft stack, you'd pay only some per-unit licensing fees, rather than percentage of your revenue. Most people, of course, would just go with some OSS stack instead, especially if you start small and have little to no funding.\n\nWhat makes game dev so different, then, that even small/indie studios are willing to cope with the usurious skimming of your gross revenue for a piece of software scaffolding? We're not even talking about, say, App Store royalties that have plenty of tangible benefits behind them, like access to a huge distribution platform with millions of potential customers. Are the commercial game engines so much better than their free / open-source equivalents that this transaction still makes financial sense for the studios?", "aSentId": 45332, "answer": "Unreal offers lump sum licensing also. This is just an alternative more open avenue for people to have access to one of the best third party toolsets in game development.\n\nIt's not just the technology stack you build on, it's also the development environment you use that they provide, which very often is a licensing model.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45336, "question": "Besides competition, why wouldn't that business model make sense for web frameworks?", "aSentId": 45337, "answer": "Competition.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45341, "question": "Okay. I have made myself a little project that I want to keep in touch. I am in computer engineering and would love to make a game project to keep me busy over the course of 4 years at uni, and I wanted to do a game project to keep me sharp with C++.\nI had made a game in Unity3D with assets completely made from scratch (three textured guns with animations, scripts for movement and raycasting, maps, player models and animations, multiplayer network connection). \nI would love to migrate this stuff to UE4, I could trash the scripts since they are written in C# but is it possible to keep the models and other assets or is UE4 have a particular file type or way to make models and animation? \nCould somebody set me up with a guide or tutorials that teach me (not tell me exactly how to do it) on how to make a working FPS? I know very little in Python and can dissect code in C# very well. I want to do something I find fun and something that could further my knowledge in C-objective coding language.", "aSentId": 45342, "answer": "You are a computer engineering student and you can't use Google?\n\nhttp://ue4.tumblr.com/post/82135077910/how-to-import-assets-from-unity-4-to-unreal-4", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45343, "question": "You are a computer engineering student and you can't use Google?\n\nhttp://ue4.tumblr.com/post/82135077910/how-to-import-assets-from-unity-4-to-unreal-4", "aSentId": 45344, "answer": "Wait what's google?\nActually I meant to phrase the question in a way if there was any recommended sources (or methods) tried by other redditors that worked. Thanks for the link though, I actually had that source bookmarked! Have you followed much of those tuts?", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45343, "question": "You are a computer engineering student and you can't use Google?\n\nhttp://ue4.tumblr.com/post/82135077910/how-to-import-assets-from-unity-4-to-unreal-4", "aSentId": 45346, "answer": "Man I when I started computer engineering it was unreal. A lot of the people in my class didn't know anything about computers or programming.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45343, "question": "You are a computer engineering student and you can't use Google?\n\nhttp://ue4.tumblr.com/post/82135077910/how-to-import-assets-from-unity-4-to-unreal-4", "aSentId": 45348, "answer": "The Internet is making everyone dumb !", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45349, "question": "The Internet is making everyone dumb !", "aSentId": 45350, "answer": "ur dum", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45351, "question": "ur dum", "aSentId": 45352, "answer": "It's sad really we live in the Information Age and information revolution and people are still asking dumb questions before even doing a google search.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45353, "question": "It's sad really we live in the Information Age and information revolution and people are still asking dumb questions before even doing a google search.", "aSentId": 45354, "answer": "It's too hard, man.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45355, "question": "It's too hard, man.", "aSentId": 45356, "answer": "Imagine what it was like in the steam age, or Iron Age !!! ", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45341, "question": "Okay. I have made myself a little project that I want to keep in touch. I am in computer engineering and would love to make a game project to keep me busy over the course of 4 years at uni, and I wanted to do a game project to keep me sharp with C++.\nI had made a game in Unity3D with assets completely made from scratch (three textured guns with animations, scripts for movement and raycasting, maps, player models and animations, multiplayer network connection). \nI would love to migrate this stuff to UE4, I could trash the scripts since they are written in C# but is it possible to keep the models and other assets or is UE4 have a particular file type or way to make models and animation? \nCould somebody set me up with a guide or tutorials that teach me (not tell me exactly how to do it) on how to make a working FPS? I know very little in Python and can dissect code in C# very well. I want to do something I find fun and something that could further my knowledge in C-objective coding language.", "aSentId": 45358, "answer": "Apple is moving away from objective  C.  You are better off trying to focus on what you actually want to achieve first. Ue4 is for serious coders with real coding chops.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45359, "question": "Apple is moving away from objective  C.  You are better off trying to focus on what you actually want to achieve first. Ue4 is for serious coders with real coding chops.", "aSentId": 45360, "answer": "Are they starting to drift towards swift as a code to be based off of?", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45361, "question": "Are they starting to drift towards swift as a code to be based off of?", "aSentId": 45362, "answer": "Yes, ios 8 is swift based.   The bit fountain ios7 course is free now.\nStill the ios 7 course is there you can learn the skills free.\n\nCheck it out: http://bitfountain.io/courses\n\nSwift Is just a copy of python which is all super, because python is very productive. So ios8 dev is far easier than ios7 dev.\n\n\nYou need to spend time learning real skills. Your computer engineering course will teach you fuck all real world skills.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45363, "question": "Yes, ios 8 is swift based.   The bit fountain ios7 course is free now.\nStill the ios 7 course is there you can learn the skills free.\n\nCheck it out: http://bitfountain.io/courses\n\nSwift Is just a copy of python which is all super, because python is very productive. So ios8 dev is far easier than ios7 dev.\n\n\nYou need to spend time learning real skills. Your computer engineering course will teach you fuck all real world skills.", "aSentId": 45364, "answer": "Seems like you are spouting a bit of misinformation. Swift does not copy Python and objective c is still a legitimate language to use for all versions of iOS. ", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45365, "question": "Seems like you are spouting a bit of misinformation. Swift does not copy Python and objective c is still a legitimate language to use for all versions of iOS. ", "aSentId": 45366, "answer": "Swift does copy ideas from ruby,python and c#.\nNaturally you can still develop in c++ or c.\nBut honestly do your research, swift is there for good reason, because compiled languages don't have the modern features of Python,ruby and C#.\nEven in Linux you don't develop interfaces in c. You develop in a higher level like which is like ruby/python which then gets compiled into c.\n\nSo productiveness smart programmers will be using swift to save time and do more in less code.\n\nI honestly think you have little understanding of programming languages. You can live in the past or you can embrace modern methods it's up to you. \nThey clearly don't teach you anything useful on your course!", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45367, "question": "Swift does copy ideas from ruby,python and c#.\nNaturally you can still develop in c++ or c.\nBut honestly do your research, swift is there for good reason, because compiled languages don't have the modern features of Python,ruby and C#.\nEven in Linux you don't develop interfaces in c. You develop in a higher level like which is like ruby/python which then gets compiled into c.\n\nSo productiveness smart programmers will be using swift to save time and do more in less code.\n\nI honestly think you have little understanding of programming languages. You can live in the past or you can embrace modern methods it's up to you. \nThey clearly don't teach you anything useful on your course!", "aSentId": 45368, "answer": "Hey man I'm not the guy doing a degree or whatever. I'm in the software industry working in these languages. I'm just pointing out some errors in the information you gave. ", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45369, "question": "Hey man I'm not the guy doing a degree or whatever. I'm in the software industry working in these languages. I'm just pointing out some errors in the information you gave. ", "aSentId": 45370, "answer": "There are zero errors. Why don't you read the Wikipedia page on swift and official blog posts from apple dev. You'll see you are the one that hasn't got a clue. We live in the Information Age you muppet. Learn to google and read already !", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45359, "question": "Apple is moving away from objective  C.  You are better off trying to focus on what you actually want to achieve first. Ue4 is for serious coders with real coding chops.", "aSentId": 45372, "answer": "Ue4 is the engine of choice for a proper FPS. Just read the unreal tutorials you muppet.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45376, "question": "Technically its not free", "aSentId": 45377, "answer": "Technically it is free", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45376, "question": "Technically its not free", "aSentId": 45379, "answer": "Technically yes it is.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45380, "question": "Technically yes it is.", "aSentId": 45381, "answer": "You have to pay them back if you make a profit", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45382, "question": "You have to pay them back if you make a profit", "aSentId": 45383, "answer": "And that makes the engine not free? They only take 5%, give you the entire engine, and only if you make more than $3000 in a quarter.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45384, "question": "And that makes the engine not free? They only take 5%, give you the entire engine, and only if you make more than $3000 in a quarter.", "aSentId": 45385, "answer": "just saying its not ALL free", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45386, "question": "just saying its not ALL free", "aSentId": 45387, "answer": "Yes it is.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45389, "question": "How do I download the engine. I hit the blue get unreal button and it downloaded the epic games launcher. How do i get the actual engine?", "aSentId": 45390, "answer": "~~You have to go get it on github ([https://github.com/epicgames](https://github.com/epicgames)).~~\n\n~~Create github account if you haven't already, and put it in your Unreal account settings. If you don't want to mess with git, you can download the .zip.~~\n\n~~There are instructions on that link above though if you scroll down.~~\n\nClick add engine in the launcher.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45391, "question": "~~You have to go get it on github ([https://github.com/epicgames](https://github.com/epicgames)).~~\n\n~~Create github account if you haven't already, and put it in your Unreal account settings. If you don't want to mess with git, you can download the .zip.~~\n\n~~There are instructions on that link above though if you scroll down.~~\n\nClick add engine in the launcher.", "aSentId": 45392, "answer": "No you don't. You go to the library tab in the launcher and click 'Add engine'.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45393, "question": "No you don't. You go to the library tab in the launcher and click 'Add engine'.", "aSentId": 45394, "answer": "...I wish I had clicked that sooner. Looks a lot easier. Crap.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45391, "question": "~~You have to go get it on github ([https://github.com/epicgames](https://github.com/epicgames)).~~\n\n~~Create github account if you haven't already, and put it in your Unreal account settings. If you don't want to mess with git, you can download the .zip.~~\n\n~~There are instructions on that link above though if you scroll down.~~\n\nClick add engine in the launcher.", "aSentId": 45396, "answer": "how do i get the .zip.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45397, "question": "how do i get the .zip.", "aSentId": 45398, "answer": "Did you create a github account and share it with unreal and all that? You need to do that first. \n\n", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45399, "question": "Did you create a github account and share it with unreal and all that? You need to do that first. \n\n", "aSentId": 45400, "answer": "ya i created the account. now im lost", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45403, "question": "I just downloaded and I can not figure out how to get the game running. Worst game ever! Suggest buying Gone Home instead. ", "aSentId": 45404, "answer": "trolling? it's not a game", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45405, "question": "trolling? it's not a game", "aSentId": 45406, "answer": "It's not a game, it's a art. ", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45403, "question": "I just downloaded and I can not figure out how to get the game running. Worst game ever! Suggest buying Gone Home instead. ", "aSentId": 45408, "answer": "Well I laughed. Even if everyone else didn't. =D", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45410, "question": "Great news. But I don't really like how he uses the words \"open\" and \"free\".", "aSentId": 45411, "answer": "Well, it does come with the source code and it's free. \"Open\" is something that everyone wants to use to their own ends.\n\nNo, this isn't open source but it's a very cheap licensing fee for indie game devs compared to the amount of time it saves. It will certainly save more than 5% of development costs and likely produce a far more polished product since the devs don't have to worry about putting down the foundation.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45413, "question": "\nThat's cool and all. but 75% of the effort that goes into making a game goes into making the graphics, sound and animations, making playable maps an so forth, testing etc... The game engine is typically the quick and easy part.\n\n", "aSentId": 45414, "answer": "&gt;The game engine is typically the quick and easy part.\n\nOnly if you're using an existing engine.  Writing one from scratch, not so much.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45415, "question": "&gt;The game engine is typically the quick and easy part.\n\nOnly if you're using an existing engine.  Writing one from scratch, not so much.", "aSentId": 45416, "answer": "\nIn proportion it is. Think about it. You produce one engine and you get to make many many games from it. Where did the majority of the effort go? The engine or the graphics for many many games?", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45417, "question": "\nIn proportion it is. Think about it. You produce one engine and you get to make many many games from it. Where did the majority of the effort go? The engine or the graphics for many many games?", "aSentId": 45418, "answer": "both. When working on the games there is still a team maintaining the core engine.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45419, "question": "both. When working on the games there is still a team maintaining the core engine.", "aSentId": 45420, "answer": "\nSince your the expert what is the proportion of the team breakdown of any recent 3d game then?\n\nHere's another Hint: The total cost of COD2 to ship was 250Million USD. Only 50Million USD was spent on development. That's what 20% spent on R&amp;D and the engine costs is buried in that 20% of the overall cost.... So already your game engine costs are less than 20% of your product effort.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45421, "question": "\nSince your the expert what is the proportion of the team breakdown of any recent 3d game then?\n\nHere's another Hint: The total cost of COD2 to ship was 250Million USD. Only 50Million USD was spent on development. That's what 20% spent on R&amp;D and the engine costs is buried in that 20% of the overall cost.... So already your game engine costs are less than 20% of your product effort.", "aSentId": 45422, "answer": "You're right. Every indie dev should just plop down the 50 mill and write their own engine from scratch!", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45423, "question": "You're right. Every indie dev should just plop down the 50 mill and write their own engine from scratch!", "aSentId": 45424, "answer": "\nThough the 50Mil was spent on the game design the majority of that money was not on the engine. Most on the graphics, sound, animations, other media, story lines, testing, etc...", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45421, "question": "\nSince your the expert what is the proportion of the team breakdown of any recent 3d game then?\n\nHere's another Hint: The total cost of COD2 to ship was 250Million USD. Only 50Million USD was spent on development. That's what 20% spent on R&amp;D and the engine costs is buried in that 20% of the overall cost.... So already your game engine costs are less than 20% of your product effort.", "aSentId": 45426, "answer": "On my project there's at least 100 developers, all working on engine and tools. I have no idea how many artists there are, I only deal with 3 but there's a buttload more than that. Most of the gameplay code is written by designers in scripting languages too. This isn't a greenfield project either. ", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45427, "question": "On my project there's at least 100 developers, all working on engine and tools. I have no idea how many artists there are, I only deal with 3 but there's a buttload more than that. Most of the gameplay code is written by designers in scripting languages too. This isn't a greenfield project either. ", "aSentId": 45428, "answer": "\nWould it be safe to say that the majority of the 100 dev's are all dealing with 3 artists eg 3 times the number of artists than there are dev's?\n\nWhat would the dev / testing ratio be?\n\nSay you have 400 people in total in the building. This starts to also factor in you need HR, Accounts, Managers, Cleaners, Production, Designers, Marketing everything the dev pool does actually start to shrink fairly quickly in terms of percentage \"effort\" in order to \"ship\"", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45429, "question": "\nWould it be safe to say that the majority of the 100 dev's are all dealing with 3 artists eg 3 times the number of artists than there are dev's?\n\nWhat would the dev / testing ratio be?\n\nSay you have 400 people in total in the building. This starts to also factor in you need HR, Accounts, Managers, Cleaners, Production, Designers, Marketing everything the dev pool does actually start to shrink fairly quickly in terms of percentage \"effort\" in order to \"ship\"", "aSentId": 45430, "answer": "No idea. There's 10 people on my team, and we deal mostly with the same 3 artists between ten of us. There's too many people working on the project for me to have any idea who most of them are. No idea what our tester ratio is. \n\n&gt; Say you have 400 people in total in the building. This starts to also factor in you need HR, Accounts, Managers, Cleaners, Production, Designers, Marketing everything the dev pool does actually start to shrink fairly quickly in terms of percentage \"effort\" in order to \"ship\". \n\nHold on there. I'll be the first to say that the marketing budget dwarfs the development costs, but your original argument was that the engine is the easy part and that 75% of the effort was assets. That has nothing to do with marketing. \n\nAnd the amount of effort doesn't directly correspond to the cost. I could easily burn through 100 million dollars in a handful of meetings to set up a Super Bowl ad for my game, is that high effort?  ", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45431, "question": "No idea. There's 10 people on my team, and we deal mostly with the same 3 artists between ten of us. There's too many people working on the project for me to have any idea who most of them are. No idea what our tester ratio is. \n\n&gt; Say you have 400 people in total in the building. This starts to also factor in you need HR, Accounts, Managers, Cleaners, Production, Designers, Marketing everything the dev pool does actually start to shrink fairly quickly in terms of percentage \"effort\" in order to \"ship\". \n\nHold on there. I'll be the first to say that the marketing budget dwarfs the development costs, but your original argument was that the engine is the easy part and that 75% of the effort was assets. That has nothing to do with marketing. \n\nAnd the amount of effort doesn't directly correspond to the cost. I could easily burn through 100 million dollars in a handful of meetings to set up a Super Bowl ad for my game, is that high effort?  ", "aSentId": 45432, "answer": "\nBah I give up going to do something constructive. All I wanted to do was point out that although there is now a free'ish engine. This doesn't make the game and there is stop a lot to do before being able to \"ship\"\n\nBut what is really interesting here is that nobody can actually give a breakdown of the figures even people who currently work in a development team. BTW my 75% original figure came from a well known number which is about 20-25% of a software project involves actually writing code.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45433, "question": "\nBah I give up going to do something constructive. All I wanted to do was point out that although there is now a free'ish engine. This doesn't make the game and there is stop a lot to do before being able to \"ship\"\n\nBut what is really interesting here is that nobody can actually give a breakdown of the figures even people who currently work in a development team. BTW my 75% original figure came from a well known number which is about 20-25% of a software project involves actually writing code.", "aSentId": 45434, "answer": "You've hit the nail on the head there, a game isn't ready to ship with just an engine. Your original comment implied that making the engine is easy and that Al the work is in art. Your 25% figure is cost. \n\nGTAv cost 550 million last I saw. The estimates are roughly 400 million was marketing, the rest was production (development and assets, design etc. )\n\nOf that 150 million odd, the breakdown is unclear though. I don't know what fraction of the development costs are allocated towards programming and what towards art, or design. ", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45435, "question": "You've hit the nail on the head there, a game isn't ready to ship with just an engine. Your original comment implied that making the engine is easy and that Al the work is in art. Your 25% figure is cost. \n\nGTAv cost 550 million last I saw. The estimates are roughly 400 million was marketing, the rest was production (development and assets, design etc. )\n\nOf that 150 million odd, the breakdown is unclear though. I don't know what fraction of the development costs are allocated towards programming and what towards art, or design. ", "aSentId": 45436, "answer": "\nYeah I have been trying to find a breakdown of the actually R&amp;D costs it seems extremely difficult to find *any* information on it.\n", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45417, "question": "\nIn proportion it is. Think about it. You produce one engine and you get to make many many games from it. Where did the majority of the effort go? The engine or the graphics for many many games?", "aSentId": 45438, "answer": "Oh sure, if you have the skill set to build an engine, and the business opportunity+resources to spend the time on it, there are probably cases where it would make sense.  (New platforms, unusual gameplay requirements not met by any existing engines, etc.)\n\nThe problem is, a lot of people who think they know how to build a (choose one) game, physics, networking, or graphics engine are woefully inadequate to the task.  They want to build one because they think it will be fun, and \"it will only take a few months, we can afford that.\"  Sometimes the management gets fooled into letting them try, and as a result end up burning through a ton of reserve cash and timeline, instead of just building a game on top of a \"boring\" existing engine.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45439, "question": "Oh sure, if you have the skill set to build an engine, and the business opportunity+resources to spend the time on it, there are probably cases where it would make sense.  (New platforms, unusual gameplay requirements not met by any existing engines, etc.)\n\nThe problem is, a lot of people who think they know how to build a (choose one) game, physics, networking, or graphics engine are woefully inadequate to the task.  They want to build one because they think it will be fun, and \"it will only take a few months, we can afford that.\"  Sometimes the management gets fooled into letting them try, and as a result end up burning through a ton of reserve cash and timeline, instead of just building a game on top of a \"boring\" existing engine.", "aSentId": 45440, "answer": "\nThis can happen in any programming environment. Often because the people with the wrong skill sets are given the wrong tasks to do. Often the management don't know what skill sets are actually required so they trust the \"experts\" that are telling them. This happens all the time in the software industry. Of course the \"experts\" in this case often want to put cool things on their CV at somebody else's expense.\n\nI see stuff every day where reasonably smart people are given the wrong task. They know its the wrong task for their skill set but they do it anyway in order to keep their job then they royally fuck it up. Typically making it massively more complex along the way to the point where you could sink and endless stream of money into it and it will never work.\n\n", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45413, "question": "\nThat's cool and all. but 75% of the effort that goes into making a game goes into making the graphics, sound and animations, making playable maps an so forth, testing etc... The game engine is typically the quick and easy part.\n\n", "aSentId": 45442, "answer": "Ok, I'll open photoshop and make some textures. You build an engine from scratch. ", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45443, "question": "Ok, I'll open photoshop and make some textures. You build an engine from scratch. ", "aSentId": 45444, "answer": "Does rebuilding the engine that powered Big Rigs count? Because I think I accidentally did that in my sleep one day. ", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45443, "question": "Ok, I'll open photoshop and make some textures. You build an engine from scratch. ", "aSentId": 45446, "answer": "\nOk let me rephrase that. I build one engine and profit from it. You build the graphics for the 500+ games that run on the engine. Now proportionally which cost more? and which has more effort in it? the engine or the graphics for all the games released with that engine?", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45413, "question": "\nThat's cool and all. but 75% of the effort that goes into making a game goes into making the graphics, sound and animations, making playable maps an so forth, testing etc... The game engine is typically the quick and easy part.\n\n", "aSentId": 45448, "answer": "If only that were true. Getting graphics code (really, *any* code that deals with audio/video) up and running from the ground up is an incredibly involved process that takes years, even with a good team, if you want to produce anything production-quality.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45449, "question": "If only that were true. Getting graphics code (really, *any* code that deals with audio/video) up and running from the ground up is an incredibly involved process that takes years, even with a good team, if you want to produce anything production-quality.", "aSentId": 45450, "answer": "&gt; ...if you want to produce anything production-quality.\n\nDing ding ding...that's the really hard part (although writing stuff from scratch to do audio/video directly on top of the stock APIs isn't easy either).  When it has to build and run correctly on *everybody's* machine on *every* platform your game runs on, for *every* game you're using it for, on *every* outdated and new version of the compilers you need to support, just keeping your head above water has to be somebody's full-time job.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45449, "question": "If only that were true. Getting graphics code (really, *any* code that deals with audio/video) up and running from the ground up is an incredibly involved process that takes years, even with a good team, if you want to produce anything production-quality.", "aSentId": 45452, "answer": "\nNo it doesn't. Hint I work with audio / video daily. I can assure you I do much more complex things that what is done in video games.\n", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45453, "question": "\nNo it doesn't. Hint I work with audio / video daily. I can assure you I do much more complex things that what is done in video games.\n", "aSentId": 45454, "answer": "So could you write me a professional grade engine in a couple months?", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45455, "question": "So could you write me a professional grade engine in a couple months?", "aSentId": 45456, "answer": "\nIt would probably take significantly longer than that. But how many man hours went into producing the graphics, sound, test for a recent game vs the entire number of hours that went into the engine running it?\n\nBare in mind that the game engine will also be used for multiple games and you get the idea just how low the development costs of the engine actually are compared to the rest of what needs done before \"shipping\"", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45457, "question": "\nIt would probably take significantly longer than that. But how many man hours went into producing the graphics, sound, test for a recent game vs the entire number of hours that went into the engine running it?\n\nBare in mind that the game engine will also be used for multiple games and you get the idea just how low the development costs of the engine actually are compared to the rest of what needs done before \"shipping\"", "aSentId": 45458, "answer": "Many many many more man hours go into the engine running it. UE4 has almost 20 years of development in it, with hundreds(?) of shipped titles running on it, each of which had hundreds of developers working on it, feeding back the details to epic, and most AAA games would practically gut the engine anyway to suit the games needs. \n\nOn top of that, you have all of the third party deendencies that ue4 comes with. Off the top of my head, it depends on Physx, an engine with another decade of experience writing it, I know our third party folder is full of stuff like speed tree but I have no idea how much of it we're using. \n", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45459, "question": "Many many many more man hours go into the engine running it. UE4 has almost 20 years of development in it, with hundreds(?) of shipped titles running on it, each of which had hundreds of developers working on it, feeding back the details to epic, and most AAA games would practically gut the engine anyway to suit the games needs. \n\nOn top of that, you have all of the third party deendencies that ue4 comes with. Off the top of my head, it depends on Physx, an engine with another decade of experience writing it, I know our third party folder is full of stuff like speed tree but I have no idea how much of it we're using. \n", "aSentId": 45460, "answer": "\nYeah I am sure it does have a lot of development time on it. But how much effort also went in to the 100's of games that are based on the engine but not actually on the engine its self?", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45457, "question": "\nIt would probably take significantly longer than that. But how many man hours went into producing the graphics, sound, test for a recent game vs the entire number of hours that went into the engine running it?\n\nBare in mind that the game engine will also be used for multiple games and you get the idea just how low the development costs of the engine actually are compared to the rest of what needs done before \"shipping\"", "aSentId": 45462, "answer": "Here's some perspective: Unreal Engine 4 has been in development since 2003. Admittedly, development didn't really pick up until 2008, but even 2008-2014 is a longer development time than most games have.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45463, "question": "Here's some perspective: Unreal Engine 4 has been in development since 2003. Admittedly, development didn't really pick up until 2008, but even 2008-2014 is a longer development time than most games have.", "aSentId": 45464, "answer": "Yes that's completely true. However the engine its self does not make a shippable game so if you had same number of man hours that went into the engine working on a game would you be able to produce a game that could be shipped?\n\nSo how much more effort is require to actually \"ship\" the game", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45465, "question": "Yes that's completely true. However the engine its self does not make a shippable game so if you had same number of man hours that went into the engine working on a game would you be able to produce a game that could be shipped?\n\nSo how much more effort is require to actually \"ship\" the game", "aSentId": 45466, "answer": "If you're making a game from scratch (no engine) with at least the same features that the already-made engine would have provided, then no, you would not be able to create a game in that amount of time.\n\nYou seem to take the amount of work that goes into creating engines for granted, as well as the work that goes into creating the games themselves. Even with an engine, you only have a foundation with which to work. The time spent in a development cycle is not primarily any single task: there's always programming, art, design, and testing going on at every phase up until the release. Programmers don't just sit around and do nothing after the second month of development.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45467, "question": "If you're making a game from scratch (no engine) with at least the same features that the already-made engine would have provided, then no, you would not be able to create a game in that amount of time.\n\nYou seem to take the amount of work that goes into creating engines for granted, as well as the work that goes into creating the games themselves. Even with an engine, you only have a foundation with which to work. The time spent in a development cycle is not primarily any single task: there's always programming, art, design, and testing going on at every phase up until the release. Programmers don't just sit around and do nothing after the second month of development.", "aSentId": 45468, "answer": "\nOh no I am not taking it for granted I am well aware that it can take 1000's of man hours to produce a game. What I am interested in though is a breakdown of what is actually required to build a game. Everyone seems to know enough to argue against me but nobody can actually produce any decent figures for the R&amp;D breakdown.\n\nBTW. I am software engineer and have been for 15-20 years. I am well aware of what effort is required. I also work in mostly low level / embedded systems and have worked in the past in system which make 3d render somewhat easy in comparison.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45469, "question": "\nOh no I am not taking it for granted I am well aware that it can take 1000's of man hours to produce a game. What I am interested in though is a breakdown of what is actually required to build a game. Everyone seems to know enough to argue against me but nobody can actually produce any decent figures for the R&amp;D breakdown.\n\nBTW. I am software engineer and have been for 15-20 years. I am well aware of what effort is required. I also work in mostly low level / embedded systems and have worked in the past in system which make 3d render somewhat easy in comparison.", "aSentId": 45470, "answer": "Ah, I see where you're coming from. Basic 3d renderers may be fairly easy compared to embedded systems programming, but the kind of stuff that Epic and others are doing is way more complex. You're not just looking at basic triangles and diffuse lighting. You're looking at years of development of things such as global illumination and distancefield AO. Beyond rendering, there's also the networking frameworks, AI framework, editor, ui system, etc. The difficulty with an engine like this (or Unity or Cryengine) is that everything has to be made extensible and generic, such that it can work in almost any kind of game.\n\nI agree that it would be interesting to see the breakdown of hours for each part of a game. While I can't cite a source for a breakdown of hours, I can point you towards any of id Tech's GPL releases of code. If you can figure out how to separate the engine code vs the game code, you can probably get a good idea of how large each piece is. I'd put my bets on the engine being a larger part of the codebase.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45453, "question": "\nNo it doesn't. Hint I work with audio / video daily. I can assure you I do much more complex things that what is done in video games.\n", "aSentId": 45472, "answer": "Yeah. Okay. ", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45474, "question": "&gt; The game engine is typically the quick and easy part\n\nYou're not a programmer, are you?", "aSentId": 45475, "answer": "\nYes but unfortunately more experienced than you ;)\n\nAsk your self how I know that then get back to me.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45477, "question": "There's nothing quick and easy about the game engine part, I speak from experience.\n\nEven just developing the content pipeline to turn artists' assets into game engine format objects is difficult in its own right, nevermind actually rendering them and everything else.", "aSentId": 45478, "answer": "\nYet the marketing cost of something like COD2 was 4 times that of the development costs. This strips the development costs to 25% immediately.\n\nWhen you look at infinity ward they built a game engine with 22 people who were programmers. Yet the number of people involved in the design, sound, graphics was about 4 times that number\n\nThis also has very little to do with how difficult or how easy it is to make a game engine. It has a lot to do with how many man hours are required to put into what areas of the game. You will find that the actual game engine programmers only make up a fraction of what is actually required to \"ship\" the product.\n\n\n", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45479, "question": "\nYet the marketing cost of something like COD2 was 4 times that of the development costs. This strips the development costs to 25% immediately.\n\nWhen you look at infinity ward they built a game engine with 22 people who were programmers. Yet the number of people involved in the design, sound, graphics was about 4 times that number\n\nThis also has very little to do with how difficult or how easy it is to make a game engine. It has a lot to do with how many man hours are required to put into what areas of the game. You will find that the actual game engine programmers only make up a fraction of what is actually required to \"ship\" the product.\n\n\n", "aSentId": 45480, "answer": "&gt; The game engine is typically the quick and easy part\n\n\n&gt; This also has very little to do with how difficult or how easy it is to make a game engine\n\nSo is it difficult or easy?", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45481, "question": "&gt; The game engine is typically the quick and easy part\n\n\n&gt; This also has very little to do with how difficult or how easy it is to make a game engine\n\nSo is it difficult or easy?", "aSentId": 45482, "answer": "\nWell that depends on which terms you want to look at it. To produce a game engine from scratch can be difficult it takes time. However to get a game engine is easy since you can just buy it off the shelf assuming it fits your requirements.\n\nSo therefore it is quick and easy for most new game developers. The hard part is spending the 100,000 man hours required to do the rest of the game. Which is the original point.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45483, "question": "\nWell that depends on which terms you want to look at it. To produce a game engine from scratch can be difficult it takes time. However to get a game engine is easy since you can just buy it off the shelf assuming it fits your requirements.\n\nSo therefore it is quick and easy for most new game developers. The hard part is spending the 100,000 man hours required to do the rest of the game. Which is the original point.", "aSentId": 45484, "answer": "okay, maybe if you elaborated more your original post wouldn't be downvoted into oblivion.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45487, "question": "GitLab acquires Gitorious", "aSentId": 45488, "answer": "We run a self hosted GitLab community edition setup on an internal network at my work and are extremely satisfied with it, don't think there's anything to fear", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45489, "question": "We run a self hosted GitLab community edition setup on an internal network at my work and are extremely satisfied with it, don't think there's anything to fear", "aSentId": 45490, "answer": "Same here. I'm a big fan of GitLab. ", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45487, "question": "GitLab acquires Gitorious", "aSentId": 45492, "answer": "Here's hoping someone who knows how to code (eg. not me) forks Gitorious and keeps it going!", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45496, "question": "A GNU C Library update", "aSentId": 45497, "answer": "No C11 thread.h? :(", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45499, "question": "Bringing Native Games to the Web is About to get a Whole Lot Easier", "aSentId": 45500, "answer": "We are now at the ridiculous stage where delivering native 3d applications in the browser is easier than delivering native 2d GUIs in the browser.\n", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45501, "question": "We are now at the ridiculous stage where delivering native 3d applications in the browser is easier than delivering native 2d GUIs in the browser.\n", "aSentId": 45502, "answer": "Wait a little more, once GUI toolkits like Qt or GTK are ported, we'll be able to deliver nice 2d GUIs just fine.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45504, "question": "Team Morale: Myths and Reality", "aSentId": 45505, "answer": "This started off well, and then rapidly went off the rails.  It sounds like the author can't decide whether he's leading a software team or a sales team.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45508, "question": "A history of modern 64 bit computing", "aSentId": 45509, "answer": "It's as if the PowerPC 620 and other chips hadn't actually shipped first.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45508, "question": "A history of modern 64 bit computing", "aSentId": 45511, "answer": "Long read, but a very good one. Interesting to see how much the high-profile technology companies are related and interdependent today.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45513, "question": "An Overview of JavaScript in 2015", "aSentId": 45514, "answer": "Assigning over a const will silently be ignored.\n\nUgh, I hate things js does to 'just work' on a webpage instead of blowing up and actively noting the problem", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45515, "question": "Assigning over a const will silently be ignored.\n\nUgh, I hate things js does to 'just work' on a webpage instead of blowing up and actively noting the problem", "aSentId": 45516, "answer": "You can opt-in to strict mode...", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45515, "question": "Assigning over a const will silently be ignored.\n\nUgh, I hate things js does to 'just work' on a webpage instead of blowing up and actively noting the problem", "aSentId": 45518, "answer": "\\*stumps on over using a crutch and bandage over one eye\\*\n\nAye, reminds me of the battle of XHTML. Lost a lot of good men there.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45519, "question": "\\*stumps on over using a crutch and bandage over one eye\\*\n\nAye, reminds me of the battle of XHTML. Lost a lot of good men there.", "aSentId": 45520, "answer": "Interestingly, if XHTML somehow won, would there be a push for a JSON-based HTML now?\n\nThink of all the coupla-bytes we'd save!", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45513, "question": "An Overview of JavaScript in 2015", "aSentId": 45522, "answer": "So, it basically turns Javascript into a better Lua with 0-based arrays.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45523, "question": "So, it basically turns Javascript into a better Lua with 0-based arrays.", "aSentId": 45524, "answer": "Them's fightin' words.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45523, "question": "So, it basically turns Javascript into a better Lua with 0-based arrays.", "aSentId": 45526, "answer": "I'll take it!", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45523, "question": "So, it basically turns Javascript into a better Lua with 0-based arrays.", "aSentId": 45528, "answer": "As someone who's used Lua happily in the past, can you describe what about modern JavaScript makes it better?", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45529, "question": "As someone who's used Lua happily in the past, can you describe what about modern JavaScript makes it better?", "aSentId": 45530, "answer": "Actually, all I ment to say is that it added a lot of features that are the strong point of Lua such as generators/iterators or rest parameters.\n\nWhich language is better is a very long holly war that I am not going to fight. They are both awesome language, each in it's own domain.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45513, "question": "An Overview of JavaScript in 2015", "aSentId": 45533, "answer": "Most of this is pretty cool, but how long until we can actually use this without breaking our site for a large number of users?", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45534, "question": "Most of this is pretty cool, but how long until we can actually use this without breaking our site for a large number of users?", "aSentId": 45535, "answer": "Some things you can probably find some kind of polyfill for, but it's unlikely that you'll be able to use ES6 on a site that is open to everyone for a year or more without resorting to the usual browser capability checks, polyfills, etc.\n\nIf you're working in Node or io.js, you can start using these features much sooner. I'm excited for the arrow notation.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45537, "question": "There are some nice new features, but it's still just adding complexity to an already confusing language.  Javascript is a semantic nightmare and it's only getting worse.", "aSentId": 45538, "answer": "I kinda have to agree... for instance I think that the arrow notation for closures does the right thing, but now there are two ways to create anonymous functions, one which is the simpler and more obvious one (but does the wrong thing) and one which has weird syntax (but does the right thing), and the difference between them is kinda subtle and hard to explain to a newcomer. sorta like == vs === but even worse.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45540, "question": "A good overview, thanks. The example for Modules could use some more explanation, though. It's not clear to me what the difference is between a default and non-default export, or why isEqual was surrounded by {} in the import statement.", "aSentId": 45541, "answer": "Noted, will revise with comparisons to CommonJS thanks :)", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45543, "question": "`let`! `let`! Block-level variable scoping! My prayers have been answered!", "aSentId": 45544, "answer": "If `var` is a real problem for you then maybe your functions are too long.\n\nI like that `let` is here, but I didn't have too many fights with `var`.\n", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45546, "question": "the turd is a little polished, but undoubtly still a turd? :D", "aSentId": 45547, "answer": "fuck html/css/javascript.  ", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45546, "question": "the turd is a little polished, but undoubtly still a turd? :D", "aSentId": 45549, "answer": "The article, or the language? ;P", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45550, "question": "The article, or the language? ;P", "aSentId": 45551, "answer": "The article is cool, I'm just a **bitter** developer who hates all languages... :'(\n\n* LISP, beautiful but needs modernizing (package management etc)\n* Python, wonderful, but falls apart on big projects, wishes for static typing and native compilation :(\n* C#, nice! but not really optimized for cross platform, great for windows though.\n* Java, gaaaah!!! ugly but works... :'(\n* C++, crusty 'ol fart.. :/\n* JavaScript, great to get stuff done, but again on large projects things get messy fast... :'((\n* Haskell, strange, but only real purpose is to show off...;)", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45552, "question": "The article is cool, I'm just a **bitter** developer who hates all languages... :'(\n\n* LISP, beautiful but needs modernizing (package management etc)\n* Python, wonderful, but falls apart on big projects, wishes for static typing and native compilation :(\n* C#, nice! but not really optimized for cross platform, great for windows though.\n* Java, gaaaah!!! ugly but works... :'(\n* C++, crusty 'ol fart.. :/\n* JavaScript, great to get stuff done, but again on large projects things get messy fast... :'((\n* Haskell, strange, but only real purpose is to show off...;)", "aSentId": 45553, "answer": "&gt; C#, nice! but not really optimized for cross platform, great for windows though.\n\nFYI, Microsoft is currently working on [this](http://github.com/dotnet).", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45552, "question": "The article is cool, I'm just a **bitter** developer who hates all languages... :'(\n\n* LISP, beautiful but needs modernizing (package management etc)\n* Python, wonderful, but falls apart on big projects, wishes for static typing and native compilation :(\n* C#, nice! but not really optimized for cross platform, great for windows though.\n* Java, gaaaah!!! ugly but works... :'(\n* C++, crusty 'ol fart.. :/\n* JavaScript, great to get stuff done, but again on large projects things get messy fast... :'((\n* Haskell, strange, but only real purpose is to show off...;)", "aSentId": 45555, "answer": "&gt; wishes for static typing and native compilation \n\nAs someone doing Python every day for a year now, I couldn't agree more. I'd kill for those two features.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45556, "question": "&gt; wishes for static typing and native compilation \n\nAs someone doing Python every day for a year now, I couldn't agree more. I'd kill for those two features.", "aSentId": 45557, "answer": "Come to the Go side, we're a friendly bunch. There's a lot of hate for it on /r/programming, but I have a feeling it'll easily scratch that itch. ", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45552, "question": "The article is cool, I'm just a **bitter** developer who hates all languages... :'(\n\n* LISP, beautiful but needs modernizing (package management etc)\n* Python, wonderful, but falls apart on big projects, wishes for static typing and native compilation :(\n* C#, nice! but not really optimized for cross platform, great for windows though.\n* Java, gaaaah!!! ugly but works... :'(\n* C++, crusty 'ol fart.. :/\n* JavaScript, great to get stuff done, but again on large projects things get messy fast... :'((\n* Haskell, strange, but only real purpose is to show off...;)", "aSentId": 45559, "answer": "I like how lack of static typing bother you in Python, but not in LISP.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45560, "question": "I like how lack of static typing bother you in Python, but not in LISP.", "aSentId": 45561, "answer": "Probably because his language hipsterism didn't extend far enough to actually using it. Note the comment on Haskell, also what most people get from hearing about it and barely trying it.\n\nThat said, debugging type errors through macros sounds like no fun. ", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45560, "question": "I like how lack of static typing bother you in Python, but not in LISP.", "aSentId": 45563, "answer": "Some Lisps support static typing. Racket, for example, offers `#lang racket/typed`, which allows for static type declarations, function type signatures, and algebraic data types. ", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45567, "question": "Sorry for the stupid question but is this upcoming stuff or can I go ahead open up my editor and start using these features right now?", "aSentId": 45568, "answer": "You have to use a compiler to compile it down to an older version of JavaScript (ES3/5)", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45570, "question": "Is the \"Template Strings\" portion not interfering with jQuery?\n\n    var x = 1;\n    var y = 2;\n    console.log(`${ x } + ${ y } = ${ x + y}`); // =&gt; \"1 + 2 = 3\"\n", "aSentId": 45571, "answer": "The $ in the template is just part of the template syntax and doesn't refer to a variable.\n", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45570, "question": "Is the \"Template Strings\" portion not interfering with jQuery?\n\n    var x = 1;\n    var y = 2;\n    console.log(`${ x } + ${ y } = ${ x + y}`); // =&gt; \"1 + 2 = 3\"\n", "aSentId": 45573, "answer": "No.\n\nEven if you had jQuery defined globally (won't get into that discussion here), it's within quasi literals/template strings, just as '$' is just a dollar sign `$` is just a dollar sign.\n\nBasically, you could do `dollar sign is ${$.toString()}`", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45570, "question": "Is the \"Template Strings\" portion not interfering with jQuery?\n\n    var x = 1;\n    var y = 2;\n    console.log(`${ x } + ${ y } = ${ x + y}`); // =&gt; \"1 + 2 = 3\"\n", "aSentId": 45575, "answer": "How in the world would that interfere with jQuery?", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45578, "question": "C# for the Unreal Engine", "aSentId": 45579, "answer": "This has been around for awhile. Has anything changed?\n\nI ask this because Epic put a clause in their license that language extensions must be free and open source shortly after this was announced, which effectively kills it unless Xamarin changes their policy.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45580, "question": "This has been around for awhile. Has anything changed?\n\nI ask this because Epic put a clause in their license that language extensions must be free and open source shortly after this was announced, which effectively kills it unless Xamarin changes their policy.", "aSentId": 45581, "answer": "I'd be interested in this too. This project has been around for a while, but there's no indication that I can see that anything has been updated since then.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45580, "question": "This has been around for awhile. Has anything changed?\n\nI ask this because Epic put a clause in their license that language extensions must be free and open source shortly after this was announced, which effectively kills it unless Xamarin changes their policy.", "aSentId": 45583, "answer": "well this kills it. I was just about to tell my friend we dont need to learn c++ in order to use UE4, and then you tell me this.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45584, "question": "well this kills it. I was just about to tell my friend we dont need to learn c++ in order to use UE4, and then you tell me this.", "aSentId": 45585, "answer": "you should try UE4 anyway. you can accomplish most non-advanced things just using their GUI tools. i personally don't enjoy dragging and dropping components just to perform a loop or call a function, but the interface does seem rather polished. ", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45580, "question": "This has been around for awhile. Has anything changed?\n\nI ask this because Epic put a clause in their license that language extensions must be free and open source shortly after this was announced, which effectively kills it unless Xamarin changes their policy.", "aSentId": 45587, "answer": "Do you have more information about that? Can't find anything online.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45590, "question": "I wonder if Microsoft open-sourcing .NET Core changes anything?", "aSentId": 45591, "answer": "I definitely think it makes it a lot more appealing now that it's open source. It's a mature platform and probably the only serious competitor for the JVM. Considering how Oracle has been behaving it's nice to know that there is a viable alternative. :)", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45592, "question": "I definitely think it makes it a lot more appealing now that it's open source. It's a mature platform and probably the only serious competitor for the JVM. Considering how Oracle has been behaving it's nice to know that there is a viable alternative. :)", "aSentId": 45593, "answer": "I've actually liked F# from a distance for years. My presentation partner, Amanda Laucher, was already a well-known consultant in the F# world when we met in 2009. I've always thought there was a lot to like about the CLR apart from being on Windows :-) and tried to get into Mono repeatedly over the years, but it's always been just a little too clunky. I'll keep an eye on this, especially as an Unreal Engine fan for many, many years.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45594, "question": "I've actually liked F# from a distance for years. My presentation partner, Amanda Laucher, was already a well-known consultant in the F# world when we met in 2009. I've always thought there was a lot to like about the CLR apart from being on Windows :-) and tried to get into Mono repeatedly over the years, but it's always been just a little too clunky. I'll keep an eye on this, especially as an Unreal Engine fan for many, many years.", "aSentId": 45595, "answer": "I think F# is a fantastic language that's really well thought out. If I do move to a statically typed language it certainly would be my first choice. :)", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45578, "question": "C# for the Unreal Engine", "aSentId": 45597, "answer": "Awesome. .Net coder and was thinking about messing a bit with the UE since I need something other than enterprise apps to keep me interested.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45578, "question": "C# for the Unreal Engine", "aSentId": 45599, "answer": "c# seems to be shaping up to be the least-worst corporate blub language...and i say that in the most flattering sense", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45600, "question": "c# seems to be shaping up to be the least-worst corporate blub language...and i say that in the most flattering sense", "aSentId": 45601, "answer": "You should really check out F#. It's completely compatible with all C# libraries, brilliant as a functional language and honestly better at being an OO language too. Imperative F# just looks like python, but with full static type inference and IDE support comparable to C#'s.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45603, "question": "C# is going to eat the world, and rightfully so", "aSentId": 45604, "answer": "I sure hope it dethrones Java. That said, I still prefer my C++ :)", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45605, "question": "I sure hope it dethrones Java. That said, I still prefer my C++ :)", "aSentId": 45606, "answer": "It's like I prefer drinking water over eating. C++ and C# is not comparable, because they are different stuff.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45607, "question": "It's like I prefer drinking water over eating. C++ and C# is not comparable, because they are different stuff.", "aSentId": 45608, "answer": "Not really, they're both general purpose languages. Both try to be performant. Sure, C# is typically managed with GC and C++ is not, but they're not all that different. Their targets are similar.\n\nIt's more like I prefer eating a tenderloin steak over a ribeye steak.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45609, "question": "Not really, they're both general purpose languages. Both try to be performant. Sure, C# is typically managed with GC and C++ is not, but they're not all that different. Their targets are similar.\n\nIt's more like I prefer eating a tenderloin steak over a ribeye steak.", "aSentId": 45610, "answer": "Except not quite. C# has a JIT compilation phase that doesn't exist with C++. That's a bigger difference than the GC.\n\nTo keep with the food analogies, its like those \"just add water\" meals compared to a steak. Once you add the water, they're comparable, but before that its not quite the same.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45612, "question": "Can it use Microsoft's VM instead of mono? Now that it is open sourced and all?", "aSentId": 45613, "answer": "I doubt CoreCLR will be ready for this in the next couple of years.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45612, "question": "Can it use Microsoft's VM instead of mono? Now that it is open sourced and all?", "aSentId": 45615, "answer": "CoreCLR is definitely not ready for anything like this.\n\n* Many libraries are still missing or not yet open sourced.\n* Linux/OSX support is incomplete.\n* It also doesn't support nearly as many platforms as Mono. CoreCLR only supports x86-64 and I doubt support for 32-bit platforms will be considered.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45616, "question": "CoreCLR is definitely not ready for anything like this.\n\n* Many libraries are still missing or not yet open sourced.\n* Linux/OSX support is incomplete.\n* It also doesn't support nearly as many platforms as Mono. CoreCLR only supports x86-64 and I doubt support for 32-bit platforms will be considered.", "aSentId": 45617, "answer": "Is 32-bit support really a concern anymore for video game programming?", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45621, "question": "In ORM's defence", "aSentId": 45622, "answer": "Why so many hate towards the ORM?\n\nJust use the right tool for the right job, if my application is a simple CRUD the ORM will handle this probably better than you (at least less error prone).If you need to craft some complex, fast, query just use SQL.\n\nI think the problem is that people think that ORMs doesn't have a *hard* learning curve and then the ORM bites you back and start blaming \"Oh, all ORMs are bs!\", no they don't, you don't know how to use it. In fact many ORMs are aware of its limitations. \\*rant ends\\*\n\n**tl;dr** hype is hype", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45623, "question": "Why so many hate towards the ORM?\n\nJust use the right tool for the right job, if my application is a simple CRUD the ORM will handle this probably better than you (at least less error prone).If you need to craft some complex, fast, query just use SQL.\n\nI think the problem is that people think that ORMs doesn't have a *hard* learning curve and then the ORM bites you back and start blaming \"Oh, all ORMs are bs!\", no they don't, you don't know how to use it. In fact many ORMs are aware of its limitations. \\*rant ends\\*\n\n**tl;dr** hype is hype", "aSentId": 45624, "answer": "&gt; Just use the right tool for the right job, if my application is a simple CRUD the ORM will handle this probably better than you (at least less error prone).If you need to craft some complex, fast, query just use SQL.\n\nEspecially since ORMs (Doctrine and SQL Alchemy at least) will let you have the best of both worlds and pierce through their abstraction layers to allow for executions of raw queries.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45623, "question": "Why so many hate towards the ORM?\n\nJust use the right tool for the right job, if my application is a simple CRUD the ORM will handle this probably better than you (at least less error prone).If you need to craft some complex, fast, query just use SQL.\n\nI think the problem is that people think that ORMs doesn't have a *hard* learning curve and then the ORM bites you back and start blaming \"Oh, all ORMs are bs!\", no they don't, you don't know how to use it. In fact many ORMs are aware of its limitations. \\*rant ends\\*\n\n**tl;dr** hype is hype", "aSentId": 45626, "answer": "ORMs lead to one-to-one mapping between tables and classes, which is almost always wrong.\n\n", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45627, "question": "ORMs lead to one-to-one mapping between tables and classes, which is almost always wrong.\n\n", "aSentId": 45628, "answer": "No its not.\n\nIf the schema existed first it is bad. You're tying your object model to a legacy.\n\nIf the schema didn't, its the best way to keep IOPS low which defines the ultimate scalability of your platform. In fact whatever the ORM mandates as best schema is probably right.\n\n(I'm talking proper ORMs here like hibernate/sql alchemy derivatives)", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45629, "question": "No its not.\n\nIf the schema existed first it is bad. You're tying your object model to a legacy.\n\nIf the schema didn't, its the best way to keep IOPS low which defines the ultimate scalability of your platform. In fact whatever the ORM mandates as best schema is probably right.\n\n(I'm talking proper ORMs here like hibernate/sql alchemy derivatives)", "aSentId": 45630, "answer": "What's IOPS stand for?  ", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45631, "question": "What's IOPS stand for?  ", "aSentId": 45632, "answer": "input/output operations per second. its a crude but effective measurement of how much load you're putting on the machine hosting your database (since databases are almost universally disk i/o bound on the vast majority of queries). the lower the better. ", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45629, "question": "No its not.\n\nIf the schema existed first it is bad. You're tying your object model to a legacy.\n\nIf the schema didn't, its the best way to keep IOPS low which defines the ultimate scalability of your platform. In fact whatever the ORM mandates as best schema is probably right.\n\n(I'm talking proper ORMs here like hibernate/sql alchemy derivatives)", "aSentId": 45634, "answer": "Stupidly simple case:\n\n* A Person can have zero or more PhoneNumber.\n* Each PhoneNumber has a PhoneType\n\nYou task is to display a list of names and phone numbers on the screen, one name/phone number pair per line. The Phone number and type are editable, the name is not.\n\nWhat does you ORM code look like for fetching this data and for saving updates?", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45635, "question": "Stupidly simple case:\n\n* A Person can have zero or more PhoneNumber.\n* Each PhoneNumber has a PhoneType\n\nYou task is to display a list of names and phone numbers on the screen, one name/phone number pair per line. The Phone number and type are editable, the name is not.\n\nWhat does you ORM code look like for fetching this data and for saving updates?", "aSentId": 45636, "answer": "It looks like a single aggregate root (Person) with a collection of objects attached (PhoneNumber). The PhoneNumber would have a static constructor and private setter for Name. To create one, you use the static constructor. To edit one you change the aggregate's properties.\n\nThe unit of work and/or session takes care of the rest.\n\nWell actually I'd use the MDA party archetype but that's another story.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45637, "question": "It looks like a single aggregate root (Person) with a collection of objects attached (PhoneNumber). The PhoneNumber would have a static constructor and private setter for Name. To create one, you use the static constructor. To edit one you change the aggregate's properties.\n\nThe unit of work and/or session takes care of the rest.\n\nWell actually I'd use the MDA party archetype but that's another story.", "aSentId": 45638, "answer": "&gt; It looks like a single aggregate root (Person) with a collection of objects attached (PhoneNumber).\n\nThat's got some problems in the database. Namely it is going to call SELECT * across Person when you only need two columns.\n\nOn the UI side, how would you flatten the results so that you can bind this to a grid without losing your updatable objects? ", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45637, "question": "It looks like a single aggregate root (Person) with a collection of objects attached (PhoneNumber). The PhoneNumber would have a static constructor and private setter for Name. To create one, you use the static constructor. To edit one you change the aggregate's properties.\n\nThe unit of work and/or session takes care of the rest.\n\nWell actually I'd use the MDA party archetype but that's another story.", "aSentId": 45640, "answer": "The typical user of an ORM would build that with a query per object which is where the \"one to one mapping\" problem begins in most cases. Which almost certainly does not keep IOPS low and typically optimizes for a scaling consideration that is nonexistent in 99% of apps. Many ORMs can do better than that with the ability to do joins under the hood but the way to accomplish it are poorly documented or have very weird syntax, poor naming and odd requirements to accomplish it.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45641, "question": "The typical user of an ORM would build that with a query per object which is where the \"one to one mapping\" problem begins in most cases. Which almost certainly does not keep IOPS low and typically optimizes for a scaling consideration that is nonexistent in 99% of apps. Many ORMs can do better than that with the ability to do joins under the hood but the way to accomplish it are poorly documented or have very weird syntax, poor naming and odd requirements to accomplish it.", "aSentId": 45642, "answer": "I think you need to go away and play with a mature ORM like SQL Alchemy / Hibernate / NHibernate. You're right, we use joins on queries (projections in hibernate); who wouldn't?!?", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45643, "question": "I think you need to go away and play with a mature ORM like SQL Alchemy / Hibernate / NHibernate. You're right, we use joins on queries (projections in hibernate); who wouldn't?!?", "aSentId": 45644, "answer": "I offered a very simple challenge. Just a projection of two tables and an update using the results of the projection.\n\nSo far no one has managed to solve this problem using code samples from their favorite ORM. Can you?\n", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45643, "question": "I think you need to go away and play with a mature ORM like SQL Alchemy / Hibernate / NHibernate. You're right, we use joins on queries (projections in hibernate); who wouldn't?!?", "aSentId": 45646, "answer": "You don't have to be such a dismissive twit. I am in general agreeing with you, but your ego is blocking the sound. I don't need to go away anywhere. I was talking about the typical ORM user. I am well aware of the more powerful features of better ORMs. I am also well aware that the syntax and requirements are a touch clunky.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45647, "question": "You don't have to be such a dismissive twit. I am in general agreeing with you, but your ego is blocking the sound. I don't need to go away anywhere. I was talking about the typical ORM user. I am well aware of the more powerful features of better ORMs. I am also well aware that the syntax and requirements are a touch clunky.", "aSentId": 45648, "answer": "The typical ORM user is going to be your typical SQL user too. And I can't say I've seen much more brilliance there either.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45637, "question": "It looks like a single aggregate root (Person) with a collection of objects attached (PhoneNumber). The PhoneNumber would have a static constructor and private setter for Name. To create one, you use the static constructor. To edit one you change the aggregate's properties.\n\nThe unit of work and/or session takes care of the rest.\n\nWell actually I'd use the MDA party archetype but that's another story.", "aSentId": 45650, "answer": "Don't just talk about it, actually write your code.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45651, "question": "Don't just talk about it, actually write your code.", "aSentId": 45652, "answer": "Words are independent of programming language. The concepts are clearly described.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45653, "question": "Words are independent of programming language. The concepts are clearly described.", "aSentId": 45654, "answer": "Words are conjecture, code is proof.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45621, "question": "In ORM's defence", "aSentId": 45656, "answer": "A huge amount of this is just fashion, ORM's where once fashionable, DataMappers are currently fashionable and in 5 years something that is totally not an ORM but looks like one will be fashionable again.\n\nIt is hard to resist the influence of trends but I try to evaluate tools based on what they actually offer rather than what the current groupthink says they offer.\n\nORM's solve a real problem in the real world, are there times when DataMapper's would be a better choice sure but there are also times where pure SQL behind a repository is a better method as well.\n\nTo quote one of my personal heroes \"That which can be asserted without evidence, can be dismissed without evidence\".", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45657, "question": "A huge amount of this is just fashion, ORM's where once fashionable, DataMappers are currently fashionable and in 5 years something that is totally not an ORM but looks like one will be fashionable again.\n\nIt is hard to resist the influence of trends but I try to evaluate tools based on what they actually offer rather than what the current groupthink says they offer.\n\nORM's solve a real problem in the real world, are there times when DataMapper's would be a better choice sure but there are also times where pure SQL behind a repository is a better method as well.\n\nTo quote one of my personal heroes \"That which can be asserted without evidence, can be dismissed without evidence\".", "aSentId": 45658, "answer": "I don't see myself going back to writing SQL update statements on my code. ", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45621, "question": "In ORM's defence", "aSentId": 45660, "answer": "in my experience, most people criticizing ORMs fall into one of two categories:\n\n1. one of the rare few developers working on a truly large scale application where ORM query generation is problematic due to high complexity queries or non-conventional usage of datastores. these guys usually say something like \"ORM is a fine tool but it can be more restricting than I like and given the type of work I'm doing its just a hindrance.\"\n2. deeply ignorant people with a really bad case of not-invented-here syndrome. these guys usually say something like \"ORM is a crutch and nobody should use one ever\".", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45661, "question": "in my experience, most people criticizing ORMs fall into one of two categories:\n\n1. one of the rare few developers working on a truly large scale application where ORM query generation is problematic due to high complexity queries or non-conventional usage of datastores. these guys usually say something like \"ORM is a fine tool but it can be more restricting than I like and given the type of work I'm doing its just a hindrance.\"\n2. deeply ignorant people with a really bad case of not-invented-here syndrome. these guys usually say something like \"ORM is a crutch and nobody should use one ever\".", "aSentId": 45662, "answer": "There must be a third kind. The kind that realize that their problem domain does not call for the added complexity of an ORM. I can't figure out which category to place dba:s in either. I guess they usually fall into the group of people who dislikes ORMs, no? ", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45663, "question": "There must be a third kind. The kind that realize that their problem domain does not call for the added complexity of an ORM. I can't figure out which category to place dba:s in either. I guess they usually fall into the group of people who dislikes ORMs, no? ", "aSentId": 45664, "answer": "&gt;the kind that realize that their problem domain does not call for the added complexity of an ORM. \n\nno, that's the second kind. ORMs don't add complexity, they reduce complexity. a language idiomatic interface in your application layer that automatically handles (and thus eliminates) repetitive boilerplate code in the vast majority of common use cases is a net reduction to complexity. \n\nyou seem to believe that using tools automatically adds complexity. does it get more complicated or less complicated to drive a nail into a board if you use a power-hammer or a manual hammer? unless something weird is going on, the power-hammer is much easier and more efficient. \n", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45665, "question": "&gt;the kind that realize that their problem domain does not call for the added complexity of an ORM. \n\nno, that's the second kind. ORMs don't add complexity, they reduce complexity. a language idiomatic interface in your application layer that automatically handles (and thus eliminates) repetitive boilerplate code in the vast majority of common use cases is a net reduction to complexity. \n\nyou seem to believe that using tools automatically adds complexity. does it get more complicated or less complicated to drive a nail into a board if you use a power-hammer or a manual hammer? unless something weird is going on, the power-hammer is much easier and more efficient. \n", "aSentId": 45666, "answer": "&gt; no, that's the second kind. ORMs don't add complexity, they reduce complexity.\n\nHa!\n\nInstead of simple projections, ORMs usually lead to unnecessarily deep and complex object graphs. ", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45667, "question": "&gt; no, that's the second kind. ORMs don't add complexity, they reduce complexity.\n\nHa!\n\nInstead of simple projections, ORMs usually lead to unnecessarily deep and complex object graphs. ", "aSentId": 45668, "answer": "example please? the most typical pattern is 1:1 correspondence between database table and a Class in your application programming language, and similarly a 1:1 correspondence between object instance of that class and rows/records from the database table.\n\nthats about as shallow and simple of an object graph that you can get. ", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45669, "question": "example please? the most typical pattern is 1:1 correspondence between database table and a Class in your application programming language, and similarly a 1:1 correspondence between object instance of that class and rows/records from the database table.\n\nthats about as shallow and simple of an object graph that you can get. ", "aSentId": 45670, "answer": "Lets start with something simple like showing a list of people and phone numbers, where the phone numbers are editable.\n\nThe traditional way would be a Person table, a Phone number table, and a PhoneType table. For UI display purposes, the model class would be:\n\n* PersonKey\n* DisplayName\n* PhoneKey\n* PhoneTypeKey - Editable\n* PhoneNumber - Editable\n\nThe ORM way of handling this would be three classes:\n\n* Person (all of the fields)\n* Phone (all of the fields)\n* PhoneType (all of the fields)\n\nHaving to deal with object graphs makes displaying data a pain in the ass. But if you project the data into a flat object, you lose the ORMs ability to generate UPDATE statements.\n\n", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45671, "question": "Lets start with something simple like showing a list of people and phone numbers, where the phone numbers are editable.\n\nThe traditional way would be a Person table, a Phone number table, and a PhoneType table. For UI display purposes, the model class would be:\n\n* PersonKey\n* DisplayName\n* PhoneKey\n* PhoneTypeKey - Editable\n* PhoneNumber - Editable\n\nThe ORM way of handling this would be three classes:\n\n* Person (all of the fields)\n* Phone (all of the fields)\n* PhoneType (all of the fields)\n\nHaving to deal with object graphs makes displaying data a pain in the ass. But if you project the data into a flat object, you lose the ORMs ability to generate UPDATE statements.\n\n", "aSentId": 45672, "answer": "I'm still not seeing it. That's three database tables and three classes. A foreign key relation is represented on those classes in almost exactly the same way it is in the database table, with a Foreign Key. \n\nin the case of having the model classes instantiated in your application code you usually end up with either \"hydrated\" (FK relations followed via join queries and related objects produced and cached as references on the Model instance) or \"dehydrated\" (FK relations not followed, so no join performed, just an attribute that stores the FK itself and leaves performing a followup query to the programmer, when its needed). \n\nI don't see how you lose anything here. How do you lose the ability to perform updates? I really don't follow your argument here at all.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45673, "question": "I'm still not seeing it. That's three database tables and three classes. A foreign key relation is represented on those classes in almost exactly the same way it is in the database table, with a Foreign Key. \n\nin the case of having the model classes instantiated in your application code you usually end up with either \"hydrated\" (FK relations followed via join queries and related objects produced and cached as references on the Model instance) or \"dehydrated\" (FK relations not followed, so no join performed, just an attribute that stores the FK itself and leaves performing a followup query to the programmer, when its needed). \n\nI don't see how you lose anything here. How do you lose the ability to perform updates? I really don't follow your argument here at all.", "aSentId": 45674, "answer": "Using your favorite ORM, write your code for fetching the data and updating one row.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45665, "question": "&gt;the kind that realize that their problem domain does not call for the added complexity of an ORM. \n\nno, that's the second kind. ORMs don't add complexity, they reduce complexity. a language idiomatic interface in your application layer that automatically handles (and thus eliminates) repetitive boilerplate code in the vast majority of common use cases is a net reduction to complexity. \n\nyou seem to believe that using tools automatically adds complexity. does it get more complicated or less complicated to drive a nail into a board if you use a power-hammer or a manual hammer? unless something weird is going on, the power-hammer is much easier and more efficient. \n", "aSentId": 45676, "answer": "Yes and no. For one the power tool needs a power source, it's also more prone to err, like falling to pieces. Due to its complexity it's unlikely that the user will be able to fix it. It's called externalization of costs. The ORM may be a perfect fit while it works as expected, but is much harder to debug when broken. That's something I take into consideration complexity concerned.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45677, "question": "Yes and no. For one the power tool needs a power source, it's also more prone to err, like falling to pieces. Due to its complexity it's unlikely that the user will be able to fix it. It's called externalization of costs. The ORM may be a perfect fit while it works as expected, but is much harder to debug when broken. That's something I take into consideration complexity concerned.", "aSentId": 45678, "answer": "in software development you're already working on a giant massively complex stack of library software and infrastructure software that you just have to take for granted that it all works.\n\ndo you think your operating system, your compiler/interpreter, or your http server (or whatever other piece of mission critical infrastructure software you're relying on) are things you should take into consideration when you're thinking about complexity? \n\nits just not a legit argument to say \"I shouldn't use this software because it might malfunction for reasons beyond my control and unrelated to anything I've done\". You can apply that same absurd and overly reductive logic to anything and if you do you'll never leave the house. \"I shouldn't get in my car because the engine might fly to pieces killing me instantly!\". Get a grip dude.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45679, "question": "in software development you're already working on a giant massively complex stack of library software and infrastructure software that you just have to take for granted that it all works.\n\ndo you think your operating system, your compiler/interpreter, or your http server (or whatever other piece of mission critical infrastructure software you're relying on) are things you should take into consideration when you're thinking about complexity? \n\nits just not a legit argument to say \"I shouldn't use this software because it might malfunction for reasons beyond my control and unrelated to anything I've done\". You can apply that same absurd and overly reductive logic to anything and if you do you'll never leave the house. \"I shouldn't get in my car because the engine might fly to pieces killing me instantly!\". Get a grip dude.", "aSentId": 45680, "answer": "Yes, we are. Overly complex, and so much more complex than the majority of the problems we solve call for. OS:es and the applications on top of them have turned into a clusterfuck of complexity, and it has really begun to show.\nAnd yes, I do think we should take the complexity of critical infrastructure into consideration. If it be found wanting, we replace it. Stacking shit on shit takes us nowhere.\n\nWhen IoT reaches the car industri I will consider it :)\n\nMy grip is firm.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45681, "question": "Yes, we are. Overly complex, and so much more complex than the majority of the problems we solve call for. OS:es and the applications on top of them have turned into a clusterfuck of complexity, and it has really begun to show.\nAnd yes, I do think we should take the complexity of critical infrastructure into consideration. If it be found wanting, we replace it. Stacking shit on shit takes us nowhere.\n\nWhen IoT reaches the car industri I will consider it :)\n\nMy grip is firm.", "aSentId": 45682, "answer": "Your average web application can have collections of libraries numbering in the dozens to the hundreds. That is not unusual, and it's not wrong; the cost of having written that functionality by yourself would end up being enormous. It's substantially easier to get commonly-used libs, and in the rare situation where you need a feature, add it yourself and submit a pull request.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45681, "question": "Yes, we are. Overly complex, and so much more complex than the majority of the problems we solve call for. OS:es and the applications on top of them have turned into a clusterfuck of complexity, and it has really begun to show.\nAnd yes, I do think we should take the complexity of critical infrastructure into consideration. If it be found wanting, we replace it. Stacking shit on shit takes us nowhere.\n\nWhen IoT reaches the car industri I will consider it :)\n\nMy grip is firm.", "aSentId": 45684, "answer": "so, like, do you actually write any code at all then or do you just complain about how shitty everything is?", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45685, "question": "so, like, do you actually write any code at all then or do you just complain about how shitty everything is?", "aSentId": 45686, "answer": "Oh, loads. Then I discard it when I realize that I'm trying to solve the wrong problem. ", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45687, "question": "Oh, loads. Then I discard it when I realize that I'm trying to solve the wrong problem. ", "aSentId": 45688, "answer": "cool story bro. how's all that discarding code working out for you?", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45689, "question": "cool story bro. how's all that discarding code working out for you?", "aSentId": 45690, "answer": "Well for one, I'm free of maintenance of programs I'm not all that fond of, which leaves me more time to maybe find and solve a real problem :)", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45661, "question": "in my experience, most people criticizing ORMs fall into one of two categories:\n\n1. one of the rare few developers working on a truly large scale application where ORM query generation is problematic due to high complexity queries or non-conventional usage of datastores. these guys usually say something like \"ORM is a fine tool but it can be more restricting than I like and given the type of work I'm doing its just a hindrance.\"\n2. deeply ignorant people with a really bad case of not-invented-here syndrome. these guys usually say something like \"ORM is a crutch and nobody should use one ever\".", "aSentId": 45692, "answer": "I hate these \"ORM\" discussions.  Has anyone here used *every* ORM?  I doubt it.  Everyone's just talking about their experience with one ORM that's completely different from the next guy's.  If we're on the same page, it's a coincidence.\n\n&gt; deeply ignorant people\n\nI have the most experience with EclipseLink.  It's difficult to *not* be ignorant.  e.g., sometimes I update a many-to-many and I get a primary key violation, but it *only* occurs if you go down this one path, not all the others.  \n\nHow am I supposed to turn that into a stackoverflow question to get help?  It takes hours/days to even turn that into a reproducible example.  Even when it is in a reproducible example, it requires someone to set up a database, tables, a server, an ORM, etc.  Most people don't want to put in the effort. \n\nWhereas, if this SQL query I'm running isn't working as expected, I can just paste it and the tables and someone can help me.  ", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45661, "question": "in my experience, most people criticizing ORMs fall into one of two categories:\n\n1. one of the rare few developers working on a truly large scale application where ORM query generation is problematic due to high complexity queries or non-conventional usage of datastores. these guys usually say something like \"ORM is a fine tool but it can be more restricting than I like and given the type of work I'm doing its just a hindrance.\"\n2. deeply ignorant people with a really bad case of not-invented-here syndrome. these guys usually say something like \"ORM is a crutch and nobody should use one ever\".", "aSentId": 45694, "answer": "I practically stood up and cheered when I read this.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45696, "question": "In my experience most people advocating for ORMs fall into one of two categories:\n\n  1. One of the few rare developers who understand the underlying ORM framework and respect its trade-offs.\n\n  2. deeply ignorant people who don't actually know how to write basic SQL statements when that is all that is called for.", "aSentId": 45697, "answer": "That ignorance is easy to demonstrate. Just try to get an ORM fan to write a simple projection and update: \n\n    SELECT a.DisplayName, b.PhoneKey, b.PhoneNumber, b.PhoneNumberTypeKey\n       FROM Person A\n       INNER JOIN Phone b ON b.PersonKey = b.PersonKey\n\n    UPDATE Phone SET PhoneNumber = @NewPhoneNumber\n    WHERE PhoneKey = @PhoneKey\n\n\n\n\n", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45698, "question": "That ignorance is easy to demonstrate. Just try to get an ORM fan to write a simple projection and update: \n\n    SELECT a.DisplayName, b.PhoneKey, b.PhoneNumber, b.PhoneNumberTypeKey\n       FROM Person A\n       INNER JOIN Phone b ON b.PersonKey = b.PersonKey\n\n    UPDATE Phone SET PhoneNumber = @NewPhoneNumber\n    WHERE PhoneKey = @PhoneKey\n\n\n\n\n", "aSentId": 45699, "answer": "Okay, I'll bite.\n\nCode is EF 5/6 with DbContext.\n(UserPhone is a view model class that I've left out of the example because the definition should be obvious).\n\nQuery:\n\n    IEnumerable&lt;UserPhone&gt; GetAllUserPhoneNumbers()\n    {\n        using (var context = new TestContext())\n        {\n            return context.People\n                .SelectMany(person =&gt; person.Phones,\n                    (person, phone) =&gt; \n                        new UserPhone\n                        { \n                            DisplayName = person.DisplayName,\n                            PhoneKey = phone.PhoneKey,\n                            PhoneNumber = phone.PhoneNumber,\n                            PhoneNumberKey = phone.PhoneNumberTypeKey\n                         }\n                ).ToArray();\n        }\n    }\n\nUpdate:\n\n    void UpdatePhoneNumber(UserPhone viewmodel)\n    {\n        using (var context = new TestContext())\n        {\n            var phone = context.Phones.Find(viewmodel.PhoneKey);\n            phone.PhoneNumber = viewmodel.PhoneNumber;\n            context.SaveChanges();\n        }\n    }", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45700, "question": "Okay, I'll bite.\n\nCode is EF 5/6 with DbContext.\n(UserPhone is a view model class that I've left out of the example because the definition should be obvious).\n\nQuery:\n\n    IEnumerable&lt;UserPhone&gt; GetAllUserPhoneNumbers()\n    {\n        using (var context = new TestContext())\n        {\n            return context.People\n                .SelectMany(person =&gt; person.Phones,\n                    (person, phone) =&gt; \n                        new UserPhone\n                        { \n                            DisplayName = person.DisplayName,\n                            PhoneKey = phone.PhoneKey,\n                            PhoneNumber = phone.PhoneNumber,\n                            PhoneNumberKey = phone.PhoneNumberTypeKey\n                         }\n                ).ToArray();\n        }\n    }\n\nUpdate:\n\n    void UpdatePhoneNumber(UserPhone viewmodel)\n    {\n        using (var context = new TestContext())\n        {\n            var phone = context.Phones.Find(viewmodel.PhoneKey);\n            phone.PhoneNumber = viewmodel.PhoneNumber;\n            context.SaveChanges();\n        }\n    }", "aSentId": 45701, "answer": "That's the \"correct\" answer for most ORMs.\n\nBut can you do that without the extra database query caused by `context.Phones.Find(viewmodel.PhoneKey)`?\n\nCan you do it without mapping from the viewmodel to the entity?\n\nIf ORMs dropped this stupid assumption that class==table then you should be able to write:\n\n    using (var context = new TestContext())\n    {\n        context.UpdateTable(\"Phone\", viewmodel);\n    }\n\nIf they were more intelligent about managing connections, it would just be this:\n\n     s_context.UpdateTable(\"Phone\", viewmodel);\n\n\n", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45702, "question": "That's the \"correct\" answer for most ORMs.\n\nBut can you do that without the extra database query caused by `context.Phones.Find(viewmodel.PhoneKey)`?\n\nCan you do it without mapping from the viewmodel to the entity?\n\nIf ORMs dropped this stupid assumption that class==table then you should be able to write:\n\n    using (var context = new TestContext())\n    {\n        context.UpdateTable(\"Phone\", viewmodel);\n    }\n\nIf they were more intelligent about managing connections, it would just be this:\n\n     s_context.UpdateTable(\"Phone\", viewmodel);\n\n\n", "aSentId": 45703, "answer": "&gt; But can you do that without the extra database query caused by context.Phones.Find(viewmodel.PhoneKey)?\n\nSure. I could do this:\n\n    void UpdatePhoneNumber2(UserPhone viewmodel)\n    {\n        using (var context = new TestContext())\n        {\n            var phone = new Phone()\n            {\n                PersonId = viewmodel.PersonId,\n                PhoneKey = viewmodel.PhoneKey,\n                PhoneNumber = viewmodel.PhoneNumber,\n                PhoneNumberTypeKey = viewmodel.PhoneNumberKey\n            };\n            context.Phones.Attach(phone);\n            context.Entry(phone).State = EntityState.Modified;\n            context.SaveChanges();\n        }\n    }\n\nNote that I've had to add an extra property to my viewmodel to be able to pull this off.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45700, "question": "Okay, I'll bite.\n\nCode is EF 5/6 with DbContext.\n(UserPhone is a view model class that I've left out of the example because the definition should be obvious).\n\nQuery:\n\n    IEnumerable&lt;UserPhone&gt; GetAllUserPhoneNumbers()\n    {\n        using (var context = new TestContext())\n        {\n            return context.People\n                .SelectMany(person =&gt; person.Phones,\n                    (person, phone) =&gt; \n                        new UserPhone\n                        { \n                            DisplayName = person.DisplayName,\n                            PhoneKey = phone.PhoneKey,\n                            PhoneNumber = phone.PhoneNumber,\n                            PhoneNumberKey = phone.PhoneNumberTypeKey\n                         }\n                ).ToArray();\n        }\n    }\n\nUpdate:\n\n    void UpdatePhoneNumber(UserPhone viewmodel)\n    {\n        using (var context = new TestContext())\n        {\n            var phone = context.Phones.Find(viewmodel.PhoneKey);\n            phone.PhoneNumber = viewmodel.PhoneNumber;\n            context.SaveChanges();\n        }\n    }", "aSentId": 45705, "answer": "&gt; (UserPhone is a view model class that I've left out of the example because the definition should be obvious).\n\nAgreed. But can you also leave out the manual field mapping? Your SelectMany is even more verbose than SQL and a Dapper-style mapper.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45706, "question": "&gt; (UserPhone is a view model class that I've left out of the example because the definition should be obvious).\n\nAgreed. But can you also leave out the manual field mapping? Your SelectMany is even more verbose than SQL and a Dapper-style mapper.", "aSentId": 45707, "answer": "In the real would, I could potentially use a mapping library which supports EF projections (e.g. AutoMapper). Since we're discussing just ORMs here I'll just say \"no\".\n\nI'm mostly a web dev these days, so for most uses having a ViewModel isn't even extra boilerplate, but is actually desirable, since it gives me a place to provide various annotations to drive the MVC templating features.\n\nFor my uses, I can't say off the top of my head I've ever hit a problem I can't solve with either Dapper's dynamic output types, or 'plain' C# anonymous types. They both seem pretty useful.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45709, "question": "Or my kind, which is that ORMs make the simple really simple but to do anything worthwhile, you have to know two languages.  You have to know SQL and you have to know how your ORM thinks about SQL.  So rather than reducing developer complexity, it adds to it", "aSentId": 45710, "answer": "that sounds like you fit into category 1, then. except you're using overly loaded language \"anything worthwhile\". Actually, lots of pretty simple CRUD apps are perfectly worthwhile to do and ORMs make them basically trivial to implement. its also frequently the case in CRUD apps that the complexity in that problem domain lives primarily in the user interface side of things and your database interactions are just not complicated, even though your application might have significant depth elsewhere.\n\nits true that there are some classes of problems that ORMs don't make easier. I don't think anybody advocating the use of ORMs is saying you should always use one no matter what. Its just a sensible default until you know for a fact that you're in a problem domain where it makes sense to use something else. ", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45711, "question": "that sounds like you fit into category 1, then. except you're using overly loaded language \"anything worthwhile\". Actually, lots of pretty simple CRUD apps are perfectly worthwhile to do and ORMs make them basically trivial to implement. its also frequently the case in CRUD apps that the complexity in that problem domain lives primarily in the user interface side of things and your database interactions are just not complicated, even though your application might have significant depth elsewhere.\n\nits true that there are some classes of problems that ORMs don't make easier. I don't think anybody advocating the use of ORMs is saying you should always use one no matter what. Its just a sensible default until you know for a fact that you're in a problem domain where it makes sense to use something else. ", "aSentId": 45712, "answer": "&gt; and your database interactions are just not complicated, even though your application might have significant depth elsewhere.\n\nNo, they only have the appearance of being not complicated. You have to look at the query execution plans to see what's really going on. \n\n", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45715, "question": "My biggest gripe with ORM:s is that they often solidify data structures and relations in code. Change the database and programs fail in non-obvious or spectacular ways. Sometimes a change is needed in the datalayer but it's hard to know when or how the ORM applications built upon it will fail.", "aSentId": 45716, "answer": "Wouldn't it be the same with using SQL? Add a column, you still have to update your queries inside your app. This is why I think it's important to separate your data and application layer; your application should never have to worry about data changes until it decides it wants to update to the new api that is provided by your data layer.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45717, "question": "Wouldn't it be the same with using SQL? Add a column, you still have to update your queries inside your app. This is why I think it's important to separate your data and application layer; your application should never have to worry about data changes until it decides it wants to update to the new api that is provided by your data layer.", "aSentId": 45718, "answer": "&gt; Add a column, you still have to update your queries inside your app.\n\nNo. You only update the queries that actually need the new column.\n\nThat's one of the problems with the ORM mindset. By default it assumes that you want to call SELECT * across every table in a query.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45717, "question": "Wouldn't it be the same with using SQL? Add a column, you still have to update your queries inside your app. This is why I think it's important to separate your data and application layer; your application should never have to worry about data changes until it decides it wants to update to the new api that is provided by your data layer.", "aSentId": 45720, "answer": "Yes, it would, but no, it's not the same thing. ORM makes it too easy to do the wrong thing, and make the wrong thing look like design. When I see sql queries mixed in with code my codesmell senses tingle. When I see ORM:s, I know the smell is in there... somewhere.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45715, "question": "My biggest gripe with ORM:s is that they often solidify data structures and relations in code. Change the database and programs fail in non-obvious or spectacular ways. Sometimes a change is needed in the datalayer but it's hard to know when or how the ORM applications built upon it will fail.", "aSentId": 45722, "answer": "good ORMs come packaged with a system for database migrations, so your interaction with the database is managed through the ORM layer end-to-end, including changes to your database schema. this way you are always changing your data models and database schema at the same time and you never run into that problem.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45723, "question": "good ORMs come packaged with a system for database migrations, so your interaction with the database is managed through the ORM layer end-to-end, including changes to your database schema. this way you are always changing your data models and database schema at the same time and you never run into that problem.", "aSentId": 45724, "answer": "Good ORMs can be put to good use. I still haven't seen it though, and I still haven't seen the place where ORMs in hindsight have felt like the right thing. In my experience employing an ORM is often a hunting with bazooka sort of thing.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45723, "question": "good ORMs come packaged with a system for database migrations, so your interaction with the database is managed through the ORM layer end-to-end, including changes to your database schema. this way you are always changing your data models and database schema at the same time and you never run into that problem.", "aSentId": 45726, "answer": "It is incredibly dangerous to allow an automated process to change your schema. It can't account for things like table size and down time. Instead, it will blindly perform the same transformation for a table with 100 rows and one with 100 million.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45727, "question": "It is incredibly dangerous to allow an automated process to change your schema. It can't account for things like table size and down time. Instead, it will blindly perform the same transformation for a table with 100 rows and one with 100 million.", "aSentId": 45728, "answer": "I'll use django's ORM migrations as an example for this. its a system that I think is relatively well implemented. \n\nrunning a schema migration IS NOT an automated process. there is an automated process to generate a migration script by object inspection. that script doesn't get run until you explicitly run the command, presumably after inspecting it to make sure it is correct. \n\nthat's not any different than writing your migration script in SQL except that you got some assistance to do it, and get to write it in Python (in this case, since its django) rather than SQL. \n\nso where's the danger? what is your actual concern? to me it sounds like you're just spreading FUD. let me ask you an honest question. what experience with ORMs do you have? which ORM systems have you used that have caused you to be so full of FUD on this topic?", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45730, "question": "I think it's ironic that people will bash ORM because of performance concerns while also using PHP. Maybe there's some other optimization trick you can do, like not using PHP. Just a thought.", "aSentId": 45731, "answer": "I've been avoiding PHP for years, but this really isn't so unreasonable.  Web servers scale horizontally without too much trouble, so performance impact to the database is a lot more important.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45734, "question": "ORM's are one of those things where it took a while to get a great one and the options available indicted the whole concept.  Use SQLAlchemy and be happy, or use something else and complain that ORM's suck.", "aSentId": 45735, "answer": "I used SQLAlchemy and was totally not happy.\n\nWhenever I needed a special query I digged endless in SQLAlchemy's docs to find out how to do that. While with a simple google query I found a generic SQL or a PostgreSQL example in an instant.\n\nAn ORM like SQLAlchemy is complex, but even it's complexity cannot do anything that e.g. PostgreSQL can do. And the complexity is (for my taste) documented in a lesser way than the SQL of database engines.\n\nHaving to fight constantly with the query machine of the ORM made me quit using it.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45737, "question": "I didn't enjoy my time with ORMs, not because of my own understanding or ability to use them, but because I saw a cargo cult programming culture around them, particularly from younger developers. \n\nThe OP builds up a bunch of strawmen and fights them down, but his conjured view of reality doesn't match up with the fact I've had to work with people that used ORMs in a way that absolutely crushed DB performance. \n\nWhether or not the technique is fine, I find the culture around a technique to be important. It's like how NoSQL is a fine tool, but the culture surrounding it 4 years back was ridiculously short sighted in comparison to the more matured culture it has now. The consequence of which is that I am currently working on a system that uses Mongo where a relational DB would have been the correct solution. ORMs have the same problem from my own experience, and no amount of blog posts change that, and until I see them used well in the wild I will feel the same way.", "aSentId": 45738, "answer": "&gt; I didn't enjoy my time with ORMs, not because of my own understanding or ability to use them, but because I saw a cargo cult programming culture around them, particularly from younger developers.\n\nThis is one of my bigger problems with them too.\n\nIt's not that they can't be helpful, but optimal use of them requires not only a detailed understanding of the ORM, but also the underlying SQL + DB's behavior.  \n\nUnfortunately, ORMs seem to have an appeal that's inversely correlated with database experience -- so you wind up with a bunch of junior developers or developers with minimal DB knowledge relying blindly on the ORM to handle the hard parts of model relationships.  Which is all generally fine... until you end up with a model structure that doesn't play nicely with your ORM, and then you're boned because none of the junior guys have the ability to figure out *why* the magic black box isn't working.\n\nWhen I point this out, somebody usually responds \"well your problem is that the developers didn't understand the tool\".  That's a fair criticism, but the retort is that the reason the ORM was attractive in the first place was that it (supposedly) abstracted away a lot of the need to deal with a deep understanding of the DB&lt;-&gt;model relationship.\n\nI'd rather they just spend the time to learn SQL and learn how relational DBs work as that knowledge is a lot more portable...\n\nTo me it seems like ORMs don't let you get by with any less detailed knowledge of the persistence layer, but rather they just require you to split that knowledge differently.  Not a big win in my book.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45739, "question": "&gt; I didn't enjoy my time with ORMs, not because of my own understanding or ability to use them, but because I saw a cargo cult programming culture around them, particularly from younger developers.\n\nThis is one of my bigger problems with them too.\n\nIt's not that they can't be helpful, but optimal use of them requires not only a detailed understanding of the ORM, but also the underlying SQL + DB's behavior.  \n\nUnfortunately, ORMs seem to have an appeal that's inversely correlated with database experience -- so you wind up with a bunch of junior developers or developers with minimal DB knowledge relying blindly on the ORM to handle the hard parts of model relationships.  Which is all generally fine... until you end up with a model structure that doesn't play nicely with your ORM, and then you're boned because none of the junior guys have the ability to figure out *why* the magic black box isn't working.\n\nWhen I point this out, somebody usually responds \"well your problem is that the developers didn't understand the tool\".  That's a fair criticism, but the retort is that the reason the ORM was attractive in the first place was that it (supposedly) abstracted away a lot of the need to deal with a deep understanding of the DB&lt;-&gt;model relationship.\n\nI'd rather they just spend the time to learn SQL and learn how relational DBs work as that knowledge is a lot more portable...\n\nTo me it seems like ORMs don't let you get by with any less detailed knowledge of the persistence layer, but rather they just require you to split that knowledge differently.  Not a big win in my book.", "aSentId": 45740, "answer": "I use a mix of ORM (Django's) and SQL.\n\nComplex SQL queries nearly always need to be done in SQL. But Updates are usually easier by writing a short script using the ORM. It certainly easier then trying to append the last part of one column to the start of another using MySQL's string functions.  \n", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45737, "question": "I didn't enjoy my time with ORMs, not because of my own understanding or ability to use them, but because I saw a cargo cult programming culture around them, particularly from younger developers. \n\nThe OP builds up a bunch of strawmen and fights them down, but his conjured view of reality doesn't match up with the fact I've had to work with people that used ORMs in a way that absolutely crushed DB performance. \n\nWhether or not the technique is fine, I find the culture around a technique to be important. It's like how NoSQL is a fine tool, but the culture surrounding it 4 years back was ridiculously short sighted in comparison to the more matured culture it has now. The consequence of which is that I am currently working on a system that uses Mongo where a relational DB would have been the correct solution. ORMs have the same problem from my own experience, and no amount of blog posts change that, and until I see them used well in the wild I will feel the same way.", "aSentId": 45742, "answer": "I've seen both sides of this fence. In the one that blindly adopted an ORM and pretended it abstracts a database, I had similar experiences to you.\n\nOn the flipside, at the place that avoided an ORM as being too complex... they ended up rolling a very shitty in-house one instead. The progression when something like raw SQL =&gt; concatenated strings for SQL =&gt; use of parameters =&gt; object reflection to find some properties and types =&gt; caching..\n\nBasically, using either approach without awareness of opposite extreme is doomed to failure.\n\nORMs are grown-up tools, just like source control and build systems. Avoiding them at all costs means the team inevitably writes their own. Using the tool without expert training means large amounts of time are wasted mis-using the tool.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45744, "question": "What I find worst on ORMs (I sometimes use them on simple CRUDs) is the fact, that they sway programmers to move consistency and sanity checks from database to some bloody objects in god knows what (i.e. PHP), causing illusion of consistent data only until first direct change in database (we have all been there) or until second app is developed on top of the same data/database", "aSentId": 45745, "answer": "Sure, consistency and sanity checks should live at the data layer, all good ORMs should handle this. If a developer doesn't know how to use those features, it is hardly the ORMs problem. Ignorance is not bliss. But there is always going to be some complex business rule within data that cannot be modelled at the data layer and must live in code. You are always going to be asking for trouble if you edit stuff without an understanding of what that data represents, regardless of whether you are using an ORM.\n\nI would argue that a database managed by an ORM should never try to serve multiple apps. If you do need to build a second app directly on top of that data,  expose an API and build your apps on top of that. This lets you re-use those business rules that must exist in code.\n\nI am not opposed to ORMs and know that 99% of the stuff I work on are ideally suited to an ORM, saving me time. I also do know that not everything can be done through an ORM. A good ORM should allow me to make the decision to drop down and work with SQL without abandoning me.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45747, "question": "Performance implications aside there is simply no point in ANY ORM system ever. They are the most useless creation of software engineers IMHO.\n\nIs SQL hard? No. Does ANYONE ever swap the database out and replace with another and expect to make no modifications? Absolutely not.\n\nEven if we're not modeling SQL I still don't find a point in re-mapping relationships.\n\nORMs cause more headaches than they solve problems. Sure, it can make that 20-minute TO-DO list tutorial only take 10 minutes but when you have to write and maintain a real application ORMs get in the way for every single project.", "aSentId": 45748, "answer": "You seem very bitter. I wonder what other technologies you shun because you're so opinionated. \n\nORM's are awesome, and save substantial time for simple CRUD operations. Some of us have more important stuff to worry about than perfectly optimized SQL to update some column in a row on a one-off. \n\n&gt; Is SQL hard? No. Does ANYONE ever swap the database out and replace with another and expect to make no modifications? Absolutely not.\n\nYou might want to find out how people actually use ORMs, if you think these are the two most important considerations. ", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45749, "question": "You seem very bitter. I wonder what other technologies you shun because you're so opinionated. \n\nORM's are awesome, and save substantial time for simple CRUD operations. Some of us have more important stuff to worry about than perfectly optimized SQL to update some column in a row on a one-off. \n\n&gt; Is SQL hard? No. Does ANYONE ever swap the database out and replace with another and expect to make no modifications? Absolutely not.\n\nYou might want to find out how people actually use ORMs, if you think these are the two most important considerations. ", "aSentId": 45750, "answer": "No not bitter at all. Just have been bit countless times by ActiveRecord, Hibernate, JPA, etc that I have learned over the years that they serve very little purpose.\n\nI would actually LOVE to be made aware of valid use cases for them because in my 10+ years I have not come across any.\n\nI get the use case for prototypes or small CRUD systems. But for real systems in production what value do they serve?", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45751, "question": "No not bitter at all. Just have been bit countless times by ActiveRecord, Hibernate, JPA, etc that I have learned over the years that they serve very little purpose.\n\nI would actually LOVE to be made aware of valid use cases for them because in my 10+ years I have not come across any.\n\nI get the use case for prototypes or small CRUD systems. But for real systems in production what value do they serve?", "aSentId": 45752, "answer": "I personally like ORMs for 3 reasons:\n\n1. The ones I've used are able to turn table issues into either compile errors (\"type does not have this column\") or really early runtime errors (\"table does not match model definition\"). This means I don't have to worry about devs writing invalid SQL, or creating invalid models that use things not in the database. This also means cleaner models/tables, as the ORM will complain loudly and refuse to run if there is a mis-match.\n\n2. Updating small volumes of entities is far more trivial. No more needing to figure out which properties have changed etc. I can simply load the object by id or criteria from my database, update the flags I want, and then commit the transaction... the ORM will take care of mapping them back out. In the apps I've worked in, 90% of the updates fall in this category (\"user updated their name on their profile\").\n\n3. Caching. This is a *very* rare thing, as usually caching at the ORM is not the right solution. On occasion though, I have found an order of magnitude speed-up that was trivially accessible by enabling the ORM's caches in the right places (e.g., a service that sits exclusively on top of a single database was able to cache most of the data without pain, whilst still allowing a transactionally consistent database to run happily underneath for other readers). There are other solutions to this problem most definitely, but in this case, the ORM scaled easily to the new requirements I had.\n\nNow, absolutely, there are cases where an ORM is not a great idea. Also, trying to use an ORM because \"LOOK IT'S SO SIMPLE\" is doomed to failure. ORMs aren't simple to use (in spite of what their advertising may claim), and they do require an investment in learning, just like SQL or any other tool... but there is a real world problem that they do a great job assisting with.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45755, "question": "Tendermint - A completely decentralized consensus engine", "aSentId": 45756, "answer": "I really want to make a witty comment about buzzword bingo but I can't even figure out wtf this is enough to know whether that's fair.\n\nBest I can gather is that it's a bitcoin competitor?", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45757, "question": "I really want to make a witty comment about buzzword bingo but I can't even figure out wtf this is enough to know whether that's fair.\n\nBest I can gather is that it's a bitcoin competitor?", "aSentId": 45758, "answer": "Not really a Bitcoin competitor in the sense of cryptocurrency, it is really a Proof of Work competitor for blockchain verification/consenses.  \n\nBasic premise is that blockchain technology can be used for many different applications, (cryptocurrency being just one), and the current leader in decentralized consensus is POW which is a very inefficient, expensive and time consuming way for decentralized networks to reach consensus.  \n\nI'm not sure if this is truly better or not but it is interesting.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45759, "question": "Not really a Bitcoin competitor in the sense of cryptocurrency, it is really a Proof of Work competitor for blockchain verification/consenses.  \n\nBasic premise is that blockchain technology can be used for many different applications, (cryptocurrency being just one), and the current leader in decentralized consensus is POW which is a very inefficient, expensive and time consuming way for decentralized networks to reach consensus.  \n\nI'm not sure if this is truly better or not but it is interesting.", "aSentId": 45760, "answer": "Thanks, for the explanation.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 45764, "question": "Mozilla Games", "aSentId": 45765, "answer": "I'm using Firefox yet none of the games work. Maybe I need to upgrade to a newer version but there should be some feedback that makes this clear to me.\n\n\nFirefox is my preferred browser but Mozilla really needs to start polishing its other products. I'm always let down, they are never ready for release when they publish so I always just forget about them.", "corpus": "reddit"}]