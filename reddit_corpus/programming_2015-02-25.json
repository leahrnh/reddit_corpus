[{"docID": "t5_2fwo", "qSentId": 51696, "question": "Google's Atari-Playing Algorithm Could Be The Future Of AI: \"It's not even built to play video games. Just to learn from its mistakes.\"", "aSentId": 51697, "answer": "This is the same area I worked on as a graduate student.\n\nI have always wanted to go back and extend Q-learning into a multi-layer processing system.  They appear to have leveraged an ANN (perhaps relying heavily on LeCun's work) rather than layering the Q-learning systems.  I was going to take a different track, and use binary scatter coding (err ... my memory fails, it was a convolution-based system for storing records) for system memory.\n\nQ-learning is an ideal replacement for other Markov systems in this kind of setting, because it can be trained quickly without an explicit training set (it can self-reinforce).\n\nWhen I was in school, we showed that a simple Q-learning agent could learn to recognize visual features (edge detection) without an explicit training using feedback loops alone.\n\nEDIT:\nAs described, it appears they are using the ANN to reduce the pixel domain space to a reasonable vector of inputs for presentation to the Q-learning agent, and the agent uses that information to map to joystick movements and button pressing.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 51698, "question": "This is the same area I worked on as a graduate student.\n\nI have always wanted to go back and extend Q-learning into a multi-layer processing system.  They appear to have leveraged an ANN (perhaps relying heavily on LeCun's work) rather than layering the Q-learning systems.  I was going to take a different track, and use binary scatter coding (err ... my memory fails, it was a convolution-based system for storing records) for system memory.\n\nQ-learning is an ideal replacement for other Markov systems in this kind of setting, because it can be trained quickly without an explicit training set (it can self-reinforce).\n\nWhen I was in school, we showed that a simple Q-learning agent could learn to recognize visual features (edge detection) without an explicit training using feedback loops alone.\n\nEDIT:\nAs described, it appears they are using the ANN to reduce the pixel domain space to a reasonable vector of inputs for presentation to the Q-learning agent, and the agent uses that information to map to joystick movements and button pressing.", "aSentId": 51699, "answer": "&gt; As described, it appears they are using the ANN to reduce the pixel domain space to a reasonable vector of inputs for presentation to the Q-learning agent, and the agent uses that information to map to joystick movements and button pressing.\n\nThank you.\n\nHow is Q-learning distinct from any other learning algorithm that uses a fitness function?", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 51700, "question": "&gt; As described, it appears they are using the ANN to reduce the pixel domain space to a reasonable vector of inputs for presentation to the Q-learning agent, and the agent uses that information to map to joystick movements and button pressing.\n\nThank you.\n\nHow is Q-learning distinct from any other learning algorithm that uses a fitness function?", "aSentId": 51701, "answer": "It's not terribly different, the Wikipedia article will describe it's strengths better than I can given that I haven't done research in that field in a decade.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 51702, "question": "It's not terribly different, the Wikipedia article will describe it's strengths better than I can given that I haven't done research in that field in a decade.", "aSentId": 51703, "answer": "Thanks :)", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 51700, "question": "&gt; As described, it appears they are using the ANN to reduce the pixel domain space to a reasonable vector of inputs for presentation to the Q-learning agent, and the agent uses that information to map to joystick movements and button pressing.\n\nThank you.\n\nHow is Q-learning distinct from any other learning algorithm that uses a fitness function?", "aSentId": 51705, "answer": "So... Can I use q-learning to make an awesome chatbot?", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 51706, "question": "So... Can I use q-learning to make an awesome chatbot?", "aSentId": 51707, "answer": "You'd just need a fitness function, which could be a human rating how good the conversation was or when things took too weird a turn", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 51706, "question": "So... Can I use q-learning to make an awesome chatbot?", "aSentId": 51709, "answer": "You still need a fitness function. It could be \"satisfaction of the user\" or something. No idea if Q-learning could be applied to this though... I've also never seen ANNs applied to any kind of grammar.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 51710, "question": "You still need a fitness function. It could be \"satisfaction of the user\" or something. No idea if Q-learning could be applied to this though... I've also never seen ANNs applied to any kind of grammar.", "aSentId": 51711, "answer": "How is the fitness condition met at first? Does the computer simply try an arbitrarily long list of solutions until one of more meet the fitness condition, and iterate there?\n\nOr do we have to give them a base case from which they can refine the process?", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 51712, "question": "How is the fitness condition met at first? Does the computer simply try an arbitrarily long list of solutions until one of more meet the fitness condition, and iterate there?\n\nOr do we have to give them a base case from which they can refine the process?", "aSentId": 51713, "answer": "Ideally the fitness function is continuous, so you can start with a random solution and then refine it to improve its performance.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 51698, "question": "This is the same area I worked on as a graduate student.\n\nI have always wanted to go back and extend Q-learning into a multi-layer processing system.  They appear to have leveraged an ANN (perhaps relying heavily on LeCun's work) rather than layering the Q-learning systems.  I was going to take a different track, and use binary scatter coding (err ... my memory fails, it was a convolution-based system for storing records) for system memory.\n\nQ-learning is an ideal replacement for other Markov systems in this kind of setting, because it can be trained quickly without an explicit training set (it can self-reinforce).\n\nWhen I was in school, we showed that a simple Q-learning agent could learn to recognize visual features (edge detection) without an explicit training using feedback loops alone.\n\nEDIT:\nAs described, it appears they are using the ANN to reduce the pixel domain space to a reasonable vector of inputs for presentation to the Q-learning agent, and the agent uses that information to map to joystick movements and button pressing.", "aSentId": 51715, "answer": "As a current graduate student studying computer vision with convolutional neural networks, thanks for this. It seems to have a lot of overlap with what I'm doing for general object detection and is doing more than just object location regression.  I've always thought some algorithm using reinforcement learning would be the technique that wins out in the end.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 51698, "question": "This is the same area I worked on as a graduate student.\n\nI have always wanted to go back and extend Q-learning into a multi-layer processing system.  They appear to have leveraged an ANN (perhaps relying heavily on LeCun's work) rather than layering the Q-learning systems.  I was going to take a different track, and use binary scatter coding (err ... my memory fails, it was a convolution-based system for storing records) for system memory.\n\nQ-learning is an ideal replacement for other Markov systems in this kind of setting, because it can be trained quickly without an explicit training set (it can self-reinforce).\n\nWhen I was in school, we showed that a simple Q-learning agent could learn to recognize visual features (edge detection) without an explicit training using feedback loops alone.\n\nEDIT:\nAs described, it appears they are using the ANN to reduce the pixel domain space to a reasonable vector of inputs for presentation to the Q-learning agent, and the agent uses that information to map to joystick movements and button pressing.", "aSentId": 51717, "answer": "What do you do now?", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 51718, "question": "What do you do now?", "aSentId": 51719, "answer": "I do software consulting (for MetzOhanian).  I do some AI-type research for an instrumentation company, but mostly I do what everyone else does: I write web applications.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 51720, "question": "I do software consulting (for MetzOhanian).  I do some AI-type research for an instrumentation company, but mostly I do what everyone else does: I write web applications.", "aSentId": 51721, "answer": "&gt; mostly I do what everyone else does: I write web applications\n\nHuzzah!", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 51723, "question": "I took 2 semesters of undergrad AI in the early 00's and recognize nearly none of the terms you're referencing. I feel extremely ignorant. \n\nThanks for your outline. I now have a lot of new learning to do! ", "aSentId": 51724, "answer": "If it's any consolation, many of the advances in this area came about after papers that were released in the middle of last decade.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 51727, "question": "Your comment deserves more attention, thanks for the great information", "aSentId": 51728, "answer": "You only waited 15 minutes before deciding that the comment wasn't getting enough attention?", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 51696, "question": "Google's Atari-Playing Algorithm Could Be The Future Of AI: \"It's not even built to play video games. Just to learn from its mistakes.\"", "aSentId": 51730, "answer": "The image under the header \"Inside DQN's Brain\" has the most obnoxious caption ever: \"This image highlights the neuroscience behind the Deep Q-Network (DQN) agent, which is rendered in a video-hologram style and exerts mastery over its data-rich external environment.\"", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 51731, "question": "The image under the header \"Inside DQN's Brain\" has the most obnoxious caption ever: \"This image highlights the neuroscience behind the Deep Q-Network (DQN) agent, which is rendered in a video-hologram style and exerts mastery over its data-rich external environment.\"", "aSentId": 51732, "answer": "That graphic looks like it's right out of an Onion article.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 51696, "question": "Google's Atari-Playing Algorithm Could Be The Future Of AI: \"It's not even built to play video games. Just to learn from its mistakes.\"", "aSentId": 51734, "answer": "At the age of 10 or 11 I played Space Invaders on the Atari so much that I went around twice on the score in one sitting... but this was easy because if you depressed the reset button down and kept it down before turning the game on, you ended up being able to fire two shots at once.\n\n", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 51735, "question": "At the age of 10 or 11 I played Space Invaders on the Atari so much that I went around twice on the score in one sitting... but this was easy because if you depressed the reset button down and kept it down before turning the game on, you ended up being able to fire two shots at once.\n\n", "aSentId": 51736, "answer": "&gt; if you depressed the reset button down and kept it down before turning the game on, you ended up being able to fire two shots at once.\n\nWell dammit. ", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 51738, "question": "These AI will dominate the dystopian Atari filled world of the future.", "aSentId": 51739, "answer": "What would a utopian world of the future be filled with? ColecoVision?", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 51740, "question": "What would a utopian world of the future be filled with? ColecoVision?", "aSentId": 51741, "answer": "Nope, any 80s era gaming system is fundamentally dystopian because that was the common currency of science fiction at the time as it historically represented a period in which the tail-end of the cold war was culminating in maximum threat of offensive nuclear war.  The ascendency of the CIA security state after a flirtation with its dismantling in the Kennedy era was cemented with the elections of Reagan and Thatcher. There is no utopian future console gaming system from the 80s. ", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 51743, "question": "Greetings professor falken.", "aSentId": 51744, "answer": "My instructor was Mr. Langley, and he taught me to sing a song. If you'd like to hear it I can sing it for you.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 51743, "question": "Greetings professor falken.", "aSentId": 51746, "answer": "Blah blah Skynet hurrdurr", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 51748, "question": "\"at no point does DQN actually 'understand' what's going on in the game in the way a human player does.\"\n\nWell that's a hell of a strong assertion. Chinese room?", "aSentId": 51749, "answer": "Yeah, that's what I wanted to write. Can you slice someone brain open and prove they understand how to play Tetris by looking at it?", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 51748, "question": "\"at no point does DQN actually 'understand' what's going on in the game in the way a human player does.\"\n\nWell that's a hell of a strong assertion. Chinese room?", "aSentId": 51751, "answer": "It can only understand what we programmed it to think the reward is. We told it high score = reward. However on one game it found that to get the high score you could just sit at one screen and kill a certain thing over and over. So it gets stuck there doing that, never beating the game thus making its score irrelevant. \n\nTrue learning behavior would include the ability to know how to set its own goals and rewards instead of inherently relying on a pre programmed set of rules. ", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 51752, "question": "It can only understand what we programmed it to think the reward is. We told it high score = reward. However on one game it found that to get the high score you could just sit at one screen and kill a certain thing over and over. So it gets stuck there doing that, never beating the game thus making its score irrelevant. \n\nTrue learning behavior would include the ability to know how to set its own goals and rewards instead of inherently relying on a pre programmed set of rules. ", "aSentId": 51753, "answer": "What's important is that, at a fundamental level, this seems to be how brains learn skills. They just have a much greater complexity and interdependency. This is maybe equivalent to isolating  small part of our brain, and analysing its function.\n\nIf and when we can scale this up, we can expect a lot of computer learning PTO Lem's to be solved, and maybe one day, human level intelligence.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 51752, "question": "It can only understand what we programmed it to think the reward is. We told it high score = reward. However on one game it found that to get the high score you could just sit at one screen and kill a certain thing over and over. So it gets stuck there doing that, never beating the game thus making its score irrelevant. \n\nTrue learning behavior would include the ability to know how to set its own goals and rewards instead of inherently relying on a pre programmed set of rules. ", "aSentId": 51755, "answer": "That's exactly what a drug addict does... heroine gives the brain the chemical signal: \"good job\" and then they do the same thing over and over... \n\nSo would you argue that humans are incapable of 'true learning'?", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 51748, "question": "\"at no point does DQN actually 'understand' what's going on in the game in the way a human player does.\"\n\nWell that's a hell of a strong assertion. Chinese room?", "aSentId": 51757, "answer": "You say that as if there is some fundamental error with the Chinese room argument. You have a counter example? ", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 51758, "question": "You say that as if there is some fundamental error with the Chinese room argument. You have a counter example? ", "aSentId": 51759, "answer": "My objection is, I don't see how you can tell the difference between this AI understanding Atari games the way a human does, and it being a generic learning system. It seems to me like either way, the guy in the room is going to give you the same responses, and that's the only way you can judge whether they know Chinese or not. The concept of \"understanding\" Chinese, or Atari, seems pretty ill-defined to me.\n\nBut mostly I was surprised that the article said that so matter-of-factly, when as far as I'm aware, there's still a lot of debate over whether the Chinese room argument is right or not.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 51760, "question": "My objection is, I don't see how you can tell the difference between this AI understanding Atari games the way a human does, and it being a generic learning system. It seems to me like either way, the guy in the room is going to give you the same responses, and that's the only way you can judge whether they know Chinese or not. The concept of \"understanding\" Chinese, or Atari, seems pretty ill-defined to me.\n\nBut mostly I was surprised that the article said that so matter-of-factly, when as far as I'm aware, there's still a lot of debate over whether the Chinese room argument is right or not.", "aSentId": 51761, "answer": "Let me put that in a slightly different way and we might see where the issue lies: \n\nThere's still a lot of debate over whether the Chinese room argument is wrong or not.\n\nSee the difference? This is about rhetoric and emotional impact. You do understand why that is relevant, right? ", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 51758, "question": "You say that as if there is some fundamental error with the Chinese room argument. You have a counter example? ", "aSentId": 51763, "answer": "No, he says that as if the original article contains an unprovable assertion.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 51764, "question": "No, he says that as if the original article contains an unprovable assertion.", "aSentId": 51765, "answer": "Now slow down here. People are tossing around big conjectures using one word sentences. So what you are suggesting here is that you are of the mind that the \"Chinese room\" metaphor that is used to criticize AI is problematic because it leads to unproveable assertions? Or are you talking about something else? Let's be clear what is being discussed. ", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 51766, "question": "Now slow down here. People are tossing around big conjectures using one word sentences. So what you are suggesting here is that you are of the mind that the \"Chinese room\" metaphor that is used to criticize AI is problematic because it leads to unproveable assertions? Or are you talking about something else? Let's be clear what is being discussed. ", "aSentId": 51767, "answer": "You're reading something completely different to everybody else here. Nobody is criticising the Chinese Room argument.\n\nThe Chinese Room argument shows that we can't easily tell the difference between someone understanding something and merely appearing to understand something. /u/randrews cites the article as saying \"at no point does DQN actually 'understand'\" - but the Chinese Room argument shows that, for all we know, maybe it *does* understand. We simply don't know. So the argument shows that the assertion in the original article is too strong.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 51768, "question": "You're reading something completely different to everybody else here. Nobody is criticising the Chinese Room argument.\n\nThe Chinese Room argument shows that we can't easily tell the difference between someone understanding something and merely appearing to understand something. /u/randrews cites the article as saying \"at no point does DQN actually 'understand'\" - but the Chinese Room argument shows that, for all we know, maybe it *does* understand. We simply don't know. So the argument shows that the assertion in the original article is too strong.", "aSentId": 51769, "answer": "You're assuming what I'm reading and you're assuming what \"everybody else here\" thinks which is clearly a mistake when we see below that many people here have not even heard of the Chinese Box metaphor of AI. All I'm saying is we should stop making so many assumptions and speaking so concisely and instead elaborate on what precisely we are trying to say instead of assuming shorthand will solve the problem as long as everybody bobs their heads. ", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 51758, "question": "You say that as if there is some fundamental error with the Chinese room argument. You have a counter example? ", "aSentId": 51771, "answer": "Dude, did you just ask for a \"counter example\" to support an interpretation of the Chinese Room argument? *What?*", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 51772, "question": "Dude, did you just ask for a \"counter example\" to support an interpretation of the Chinese Room argument? *What?*", "aSentId": 51773, "answer": "As you can see, the orignal posting was written in an extremely casual manner in which there was no context to determine what /u/randrews was asserting with regard to the Chinese room problem with AI. He had simply written a one word sentence. \"Chinese room?\"\n\nSo I wasn't clear what point he was making? The counter example request was merely an effort to get him to be more specific. I wasn't really clear what point he was making since he gave no context. ", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 51775, "question": "One of the trouble of AIs built this way is that they rely on *humans* to tell them what is, or isn't, a positive result.\n\nIn terms of a Atari video game, this answer is easy: losing = bad. But when applied to real life, well... things get more complicated.", "aSentId": 51776, "answer": "We humans have parents for that. So, to grow a good AI I guess we need at the first generation a human to teach. \n\nTo make even more fun get two parents for the AI and let the AI at random decide who it hates and who it loves (following instructions or basically ignoring them )", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 51777, "question": "We humans have parents for that. So, to grow a good AI I guess we need at the first generation a human to teach. \n\nTo make even more fun get two parents for the AI and let the AI at random decide who it hates and who it loves (following instructions or basically ignoring them )", "aSentId": 51778, "answer": "It's not that simple. Humans and other animals perform many behaviors without being taught how or why to do them. And anyway, this level of artificial intelligence is still far too simplistic for a human to even be capable of teaching it something.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 51779, "question": "It's not that simple. Humans and other animals perform many behaviors without being taught how or why to do them. And anyway, this level of artificial intelligence is still far too simplistic for a human to even be capable of teaching it something.", "aSentId": 51780, "answer": "I know it is not that simple, if it would be, we would have already AI :)", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 51777, "question": "We humans have parents for that. So, to grow a good AI I guess we need at the first generation a human to teach. \n\nTo make even more fun get two parents for the AI and let the AI at random decide who it hates and who it loves (following instructions or basically ignoring them )", "aSentId": 51782, "answer": "The real issue for AIs is to analyse the environnement and make analogies. For example, the video games are full of analogies (this thing looks like a stick figure = let's assume it's a man =&gt; he can walk, jump. Because I have played other games, I suspect that it's a 2D scroller so I must press \"right\". No ground there =&gt; it's a hole and I can die like in every 2D platform game =&gt; I should avoid it. Etc.).  \n  \nIn the real life, you have to analyse the very complex and diverse environnement: is this a hole? are these steps? this pannel looks pretty much like a door. this one is an automatic door. this one is closed because there is a sign on it and a plant behind... The simplest things are very complex to analyse for a robot.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 51777, "question": "We humans have parents for that. So, to grow a good AI I guess we need at the first generation a human to teach. \n\nTo make even more fun get two parents for the AI and let the AI at random decide who it hates and who it loves (following instructions or basically ignoring them )", "aSentId": 51784, "answer": "Parents don't define every specific goal you have. You do.\n\nThey didn't tell me I wanted to get a degree in computer science, they said law. ", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 51775, "question": "One of the trouble of AIs built this way is that they rely on *humans* to tell them what is, or isn't, a positive result.\n\nIn terms of a Atari video game, this answer is easy: losing = bad. But when applied to real life, well... things get more complicated.", "aSentId": 51786, "answer": "In terms of artificial life, it's not a big problem. Biological life has no direct way of telling us what is a good or bad result, but natural selection filters out the lifeforms that tend to select bad results. Given enough time and the appropriate feedback loop, artificial life would work the same way. (Not that the intent here is necessarily to create artificial life. It's more about creating versatile learning machines.)", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 51775, "question": "One of the trouble of AIs built this way is that they rely on *humans* to tell them what is, or isn't, a positive result.\n\nIn terms of a Atari video game, this answer is easy: losing = bad. But when applied to real life, well... things get more complicated.", "aSentId": 51788, "answer": "There's no such thing as an objectively good or bad result. AI's copy what humans tell them, and humans copy biological and social factors that exist solely because they happen to be self-reinforcing.\n\nIn other words: AI's will *always* require instruction on what their goals are, and this is a logical necessity rather than a flaw in the way they were built.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 51789, "question": "There's no such thing as an objectively good or bad result. AI's copy what humans tell them, and humans copy biological and social factors that exist solely because they happen to be self-reinforcing.\n\nIn other words: AI's will *always* require instruction on what their goals are, and this is a logical necessity rather than a flaw in the way they were built.", "aSentId": 51790, "answer": "Yes, we would call: Killing a person with stones bad, while others... well you know... there is no \"universal\" truth...\n\nEdit: Just realised that this might be the reason we fear AIs, that they do what they were told \"once\" to do and not stopping without \"emotions\" \n\nIn other countries, people kill people on the open street for \"cheating\" looking wrong, whatsoever. An AI would basically the same. But probably in ways we can\u00b4t even imagine right now because they lack a lot of \"human\" parts and have way more either \"brain power\" or strength (in case of robots for example)...", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 51794, "question": "Seriously we are working with the Wright brothers of AI right now. What people think we are almost at is a mission to Mars. ", "aSentId": 51795, "answer": "My perception is we are still testing those flying machines that didnt flew.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 51797, "question": "It must have had some previous information about the game, such as for example what constitutes a failure state. Or what result is better then some other result.\n\nWithout such information \"becoming better\" is meaningless.", "aSentId": 51798, "answer": "That would be the final score. Video games are easy in that regard. The article even mentions that in games with a clear progression of score (breakout, etc), DQN does much better than on games that need to make higher-level decisions to get the best score. ", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 51799, "question": "That would be the final score. Video games are easy in that regard. The article even mentions that in games with a clear progression of score (breakout, etc), DQN does much better than on games that need to make higher-level decisions to get the best score. ", "aSentId": 51800, "answer": "Yeah. I'd love to see any AI beat the original Zelda for the NES without being specifically programmed for it.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 51801, "question": "Yeah. I'd love to see any AI beat the original Zelda for the NES without being specifically programmed for it.", "aSentId": 51802, "answer": "Would the computer have access to Nintendo Power to locate which bushes to slash and/or rocks to blow up to find the caves?", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 51801, "question": "Yeah. I'd love to see any AI beat the original Zelda for the NES without being specifically programmed for it.", "aSentId": 51804, "answer": "Interesting point!  It's one thing to get good at a simple game, another thing to have enough understanding to play a more complicated game.  ", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 51805, "question": "Interesting point!  It's one thing to get good at a simple game, another thing to have enough understanding to play a more complicated game.  ", "aSentId": 51806, "answer": "\"Final score\" in Zelda could be the number of unique rooms the AI enters, plus whatever other (finite, or else it would OCD on a goal) achievements are possible (e.g. get x item).", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 51807, "question": "\"Final score\" in Zelda could be the number of unique rooms the AI enters, plus whatever other (finite, or else it would OCD on a goal) achievements are possible (e.g. get x item).", "aSentId": 51808, "answer": "I don't quite remember zelda, but wouldn't it have to learn how to pick up coins and buy things with them?  I wonder if this sort of general purpose learning in the article is general purpose enough to learn something like that.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 51809, "question": "I don't quite remember zelda, but wouldn't it have to learn how to pick up coins and buy things with them?  I wonder if this sort of general purpose learning in the article is general purpose enough to learn something like that.", "aSentId": 51810, "answer": "I very seriously doubt it. Space Invaders is particularly nice because many actions have positive reward - you have somewhere to start. In Zelda, if the algorithm could learn to pick up enough coins and then go to a vendor, it would certainly need a better heuristic and an \"end game score\" is probably not enough.\n\nedit: The most important difference between Space Invaders and Zelda here is that nearly every action contributes to the score (fitness function) in Space Invaders, whereas in Zelda there are many smaller tasks that lead to an improved score unless you come up with a very complex fitness function (and at that point your fitness function is practically introducing prior knowledge).", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 51811, "question": "I very seriously doubt it. Space Invaders is particularly nice because many actions have positive reward - you have somewhere to start. In Zelda, if the algorithm could learn to pick up enough coins and then go to a vendor, it would certainly need a better heuristic and an \"end game score\" is probably not enough.\n\nedit: The most important difference between Space Invaders and Zelda here is that nearly every action contributes to the score (fitness function) in Space Invaders, whereas in Zelda there are many smaller tasks that lead to an improved score unless you come up with a very complex fitness function (and at that point your fitness function is practically introducing prior knowledge).", "aSentId": 51812, "answer": "Yea, I could see it deciding that giving the vendor gold was the main goal.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 51811, "question": "I very seriously doubt it. Space Invaders is particularly nice because many actions have positive reward - you have somewhere to start. In Zelda, if the algorithm could learn to pick up enough coins and then go to a vendor, it would certainly need a better heuristic and an \"end game score\" is probably not enough.\n\nedit: The most important difference between Space Invaders and Zelda here is that nearly every action contributes to the score (fitness function) in Space Invaders, whereas in Zelda there are many smaller tasks that lead to an improved score unless you come up with a very complex fitness function (and at that point your fitness function is practically introducing prior knowledge).", "aSentId": 51814, "answer": "Something tells me it would be easier to create an AI that can traverse the games source code and figure out how to get to the end state than it would be to make an AI that can just figure it out by playing the game.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 51815, "question": "Something tells me it would be easier to create an AI that can traverse the games source code and figure out how to get to the end state than it would be to make an AI that can just figure it out by playing the game.", "aSentId": 51816, "answer": "In the case with Zelda, we are actually encoding \"Prior Knowledge\" about the game into the fitness function if it is a measure of objects acquired, places explored, etc. The more \"scaffolding\" (stuff that helps the AI learn, like giving it rewards for accomplishing smaller goals so that it can eventually learn the bigger goal) we give the fitness function the more we are in essence giving the algorithm \"prior knowledge\". I don't know if AI researchers make a distinction here between prior knowledge and a more complex fitness function, but I don't know why you would.\n\nThat is, you're going to need to set up scaffolding into the fitness function either way, no matter what algorithm you use, unless you specifically utilize prior knowledge in some way (other than encoding it into the fitness function). What I really mean is that no general AI could win the entire game unless you give it a helping hand in what it means to perform better, at which point I wonder if you really have a \"general AI\" in a true sense, whatever the heck that would mean.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 51817, "question": "In the case with Zelda, we are actually encoding \"Prior Knowledge\" about the game into the fitness function if it is a measure of objects acquired, places explored, etc. The more \"scaffolding\" (stuff that helps the AI learn, like giving it rewards for accomplishing smaller goals so that it can eventually learn the bigger goal) we give the fitness function the more we are in essence giving the algorithm \"prior knowledge\". I don't know if AI researchers make a distinction here between prior knowledge and a more complex fitness function, but I don't know why you would.\n\nThat is, you're going to need to set up scaffolding into the fitness function either way, no matter what algorithm you use, unless you specifically utilize prior knowledge in some way (other than encoding it into the fitness function). What I really mean is that no general AI could win the entire game unless you give it a helping hand in what it means to perform better, at which point I wonder if you really have a \"general AI\" in a true sense, whatever the heck that would mean.", "aSentId": 51818, "answer": "To be fair, humans play Zelda with a lot of prior knowledge, just not necessarily knowledge of Zelda specifically. This sort of knowledge is things like:\n\n* What is a tree? A shrub?\n* What is a sword?\n* What is violence/combat/danger?\n* What are good and evil?\n* What is a princess? A damsel in distress?\n\nHumans have general intelligence because we have a huge amount of knowledge about the world around us and all the associations between concepts which we express through language. AIs so far don't have access to any of that.\n\nI mean sure, you could ask something like Watson what a sword is and it in all likelihood could regurgitate the Wikipedia definition at you. But is that really what it means to know what a sword is? Probably not. If you put Watson inside the game Zelda I doubt it would be able to identify the sword to you, let alone know how to use it correctly towards a long-term goal of saving the princess.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 51817, "question": "In the case with Zelda, we are actually encoding \"Prior Knowledge\" about the game into the fitness function if it is a measure of objects acquired, places explored, etc. The more \"scaffolding\" (stuff that helps the AI learn, like giving it rewards for accomplishing smaller goals so that it can eventually learn the bigger goal) we give the fitness function the more we are in essence giving the algorithm \"prior knowledge\". I don't know if AI researchers make a distinction here between prior knowledge and a more complex fitness function, but I don't know why you would.\n\nThat is, you're going to need to set up scaffolding into the fitness function either way, no matter what algorithm you use, unless you specifically utilize prior knowledge in some way (other than encoding it into the fitness function). What I really mean is that no general AI could win the entire game unless you give it a helping hand in what it means to perform better, at which point I wonder if you really have a \"general AI\" in a true sense, whatever the heck that would mean.", "aSentId": 51820, "answer": "In other words: Learning is not comprehension.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 51821, "question": "In other words: Learning is not comprehension.", "aSentId": 51822, "answer": "What is comprehension, though?", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 51823, "question": "What is comprehension, though?", "aSentId": 51824, "answer": "Hard to define. :)", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 51823, "question": "What is comprehension, though?", "aSentId": 51826, "answer": "potential for deduction of telos", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 51827, "question": "potential for deduction of telos", "aSentId": 51828, "answer": "How would you \"deduce\" telos? It seems subjective.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 51811, "question": "I very seriously doubt it. Space Invaders is particularly nice because many actions have positive reward - you have somewhere to start. In Zelda, if the algorithm could learn to pick up enough coins and then go to a vendor, it would certainly need a better heuristic and an \"end game score\" is probably not enough.\n\nedit: The most important difference between Space Invaders and Zelda here is that nearly every action contributes to the score (fitness function) in Space Invaders, whereas in Zelda there are many smaller tasks that lead to an improved score unless you come up with a very complex fitness function (and at that point your fitness function is practically introducing prior knowledge).", "aSentId": 51830, "answer": "Can it only have 1 goal? Collecting gold to buy an item seems like it could be solved with a simple loop that acts as either a sub-goal or requirements, or is that just an issue of prior knowledge? ", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 51831, "question": "Can it only have 1 goal? Collecting gold to buy an item seems like it could be solved with a simple loop that acts as either a sub-goal or requirements, or is that just an issue of prior knowledge? ", "aSentId": 51832, "answer": "When you add enough subgoals that are specific to the game, that's essentially prior knowledge encoded into your fitness function.\n\nYour method could work though and is employed by many AI fitness functions. The smoother and more continuous your fitness function is, the better it can direct the AI to learn the task.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 51834, "question": "I don't see why not.\n\nAll it would require is time, basically. As long as you could run it rather fast, it should be doable.", "aSentId": 51835, "answer": "You need to look up intractability before saying things like this :). It is often easy to come up with algorithms that will solve a problem, but they will take a trillion computers a trillion trillion years to complete.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 51836, "question": "You need to look up intractability before saying things like this :). It is often easy to come up with algorithms that will solve a problem, but they will take a trillion computers a trillion trillion years to complete.", "aSentId": 51837, "answer": "Like I said, you would probably have to run it *rather* fast.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 51809, "question": "I don't quite remember zelda, but wouldn't it have to learn how to pick up coins and buy things with them?  I wonder if this sort of general purpose learning in the article is general purpose enough to learn something like that.", "aSentId": 51839, "answer": "Wouldn't the \"learning\" figure that out? If picking up coins and buying things would result in it being able to reach more unique rooms, then it would weigh that as more successful than not picking up coins and buying things, wouldn't it?", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 51840, "question": "Wouldn't the \"learning\" figure that out? If picking up coins and buying things would result in it being able to reach more unique rooms, then it would weigh that as more successful than not picking up coins and buying things, wouldn't it?", "aSentId": 51841, "answer": "Would it?  I don't know.  What does \"learning\" mean?  What sort of model does the program have of it's word?  On Earth a lot of clever creatures have evolved over billions of years and virtually infinite computational resources, but none of them other than humans could play Zelda in any meaningful way.  I don't see any reason to believe we could program a general intelligence that could learn to play a moderately complex game.   ", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 51809, "question": "I don't quite remember zelda, but wouldn't it have to learn how to pick up coins and buy things with them?  I wonder if this sort of general purpose learning in the article is general purpose enough to learn something like that.", "aSentId": 51843, "answer": "This is possible for a reinforcement algorithm to learn, it would just take a (very) long time for it to randomly attempt it enough times to realize it was an optimal strategy.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 51844, "question": "This is possible for a reinforcement algorithm to learn, it would just take a (very) long time for it to randomly attempt it enough times to realize it was an optimal strategy.", "aSentId": 51845, "answer": "Are you sure?  I have a pet bird that's pretty smart but I don't think he could ever learn to play Zelda.  His brain just can't understand the hierarchy of patterns.  Is the AI in this article just a gimmick or some kind of general intelligence smarter than my parakeet? ", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 51846, "question": "Are you sure?  I have a pet bird that's pretty smart but I don't think he could ever learn to play Zelda.  His brain just can't understand the hierarchy of patterns.  Is the AI in this article just a gimmick or some kind of general intelligence smarter than my parakeet? ", "aSentId": 51847, "answer": "What's your parakeet's high score in Space Invaders? Birds are designed to bird, this AI is designed to get high scores.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 51846, "question": "Are you sure?  I have a pet bird that's pretty smart but I don't think he could ever learn to play Zelda.  His brain just can't understand the hierarchy of patterns.  Is the AI in this article just a gimmick or some kind of general intelligence smarter than my parakeet? ", "aSentId": 51849, "answer": "The algorithm being used is designed to optimize for expected future value based on input possibilities, current output state, and prior experience with this state and past choices.  If such an algorithm was playing Zelda, and at some point it happened to pick up coins, buy something, and make tangible progress with that something, it could then figure out that its future long term value would be higher by picking up coins (rather than not), going to the shop (rather  than elsewhere), and buying the thing (rather than the other thing or nothing) - all individually.  The more complicated such a strategy / sequence gets, the less well suited this algorithm is in finding it, but it is theoretically possible.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 51807, "question": "\"Final score\" in Zelda could be the number of unique rooms the AI enters, plus whatever other (finite, or else it would OCD on a goal) achievements are possible (e.g. get x item).", "aSentId": 51851, "answer": "This is the problem with many real world machine learning/AI applications: finding a good fitness function is a hard problem by itself.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 51807, "question": "\"Final score\" in Zelda could be the number of unique rooms the AI enters, plus whatever other (finite, or else it would OCD on a goal) achievements are possible (e.g. get x item).", "aSentId": 51853, "answer": "I'd imagine it'd also include stuff like \"How to clear a room of Darknuts unscathed\", where it'd presumably learn how to sorta anticipate an enemy's or a group of enemies' moves.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 51801, "question": "Yeah. I'd love to see any AI beat the original Zelda for the NES without being specifically programmed for it.", "aSentId": 51855, "answer": "Now I want to play Zelda :(", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 51799, "question": "That would be the final score. Video games are easy in that regard. The article even mentions that in games with a clear progression of score (breakout, etc), DQN does much better than on games that need to make higher-level decisions to get the best score. ", "aSentId": 51858, "answer": "It's a significant part of their work to incorporate new temporally deep learning structures into their algorithms so that the AI can learn longer term strategies. It is current quite good at \"twitch\" behaviors, but once there is a need for longer term planning it doesn't have much success yet.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 51859, "question": "It's a significant part of their work to incorporate new temporally deep learning structures into their algorithms so that the AI can learn longer term strategies. It is current quite good at \"twitch\" behaviors, but once there is a need for longer term planning it doesn't have much success yet.", "aSentId": 51860, "answer": "So no decent (non-cheating) AI for strategy games just yet.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 51797, "question": "It must have had some previous information about the game, such as for example what constitutes a failure state. Or what result is better then some other result.\n\nWithout such information \"becoming better\" is meaningless.", "aSentId": 51862, "answer": "So I take it you did not read the article?", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 51797, "question": "It must have had some previous information about the game, such as for example what constitutes a failure state. Or what result is better then some other result.\n\nWithout such information \"becoming better\" is meaningless.", "aSentId": 51864, "answer": "You can only come to this conclusion if you didn't read the article, yet your post is the current top.  Reddit is weird.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 51865, "question": "You can only come to this conclusion if you didn't read the article, yet your post is the current top.  Reddit is weird.", "aSentId": 51866, "answer": "By weird if you mean this subreddit sucks then you're absolutely correct ", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 51869, "question": "There's a lot of grammar mistakes in this article.\n\nAnyway, how is Q different from \"Fitness Function\"? How does DQN train its ANN(s)? The article is written for such a general audience that all I learned is that DQN is a learning algorithm that employs ANNs and uses the final score as its fitness function.", "aSentId": 51870, "answer": "The Q Function takes the current state of the game, and returns the action which will give the highest long term score based on the Q-Network's current knowledge. The traditional way of doing this is with a simple lookup table, but here the neural network is taking the table's place, as the state space is massive. Also they are doing the convolution to simplify the state space before it actually reaches the Q-Learning part of the neural network. \n\nAnd I believe they just used backprop for the actual training.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 51871, "question": "The Q Function takes the current state of the game, and returns the action which will give the highest long term score based on the Q-Network's current knowledge. The traditional way of doing this is with a simple lookup table, but here the neural network is taking the table's place, as the state space is massive. Also they are doing the convolution to simplify the state space before it actually reaches the Q-Learning part of the neural network. \n\nAnd I believe they just used backprop for the actual training.", "aSentId": 51872, "answer": "I'm still a bit confused about the purpose of the Q-function but I think I understand their method better now, thank you!", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 51873, "question": "I'm still a bit confused about the purpose of the Q-function but I think I understand their method better now, thank you!", "aSentId": 51874, "answer": "Put simply, the Q-Function is predicting which action will give the best long term reward, based on the current state. It refines this prediction by playing the game more and more, and learning which actions lead to which states, and which states contain the best rewards.\n\nTo give a concrete example, the Q-Function basically does this.\n\n&gt;I am at postion X,Y. \n&gt;Action 1 gives 10 reward. Action 2 gives 100 reward. Action 3 gives -100 reward. Therefore I choose Action 2.\n\nThat's the basics, but to be even more correct, the phrasing would be more like \"Action 2 will probably lead me to states which might give me 100 reward\". This is because there's generally some uncertainty, and Q-Learning can account for non-deterministic systems. Also this accounts for a temporal gap between the action and the reward, for example in space invaders the laser beam takes some time to travel before it actually hits the enemy.\n\n", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 51875, "question": "Put simply, the Q-Function is predicting which action will give the best long term reward, based on the current state. It refines this prediction by playing the game more and more, and learning which actions lead to which states, and which states contain the best rewards.\n\nTo give a concrete example, the Q-Function basically does this.\n\n&gt;I am at postion X,Y. \n&gt;Action 1 gives 10 reward. Action 2 gives 100 reward. Action 3 gives -100 reward. Therefore I choose Action 2.\n\nThat's the basics, but to be even more correct, the phrasing would be more like \"Action 2 will probably lead me to states which might give me 100 reward\". This is because there's generally some uncertainty, and Q-Learning can account for non-deterministic systems. Also this accounts for a temporal gap between the action and the reward, for example in space invaders the laser beam takes some time to travel before it actually hits the enemy.\n\n", "aSentId": 51876, "answer": "Is the Q-function basically a (changing) fitness function for a given action+current state?\n\nDoes the Q-function imply any particular model (ANN for example), or is it describing something more general? In the case of the article, the Q-function is implemented as an ANN, right? If so, how do you train the ANN??", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 51878, "question": "What makes it \"general purpose\" when it has a goal of achieving a specific positive-reinforcement goal? In the case of Atari games, that's achieving a high score. What's intelligent about brute forcing the optimal solution?\n\nIf you give it a goal of achieving happiness, what happens? Even with happiness being defined, is it still general-purpose? With a number of mental illnesses, things that make people unhappy are still done, yet these people survive and are intelligent nonetheless.", "aSentId": 51879, "answer": "General purpose here means that you don't have to tell it the rules of the game.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 51880, "question": "General purpose here means that you don't have to tell it the rules of the game.", "aSentId": 51881, "answer": "Presumably they had to tell it some \"rules,\" like how to move the joystick?", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 51882, "question": "Presumably they had to tell it some \"rules,\" like how to move the joystick?", "aSentId": 51883, "answer": "You have to think of these things in terms of inputs and outputs, changes in input relative to changes in output and state change progression.  So in these terms, they did not tell it the rules like \"pressing right moves your paddle\", they simply told it \"you are allowed to press right as a possible input\" and the algorithm learned through its visual output that it causes the thing we call a \"paddle\" to move", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 51884, "question": "You have to think of these things in terms of inputs and outputs, changes in input relative to changes in output and state change progression.  So in these terms, they did not tell it the rules like \"pressing right moves your paddle\", they simply told it \"you are allowed to press right as a possible input\" and the algorithm learned through its visual output that it causes the thing we call a \"paddle\" to move", "aSentId": 51885, "answer": "Yes, I understand that. I'm trying to discern where the line is between only flipping on a power switch and it figuring out how to accomplish whatever it wants to, and an \"environment\" being created for it before it even started.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 51886, "question": "Yes, I understand that. I'm trying to discern where the line is between only flipping on a power switch and it figuring out how to accomplish whatever it wants to, and an \"environment\" being created for it before it even started.", "aSentId": 51887, "answer": "They just defined the inputs and outputs and that the \"Score\" is its value.  Inputs being any way you can interact with the Atari, output being the visual field. The algorithm optimized which inputs in which output states provide the highest long term value.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 51878, "question": "What makes it \"general purpose\" when it has a goal of achieving a specific positive-reinforcement goal? In the case of Atari games, that's achieving a high score. What's intelligent about brute forcing the optimal solution?\n\nIf you give it a goal of achieving happiness, what happens? Even with happiness being defined, is it still general-purpose? With a number of mental illnesses, things that make people unhappy are still done, yet these people survive and are intelligent nonetheless.", "aSentId": 51889, "answer": "&gt; What's intelligent about brute forcing the optimal solution?\n\nWhat's intelligent about infants falling over all the time until they finally learn to walk?", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 51878, "question": "What makes it \"general purpose\" when it has a goal of achieving a specific positive-reinforcement goal? In the case of Atari games, that's achieving a high score. What's intelligent about brute forcing the optimal solution?\n\nIf you give it a goal of achieving happiness, what happens? Even with happiness being defined, is it still general-purpose? With a number of mental illnesses, things that make people unhappy are still done, yet these people survive and are intelligent nonetheless.", "aSentId": 51891, "answer": "The AI itself is \"general purpose\". In this instance, they told it \"high score is good\" and had it play Atari games. What, in your opinion, would constitute \"general purpose\"? Obviously they aren't saying it's conscious. The point, and the reason it's called \"general purpose\", is that they could give it any objective and it would presumably learn how to achieve that objective.\n\nIt does more than play Atari games. The goal is for it to be able to do anything you tell it to, but you still have to tell it to do something because it's AI (probably more accurately, machine learning), and not consciousness.\n\nAnd it isn't \"brute forcing\", it's taking what it has learned and applying that to future attempts and future actions within a single attempt.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 51893, "question": "It's general purpose in the sense that this approach can basically handle any problem which can be decomposed into states, actions, and rewards. So this includes games, but it can probably be applied to a lot of other stuff too. I remember reading a paper a while back where some guys used Q-Learning to do day trading, and I think it was actually profitable.", "aSentId": 51894, "answer": "Do you have a link to that paper, and do you recall if it was profitable by chance? For one, if it was repeatably profitable, not only the software, but the technique it found, would be in wide use today. Two, the market effectively can't be timed, and any patterns the software found would be purely by chance.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 51896, "question": "&gt;Talk is cheap. Show me the code.\n\n\u2014Linus Torvalds", "aSentId": 51897, "answer": "black sheep wall", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 51899, "question": "I wonder how it would handle something like the Nintendo works championship cart where the game changes throughout although the final score is cumulative.", "aSentId": 51900, "answer": "Not that good I guess. The network has no memory and would be forced to discern games just by the pixels over and over again. It's not impossible, but I expect that it would need many more neurons (raw computation power) and/or recurrent connections (memory) to be somewhat successful.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 51906, "question": "Lots of articles about this one, claiming it has \"no knowledge\".\n\nThey give it the score at each timestep, and told it that it has to make the score higher, only knowing the score and the pixels.  That's its objective.\n\nThat's a type of knowledge.  Cool, but misleading language in all the articles.\n", "aSentId": 51907, "answer": "It's not the best term, but not misleading. \"No knowledge\" means that it starts with no idea of how to play the game. Also, I suspect the score input isn't used as a objective, it's just a meassure of progress so the NN can use that to compensate for not having internal memory. E.g. in Space Invaders, it's easier to use the score than to actually count the remaining invaders to decide what to do next.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 51909, "question": "Neural networks have been doing this for years. Nothing new here but clickbait title.", "aSentId": 51910, "answer": "I don't agree that this is necessarily the same as prior work but I would concede that it is impossible to tell from the article which appears to be written for an audience with zero knowledge of AI.\n\nHow is Q different from \"Fitness Function\"? How does DQN train its ANN(s)?", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 51911, "question": "I don't agree that this is necessarily the same as prior work but I would concede that it is impossible to tell from the article which appears to be written for an audience with zero knowledge of AI.\n\nHow is Q different from \"Fitness Function\"? How does DQN train its ANN(s)?", "aSentId": 51912, "answer": "Q-Learning only needs to know whether a given state-action pair results in some kind of reward. You could call the function to decide the reward a \"fitness function\", but \"evaluation function\" is a better fit. It hasn't to be particulary good. For some games it's enough to have a function that can only tell if the game is won, lost or still going on. A problem that Q-Learning solves is \"what actions of the many I did were actually good?\", i.e. temporal credit assignment.\n\n&gt; How does DQN train its ANN(s)?\n\nStart with a randomly initialized ANN. Play the game for some time, observe rewards and save everything. For every collected state-action pair, calculate the new target outputs using the Q-Learning rule and update the NN with backpropagation. Repeat.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 51909, "question": "Neural networks have been doing this for years. Nothing new here but clickbait title.", "aSentId": 51914, "answer": "Link?", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 51909, "question": "Neural networks have been doing this for years. Nothing new here but clickbait title.", "aSentId": 51916, "answer": "Those who downvoted you probably bought into the hype of deep learning.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 51917, "question": "Those who downvoted you probably bought into the hype of deep learning.", "aSentId": 51918, "answer": "Isn't \"deep learning\" just machine learning with neural networks with lots of hidden layers?", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 51920, "question": "I don't get why this company was worth paying 400 million for. AIs that play video games aren't anything new, and this one doesn't appear leaps and bounds better than what was out there already.\n\nEDIT: Yeah, fuck me, who as someone working in the field wonders why they paid too much for something. Turns out it was the talent, not the product.", "aSentId": 51921, "answer": "It was a talent acquire, they wanted to get some of the best deep learning researchers in the world to come to google", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 51920, "question": "I don't get why this company was worth paying 400 million for. AIs that play video games aren't anything new, and this one doesn't appear leaps and bounds better than what was out there already.\n\nEDIT: Yeah, fuck me, who as someone working in the field wonders why they paid too much for something. Turns out it was the talent, not the product.", "aSentId": 51923, "answer": "400m is just incentive to tackle a hard problem. How much each one of them can cash out still depends on their skills and time spent. This kind of work is pretty much mission to the Mars.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 51924, "question": "400m is just incentive to tackle a hard problem. How much each one of them can cash out still depends on their skills and time spent. This kind of work is pretty much mission to the Mars.", "aSentId": 51925, "answer": "Your reply does not make any sense, and none of the many articles I have read about the company supports your comment in any way. Source please.\n", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 51920, "question": "I don't get why this company was worth paying 400 million for. AIs that play video games aren't anything new, and this one doesn't appear leaps and bounds better than what was out there already.\n\nEDIT: Yeah, fuck me, who as someone working in the field wonders why they paid too much for something. Turns out it was the talent, not the product.", "aSentId": 51927, "answer": "It's all about the hype", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 51930, "question": "Replacing doctors...  Soon. ", "aSentId": 51931, "answer": "Lol ... No.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 51933, "question": "Montezuma's Revenge is pretty tough, but I revisited the Commodore 64 version recently and kicked some serious ass. I guess all those years of training have paid off. Gotta admit I'm pretty damned good at Impossible Mission and Raid Over Moscow as well, plus I one-lifed NES Ninja Gaiden on the original console. ", "aSentId": 51934, "answer": "TELL me about it; I think it was the ice in the Mojito that was my undoing...", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 51938, "question": "I'm not surprised. When Google got Ray Kurzweil as chief of engineering, it was clear that they would take the lead in AI. ", "aSentId": 51939, "answer": "please note Kurzweil is not a co-author....project involves folk from the London-based DeepMind subsidiary. Buying them and Boston Dynamics were the key moves...", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 51940, "question": "please note Kurzweil is not a co-author....project involves folk from the London-based DeepMind subsidiary. Buying them and Boston Dynamics were the key moves...", "aSentId": 51941, "answer": "Interesting.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 51944, "question": "Nice. All you have to do now is to merge learning, pattern recognition and signal outputting into a single continuous process, and then replace the fitness function with a general \"maximizes the chances of survival\" function and hey presto, human-like AI.\n", "aSentId": 51945, "answer": "Even though it sounds that simple (most machiene learning does) it isn't - try to do something similar in small!\n\nMake a self-learning pong-ai, that knows nothing at the beginning, and can only press up and down.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 51948, "question": "What is the likelihood our own minds operate on much more than some binary code and an algorithm?  Why not call such systems AI?  ", "aSentId": 51949, "answer": "Our minds definitely do not operate on principles analogous to those of digital computers.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 51953, "question": "Apache Storm: Scaling &amp; Pushing the Performance Envelope", "aSentId": 51954, "answer": "What are the data ingestion rates you could achieve with single cluster?", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 51956, "question": "The Sorrows of Young Developer", "aSentId": 51957, "answer": "Hmm, I see a lot of these stories about young inexperienced coder (fresh out of university) that sucks and have to learn from experienced developers. Is this really a common problem or is it just experienced developers that describe this because they want to validate themselves? As a relatively young developer I have seen experienced developers that are not open to solve problems in a different way because they have developed a closed mindset for how things should be developed.\n\n\nA common theme in these stories is that code should always have tests attached to it. I agree that test-suites are a good thing in todays software but it is not the holy grail of software development. There are bad things about test-suites which these experienced developers do not seem to recognise because \u201ctests are good, am I right?\u201d attitude.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 51958, "question": "Hmm, I see a lot of these stories about young inexperienced coder (fresh out of university) that sucks and have to learn from experienced developers. Is this really a common problem or is it just experienced developers that describe this because they want to validate themselves? As a relatively young developer I have seen experienced developers that are not open to solve problems in a different way because they have developed a closed mindset for how things should be developed.\n\n\nA common theme in these stories is that code should always have tests attached to it. I agree that test-suites are a good thing in todays software but it is not the holy grail of software development. There are bad things about test-suites which these experienced developers do not seem to recognise because \u201ctests are good, am I right?\u201d attitude.", "aSentId": 51959, "answer": "&gt; Is this really a common problem\n\nYes\n\n&gt; or is it just experienced developers that describe this because they want to validate themselves?\n\nProbably that, too.\n\n&gt; As a relatively young developer I have seen experienced developers that are not open to solve problems in a different way because they have developed a closed mindset for how things should be developed.\n\nWell, that's hard to respond to in general because every case is different. Yes, it is very possible that *non-expert* experienced developers (as /u/TwistedPerson has said) are just closed minded, but expert developers may resist you for reasons that may seem closed minded to you, but are truly the voice of experience. There are some things young developers think are \"new ways of solving problems\", but are not new at all; they have simply been rejected by the industry (for various reasons, and of course, the industry changes too, only slowly). One example is excessive use of the functional programming style(s) (and I'm not saying they're bad -- they're not, but they're far from being a panacea, either). When I was in university, over 15 years ago, we learned functional programming in Scheme, and Haskell was the next big thing just about to take the software world by storm. When I got my first serious job out of college, I was asked to write a program to simulate external system's protocols. You know what I did? I wrote a generic simulator, scripted in Scheme, along with a compiler that translated C header files into my own Scheme DSLs. It was perfect. But quickly people stopped using it, and when I left it was completely forgotten, because the concepts it used were completely foreign to the people working on that project (who were all brilliant in their own respective engineering fields).\n\nIt's very important to remember that experienced developers have actually *seen* several technology cycles, and *know* that \"new ways to solve problems\" usually over-promise and under-deliver. They are not categorically opposed to them, but simply more cautious, as they realize that the burden of proof is on those new techniques, and until they are sufficiently proven (and \"sufficiently\" differs by the nature of the project) they probably introduce much more risk than actual benefit. They also know that a good program is not just a result of elegant code, but also the ability to monitor and profile it as it runs, as well as many other concerns that go beyond code. Young developers think in *code*; experienced ones see *running programs*.\n\nBut experienced developers know something else, too. That young developers are often less excited by interesting algorithms and more by new programming language, so we sometimes let the young 'uns play with new toys just to help with recruiting, and hope they don't do too much damage... :)\n\nNow, I realize what I wrote hear may come across as overly cynical. Personally, I don't consider all new techniques and languages the same. There are ones I really like and have much faith in, and ones I truly despise. My intention here was just to point out that there are certain perspectives that you can only gain with experience.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 51958, "question": "Hmm, I see a lot of these stories about young inexperienced coder (fresh out of university) that sucks and have to learn from experienced developers. Is this really a common problem or is it just experienced developers that describe this because they want to validate themselves? As a relatively young developer I have seen experienced developers that are not open to solve problems in a different way because they have developed a closed mindset for how things should be developed.\n\n\nA common theme in these stories is that code should always have tests attached to it. I agree that test-suites are a good thing in todays software but it is not the holy grail of software development. There are bad things about test-suites which these experienced developers do not seem to recognise because \u201ctests are good, am I right?\u201d attitude.", "aSentId": 51961, "answer": "This is a tale after all, there are no shades of gray, only white and black :-)\n\nAnyway, the story isn't focused on tests, but on the entire combination of \"don't do premature optimization\", \"write tests\", \"follow demeter law\", \"single responsibility\", \"code readability\", and so on. IMHO they are all strictly-tied together and less useful when used alone.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 51956, "question": "The Sorrows of Young Developer", "aSentId": 51963, "answer": "Nicely done. I feel another one of the morals should be that people learn differently. There are some that learn by imitation only to later realize *why* they were doing something (writing tests, refactoring, and so on). Others learn more by experience&amp;mdash;thus, regardless of what you tell them, they *need* to make their own mistakes to see why some standards or techniques are required.\n\n(And let's not forget the worst group of all: Those that *refuse* to learn. The (young) developers who, with an ugly sneer on their face, ridicule you for writing a test, for using a Lambda function with  `std::for_each` instead of a `for` loop, for thinking beyond the current state of the code and trying to see the bigger picture...)", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 51964, "question": "Nicely done. I feel another one of the morals should be that people learn differently. There are some that learn by imitation only to later realize *why* they were doing something (writing tests, refactoring, and so on). Others learn more by experience&amp;mdash;thus, regardless of what you tell them, they *need* to make their own mistakes to see why some standards or techniques are required.\n\n(And let's not forget the worst group of all: Those that *refuse* to learn. The (young) developers who, with an ugly sneer on their face, ridicule you for writing a test, for using a Lambda function with  `std::for_each` instead of a `for` loop, for thinking beyond the current state of the code and trying to see the bigger picture...)", "aSentId": 51965, "answer": "&gt; The (young) developers who, with an ugly sneer on their face, ridicule you for writing a test, for using a Lambda function with std::for_each instead of a for loop, for thinking beyond the current state of the code and trying to see the bigger picture...\n\nI'm not sure why \"young\" is there.  That describes about half of the developers at my company with 25+ years experience.  In fact it describes the experienced developers more often than the new ones, in my experience.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 51964, "question": "Nicely done. I feel another one of the morals should be that people learn differently. There are some that learn by imitation only to later realize *why* they were doing something (writing tests, refactoring, and so on). Others learn more by experience&amp;mdash;thus, regardless of what you tell them, they *need* to make their own mistakes to see why some standards or techniques are required.\n\n(And let's not forget the worst group of all: Those that *refuse* to learn. The (young) developers who, with an ugly sneer on their face, ridicule you for writing a test, for using a Lambda function with  `std::for_each` instead of a `for` loop, for thinking beyond the current state of the code and trying to see the bigger picture...)", "aSentId": 51967, "answer": "&gt; some that learn by imitation only to later realize why they were doing something (writing tests, refactoring, and so on). Others learn more by experience\u2014thus, regardless of what you tell them, they need to make their own mistakes to see why\n\nA wise man learns from others' mistakes and a foolish one from his own.\n", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 51968, "question": "&gt; some that learn by imitation only to later realize why they were doing something (writing tests, refactoring, and so on). Others learn more by experience\u2014thus, regardless of what you tell them, they need to make their own mistakes to see why\n\nA wise man learns from others' mistakes and a foolish one from his own.\n", "aSentId": 51969, "answer": "Pretty sure the wise man does both.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 51970, "question": "Pretty sure the wise man does both.", "aSentId": 51971, "answer": "Pretty sure that was a proverb.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 51956, "question": "The Sorrows of Young Developer", "aSentId": 51973, "answer": "Very interesting tale, it's good that the young developer get it at the end, I was expecting some really bad ending.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 51974, "question": "Very interesting tale, it's good that the young developer get it at the end, I was expecting some really bad ending.", "aSentId": 51975, "answer": "It was a bad ending for the freelancer. It's also why I haven't freelanced in years.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 51978, "question": "Yesterday I was like inspired and I wrote a sort of tale about a young developer. Hope you enjoy :)", "aSentId": 51979, "answer": "radical man! ;)", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 51982, "question": "The Git game: Guess who on your team wrote a commit based only on their message", "aSentId": 51983, "answer": "I think it would be more fun if questions are multiple choice.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 51984, "question": "I think it would be more fun if questions are multiple choice.", "aSentId": 51985, "answer": "I agree. I should learn Ruby and put in a PR. Might be pretty ugly though :P", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 51988, "question": "The Birth &amp; Death of JavaScript \u2014 Destroy All Software Talks", "aSentId": 51989, "answer": "Outstanding talk! ", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 51988, "question": "The Birth &amp; Death of JavaScript \u2014 Destroy All Software Talks", "aSentId": 51991, "answer": "I love the future.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 51988, "question": "The Birth &amp; Death of JavaScript \u2014 Destroy All Software Talks", "aSentId": 51993, "answer": "This guy is great. I've learned a lot watching the DAS screencasts", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 51996, "question": "How pretentious is that video ?", "aSentId": 51997, "answer": "In what way", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 51996, "question": "How pretentious is that video ?", "aSentId": 51999, "answer": "It's humor...", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 52002, "question": "Adopting Microservices at Netflix: Lessons for Architectural Design", "aSentId": 52003, "answer": "Microarchitecture is a new term I have only recently encountered and to be perfectly honest I don't understand the benefits\n\nPlease correct me if I'm wrong, but to me it comes across as either a re-imagining of flow based architecture except with all of the performance penalties of doing a full network request for everything, or it has all the same benefits of a properly architected and versioned API except without any of the code reuse you would get with a normal OOP architecture.\n\nIt seems that about the only advantages it gives you is it gives you much finer control of how you scale everything, and it makes deprecation and retirement of old versions really easy. You just have to delete the old service.\n\n", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 52004, "question": "Microarchitecture is a new term I have only recently encountered and to be perfectly honest I don't understand the benefits\n\nPlease correct me if I'm wrong, but to me it comes across as either a re-imagining of flow based architecture except with all of the performance penalties of doing a full network request for everything, or it has all the same benefits of a properly architected and versioned API except without any of the code reuse you would get with a normal OOP architecture.\n\nIt seems that about the only advantages it gives you is it gives you much finer control of how you scale everything, and it makes deprecation and retirement of old versions really easy. You just have to delete the old service.\n\n", "aSentId": 52005, "answer": "It basically separating your typical application level components to span different smaller applications/services. \n\nSo instead of writing your database code and your authentication code and your presentation code in the same web app.\n\nyou define interfaces (web, IPC, RPC, sockets ...) and use them instead.\n\nThat way you can have different teams worry about their own parts easier, and you can manage the inputs, outputs and failures of each component alone.\n\nIt makes perfect sense in the cloud since your software (mainly application and datastore) already span different machines . aside from that, its practically the same. (unless you are building very complicated systems for very specific requirements).\n\nI like the idea, but I don't think I'm going to work on anything at that scale any time soon.  ", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 52004, "question": "Microarchitecture is a new term I have only recently encountered and to be perfectly honest I don't understand the benefits\n\nPlease correct me if I'm wrong, but to me it comes across as either a re-imagining of flow based architecture except with all of the performance penalties of doing a full network request for everything, or it has all the same benefits of a properly architected and versioned API except without any of the code reuse you would get with a normal OOP architecture.\n\nIt seems that about the only advantages it gives you is it gives you much finer control of how you scale everything, and it makes deprecation and retirement of old versions really easy. You just have to delete the old service.\n\n", "aSentId": 52007, "answer": "By their definition, it's literally a standard boring old SOA, but with a new coat of buzzwords on top of it.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 52008, "question": "By their definition, it's literally a standard boring old SOA, but with a new coat of buzzwords on top of it.", "aSentId": 52009, "answer": "exactly.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 52008, "question": "By their definition, it's literally a standard boring old SOA, but with a new coat of buzzwords on top of it.", "aSentId": 52011, "answer": "AKA New boss, same as the old boss.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 52004, "question": "Microarchitecture is a new term I have only recently encountered and to be perfectly honest I don't understand the benefits\n\nPlease correct me if I'm wrong, but to me it comes across as either a re-imagining of flow based architecture except with all of the performance penalties of doing a full network request for everything, or it has all the same benefits of a properly architected and versioned API except without any of the code reuse you would get with a normal OOP architecture.\n\nIt seems that about the only advantages it gives you is it gives you much finer control of how you scale everything, and it makes deprecation and retirement of old versions really easy. You just have to delete the old service.\n\n", "aSentId": 52013, "answer": "Assuming you mean 'Microservices Architecture' (as in the article) rather than 'Microarchitecture'. 'Microarchitecture' has been used for a long time to mean something else entirely :-)\n\nI think that is a fair description but possibly at a higher level than what is assumed for FBP. It also implies a certain division/organisation of your developers, smaller teams made up of a mix of devs having responsibility for the whole stack (e.g. DB, services and UI) in each specific, compartmentalized functional area. \n\nI would also say that the advantages you cite are not minor.\n\n[This](http://martinfowler.com/articles/microservices.html#CharacteristicsOfAMicroserviceArchitecture) seems like quite a reasonable description.\n\nComing from an O.S. background, this kind of structure makes sense to me, but I have not worked on any major microservices architecture project and to me there some obvious risks without a strong central design authority e.g.\n\n* what's to stop duplicate/similar services proliferation\n\n* who decides what is the canonical source for a given piece of data.\n\nEdit: moved a bracket", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 52014, "question": "Assuming you mean 'Microservices Architecture' (as in the article) rather than 'Microarchitecture'. 'Microarchitecture' has been used for a long time to mean something else entirely :-)\n\nI think that is a fair description but possibly at a higher level than what is assumed for FBP. It also implies a certain division/organisation of your developers, smaller teams made up of a mix of devs having responsibility for the whole stack (e.g. DB, services and UI) in each specific, compartmentalized functional area. \n\nI would also say that the advantages you cite are not minor.\n\n[This](http://martinfowler.com/articles/microservices.html#CharacteristicsOfAMicroserviceArchitecture) seems like quite a reasonable description.\n\nComing from an O.S. background, this kind of structure makes sense to me, but I have not worked on any major microservices architecture project and to me there some obvious risks without a strong central design authority e.g.\n\n* what's to stop duplicate/similar services proliferation\n\n* who decides what is the canonical source for a given piece of data.\n\nEdit: moved a bracket", "aSentId": 52015, "answer": "Yes I did mean microservices architecture. :)\n\nFull disclosure, I have only skimmed the article you linked me (it's late, I'm going to bed), but that description looks exactly like service-oriented architecture. The way I have seen microservice architecture described it seems to be trying to be something different, but I don't understand how.\n\nIn my experience the size that you create services is really dependent on the scale you have to run at and the size of your team. If you are Netflix size with 100s of developers it will make sense to break your architecture up into smaller pieces (a single service for every version still seems crazy to me though). But if your team is only a handful of developers and you don't have to deal with that much traffic, then a larger monolithic service is probably going to be easier to manage.\n", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 52016, "question": "Yes I did mean microservices architecture. :)\n\nFull disclosure, I have only skimmed the article you linked me (it's late, I'm going to bed), but that description looks exactly like service-oriented architecture. The way I have seen microservice architecture described it seems to be trying to be something different, but I don't understand how.\n\nIn my experience the size that you create services is really dependent on the scale you have to run at and the size of your team. If you are Netflix size with 100s of developers it will make sense to break your architecture up into smaller pieces (a single service for every version still seems crazy to me though). But if your team is only a handful of developers and you don't have to deal with that much traffic, then a larger monolithic service is probably going to be easier to manage.\n", "aSentId": 52017, "answer": "Well there really is nothing new under the sun. Good to know.\n\nI look forward to the defect tennis.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 52002, "question": "Adopting Microservices at Netflix: Lessons for Architectural Design", "aSentId": 52023, "answer": "IMO this architecture has achieved popularity for non-software design reasons:  1.  Agile teams are generally small.   This allows a 1:1 relationship of team to application.   2.  Teams always fight over everything that requires their cooperation,  and this allows them to stop tripping over each other and release asynchronously. ", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 52024, "question": "IMO this architecture has achieved popularity for non-software design reasons:  1.  Agile teams are generally small.   This allows a 1:1 relationship of team to application.   2.  Teams always fight over everything that requires their cooperation,  and this allows them to stop tripping over each other and release asynchronously. ", "aSentId": 52025, "answer": "It's Conway's Law, from 1968: \"If you have four groups working on a compiler, you'll get a 4-pass compiler.\"", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 52026, "question": "It's Conway's Law, from 1968: \"If you have four groups working on a compiler, you'll get a 4-pass compiler.\"", "aSentId": 52027, "answer": "That's true, but four groups working on the same component would be much worse. \n\nWhy have four groups then? This is a good question, but some organisations seem keep to fix teams first and decide what to do later! But also single teams with large numbers of developers becomes unmanageable very quickly!", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 52002, "question": "Adopting Microservices at Netflix: Lessons for Architectural Design", "aSentId": 52029, "answer": "I keep hearing about this and netflix's software architecture, but I swear netflix has the buggiest video player I've ever used. ", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 52030, "question": "I keep hearing about this and netflix's software architecture, but I swear netflix has the buggiest video player I've ever used. ", "aSentId": 52031, "answer": "&gt; buggiest video player I've ever used. \n\nNot so fast there! Despite how bad the youtube interface is, it hasn't actually gone out of business yet. ", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 52032, "question": "&gt; buggiest video player I've ever used. \n\nNot so fast there! Despite how bad the youtube interface is, it hasn't actually gone out of business yet. ", "aSentId": 52033, "answer": "Don't forget Twitch. (Live-streaming counts as video playing, right? It's just the video doesn't exist until ~30 seconds before you see it)", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 52030, "question": "I keep hearing about this and netflix's software architecture, but I swear netflix has the buggiest video player I've ever used. ", "aSentId": 52035, "answer": "I guess that's subjective. Since I cut my antenna it's my primary video source and no complaints here.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 52036, "question": "I guess that's subjective. Since I cut my antenna it's my primary video source and no complaints here.", "aSentId": 52037, "answer": "I was watching 'Patton' on chromecast. Takes about 20 minutes for it to actually get the cast set up (youtube works flawless though). Once it's going, CC's are on despite the menu bar saying its off. So then I turn them on in the menu, and the CC's go off. I'm thinking ok... what ever at least I got them off. Then comes the first german speaking scene. Captions go on and overlay the captions that are part of the film. I have to turn the ON to turn the overlayed captions off, temporarily during the german scenes. ", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 52038, "question": "I was watching 'Patton' on chromecast. Takes about 20 minutes for it to actually get the cast set up (youtube works flawless though). Once it's going, CC's are on despite the menu bar saying its off. So then I turn them on in the menu, and the CC's go off. I'm thinking ok... what ever at least I got them off. Then comes the first german speaking scene. Captions go on and overlay the captions that are part of the film. I have to turn the ON to turn the overlayed captions off, temporarily during the german scenes. ", "aSentId": 52039, "answer": "Chromecast has problems with captions.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 52040, "question": "Chromecast has problems with captions.", "aSentId": 52041, "answer": "&gt; Chromecast has problems.\n\nFTFY.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 52038, "question": "I was watching 'Patton' on chromecast. Takes about 20 minutes for it to actually get the cast set up (youtube works flawless though). Once it's going, CC's are on despite the menu bar saying its off. So then I turn them on in the menu, and the CC's go off. I'm thinking ok... what ever at least I got them off. Then comes the first german speaking scene. Captions go on and overlay the captions that are part of the film. I have to turn the ON to turn the overlayed captions off, temporarily during the german scenes. ", "aSentId": 52043, "answer": "The Windows 8 and iPad clients are rock solid in my experience and sync very well (so I can pause the Windows 8 PC which drives my TV and pick up my iPad and re-start playback from the same point).\n\nI've not looked at the ChromeCast so I couldn't even tell you where the intelligence lies (in the streaming app or in the CC app). Don't even know what the CC programming model looks like.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 52044, "question": "The Windows 8 and iPad clients are rock solid in my experience and sync very well (so I can pause the Windows 8 PC which drives my TV and pick up my iPad and re-start playback from the same point).\n\nI've not looked at the ChromeCast so I couldn't even tell you where the intelligence lies (in the streaming app or in the CC app). Don't even know what the CC programming model looks like.", "aSentId": 52045, "answer": "I think they put very little focus into chromecast desktop clients.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 52030, "question": "I keep hearing about this and netflix's software architecture, but I swear netflix has the buggiest video player I've ever used. ", "aSentId": 52047, "answer": "I've had Netflix for a couple years, I don't recall the player itself ever crashing or acting up, and I usually watch several hours a day.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 52049, "question": "Yeah. I haven't had any problems with the player itself (that couldn't be attributed to the network), but the output of that admittedly impressive Netflix stack is, well, pretty underwhelming.\n\nIt feels like 90% of what I see on their website could be recreated with some static assets and a js whiz. Throw in an authentication system and a few heavily cached lists to represent your \"watched\", \"recommended\" (bwahaha), and \"to watch\" lists, stir in some edge caches, and boom. Netflix.\n\nI guess I just never really see anything that justifies the size and complexity of their setup. I guess the magic is in minimizing the delay of the updating of those lists.\n\nNetflix' real magic, in my mind, is their deals to get all of these shows, and their original content.", "aSentId": 52050, "answer": "They're responsible for some huge portion of all US Internet traffic, and their player (generally) remembers where you paused your playback across devices. That's a ton of API calls right there, I think.\n\nI agree that compared to something like Salesforce, their stack should be relatively simple. I think they get press because they've open sourced most of their tools.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 52053, "question": "\u00b5Kanren.NET - Featherweight Relational Logic Programming in C#", "aSentId": 52054, "answer": "Pretty neat, I think I found a syntax error though (Right under \"Unification\"):  \n\n    public sealed class class Kanren  \n\nUnless there is a \"class class\" in C# I'm unaware of...", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 52055, "question": "Pretty neat, I think I found a syntax error though (Right under \"Unification\"):  \n\n    public sealed class class Kanren  \n\nUnless there is a \"class class\" in C# I'm unaware of...", "aSentId": 52056, "answer": "Thanks! Ah the pitfalls of converting code to HTML...", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 52057, "question": "Thanks! Ah the pitfalls of converting code to HTML...", "aSentId": 52058, "answer": "Also in the listing for the state class you wrote substitutions when you probably meant subs.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 52053, "question": "\u00b5Kanren.NET - Featherweight Relational Logic Programming in C#", "aSentId": 52060, "answer": "Really good writeup. Covers the topic with brevity. \n\nAny plans for a follow up with \"real world\" use cases? Something from the trenches relating to a specific domain?", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 52053, "question": "\u00b5Kanren.NET - Featherweight Relational Logic Programming in C#", "aSentId": 52062, "answer": "ELI13? What are these minikraken languages?", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 52063, "question": "ELI13? What are these minikraken languages?", "aSentId": 52064, "answer": "They are a type of logic programming language, like a better Prolog.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 52065, "question": "They are a type of logic programming language, like a better Prolog.", "aSentId": 52066, "answer": "If you don't mind, how is it better than prolog?", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 52067, "question": "If you don't mind, how is it better than prolog?", "aSentId": 52068, "answer": "No side-effecting/extra-logical operations, so it's sort of a distilled, pure subset of Prolog. You can see that in this implementation as it's purely functional, based solely on stream transformations. [Byrd covers this question in great detail](http://stackoverflow.com/questions/28467011/what-are-the-main-technical-differences-between-prolog-and-minikanren-with-resp/28556223#28556223).", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 52065, "question": "They are a type of logic programming language, like a better Prolog.", "aSentId": 52070, "answer": "Why do I feel like I'm seeing them everywhere all of a sudden?  I'm not trying to be snarky---but microkanren feels like it's exploded like a fad, and I'd like to know if that's true or why/how I've missed it until now.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 52071, "question": "Why do I feel like I'm seeing them everywhere all of a sudden?  I'm not trying to be snarky---but microkanren feels like it's exploded like a fad, and I'd like to know if that's true or why/how I've missed it until now.", "aSentId": 52072, "answer": "I imagine its small size just makes it easy for people to port to their language and play with. You can see [here](https://github.com/search?o=desc&amp;q=Kanren&amp;s=updated&amp;type=Repositories&amp;utf8=%E2%9C%93) lots of different implementations being worked on.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 52073, "question": "I imagine its small size just makes it easy for people to port to their language and play with. You can see [here](https://github.com/search?o=desc&amp;q=Kanren&amp;s=updated&amp;type=Repositories&amp;utf8=%E2%9C%93) lots of different implementations being worked on.", "aSentId": 52074, "answer": "My guess is that https://github.com/clojure/core.logic is bringing it to widespread attention.  The Clojure community talks a lot ;)", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 52075, "question": "My guess is that https://github.com/clojure/core.logic is bringing it to widespread attention.  The Clojure community talks a lot ;)", "aSentId": 52076, "answer": "Talk is easy and simple.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 52063, "question": "ELI13? What are these minikraken languages?", "aSentId": 52078, "answer": "\u00b5 is \"micro.\"", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 52063, "question": "ELI13? What are these minikraken languages?", "aSentId": 52080, "answer": "Ones where you get inverse functions for free. Define some f(x,y) = ... and then ask \"for which y is f(x,y) = z?\" ", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 52083, "question": "It would be interesting to see what this looks like in F#", "aSentId": 52084, "answer": "Should be something similar to this one: https://github.com/lightyang/minikanren-ocaml", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 52086, "question": "So tell me again that story about how operator overloading is useless and hurts the language.", "aSentId": 52087, "answer": "Well, you *could* do this with expression trees too ;-).  But yeah, operator overloading is great feature!", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 52090, "question": "    Kanren.Exists(x =&gt; x == 5 | x == 6)\n\nshouldn't that be\n\n    Kanren.Exists(x =&gt; x == 5 || x == 6)\n", "aSentId": 52091, "answer": "No, the double forms are used only if you want short-circuiting behaviour. Then you need to implement the true/false operators on Goals, but this makes it possible to accidentally mix up ordinary boolean expressions and logic programs:\n\n    Kanren.Exists(x =&gt; x == 5 &amp;&amp; 5 &lt; 8); // this would compile but is an invalid Kanren expression\n\nThe above does not compile in uKanren.NET because Goals don't define the true/false operators.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 52090, "question": "    Kanren.Exists(x =&gt; x == 5 | x == 6)\n\nshouldn't that be\n\n    Kanren.Exists(x =&gt; x == 5 || x == 6)\n", "aSentId": 52093, "answer": "Not if you want to evaluate both sides of the operator.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 52094, "question": "Not if you want to evaluate both sides of the operator.", "aSentId": 52095, "answer": "Seems wrong to use non-shortcut or-operator for the side-effects. IMHO.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 52096, "question": "Seems wrong to use non-shortcut or-operator for the side-effects. IMHO.", "aSentId": 52097, "answer": "It's possible to implement the short-circuiting behaviour too, but it involves tracking the last operator you saw in each Goal and returning true/false depending on conjunction/disjunction. But it's unnecessary since you get a compile-time error if you use the incorrect operators anyway, and erroneously allows you to mix up boolean expressions with logic programs. It's better this way.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 52096, "question": "Seems wrong to use non-shortcut or-operator for the side-effects. IMHO.", "aSentId": 52099, "answer": "How is that wrong? Because it's logic programming, it's the behavior you expect and the behavior you require for it to work. The alternative would be not using an operator at all, cluttering the code with more method calls.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 52100, "question": "How is that wrong? Because it's logic programming, it's the behavior you expect and the behavior you require for it to work. The alternative would be not using an operator at all, cluttering the code with more method calls.", "aSentId": 52101, "answer": "I'm only against the practice of having something look like an innocent expression, but behind the curtain it does side-effects that are essential to the result there or elsewhere.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 52102, "question": "I'm only against the practice of having something look like an innocent expression, but behind the curtain it does side-effects that are essential to the result there or elsewhere.", "aSentId": 52103, "answer": "&gt; I'm only against the practice of having something look like an innocent expression, but behind the curtain it does side-effects\n\nThere are no \"side-effects\". It just builds an expression for the left and right sides. I'm not sure exactly what kind of dastardly deeds you think are happening behind the scenes here.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 52102, "question": "I'm only against the practice of having something look like an innocent expression, but behind the curtain it does side-effects that are essential to the result there or elsewhere.", "aSentId": 52105, "answer": "You should probably have a problem with this entire project then, or the concept of logic programming itself.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 52108, "question": "Featherweight? Seriously? Calling things that aren't lightweight \"lightweight\" isn't working any more, so let's crank up the hyperbole a notch, eh?", "aSentId": 52109, "answer": "The original [\u03bcKanren](http://webyrd.net/scheme-2013/papers/HemannMuKanren2013.pdf) weighs in at a whopping 39 lines of Scheme. If that's not \"featherweight,\" I wonder what is?", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 52110, "question": "The original [\u03bcKanren](http://webyrd.net/scheme-2013/papers/HemannMuKanren2013.pdf) weighs in at a whopping 39 lines of Scheme. If that's not \"featherweight,\" I wonder what is?", "aSentId": 52111, "answer": "From a quick glance, it's around 200 sloc in \u00b5Kanren.NET..", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 52112, "question": "From a quick glance, it's around 200 sloc in \u00b5Kanren.NET..", "aSentId": 52113, "answer": "Yeah but that's C# compared to Scheme", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 52108, "question": "Featherweight? Seriously? Calling things that aren't lightweight \"lightweight\" isn't working any more, so let's crank up the hyperbole a notch, eh?", "aSentId": 52115, "answer": "\"modern, fast, lightweight framework\" :)", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 52117, "question": "The 8086 Primer, a great resource to learn the fundamentals of Intel processor components.", "aSentId": 52118, "answer": "Yeah, I don't know how useful a book from 1980 really is, as so much of this information is obsolete.  The addressing modes available in 32 bit mode or 64 bit mode are completely different than what was available on the 8086.  Segmentation is completely irrelevant today (unless you're writing a boot-loader), whereas it was fundamental then.  Certainly there are some fundamentals that haven't changed, but I don't think you should bother with this unless you specifically intend to write 16 bit code, and if so, god help you because it's maddening compared to modern assembly language.\n", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 52119, "question": "Yeah, I don't know how useful a book from 1980 really is, as so much of this information is obsolete.  The addressing modes available in 32 bit mode or 64 bit mode are completely different than what was available on the 8086.  Segmentation is completely irrelevant today (unless you're writing a boot-loader), whereas it was fundamental then.  Certainly there are some fundamentals that haven't changed, but I don't think you should bother with this unless you specifically intend to write 16 bit code, and if so, god help you because it's maddening compared to modern assembly language.\n", "aSentId": 52120, "answer": "Funnily enough, I've been updating some of my company's software to be 64-bit clean, and having to figure out appropriate ways to do things and decide when to use what type of variable. Reading up on the 8086 and segmented memory helped me understand how big size_t is and in what places you should use it.\n\n(Answer: on 8086 size_t is 16 bits, but pointers can be *either* 16 or 32 bits depending on whether they include a segment selector, which means `void*` will be 32 bits unless you compile your program in a mode where 32-bit pointers aren't allowed, in which case it only needs to be 16. Very different from the normal 32-bit and 64-bit world where they're all the same size.)", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 52121, "question": "Funnily enough, I've been updating some of my company's software to be 64-bit clean, and having to figure out appropriate ways to do things and decide when to use what type of variable. Reading up on the 8086 and segmented memory helped me understand how big size_t is and in what places you should use it.\n\n(Answer: on 8086 size_t is 16 bits, but pointers can be *either* 16 or 32 bits depending on whether they include a segment selector, which means `void*` will be 32 bits unless you compile your program in a mode where 32-bit pointers aren't allowed, in which case it only needs to be 16. Very different from the normal 32-bit and 64-bit world where they're all the same size.)", "aSentId": 52122, "answer": "I swear we'd eliminate roughly 60% bugs if C compilers didn't allow implicit unsigned/signed and long/int/size_t conversions. ", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 52123, "question": "I swear we'd eliminate roughly 60% bugs if C compilers didn't allow implicit unsigned/signed and long/int/size_t conversions. ", "aSentId": 52124, "answer": "Because there's no point educating people, right? I mean - why make people take driving tests before getting a licence to drive on their own. Doesn't make any sense.\n\nLet's let people code in C and drive cars without any education. What could go wrong!?", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 52119, "question": "Yeah, I don't know how useful a book from 1980 really is, as so much of this information is obsolete.  The addressing modes available in 32 bit mode or 64 bit mode are completely different than what was available on the 8086.  Segmentation is completely irrelevant today (unless you're writing a boot-loader), whereas it was fundamental then.  Certainly there are some fundamentals that haven't changed, but I don't think you should bother with this unless you specifically intend to write 16 bit code, and if so, god help you because it's maddening compared to modern assembly language.\n", "aSentId": 52126, "answer": "Segments are still supported in real mode on AMD64. While you can't do a code segment add in long mode, this behavior is defined by the ISA, and various OSes take advantage of this. Linux uses deprecated FS/GS registers to store various thread states. However, all the legacy implementation is natively supported even in the most modern processors while running legacy code in the appropriate mode. May be largely irrelevant but the x86 hardware supports it. ", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 52127, "question": "Segments are still supported in real mode on AMD64. While you can't do a code segment add in long mode, this behavior is defined by the ISA, and various OSes take advantage of this. Linux uses deprecated FS/GS registers to store various thread states. However, all the legacy implementation is natively supported even in the most modern processors while running legacy code in the appropriate mode. May be largely irrelevant but the x86 hardware supports it. ", "aSentId": 52128, "answer": "&gt;  Linux uses deprecated FS/GS registers to store various thread states\n\nThey are not deprecated, that's literally their intended use in x64.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 52131, "question": "A Lisp implemented in &lt; 1 KB of JavaScript with macros, TCO, interop and exception handling", "aSentId": 52132, "answer": "json-based lisp....my eyes", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 52131, "question": "A Lisp implemented in &lt; 1 KB of JavaScript with macros, TCO, interop and exception handling", "aSentId": 52134, "answer": "This is really *cool* but, and I say this as a lover of all things Lisp, the need to quote symbols does kill some of the joy.\n\ne.g.\n\n    [\"if\", [\"=\", 5, 5], 7, 8]\n    =&gt;7\n    [\"+\", 2, [\"*\", 3, 4]]\n    =&gt;14\n    [\"def\", \"a_symbol\", 3]\n    =&gt;3\n    [\"`\", \"a quoted symbol is a string\"]\n    =&gt;\"a quoted symbol is a string\"\n\nHowever, *generating* code (which Lisp and Lisp-thinking tends to be good for) removes the human pain of coding with all those quotes so maybe there are good applications for generating code that is still readable and easily parsable as data again. ", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 52136, "question": "Swift 1.2 Arrives: 13 New Features", "aSentId": 52137, "answer": "Swift is one of those languages we wish that was cross-platform. I would probably try to use it, if it was.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 52138, "question": "Swift is one of those languages we wish that was cross-platform. I would probably try to use it, if it was.", "aSentId": 52139, "answer": "The problem is, does Apple really give a damn? Why would it be in their interest for Swift to be cross platform?", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 52140, "question": "The problem is, does Apple really give a damn? Why would it be in their interest for Swift to be cross platform?", "aSentId": 52141, "answer": "Microsoft used to think the same thing about c# slash dot Net.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 52136, "question": "Swift 1.2 Arrives: 13 New Features", "aSentId": 52143, "answer": "The latest version of Swift that I can find is 0.94.1. And suddenly they're talking about 1.2 already?!", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 52144, "question": "The latest version of Swift that I can find is 0.94.1. And suddenly they're talking about 1.2 already?!", "aSentId": 52145, "answer": "They're not talking about it. It's available for download on the developer portal right now.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 52146, "question": "They're not talking about it. It's available for download on the developer portal right now.", "aSentId": 52147, "answer": "But the latest version is still 0.94.1?!", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 52148, "question": "But the latest version is still 0.94.1?!", "aSentId": 52149, "answer": "You need to download Xcode 6.3b2 first. It's the only way to get 1.2 as far I know.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 52150, "question": "You need to download Xcode 6.3b2 first. It's the only way to get 1.2 as far I know.", "aSentId": 52151, "answer": "Oh... It's not about Swift, it's about Swift2.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 52152, "question": "Oh... It's not about Swift, it's about Swift2.", "aSentId": 52153, "answer": "Huh? It's about Apples Swift, not some other Swift.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 52154, "question": "Huh? It's about Apples Swift, not some other Swift.", "aSentId": 52155, "answer": "Swift is from 2007. *Apples Swift* is from 2014.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 52156, "question": "Swift is from 2007. *Apples Swift* is from 2014.", "aSentId": 52157, "answer": "Sure. But Apples Swift isn't \"swift2\", which was my point.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 52158, "question": "Sure. But Apples Swift isn't \"swift2\", which was my point.", "aSentId": 52159, "answer": "It's the second language named Swift. So Swift2 is more fitting.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 52160, "question": "It's the second language named Swift. So Swift2 is more fitting.", "aSentId": 52161, "answer": "Maybe so. Still not its name though.\n\nGo has the same problem as do quite a few other languages...", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 52163, "question": "Understanding Linux CPU stats", "aSentId": 52164, "answer": "Very helpful! Never knew what to make of those abbreviations, even after reading the man page.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 52163, "question": "Understanding Linux CPU stats", "aSentId": 52166, "answer": "The only thing I would have added to the breakdown is that the % in top is a % of the time the process has had active cpu cycles over the course of its life, not an indication that it is using 97% of the cpu cycles, although these two can occur in parallel and as it notes, a process that has run for a long time and maintains a high percentage can be a cause for concern.  I've seen a lot of people incorrectly freak out that a recently restarted service \"is using 80% of the cpu!\"", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 52163, "question": "Understanding Linux CPU stats", "aSentId": 52168, "answer": "This definitely doesn't belong here. It's sysadmin stuff, and really basic stuff you can read in the man page.\n\nWhat does 'sy' mean?\n\n    man top\n    /\\bsy\\b", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 52169, "question": "This definitely doesn't belong here. It's sysadmin stuff, and really basic stuff you can read in the man page.\n\nWhat does 'sy' mean?\n\n    man top\n    /\\bsy\\b", "aSentId": 52170, "answer": "Sysadmin stuff is very important to a lot of developers - for build scripts, automated testing and all sorts of applications.\n\nUnderstanding CPU metrics is an important part of profiling.\n\nI consider knowing how to use github similar. No, it's not code, but programmers need to know it, and therefore belongs here.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 52171, "question": "Sysadmin stuff is very important to a lot of developers - for build scripts, automated testing and all sorts of applications.\n\nUnderstanding CPU metrics is an important part of profiling.\n\nI consider knowing how to use github similar. No, it's not code, but programmers need to know it, and therefore belongs here.", "aSentId": 52172, "answer": "I agree. I'll just add that this \"sysadmin stuff\" is pretty essential knowledge if you're doing any sort of low level programming. A C programmer who doesn't use knowledge about the differences between Kernel mode and User mode while writing their code probably hasn't written any useful programs.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 52171, "question": "Sysadmin stuff is very important to a lot of developers - for build scripts, automated testing and all sorts of applications.\n\nUnderstanding CPU metrics is an important part of profiling.\n\nI consider knowing how to use github similar. No, it's not code, but programmers need to know it, and therefore belongs here.", "aSentId": 52174, "answer": "Yeah, and how to buy french fries and how to lace your shoes is also very important for developers.\n\nWe both probably agree that there exist even more things that are very important for developers, even more important than my two silly examples.\n\nBut that doesn't mean that all of those non-programming things should have a place in this subreddit.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 52175, "question": "Yeah, and how to buy french fries and how to lace your shoes is also very important for developers.\n\nWe both probably agree that there exist even more things that are very important for developers, even more important than my two silly examples.\n\nBut that doesn't mean that all of those non-programming things should have a place in this subreddit.", "aSentId": 52176, "answer": "Can you just confirm that you said that profiling your code, or knowing how to deploy your release build, is not some part of programming?\n\nI just need to make sure I fully understood your response before I write a reply.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 52179, "question": "Dependently Typed Functional Programming in Idris by David Christiansen 1 of 3", "aSentId": 52180, "answer": "\"This is an introduction\" he says. Yes, if you already know Haskell and Church Numerals and...", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 52181, "question": "\"This is an introduction\" he says. Yes, if you already know Haskell and Church Numerals and...", "aSentId": 52182, "answer": "I most definitely assumed Haskell knowledge, because the people in the room with me had it (with one exception, and he knew to ask questions). I don't think Church numerals ever came up though.\n\nSomeday I'll put together an introduction for programmers without a background in Haskell or ML. This wasn't that introduction.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 52181, "question": "\"This is an introduction\" he says. Yes, if you already know Haskell and Church Numerals and...", "aSentId": 52184, "answer": "I don't much about Haskell or Idris, but I am familiar with how dependent types are implemented in Scala and Coq, and I found the presentation easy to follow.\n\nAlso it seems the audience had no trouble the presentation with lots of relevant questions, so the topic seems entirely appropriate.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 52181, "question": "\"This is an introduction\" he says. Yes, if you already know Haskell and Church Numerals and...", "aSentId": 52186, "answer": "I think he should have said \"this is an introduction to Idris, assuming you know the fundamentals of functional programming,\" but I don't think that his claim was any more unreasonable than calling a talk an introduction to C# if it assumes you know what a for loop is and how inheritance works. \n\nIf every talk on a new imperative language retaught loops and classes they would never explain how the language was different or interesting. The same would be true if every talk on a new functional language retaught pattern matching and lambda calculus.\n\nPerhaps this highlights the lack of education on fundamental functional programming when compared to imperative programming. Most people are comfortable with the assumption that someone watching an introduction to Go is familiar with imperative programming, whereas an introduction to Idris might have an audience that isn't familiar with functional programming at all. I would argue that the Go talk is probably a terrible way to learn imperative programming, and the same is true here.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 52187, "question": "I think he should have said \"this is an introduction to Idris, assuming you know the fundamentals of functional programming,\" but I don't think that his claim was any more unreasonable than calling a talk an introduction to C# if it assumes you know what a for loop is and how inheritance works. \n\nIf every talk on a new imperative language retaught loops and classes they would never explain how the language was different or interesting. The same would be true if every talk on a new functional language retaught pattern matching and lambda calculus.\n\nPerhaps this highlights the lack of education on fundamental functional programming when compared to imperative programming. Most people are comfortable with the assumption that someone watching an introduction to Go is familiar with imperative programming, whereas an introduction to Idris might have an audience that isn't familiar with functional programming at all. I would argue that the Go talk is probably a terrible way to learn imperative programming, and the same is true here.", "aSentId": 52188, "answer": "&gt; whereas an introduction to Idris might have an audience that isn't familiar with functional programming at all\n\nThis could certainly be the case. The particular audience for this talk was a group of highly skilled Haskell programmers who work at the company where I was interning at the time, so I felt comfortable assuming this. I'd like to make a good introduction to functional programming with dependent types in Idris that is aimed at newcomers to functional programming, but so far I haven't found the time.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 52187, "question": "I think he should have said \"this is an introduction to Idris, assuming you know the fundamentals of functional programming,\" but I don't think that his claim was any more unreasonable than calling a talk an introduction to C# if it assumes you know what a for loop is and how inheritance works. \n\nIf every talk on a new imperative language retaught loops and classes they would never explain how the language was different or interesting. The same would be true if every talk on a new functional language retaught pattern matching and lambda calculus.\n\nPerhaps this highlights the lack of education on fundamental functional programming when compared to imperative programming. Most people are comfortable with the assumption that someone watching an introduction to Go is familiar with imperative programming, whereas an introduction to Idris might have an audience that isn't familiar with functional programming at all. I would argue that the Go talk is probably a terrible way to learn imperative programming, and the same is true here.", "aSentId": 52190, "answer": "Maybe you're right.  But I know Clojure and if Clojure was the only functional programming language I knew, I don't think I would understand what was going on in this talk.  Fortunately for me, I've read Learn You A Haskell, so I could follow with relative ease.  ", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 52191, "question": "Maybe you're right.  But I know Clojure and if Clojure was the only functional programming language I knew, I don't think I would understand what was going on in this talk.  Fortunately for me, I've read Learn You A Haskell, so I could follow with relative ease.  ", "aSentId": 52192, "answer": "I'm glad that you could follow along!", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 52195, "question": "this is exactly what is often deeply frustrating with academics as a general slice of the population.  They are not conduits for communication with the lay-person.  They are there to collaborate with their narrow peer-group in order to tease out minutiae of their slice of the universe so that, with time, the relevant details leak out to the broader society.  \n\nFunctional programming in general is squarely in the realm of academia.  The code, despite the protestations of the intelligentsia, is intensely taxing to read, write, and comprehend.\n\nThe role of these people in the world is to push hard at the boundaries of human knowledge.  My suggestion is to wade into the water out of curiosity but not be obsessed with finding nirvana.  As with all other pursuits of perfection, this one too shall certainly disappoint you.  There's a lot of cool stuff in FP but there is no simple fount of infinite knowledge/power.  ", "aSentId": 52196, "answer": "I'm the one in the video.\n\nThis mini course was held for a particular audience in a particular place, and recorded in the hope that it might be useful for at least some other people, which (judging by my email inbox) it has been. That particular audience, namely the employees of a company in Oregon where I was an intern at the time, are already skilled functional programmers who use lots of Haskell as part of their day jobs.\n\nI would most definitely run it differently if the audience had their primary background in the Lisp tradition of functional programming languages, and yet differently again if it were for an audience whose main background is in object-oriented imperative programming.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 52195, "question": "this is exactly what is often deeply frustrating with academics as a general slice of the population.  They are not conduits for communication with the lay-person.  They are there to collaborate with their narrow peer-group in order to tease out minutiae of their slice of the universe so that, with time, the relevant details leak out to the broader society.  \n\nFunctional programming in general is squarely in the realm of academia.  The code, despite the protestations of the intelligentsia, is intensely taxing to read, write, and comprehend.\n\nThe role of these people in the world is to push hard at the boundaries of human knowledge.  My suggestion is to wade into the water out of curiosity but not be obsessed with finding nirvana.  As with all other pursuits of perfection, this one too shall certainly disappoint you.  There's a lot of cool stuff in FP but there is no simple fount of infinite knowledge/power.  ", "aSentId": 52198, "answer": "&gt; The code, despite the protestations of the intelligentsia, is intensely taxing to read, write, and comprehend.\n\nWell, I think that functional is so different from object oriented it's like learning how to program for the first time again.  I don't think it's more effort than that.  ", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 52199, "question": "&gt; The code, despite the protestations of the intelligentsia, is intensely taxing to read, write, and comprehend.\n\nWell, I think that functional is so different from object oriented it's like learning how to program for the first time again.  I don't think it's more effort than that.  ", "aSentId": 52200, "answer": "I tend to agree and my sentence could have said \"... and so is imperative code\".  That probably is also true as I personally find reading code to be extremely boring, difficult, and tedious.  I think the elegance of terse symbolic correctness is one natural pursuit for human programmers but I honestly think it is moreso paving the way for machine programmers than humans.  This is completely fine but I think it bears some consideration when recommending strategy.\n\nI personally find FP intoxicating in the same way I found differential equations, fluid dynamics, and Roman history fascinating -- they make you feel like \"aha!  THIS is what is going on\".  However, the Von Neumann computer is fundamentally a machine of stored memory addresses laid out sequentially (This is my absurdly naive generally gist) and thus I do wonder about the validity of mathematics, a language of stateless and timeless calculation, in the domain of the physically-bound computing machine.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 52201, "question": "I tend to agree and my sentence could have said \"... and so is imperative code\".  That probably is also true as I personally find reading code to be extremely boring, difficult, and tedious.  I think the elegance of terse symbolic correctness is one natural pursuit for human programmers but I honestly think it is moreso paving the way for machine programmers than humans.  This is completely fine but I think it bears some consideration when recommending strategy.\n\nI personally find FP intoxicating in the same way I found differential equations, fluid dynamics, and Roman history fascinating -- they make you feel like \"aha!  THIS is what is going on\".  However, the Von Neumann computer is fundamentally a machine of stored memory addresses laid out sequentially (This is my absurdly naive generally gist) and thus I do wonder about the validity of mathematics, a language of stateless and timeless calculation, in the domain of the physically-bound computing machine.", "aSentId": 52202, "answer": "&gt; I do wonder about the validity of mathematics, a language of stateless and timeless calculation, in the domain of the physically-bound computing machine.  \n\nWhat about Physics?  \n\nI think you have strange view of Mathematics. Now, I'm not a mathematician but my interpretation of maths is that it is a fundamental description of things. It tries to find what rules and actions are fundamental and what rules are simply a composition of other ones. Being able to relate concepts by finding the common set of rules that apply to both of them is invaluable.  \n\nThat really doesn't sound too far away from programming to me.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 52201, "question": "I tend to agree and my sentence could have said \"... and so is imperative code\".  That probably is also true as I personally find reading code to be extremely boring, difficult, and tedious.  I think the elegance of terse symbolic correctness is one natural pursuit for human programmers but I honestly think it is moreso paving the way for machine programmers than humans.  This is completely fine but I think it bears some consideration when recommending strategy.\n\nI personally find FP intoxicating in the same way I found differential equations, fluid dynamics, and Roman history fascinating -- they make you feel like \"aha!  THIS is what is going on\".  However, the Von Neumann computer is fundamentally a machine of stored memory addresses laid out sequentially (This is my absurdly naive generally gist) and thus I do wonder about the validity of mathematics, a language of stateless and timeless calculation, in the domain of the physically-bound computing machine.", "aSentId": 52204, "answer": "&gt;  the Von Neumann computer is fundamentally a machine of stored memory addresses laid out sequentially (This is my absurdly naive generally gist) and thus I do wonder about the validity of mathematics, a language of stateless and timeless calculation, in the domain of the physically-bound computing machine.\n\n\n\n\"That a man have a bulb and the woman a whole, does not mean that gay sex is wrong.\" \n\nAs out of place that sound , that was shaking my bell on reading your comment.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 52209, "question": "Putting Apache Kafka to Use: A Practical Guide to Building A Stream Data Platform", "aSentId": 52210, "answer": "at linkedin the 500 billion events must be the spam emails they send out to annoy users who left", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 52211, "question": "at linkedin the 500 billion events must be the spam emails they send out to annoy users who left", "aSentId": 52212, "answer": "I think it probably also includes your family members endorsing you for things they don't even remotely understand ;-)\n\n(For real though, these are awesome blog posts.)", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 52209, "question": "Putting Apache Kafka to Use: A Practical Guide to Building A Stream Data Platform", "aSentId": 52214, "answer": "&gt; Today at LinkedIn Kafka handles over 500 billion events per day\n\nThis is crazy. I'm glad they went with the open source route with Apache Kafka. It looks like a great product.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 52219, "question": "Sneaky exceptions in java", "aSentId": 52220, "answer": "This all seems like an argument for using Options rather than exceptions.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 52221, "question": "This all seems like an argument for using Options rather than exceptions.", "aSentId": 52222, "answer": "Eithers, you mean? Options don't carry error information.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 52223, "question": "Eithers, you mean? Options don't carry error information.", "aSentId": 52224, "answer": "Or the try monad", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 52223, "question": "Eithers, you mean? Options don't carry error information.", "aSentId": 52226, "answer": "Yes. Not sure whether Java has Either now.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 52223, "question": "Eithers, you mean? Options don't carry error information.", "aSentId": 52228, "answer": "You don't need error information in many cases, how else would you expect `toURL` to fail?", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 52229, "question": "You don't need error information in many cases, how else would you expect `toURL` to fail?", "aSentId": 52230, "answer": "You can't substitute exception handling with options, nulls or other magic values. It's not only unintuitive from an API design perspective, but also hugely limiting in comparison.\n\nAlso, the topic is not the URL parsing specifically, it's just an example. But even sticking to this example, it can fail for a number of reasons. You can read the source code of the URL class: 1) no protocol 2) unknown protocol 3) invalid port number", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 52231, "question": "You can't substitute exception handling with options, nulls or other magic values. It's not only unintuitive from an API design perspective, but also hugely limiting in comparison.\n\nAlso, the topic is not the URL parsing specifically, it's just an example. But even sticking to this example, it can fail for a number of reasons. You can read the source code of the URL class: 1) no protocol 2) unknown protocol 3) invalid port number", "aSentId": 52232, "answer": "&gt; It's not only unintuitive from an API design perspective, but also hugely limiting in comparison.\n\nOn the contrary.  If you've got an API that returns an option type, the effect is totally intuitive: you're going to either get a result, or you're going to get nothing, and with a strong type system, the language will make you handle both cases to make sure you don't miss anything.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 52233, "question": "&gt; It's not only unintuitive from an API design perspective, but also hugely limiting in comparison.\n\nOn the contrary.  If you've got an API that returns an option type, the effect is totally intuitive: you're going to either get a result, or you're going to get nothing, and with a strong type system, the language will make you handle both cases to make sure you don't miss anything.", "aSentId": 52234, "answer": ".\n\n     result, _ = func()\n\nYou can ignore it just fine :)", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 52235, "question": ".\n\n     result, _ = func()\n\nYou can ignore it just fine :)", "aSentId": 52236, "answer": "Coincidentally, Go is the paradigmatic case of how _not_ to do this :) You _don't_ want two values here, but a choice between two alternatives. See many functions in Erlang (without static type system) returning either `{ok, Result}` or `{error, Reason}`, `Either` in Haskell, `Try` in Scala, etc.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 52233, "question": "&gt; It's not only unintuitive from an API design perspective, but also hugely limiting in comparison.\n\nOn the contrary.  If you've got an API that returns an option type, the effect is totally intuitive: you're going to either get a result, or you're going to get nothing, and with a strong type system, the language will make you handle both cases to make sure you don't miss anything.", "aSentId": 52238, "answer": "&gt; or you're going to get nothing\n\nThis is the limiting side, you get nothing. With exceptions you at least get a reason you can act on, or in case of a programming error you get a stack trace to fix things. \n\nOptional makes sense in some cases, replacing exceptions is not one of them. ", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 52233, "question": "&gt; It's not only unintuitive from an API design perspective, but also hugely limiting in comparison.\n\nOn the contrary.  If you've got an API that returns an option type, the effect is totally intuitive: you're going to either get a result, or you're going to get nothing, and with a strong type system, the language will make you handle both cases to make sure you don't miss anything.", "aSentId": 52240, "answer": "The option can make an API really expressive, I'm a big fan of it. But in the concept of error handling it's not a good choice, at least in general. \n\nFor instance: Optional&lt;User&gt; findUser(id);    I expect an absent value if the user for that id is not found. It is not an error scenario.\n\nHowever returning an absent value if an error happens (like an infrastructure error) would be a really bad idea.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 52231, "question": "You can't substitute exception handling with options, nulls or other magic values. It's not only unintuitive from an API design perspective, but also hugely limiting in comparison.\n\nAlso, the topic is not the URL parsing specifically, it's just an example. But even sticking to this example, it can fail for a number of reasons. You can read the source code of the URL class: 1) no protocol 2) unknown protocol 3) invalid port number", "aSentId": 52242, "answer": "&gt;You can't substitute exception handling with options, nulls or other magic values. It's not only unintuitive from an API design perspective, but also hugely limiting in comparison.\n\nI get the feeling you've never tried. Exceptions are magical, unexpected and throw the type system away. They breed paranoid code bases with try catch everywhere, whereas a monadic code base acknowledges *reality* and lets you deal with it neatly. ", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 52243, "question": "&gt;You can't substitute exception handling with options, nulls or other magic values. It's not only unintuitive from an API design perspective, but also hugely limiting in comparison.\n\nI get the feeling you've never tried. Exceptions are magical, unexpected and throw the type system away. They breed paranoid code bases with try catch everywhere, whereas a monadic code base acknowledges *reality* and lets you deal with it neatly. ", "aSentId": 52244, "answer": "Of course I have - in C. I'm glad I don't have to do that anymore. :) \n\nOn a serious note, error handling - in non-trivial cases - can be extremely cumbersome and inefficient without exceptions.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 52231, "question": "You can't substitute exception handling with options, nulls or other magic values. It's not only unintuitive from an API design perspective, but also hugely limiting in comparison.\n\nAlso, the topic is not the URL parsing specifically, it's just an example. But even sticking to this example, it can fail for a number of reasons. You can read the source code of the URL class: 1) no protocol 2) unknown protocol 3) invalid port number", "aSentId": 52246, "answer": "Exceptions *should not be for standard error cases*, and malformed URLs aren't exceptional. A URL not existing is not exceptional in the slightest, it's a very valid and easy to recover from situation, and from an API design perspective, there are many many other ways to deal with it without needing to resort to any exceptions, especially checked.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 52247, "question": "Exceptions *should not be for standard error cases*, and malformed URLs aren't exceptional. A URL not existing is not exceptional in the slightest, it's a very valid and easy to recover from situation, and from an API design perspective, there are many many other ways to deal with it without needing to resort to any exceptions, especially checked.", "aSentId": 52248, "answer": "I agree with you that the use of checked exception in that specific class is questionable.\n\nI disagree with you about the \"error cases\" part though. It's perfectly fine in general to throw exceptions on an error. This class is responsible to actually open connections, trying to do that on a malformed URL is a serious error and should never happen.\n\nExistence of malformed URLs in itself is not an error. Eg if you have some code that validates URLs, it would most likely be a mistake to make it throw exceptions on malformed URLs. There is a difference between the two scenarios, the context can't be ignored.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 52219, "question": "Sneaky exceptions in java", "aSentId": 52250, "answer": "My Haskell book might be getting to me. The first thing I though was \"Well they should just wrap the value in a Monad\".", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 52219, "question": "Sneaky exceptions in java", "aSentId": 52252, "answer": "Or just use [RxJava](https://github.com/ReactiveX/RxJava)", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 52254, "question": "Pretty good argument about why checked exceptions are a bad idea.\n\nThe idea of an exception is that it's not a common error, it's exceptional. They are for when something unexpected happens. To then assert that only specific unexpected things can happen is absurd and leads to these sorts of problems.", "aSentId": 52255, "answer": "Checked exceptions have their use in my oppinion. Some critical scenarios can make use of some enforcement by the compiler.\n\nThe problem they're abused / over-used way too much. If you encounter these outside your codebase you can't do better but to \"disarm\" them. :)", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 52259, "question": "Surreptitiously Weakening Cryptographic Systems", "aSentId": 52260, "answer": "The modern day really puts into context what the government was trying to pull by forcing Clipper Chip key-escrow encryption on us while doing their best to keep RSA out of people's hands... two decades ago.\n\nThey've tried before. They are trying now. They will try in the future.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 52259, "question": "Surreptitiously Weakening Cryptographic Systems", "aSentId": 52262, "answer": "Reminds me of an idea for an evil scheme involving Bitcoin. Note that I did not follow through with this idea.\n\nStep 1: write a Bitcoin wallet app, make it look really slick or otherwise enticing to use. Bonus points if you write it for a mobile device because it's harder to audit that code.\n\nStep 2: Sabotage the bitcoin wallet generation algorithm to decrease randomness, so that public &amp; private keys are chosen from a much smaller set, like around 10^10 instead of 2^160. Generate a rainbow table of every possible key pair.\n\nStep 3: Wait a while\n\nStep 4: At your leisure, search every transaction in the blockchain for a hit in your table. If you find a hit then you have the private key &amp; you can withdraw the bitcoins.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 52263, "question": "Reminds me of an idea for an evil scheme involving Bitcoin. Note that I did not follow through with this idea.\n\nStep 1: write a Bitcoin wallet app, make it look really slick or otherwise enticing to use. Bonus points if you write it for a mobile device because it's harder to audit that code.\n\nStep 2: Sabotage the bitcoin wallet generation algorithm to decrease randomness, so that public &amp; private keys are chosen from a much smaller set, like around 10^10 instead of 2^160. Generate a rainbow table of every possible key pair.\n\nStep 3: Wait a while\n\nStep 4: At your leisure, search every transaction in the blockchain for a hit in your table. If you find a hit then you have the private key &amp; you can withdraw the bitcoins.", "aSentId": 52264, "answer": "I can't remember the details, but I'm pretty sure it has been done before.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 52259, "question": "Surreptitiously Weakening Cryptographic Systems", "aSentId": 52266, "answer": "This new paper by Bruce Schneier, Matthew Fredrikson, Tadayoshi Kohno and Thomas Ristenpart is really interesting.\n\nIts not enough to reason about the security of the algorithm itself; you have to also reason about the security of the process that developed the algorithm?", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 52268, "question": "Does anyone have any details on the cryptographic system they were going to use for nuclear nonproliferation treaty enforcement? How could you possibly have mathematical proofs of treaty enforcement? \n", "aSentId": 52269, "answer": "Launch_code = 00000000\r\rUncrackable.  We have empirical proof.\r\rhttp://gizmodo.com/for-20-years-the-nuclear-launch-code-at-us-minuteman-si-1473483587", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 52270, "question": "Launch_code = 00000000\r\rUncrackable.  We have empirical proof.\r\rhttp://gizmodo.com/for-20-years-the-nuclear-launch-code-at-us-minuteman-si-1473483587", "aSentId": 52271, "answer": "That article appears to be debunked in the comments.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 52272, "question": "That article appears to be debunked in the comments.", "aSentId": 52273, "answer": "Uh, well, sort of...  The [official response](http://foreignpolicy.com/2014/01/21/air-force-swears-our-nuke-launch-code-was-never-00000000/) was:\n\n&gt; Additionally, a code consisting of eight zeroes has never been used to enable or launch a MM ICBM, as claimed by Dr. Bruce Blair.\n\nNote that a code consisting of all ones (for instance) was not similarly addressed.  ;)\n\nIn any case, it is thoroughly believable that the defense bureaucracy would take security shortcuts in this area because you can only ever have any confidence in such a complicated logistical system if it is _consistently exercised_.  Easier (and cheaper) to remove the system entirely than hope it doesn't fail you when you least want it to.  It is also completely believable that the defense bureaucracy would have plausible deniability when accused of not following top-secret security procedures -- who watches the watchers?", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 52275, "question": "\"Before I will release the code as open-source, I need to clean it up some more\"", "aSentId": 52276, "answer": "Just release it already.. The scrutiny of other programmers will find mistakes no matter what you do, and you will feel like a rookie anyway. Nobody writes perfect code. \n\nIf there is any interest people will use it anyway, and maybe even send you pull requests with their own clean ups. ", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 52277, "question": "Just release it already.. The scrutiny of other programmers will find mistakes no matter what you do, and you will feel like a rookie anyway. Nobody writes perfect code. \n\nIf there is any interest people will use it anyway, and maybe even send you pull requests with their own clean ups. ", "aSentId": 52278, "answer": "The one thing to take note of however. If it's too horrible it might damage your recruitment opportunities in the future, but of course you follow at least basic practices when writing your apps, right? Right?.... Riiiiiight?...........", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 52279, "question": "The one thing to take note of however. If it's too horrible it might damage your recruitment opportunities in the future, but of course you follow at least basic practices when writing your apps, right? Right?.... Riiiiiight?...........", "aSentId": 52280, "answer": "It's not a matter of bugs. It's a matter of coding-style.\n\nI write a lot differently when I think this is just a quick-and-dirty hack for myself as opposed to something that I want to publish.\n\nSomething that is just for myself doesn't need to be easily understood by someone else. I can make shortcuts.\n\nIf others are supposed to see the code and maybe even change it, then I need a different approach to coding-style.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 52281, "question": "It's not a matter of bugs. It's a matter of coding-style.\n\nI write a lot differently when I think this is just a quick-and-dirty hack for myself as opposed to something that I want to publish.\n\nSomething that is just for myself doesn't need to be easily understood by someone else. I can make shortcuts.\n\nIf others are supposed to see the code and maybe even change it, then I need a different approach to coding-style.", "aSentId": 52282, "answer": "No you don't. The very basis of open-source is people writing software for themselves and then releasing it. If it's useful for you as it is, release it. No matter how the code looks if someone wants to do something similar, your code *will* be helpful.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 52275, "question": "\"Before I will release the code as open-source, I need to clean it up some more\"", "aSentId": 52284, "answer": "Personally, I think that reading very well formatted code is more pleasurable than reading somewhat poorly formatted code. But, I also think that writing beautifully formatted code is definitely not essential. Personally, I have trouble with things like getting argument lists to always look like\n\n    myFunction( a, b, c )\n\nSometimes this just magically becomes:\n\n    myFunction(a, b, c)\n\nThe truth is, I don't think it matters that much. It's an aesthetic thing, and code is not about aesthetics: it's about readability and functionality.   ", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 52275, "question": "\"Before I will release the code as open-source, I need to clean it up some more\"", "aSentId": 52286, "answer": "Cleaner code might make people more likely to contribute. If the code is a mess and nobody can figure out what it does or why, who's going to stick around and try to find out, let alone try to make it better?", "corpus": "reddit"}]