[{"docID": "t5_2qhmr","qSentId": 9637,"question": "Is it possible to go into college planning to major in cs, with very little prior knowledge?","aSentId": 9638,"answer": "You certainly can. In fact, that might be an advantage for you because you might have little preconceived notions of what is good and what is bad, and you will get more out of your classes.","corpus": "reddit"},{"docID": "t5_2qhmr","qSentId": 9639,"question": "You certainly can. In fact, that might be an advantage for you because you might have little preconceived notions of what is good and what is bad, and you will get more out of your classes.","aSentId": 9640,"answer": "Agree with you here. I went into school with a few years of C experience, and it definitely affected my ability to enjoy intro classes (which were done in Java).","corpus": "reddit"},{"docID": "t5_2qhmr","qSentId": 9641,"question": "Agree with you here. I went into school with a few years of C experience, and it definitely affected my ability to enjoy intro classes (which were done in Java).","aSentId": 9642,"answer": "Not your fault you learned a proper language!\n\nEveryone going through CS should understand memory management and pointers.","corpus": "reddit"},{"docID": "t5_2qhmr","qSentId": 9639,"question": "You certainly can. In fact, that might be an advantage for you because you might have little preconceived notions of what is good and what is bad, and you will get more out of your classes.","aSentId": 9644,"answer": "Piggy-backing to also totally agree. I didn't become CS until the spring of my sophomore year, and I'm still graduating on time. Always possible!","corpus": "reddit"},{"docID": "t5_2qhmr","qSentId": 9637,"question": "Is it possible to go into college planning to major in cs, with very little prior knowledge?","aSentId": 9646,"answer": "In the UK we care about your maths grades from school, not whether you did computing. The standard of teaching in schools is often (but with a few notable exceptions) so appalling that we'd rather teach you to program from scratch...","corpus": "reddit"},{"docID": "t5_2qhmr","qSentId": 9637,"question": "Is it possible to go into college planning to major in cs, with very little prior knowledge?","aSentId": 9648,"answer": "Your first classes will assume you know nothing about computer science. This is very likely true, even for incoming students that are \"good with computers\". The primary way you are likely to benefit with existing non-programming experience is dealing with all of the complication surrounding programming environments. Do you have any experience working with a command line? That will be helpful. ","corpus": "reddit"},{"docID": "t5_2qhmr","qSentId": 9660,"question": "Where do I start?","aSentId": 9661,"answer": "The following isn't a set in stone idea, just what I like or think is an easy start.\n\nReverse engineering: if you play video games, download cheat engine, read some tutorials, first give yourself unlimited health in a game (single player please, don't mess with this stuff for multiplayer). This will also start you on assembler knowledge.\n\nAssembler: using the information you got in a cheat engine, write your own trainer for a game of your choice. Or maybe follow the \"smashing the stack for fun and profit.\" Paper.\n\nWindows/Linux user space app: there are a ton of opportunities here. Small video games (Terris, snake), calendar apps, a phone book. Google ~~\"windows api GUI\"~~ \"WinForms\" or \"Windows Presentation Foundation\" (thanks, /u/shinaku) to find how to make guis under windows. Or \"QT GUI tutorial\" for Linux' KDE environment, or \"GTK GUI tutorial\" for gnome.\n\nI've never wrote windows drivers, never googled tutorial for it either, so idk about windows but Linux has a ton of \"hello world\" like tutorials for modules (Linux modules are window's drivers). Google \"Linux module tutorial\"\n\nIf you write some games especially in QT, you'll learn a descent amount of advanced c++ - memory management, classes, abstractions, etc. \n\nThen, write a chat in python. This'll get you into networks. For this, Google \"python sockets\". Maybe write your own IRC client (just very basic). Then for TCP/IP you can write an app to transfer files over network. Google \"python TCP tutorial\"\n","corpus": "reddit"},{"docID": "t5_2qhmr","qSentId": 9662,"question": "The following isn't a set in stone idea, just what I like or think is an easy start.\n\nReverse engineering: if you play video games, download cheat engine, read some tutorials, first give yourself unlimited health in a game (single player please, don't mess with this stuff for multiplayer). This will also start you on assembler knowledge.\n\nAssembler: using the information you got in a cheat engine, write your own trainer for a game of your choice. Or maybe follow the \"smashing the stack for fun and profit.\" Paper.\n\nWindows/Linux user space app: there are a ton of opportunities here. Small video games (Terris, snake), calendar apps, a phone book. Google ~~\"windows api GUI\"~~ \"WinForms\" or \"Windows Presentation Foundation\" (thanks, /u/shinaku) to find how to make guis under windows. Or \"QT GUI tutorial\" for Linux' KDE environment, or \"GTK GUI tutorial\" for gnome.\n\nI've never wrote windows drivers, never googled tutorial for it either, so idk about windows but Linux has a ton of \"hello world\" like tutorials for modules (Linux modules are window's drivers). Google \"Linux module tutorial\"\n\nIf you write some games especially in QT, you'll learn a descent amount of advanced c++ - memory management, classes, abstractions, etc. \n\nThen, write a chat in python. This'll get you into networks. For this, Google \"python sockets\". Maybe write your own IRC client (just very basic). Then for TCP/IP you can write an app to transfer files over network. Google \"python TCP tutorial\"\n","aSentId": 9663,"answer": "&gt; windows api GUI\"\n\nGood response except I think for this bit.  Generally when you're writing for windows you'd rarely touch any of the Windows API unless you want a very low level amount of flexibility (and it's old code, poorly documented and a nightmare to work with).  You'd be best looking at WinForms or Windows Presentation Foundation on top of .NET to get into windows user space development.","corpus": "reddit"},{"docID": "t5_2qhmr","qSentId": 9664,"question": "&gt; windows api GUI\"\n\nGood response except I think for this bit.  Generally when you're writing for windows you'd rarely touch any of the Windows API unless you want a very low level amount of flexibility (and it's old code, poorly documented and a nightmare to work with).  You'd be best looking at WinForms or Windows Presentation Foundation on top of .NET to get into windows user space development.","aSentId": 9665,"answer": "Ah, I haven't coded for windows for about 10 years. Didn't know of this. I'll fix it. Thanks!","corpus": "reddit"},{"docID": "t5_2qhmr","qSentId": 9662,"question": "The following isn't a set in stone idea, just what I like or think is an easy start.\n\nReverse engineering: if you play video games, download cheat engine, read some tutorials, first give yourself unlimited health in a game (single player please, don't mess with this stuff for multiplayer). This will also start you on assembler knowledge.\n\nAssembler: using the information you got in a cheat engine, write your own trainer for a game of your choice. Or maybe follow the \"smashing the stack for fun and profit.\" Paper.\n\nWindows/Linux user space app: there are a ton of opportunities here. Small video games (Terris, snake), calendar apps, a phone book. Google ~~\"windows api GUI\"~~ \"WinForms\" or \"Windows Presentation Foundation\" (thanks, /u/shinaku) to find how to make guis under windows. Or \"QT GUI tutorial\" for Linux' KDE environment, or \"GTK GUI tutorial\" for gnome.\n\nI've never wrote windows drivers, never googled tutorial for it either, so idk about windows but Linux has a ton of \"hello world\" like tutorials for modules (Linux modules are window's drivers). Google \"Linux module tutorial\"\n\nIf you write some games especially in QT, you'll learn a descent amount of advanced c++ - memory management, classes, abstractions, etc. \n\nThen, write a chat in python. This'll get you into networks. For this, Google \"python sockets\". Maybe write your own IRC client (just very basic). Then for TCP/IP you can write an app to transfer files over network. Google \"python TCP tutorial\"\n","aSentId": 9667,"answer": "Considering Qt mostly handles the memory for you he won't learn advanced memory management with it, unless he starts purposely allocating memory without parents.","corpus": "reddit"},{"docID": "t5_2qhmr","qSentId": 9660,"question": "Where do I start?","aSentId": 9669,"answer": "That's a pretty vast range of stuff to cover.  I wouldn't expect to become an expert in it by the time you graduate - unless you do nothing but research.  A lot of the courses you'll take will cover introductions into a good amount of that stuff.  A good amount of it will take some time to become really proficient in (reverse engineering, driver writing).  Python might be the \"easiest\" starting point, as its just a language.  Following that, networking might be the way to go.\n\nA lot of this depends on what you want to do, and what you like to do as well.","corpus": "reddit"},{"docID": "t5_2qhmr","qSentId": 9660,"question": "Where do I start?","aSentId": 9671,"answer": "In all honesty I don't think that kind of bottom up skill list is all that helpful when you're just getting started. Instead I would start with what you want to do/build, and start trying to do/build it now, learning the necessary skills along the way. \n\nEdit: I guess I should add that once you are able to build what you want to build, then a skills list can be a useful way to manage your further learning. For example, here is my [developer's reading list](http://stevewedig.com/2014/02/03/software-developers-reading-list/) with 16-20 concepts on it. But if you're just starting out, I would stay goal directed rather than \"studying everything\".","corpus": "reddit"},{"docID": "t5_2qhmr","qSentId": 9672,"question": "In all honesty I don't think that kind of bottom up skill list is all that helpful when you're just getting started. Instead I would start with what you want to do/build, and start trying to do/build it now, learning the necessary skills along the way. \n\nEdit: I guess I should add that once you are able to build what you want to build, then a skills list can be a useful way to manage your further learning. For example, here is my [developer's reading list](http://stevewedig.com/2014/02/03/software-developers-reading-list/) with 16-20 concepts on it. But if you're just starting out, I would stay goal directed rather than \"studying everything\".","aSentId": 9673,"answer": "I think that style of bottom up skill will be a very good thing to aim for and they are the kinds of thing which will give them an extremely solid grounding in modern computing systems in a way which puts them on a completely different level to a lot of other fresh CS grads and run of the mill developers.\n\nThe books you've listed are interesting, but I don't think they're the kind of reading material that a fresh student would have to dig into. They'd be useful for a developer with a couple of years experience who wants to get a better understanding of how to build large maintainable code systems, but that kind of thing isn't expected of fresh grad students.\n\nWhat's useful is digging deep into how programs run, how are executables loaded, what is kernel mode, *why* do programs crash, what's the stack, the heap, how does the kernel manage the virtual address space etc.\n\nAll of that stuff they should be learning at some point during their CS course, but they won't push you to get a real understanding of these things.\n\nIMO the best way to get this kind of understanding is to jump into reverse engineering, disassembling the simplest of C or C++ programs that you've written, debugging programs without having the source code.\n\nThey will end up spending a lot of time looking at the guts and internals of systems from the inside out, they will see how GUI calls are handled by the Win32 layer, see how other people have written apps and the kinds of libraries they use and which way they use them.\n\nHaving the skills to be able to dissect and comprehend any program regardless of where it's running or what it's running in will get them ahead, not reading about how to write clean maintainable code.\n\nWhere to start?\n\n * OllyDBG and IDA - disassemble and debug *everything* on your system\n * Find the documentation for *everything* you don't understand, and read it.\n * Learn Linux, use objdump to disassemble your own simple C programs\n * Download lots of source code, it doesn't matter which language it's in, read the source then try and build and modify it.\n * Learn how to debug C programs with GDB\n * Try doing as many crackmes as you can bare\n * Get the Windows driver toolkit, install a kernel module\n * Learn about sql injection and webapp security\n * Decompile Objective-C programs, how are they different from C and C++ programs?\n * Install Minix and write your own scheduler\n * Try and patch executables, how many bytes can you replace with 0x90 in a hexeditor before stuff breaks, why does it break?\n * See how different compilers compile the same program, which difference do optimisation flags make?\n * Write a bootloader in assembler that prints 'Hello World' on Bochs, Qemu or any x86 computer.\n * Follow some tutorials to write a Linux kernel driver from scratch\n * Find tools to decompile .NET programs, decompile every program you can find\n\nIt will need a lot of initiative, but even if the initiative is 'lets see how this works' then that should be enough to drive them into the depths and into the zone.","corpus": "reddit"},{"docID": "t5_2qhmr","qSentId": 9674,"question": "I think that style of bottom up skill will be a very good thing to aim for and they are the kinds of thing which will give them an extremely solid grounding in modern computing systems in a way which puts them on a completely different level to a lot of other fresh CS grads and run of the mill developers.\n\nThe books you've listed are interesting, but I don't think they're the kind of reading material that a fresh student would have to dig into. They'd be useful for a developer with a couple of years experience who wants to get a better understanding of how to build large maintainable code systems, but that kind of thing isn't expected of fresh grad students.\n\nWhat's useful is digging deep into how programs run, how are executables loaded, what is kernel mode, *why* do programs crash, what's the stack, the heap, how does the kernel manage the virtual address space etc.\n\nAll of that stuff they should be learning at some point during their CS course, but they won't push you to get a real understanding of these things.\n\nIMO the best way to get this kind of understanding is to jump into reverse engineering, disassembling the simplest of C or C++ programs that you've written, debugging programs without having the source code.\n\nThey will end up spending a lot of time looking at the guts and internals of systems from the inside out, they will see how GUI calls are handled by the Win32 layer, see how other people have written apps and the kinds of libraries they use and which way they use them.\n\nHaving the skills to be able to dissect and comprehend any program regardless of where it's running or what it's running in will get them ahead, not reading about how to write clean maintainable code.\n\nWhere to start?\n\n * OllyDBG and IDA - disassemble and debug *everything* on your system\n * Find the documentation for *everything* you don't understand, and read it.\n * Learn Linux, use objdump to disassemble your own simple C programs\n * Download lots of source code, it doesn't matter which language it's in, read the source then try and build and modify it.\n * Learn how to debug C programs with GDB\n * Try doing as many crackmes as you can bare\n * Get the Windows driver toolkit, install a kernel module\n * Learn about sql injection and webapp security\n * Decompile Objective-C programs, how are they different from C and C++ programs?\n * Install Minix and write your own scheduler\n * Try and patch executables, how many bytes can you replace with 0x90 in a hexeditor before stuff breaks, why does it break?\n * See how different compilers compile the same program, which difference do optimisation flags make?\n * Write a bootloader in assembler that prints 'Hello World' on Bochs, Qemu or any x86 computer.\n * Follow some tutorials to write a Linux kernel driver from scratch\n * Find tools to decompile .NET programs, decompile every program you can find\n\nIt will need a lot of initiative, but even if the initiative is 'lets see how this works' then that should be enough to drive them into the depths and into the zone.","aSentId": 9675,"answer": "Oh yeah, I agree that my reading list is not relevant to OP right now. I intended to illustrate that I am not fundamentally opposed to bottom up learning, but that I think concrete goal directed learning is a more effective way to \"get where you're going\". Once you've crossed that threshold, then subject/book lists make sense to me to increase your breadth/depth of knowledge. I guess I'm saying that project based learning provides a more accurate heuristic for what OP will need to actually know than a broad topic list.","corpus": "reddit"},{"docID": "t5_2qhmr","qSentId": 9679,"question": "Any idea for a computer science club?","aSentId": 9680,"answer": "The should be cakes.\n\nThere was a club for kintting and they like you felt they had no direction and lack of interests. They hired me as a consultant to impreve the image and parcitipation so i said the should be cakes and they had the cakes and then there were many members and committee.","corpus": "reddit"},{"docID": "t5_2qhmr","qSentId": 9679,"question": "Any idea for a computer science club?","aSentId": 9682,"answer": "You guys should try and put together a team for a hack-a-thon in the area, then you can teach each other better coding skills, and practice leading up to the event.\n\nAnother idea is to make a program to go into high schools or low-income areas, and teach basic computer programming to kids. Maybe make it an after school type deal.\n\nThere are a bunch of directions to take, try and get feedback from the group. What type of things do you guys like to do? Then keep pushing with those types of things...\n\nBTW, I wasn't in a comp sci club, but I've been to a ton of meetups, etc. Hopefully that helps.","corpus": "reddit"},{"docID": "t5_2qhmr","qSentId": 9683,"question": "You guys should try and put together a team for a hack-a-thon in the area, then you can teach each other better coding skills, and practice leading up to the event.\n\nAnother idea is to make a program to go into high schools or low-income areas, and teach basic computer programming to kids. Maybe make it an after school type deal.\n\nThere are a bunch of directions to take, try and get feedback from the group. What type of things do you guys like to do? Then keep pushing with those types of things...\n\nBTW, I wasn't in a comp sci club, but I've been to a ton of meetups, etc. Hopefully that helps.","aSentId": 9684,"answer": "I am interested in the hacking portion, but recently a Computer Security has propped up in our college that is heavily focused on that. We were talking about a possible merger, but to be honest I feel like the Computer Security club will just overtake our club to due to it being directionless. I want to try to diversify the interest among Computer-related fields","corpus": "reddit"},{"docID": "t5_2qhmr","qSentId": 9686,"question": "Freshman in high school, is math super important? Help please.","aSentId": 9687,"answer": "You have time as a freshman and by starting now you'll be way ahead of most people. Generally (as far as my curriculum goes), we take up to linear algebra on the math track but there's also some other math courses like discrete math that you'd probably take. From my experience, cs is pretty math heavy, so if you hate math, I don't know how much you'll like cs. I've observed that many students start dropping the cs track during discrete math since it introduces a different way of thinking and you have to become acclimated with writing proofs. And depending on what you might concentrate in for your major, you'll have even more math classes.\n\nI would suggest brushing up on math because you will need to know quite a bit of it for cs. I meet many people that want to do cs because they like programming but soon regret that choice when they realize what cs actually entails.\n\nBut you're only a freshman so you have so much time to explore your passions and improve in areas of interests. ","corpus": "reddit"},{"docID": "t5_2qhmr","qSentId": 9688,"question": "You have time as a freshman and by starting now you'll be way ahead of most people. Generally (as far as my curriculum goes), we take up to linear algebra on the math track but there's also some other math courses like discrete math that you'd probably take. From my experience, cs is pretty math heavy, so if you hate math, I don't know how much you'll like cs. I've observed that many students start dropping the cs track during discrete math since it introduces a different way of thinking and you have to become acclimated with writing proofs. And depending on what you might concentrate in for your major, you'll have even more math classes.\n\nI would suggest brushing up on math because you will need to know quite a bit of it for cs. I meet many people that want to do cs because they like programming but soon regret that choice when they realize what cs actually entails.\n\nBut you're only a freshman so you have so much time to explore your passions and improve in areas of interests. ","aSentId": 9689,"answer": "Yeah, I've decided that programming is the way to go. I think that the reason I hate math is because I don't know how to do it and that I'm so far behind. Thanks for replying!","corpus": "reddit"},{"docID": "t5_2qhmr","qSentId": 9686,"question": "Freshman in high school, is math super important? Help please.","aSentId": 9691,"answer": "Don't worry about it. There's a lot of math in programming, but almost all of it is really easy math. The small amount of hard stuff only really shows up when you're dealing with 3D graphics, physical or scientific simulations, or advanced algorithm analysis.\n\nIn any case, most of this stuff you'll learn as you go. The sheer amount of practice you get will make the common mathematical aspects of programming second nature to you before very long.","corpus": "reddit"},{"docID": "t5_2qhmr","qSentId": 9686,"question": "Freshman in high school, is math super important? Help please.","aSentId": 9693,"answer": "Math is really important in CS. Calculus, linear algebra, and discrete mathematics are all pretty necessary if you want to do anything beyond business-level drudge coding.\n\nSeriously, it's right there on the sidebar.","corpus": "reddit"},{"docID": "t5_2qhmr","qSentId": 9694,"question": "Math is really important in CS. Calculus, linear algebra, and discrete mathematics are all pretty necessary if you want to do anything beyond business-level drudge coding.\n\nSeriously, it's right there on the sidebar.","aSentId": 9695,"answer": "Thanks for the reply! I'm going to take Algebra 1 again over the summer.\n\nSorry dude, I probably should put the sidebar in my custom css layout I made.","corpus": "reddit"},{"docID": "t5_2qhmr","qSentId": 9697,"question": "Math is important. Tips? It's simple; pay attention in class (don't browse reddit in class) and ASK QUESTIONS/BE INVOLVED. The biggest problem I had in high school math was not understanding a topic until I did the homework and reviewed it during class. My junior and senior years I had the same teach for math (pre-calc/calc) and he was the best thing for my math career since he made every student answer and show their answers to homework.\n\nAs for importance... As a sophomore in college, I have already taken 4 math classes and I am taking 2 more this semester.","aSentId": 9698,"answer": "Your reply is greatly appreciated! I'm gonna be reviewing math over the summer and doing plenty outside of class. I'm deciding if I should do EVERY single homework assignment over, starting from day 1. Yes, it'll be a pain in the ass, but might be worthwhile.\n\nGood luck with your math in college!","corpus": "reddit"},{"docID": "t5_2qhmr","qSentId": 9700,"question": "Try to take up to Trigonometry, Algebra 2, and preCalculus before finishing high school and you will be fine (as long as you apply yourself in college).  Most compSci colleges will require you to take Calculus for 2-3 semesters, a statistics class, and possibly a linear algebra class.  As long as you have a solid understanding of algebra and trigonometry, you should be okay for those classes, as they build upon each other.\n\nSome upper level compsci classes may require you to take more complicated math classes, but I don't think you could prepare for those in high school. \n\n\nIf you really want to get ahead of the game, try to take the AP Calculus AB and BC classes while in high school.  That will save you 2 semesters worth of math classes, if you pass the test at the end.  \n\n\nMost (not all!) computer science classes do not require hard maths as you think of them.  A lot of the math you will use is really only applicable to computer science (such as computing the asymptotic run time of code).\n\nIf you have any other questions feel free to reply/PM, I'm currently a 3rd year undergraduate student enrolled in a decent computer science college.","aSentId": 9701,"answer": "Thanks dude! I might send you a message. Hopefully you aren't as true as your username :D","corpus": "reddit"},{"docID": "t5_2qhmr","qSentId": 9703,"question": "The math stuff has been answered, but my formal grammar nerd has another tip :) These days, \"whom\" is becoming something of a status marker - colloquial English has pretty much given up on it. Thing about status markers is, they don't work if you get them wrong.\n\nYou actually want \"(who subsequently got fired)\" - arguably \"who was subsequently fired\", but definitely \"who\". \n\nThe teacher here is the subject, not the object.","aSentId": 9704,"answer": "Thanks! Honestly, I'm supermegamultitasking at the moment, too lazy to care about my grammar. Sorry m8, edited","corpus": "reddit"},{"docID": "t5_2qhmr","qSentId": 9707,"question": "What would be a good laptop for a cs major?","aSentId": 9708,"answer": "I personally have a Macbook Pro 13' 2011 model. It's served me absolutely wonderfully for the past 4 years. While I think Apple is finally starting to drive me away with their cloud horseshit, I still think OSX is the most reliable and useful OS for programming overall. My experience in 4 years of a computer science degree:\n\nOverall: OSX &gt; Linux &gt; Windows\n\nEase of use: OSX &gt;= Linux &gt;&gt;&gt;&gt;&gt;&gt;&gt; Windows\n\nCustomization/Freedom: Linux &gt; Windows &gt; OSX\n\nGaming: Windows\n\nFor computer science, OSX has everything you need in a pretty, fluid, well-supported package.\n\nLinux has everything you need and more, allowing you to really do whatever the fuck you want. This comes with a higher degree of uncertainty in terms of software though. Not every package is gonna be perfect and it might hurt you if you have to rely on them. If you intend to go manmode with a single boot Linux machine, look into finding some cheap laptops with easily upgradeable parts (i.e. RAM and storage) and snag that, swap in some updated hardware, and boot linux. It seems most people like Thinkpads for this approach.\n\nWindows is just downright unpleasant to program in for me. Though it also has the largest breadth of polished and specific programs available to you in general. Only feasible gaming platform.","corpus": "reddit"},{"docID": "t5_2qhmr","qSentId": 9709,"question": "I personally have a Macbook Pro 13' 2011 model. It's served me absolutely wonderfully for the past 4 years. While I think Apple is finally starting to drive me away with their cloud horseshit, I still think OSX is the most reliable and useful OS for programming overall. My experience in 4 years of a computer science degree:\n\nOverall: OSX &gt; Linux &gt; Windows\n\nEase of use: OSX &gt;= Linux &gt;&gt;&gt;&gt;&gt;&gt;&gt; Windows\n\nCustomization/Freedom: Linux &gt; Windows &gt; OSX\n\nGaming: Windows\n\nFor computer science, OSX has everything you need in a pretty, fluid, well-supported package.\n\nLinux has everything you need and more, allowing you to really do whatever the fuck you want. This comes with a higher degree of uncertainty in terms of software though. Not every package is gonna be perfect and it might hurt you if you have to rely on them. If you intend to go manmode with a single boot Linux machine, look into finding some cheap laptops with easily upgradeable parts (i.e. RAM and storage) and snag that, swap in some updated hardware, and boot linux. It seems most people like Thinkpads for this approach.\n\nWindows is just downright unpleasant to program in for me. Though it also has the largest breadth of polished and specific programs available to you in general. Only feasible gaming platform.","aSentId": 9710,"answer": "Can you elaborate on why Windows is unpleasant? Most IDEs are going to be close to identical across OS's right?","corpus": "reddit"},{"docID": "t5_2qhmr","qSentId": 9711,"question": "Can you elaborate on why Windows is unpleasant? Most IDEs are going to be close to identical across OS's right?","aSentId": 9712,"answer": "Out of the box, Windows has no tools aside from Notepad and a bad graphical file manager. You have to build your development environment from scratch, and just installing an IDE won't be enough unless you're working in a very narrow problem domain. \n\nOS X and Linux distros get you a very large toolkit preinstalled and standardized: basic composable text manipulation tools, man pages, scripting languages and C and C++ compilers, at least two or three version control systems, a bunch of libraries with headers under open-source licenses, system administration tools that are scriptable and much more transparent.\n\nYou can get that kind of stuff on Windows, but your choices are to either use something like cygwin to get the Unix tools, or use Windows-specific substitutes that behave differently and often aren't composable or even usable from a command line.","corpus": "reddit"},{"docID": "t5_2qhmr","qSentId": 9707,"question": "What would be a good laptop for a cs major?","aSentId": 9714,"answer": "MacBook Pro ","corpus": "reddit"},{"docID": "t5_2qhmr","qSentId": 9707,"question": "What would be a good laptop for a cs major?","aSentId": 9716,"answer": "What will you use it for besides programming?","corpus": "reddit"},{"docID": "t5_2qhmr","qSentId": 9717,"question": "What will you use it for besides programming?","aSentId": 9718,"answer": "Random student-y stuff. Maybe a tad of gaming. Streaming soccer games. ","corpus": "reddit"},{"docID": "t5_2qhmr","qSentId": 9724,"question": "Any laptop you can work with. I bought a x61 (upgraded ram to 4GB and an ssd) used for a few bucks and I work with it when I'm at uni or travelling.  \nIt doesn't matter if it costs a few hundred bucks more than it should and has a glowing fruit on the top (however they're not as overpriced as they used to be) or if it's a cheap shoot.\n\nIf you want something for longer buy a modular laptop, just like the ThinkPads (there are other manufacturers with modular builds than IBM/lenovo, I just had the best experiences with ThinkPads). Something is broken? No problem, break it up and put the replacement in. Personally I had the worst experiences with Asus and Samsung and never heard anything good about them.\n\nBut if you just want something that screams 'I am a student and I'm different!!!' buy an iDiot and plaster some stickers on it you gathered from coding conventions. And don't forget to call yourself a 'code artisan'.\n\nMy recommendation would be to buy a used ThinkPad from the last four years. You have more power than enough to work with and you'll save lots of money - if you get a good deal up 50% and then you can rather invest the saved money in a second battery. You will rather need that than a few hundred mhz more per core and writing assignments or code on a high res monitor doesn't improve your quality.  \nBut what will help you for working at your own desk will be a second pivoted monitor so spend some of your saved money on that. You'll love it.","aSentId": 9725,"answer": "Thanks for the advice! \"Code artisan\" has a nice ring to it.","corpus": "reddit"},{"docID": "t5_2qhmr","qSentId": 9726,"question": "Thanks for the advice! \"Code artisan\" has a nice ring to it.","aSentId": 9727,"answer": "I'll never understand some people's rabid hate for Apple. Buy what works for you. I work for a software company now where a ton of people including myself are on macs. I honestly prefer OS X to windows for nearly everything. It's like Linux, except there is money behind it. \n\nI'm close to finishing my CS degree and my personal MacBook Air has been a champ. I can build my company's full stack on it in a VM and it won't break a sweat. It's also light, and there isn't a windows machine around that has a battery that will come close to lasting 12-13 hours on a charge. Hell, at the time my i7 MacBook Air was the cheapest Haswell based laptop I could find. \n\nThere are pros and cons to every machine, so I wouldn't dismiss any particular brand because a neckbeard on the Internet tells you to. Figure out what your needs and preferences are and find a machine to match. \n\nI used to have a beast of a desktop that I built but I don't game and ended up using my Mac 100% of the time. I'm not biased towards an OS or brand for anything other than the utility that they produce. ","corpus": "reddit"},{"docID": "t5_2qhmr","qSentId": 9729,"question": "Are you planning to use Linux?\n\nI would recommend a nice ThinkPad.","aSentId": 9730,"answer": "Which model would you recommend?I'm hearing a lot about the t440s.","corpus": "reddit"},{"docID": "t5_2qhmr","qSentId": 9734,"question": "Alan Turing's notes found being used as roof insulation in Hut 6 at Bletchley Park","aSentId": 9735,"answer": "I guess his work just went over their heads.","corpus": "reddit"},{"docID": "t5_2qhmr","qSentId": 9736,"question": "I guess his work just went over their heads.","aSentId": 9737,"answer": "Well, I'm glad someone cracked that enigma.","corpus": "reddit"},{"docID": "t5_2qhmr","qSentId": 9736,"question": "I guess his work just went over their heads.","aSentId": 9739,"answer": "That joke was a bit unexpected.","corpus": "reddit"},{"docID": "t5_2qhmr","qSentId": 9734,"question": "Alan Turing's notes found being used as roof insulation in Hut 6 at Bletchley Park","aSentId": 9741,"answer": "Looks like it was found 2 years ago in 2013?","corpus": "reddit"},{"docID": "t5_2qhmr","qSentId": 9742,"question": "Looks like it was found 2 years ago in 2013?","aSentId": 9743,"answer": "Looks like we just found a new TIL post!","corpus": "reddit"},{"docID": "t5_2qhmr","qSentId": 9734,"question": "Alan Turing's notes found being used as roof insulation in Hut 6 at Bletchley Park","aSentId": 9745,"answer": "Amazing and Inspiring!\n\n&gt;\"The fact that these papers were used to block draughty holes in the primitive hut walls reminds us of the rudimentary conditions under which these extraordinary people were working.\u201d","corpus": "reddit"},{"docID": "t5_2qhmr","qSentId": 9746,"question": "Amazing and Inspiring!\n\n&gt;\"The fact that these papers were used to block draughty holes in the primitive hut walls reminds us of the rudimentary conditions under which these extraordinary people were working.\u201d","aSentId": 9747,"answer": "He made the hut Turing complete.","corpus": "reddit"},{"docID": "t5_2qhmr","qSentId": 9748,"question": "He made the hut Turing complete.","aSentId": 9749,"answer": "really tied the whole thing together?","corpus": "reddit"},{"docID": "t5_2qhmr","qSentId": 9751,"question": "It's funny how things turn out.\n\nHandel died being the most famous composer of his time.\n\nBach died being known mostly as a respected organist.\n\nNot to downplay the achievements of Handel, but it is funny to think that Bach did not realize the fame he would later achieve. ","aSentId": 9752,"answer": "Handel is just easier to grasp. ","corpus": "reddit"},{"docID": "t5_2qhmr","qSentId": 9751,"question": "It's funny how things turn out.\n\nHandel died being the most famous composer of his time.\n\nBach died being known mostly as a respected organist.\n\nNot to downplay the achievements of Handel, but it is funny to think that Bach did not realize the fame he would later achieve. ","aSentId": 9754,"answer": "I don't get it. What do Handel and Bach have to do with Turing? ","corpus": "reddit"},{"docID": "t5_2qhmr","qSentId": 9755,"question": "I don't get it. What do Handel and Bach have to do with Turing? ","aSentId": 9756,"answer": "They're well known for their works but weren't very appreciated until well after they died.","corpus": "reddit"},{"docID": "t5_2qhmr","qSentId": 9751,"question": "It's funny how things turn out.\n\nHandel died being the most famous composer of his time.\n\nBach died being known mostly as a respected organist.\n\nNot to downplay the achievements of Handel, but it is funny to think that Bach did not realize the fame he would later achieve. ","aSentId": 9758,"answer": "Bizet's Carmen was considered subpar at the time of his death.","corpus": "reddit"},{"docID": "t5_2qhmr","qSentId": 9764,"question": "How important is OS course for a SWE?","aSentId": 9765,"answer": "I think a lot of it is important, but a lot of it is really low level stuff that won't make too much of a difference in your daily life. One important thing that comes to mind is learning how to avoid race conditions in multithreaded code. Not sure about your class, but most of my projects were pretty fun. There was a ton of work, but I think it's worth really learning at least some of the topics.","corpus": "reddit"},{"docID": "t5_2qhmr","qSentId": 9766,"question": "I think a lot of it is important, but a lot of it is really low level stuff that won't make too much of a difference in your daily life. One important thing that comes to mind is learning how to avoid race conditions in multithreaded code. Not sure about your class, but most of my projects were pretty fun. There was a ton of work, but I think it's worth really learning at least some of the topics.","aSentId": 9767,"answer": "I will have to second your opinion. I just took an OS course before christmas that was largely based on the same book as OP's. Everything related to concurrency is very worth spending some extra time on, preferably as early as possible. It feels like one of the most important parts to keep with you after the course, and also the part that can be the trickiest to learn. At least with the topics that was brought up in our course.\n\nI had taken a course in concurrent programming earlier, so that part was fairly easy for me, but I noticed a lot of people in my class struggled with it for assignments.","corpus": "reddit"},{"docID": "t5_2qhmr","qSentId": 9764,"question": "How important is OS course for a SWE?","aSentId": 9769,"answer": "Of all the courses I took as an undergrad in CS I think Operating Systems was one of the most important and continues to be one of the most useful (as far as concepts learned) in my working life. \n\n","corpus": "reddit"},{"docID": "t5_2qhmr","qSentId": 9764,"question": "How important is OS course for a SWE?","aSentId": 9771,"answer": "&gt; Should I just memorize some parts and learn just enough to get a good grade\n\nDon't be delusional my friend: this is not the class where you memorize some stuff, stride along, and collect a good grade at the end. \n\nIf your CS program is anywhere near decent, this will be one highly loaded (and highly rewarding!) course in all of your undergrad years as a CS student. \n\nLearn everything you can from the class: you will find the concepts from that class useful no matter what you do later in your career: unless you devolved into UX design side, which is more of Psychological Science than Physical Science or Engineering. ","corpus": "reddit"},{"docID": "t5_2qhmr","qSentId": 9776,"question": "Help! Deciding between different European universities for masters program","aSentId": 9777,"answer": "Ignore the rankings \u2013 they aggregate all kinds of information and probably won't help you much. Just because a university employs several Nobel prize winning physicists (for example), doesn't mean they have a Masters degree that aligns with your interests.\n\nMy advice would be to try to find research papers that you find inspiring (or alternatively, what find out what the researchers at these institutions are publishing). That should give you a pretty indication of whether you'd fit. Often, you can find all kinds of course information, such as slides or lecture notes, online pretty easily. Based on that information, you should be able to find the Masters degree and staff that fit best with your interests.\n\nFull disclosure: I'm a lecturer in Utrecht. I know excellent people at all the universities you listed (except Helsinki for some reason).","corpus": "reddit"},{"docID": "t5_2qhmr","qSentId": 9776,"question": "Help! Deciding between different European universities for masters program","aSentId": 9779,"answer": "I'm a student at Utrecht, here's my experience. \n\nI love the program, but it's very focused, so make sure it fits your goals. For example, I'm into functional programming, but if you're not you might find the language classes tough. \n\nIf you're into functional programming, data mining, empirical algorithms, theoretical algorithms, or game/multimedia stuff, then the program is excellent. \n\nBe aware that their AI program is quite theoretical and separate from the CS program. You can take lots of CS electives, but the core AI classes are tend to either focus on pure logic, or psychology. I wasn't in that program, this is just the impression I got from those who were. \n\nThe city is very nice! It's a bit hard to find a place to live, and you'll be biking lots, but it's quite pretty. And very close to Amsterdam for events and stuff. ","corpus": "reddit"},{"docID": "t5_2qhmr","qSentId": 9776,"question": "Help! Deciding between different European universities for masters program","aSentId": 9781,"answer": "Come to Munich, live in a dorm, have fun! Edit: Preferably Studentenstadt, it's the best!","corpus": "reddit"},{"docID": "t5_2qhmr","qSentId": 9782,"question": "Come to Munich, live in a dorm, have fun! Edit: Preferably Studentenstadt, it's the best!","aSentId": 9783,"answer": "Just took a look at their website - Studentenstadt's prices are surprisingly reasonable.  Back to the good ol' days of dorm life... looks awesome!  Thanks for the suggestion","corpus": "reddit"},{"docID": "t5_2qhmr","qSentId": 9784,"question": "Just took a look at their website - Studentenstadt's prices are surprisingly reasonable.  Back to the good ol' days of dorm life... looks awesome!  Thanks for the suggestion","aSentId": 9785,"answer": "I can recommend the CS masters at the TUM as well (not only the accomodation\\^\\^). You'll have no problem finding English lectures for a masters. While you're here, also do some of Prof. Nipkow's courses, he seems to be the most well-known TUM professor. He does theoretical computer science.","corpus": "reddit"},{"docID": "t5_2qhmr","qSentId": 9787,"question": "Practicing for Google Code Jam...I've Never Heard of a Horn Clause...What College Class Would Cover It?","aSentId": 9788,"answer": "They were covered in my Programming Languages course when we got to the section covering logic programming and Prolog.","corpus": "reddit"},{"docID": "t5_2qhmr","qSentId": 9787,"question": "Practicing for Google Code Jam...I've Never Heard of a Horn Clause...What College Class Would Cover It?","aSentId": 9790,"answer": "I covered them in my Intro to AI course. As mentioned elsewhere in the thread, the Russell and Norvig book is good","corpus": "reddit"},{"docID": "t5_2qhmr","qSentId": 9792,"question": "Looking for people to critique/test/provide feedback on a programming language I am designing for CS Master's capstone","aSentId": 9793,"answer": "This sounds quite interesting, feel free to send me a message.","corpus": "reddit"},{"docID": "t5_2qhmr","qSentId": 9792,"question": "Looking for people to critique/test/provide feedback on a programming language I am designing for CS Master's capstone","aSentId": 9795,"answer": "I'd say I'm mid to low on the intermediate side, I'd be happy to help. Feel free to pm me.","corpus": "reddit"},{"docID": "t5_2qhmr","qSentId": 9792,"question": "Looking for people to critique/test/provide feedback on a programming language I am designing for CS Master's capstone","aSentId": 9797,"answer": "Thanks for the responses and PMs. I will continue my work into next week and then contact each of you who have taken the time to respond.  I just have to determine exactly how/what to share with you all to convey the language design, grammar and syntax properly.\n\nRegards to all.","corpus": "reddit"},{"docID": "t5_2qhmr","qSentId": 9798,"question": "Thanks for the responses and PMs. I will continue my work into next week and then contact each of you who have taken the time to respond.  I just have to determine exactly how/what to share with you all to convey the language design, grammar and syntax properly.\n\nRegards to all.","aSentId": 9799,"answer": "Hit me up. 16 year-old here who could be the test subject for the intro-level programming, I could also test usability from a consumer standpoint as well. ","corpus": "reddit"},{"docID": "t5_2qhmr","qSentId": 9802,"question": "I'm sorry if this isn't the place to ask, but who hires compsci majors, and what jobs are generally more accessible to compsci majors than to someone who has learned programming on their own. Assume I understand that compsci != programming","aSentId": 9803,"answer": "I have had a few friends that don't like coding but have cs degrees and they got MBAs and are now tech execs. Sounds boring to me but, to each their own. They do make more money than me.","corpus": "reddit"},{"docID": "t5_2qhmr","qSentId": 9804,"question": "I have had a few friends that don't like coding but have cs degrees and they got MBAs and are now tech execs. Sounds boring to me but, to each their own. They do make more money than me.","aSentId": 9805,"answer": "Thanks for the input.  Do you think that those CS degrees put them ahead of your average in the running for those exec jobs?","corpus": "reddit"},{"docID": "t5_2qhmr","qSentId": 9806,"question": "Thanks for the input.  Do you think that those CS degrees put them ahead of your average in the running for those exec jobs?","aSentId": 9807,"answer": "Only in certain positions. They have titles like CTO, CIO, director of technology etc. While these are c-suite level titles they are very tech heavy. You wont likely find a cs major running a marketing dept but I have seen it before. Usually at a tech company though.\n\nOn the other side I have seen a lot of elitism from new cs grads. They believe that they are now smarter than others just because they can tell a machine what to do. I know many brilliant programmers who I wouldn't hire in a million years. These are my friends too, but they are assholes when it comes to gathering requirements and documenting work. Very little of sw dev is actually writing code.","corpus": "reddit"},{"docID": "t5_2qhmr","qSentId": 9808,"question": "Only in certain positions. They have titles like CTO, CIO, director of technology etc. While these are c-suite level titles they are very tech heavy. You wont likely find a cs major running a marketing dept but I have seen it before. Usually at a tech company though.\n\nOn the other side I have seen a lot of elitism from new cs grads. They believe that they are now smarter than others just because they can tell a machine what to do. I know many brilliant programmers who I wouldn't hire in a million years. These are my friends too, but they are assholes when it comes to gathering requirements and documenting work. Very little of sw dev is actually writing code.","aSentId": 9809,"answer": "Could you expand a bit upon what you mean when you say \"gathering requirements and documenting work?\"  ","corpus": "reddit"},{"docID": "t5_2qhmr","qSentId": 9808,"question": "Only in certain positions. They have titles like CTO, CIO, director of technology etc. While these are c-suite level titles they are very tech heavy. You wont likely find a cs major running a marketing dept but I have seen it before. Usually at a tech company though.\n\nOn the other side I have seen a lot of elitism from new cs grads. They believe that they are now smarter than others just because they can tell a machine what to do. I know many brilliant programmers who I wouldn't hire in a million years. These are my friends too, but they are assholes when it comes to gathering requirements and documenting work. Very little of sw dev is actually writing code.","aSentId": 9811,"answer": "I don't know what constitutes as brilliance in programming. Is it just the level of complexity of a task? Is it the disconnect between your mind understanding how to implement the task on a computer, and their mind understanding how to implement a task on a computer?  \n\nSome people talk to machines all day, other people talk to people all day. I don't really see these things as different. If you hire a \"brilliant programmer\", that is what you are going to get. Someone who knows how to talk to machines, but probably (probably probably) isn't very good at doing the whole bit between the machine and other people thing. You have to understand what you are looking for when you hire. It's not really fair to judge person with condition X, whom declares themselves clearly to have condition X, by condition Y.\n\nAlso part of the process is learning. If you take a computer science major fresh from school, they have to be taught to understand the difference between a computer telling them they are right all the time, and a person being able to tell them that. A lot of people are literally functioning assuming a lot of conditions based on their experience a priori. \n\nIf you go from an environment where you are right all the time, to one that is completely new and novel, yes, things can be difficult. It's also really hard to go through that ego transition of being right all the time, to not being right all the time. I just try to have empathy for people with my categorical imperative defaulting at benevolence and compassion, even if it is something I have to figure out in real time. It's hard though, sometimes. But I don't like calling brilliant people assholes and whatever. They are both, in a more realist perspective, exaggerations of selective datum.\n\nIt's also generally safer and generally more advantageous to end your collectively biased by observation evaluations at some neutral ground. It ensures you don't veer off into one direction mentally without observational reality actually confirming the existence of your hypothesis. \n\nBeginner mind. ","corpus": "reddit"},{"docID": "t5_2qhmr","qSentId": 9802,"question": "I'm sorry if this isn't the place to ask, but who hires compsci majors, and what jobs are generally more accessible to compsci majors than to someone who has learned programming on their own. Assume I understand that compsci != programming","aSentId": 9813,"answer": "You can't get into CS research without a degree for example.\n\nBesides, you're looking at it from the wrong point of view imo. In this field it's **solely** about you know, and in that regard I feel like my CS education helped me a lot.\n\nIn other words, I don't think it should matter for your employer, it should matter for you.","corpus": "reddit"},{"docID": "t5_2qhmr","qSentId": 9814,"question": "You can't get into CS research without a degree for example.\n\nBesides, you're looking at it from the wrong point of view imo. In this field it's **solely** about you know, and in that regard I feel like my CS education helped me a lot.\n\nIn other words, I don't think it should matter for your employer, it should matter for you.","aSentId": 9815,"answer": "I'm of a similar mindset to you, but I often run into self-styled \"pragmatists\" that insist on gearing your interests towards what is employable.  I have a hard time arguing with them on any level that isn't purely philosophical.  \n\n&gt; In other words, I don't think it should matter for your employer, it should matter for you.\n\nWould you mind elaborating on this statement a bit?  I'm a musician, and there is the argument that you should only make music that you love.  But the reality is that sometimes you have to take gigs playing covers or music you don't love to pay the bills.  Are you saying this is not the case?\n","corpus": "reddit"},{"docID": "t5_2qhmr","qSentId": 9816,"question": "I'm of a similar mindset to you, but I often run into self-styled \"pragmatists\" that insist on gearing your interests towards what is employable.  I have a hard time arguing with them on any level that isn't purely philosophical.  \n\n&gt; In other words, I don't think it should matter for your employer, it should matter for you.\n\nWould you mind elaborating on this statement a bit?  I'm a musician, and there is the argument that you should only make music that you love.  But the reality is that sometimes you have to take gigs playing covers or music you don't love to pay the bills.  Are you saying this is not the case?\n","aSentId": 9817,"answer": "&gt; I often run into self-styled \"pragmatists\" that insist on gearing your interests towards what is employable. I have a hard time arguing with them on any level that isn't purely philosophical.\n\nSimple web CRUD is very employable, but if all you know how to do is update a database and then display/modify a web page, you may not have what it takes when it comes time to scale to a larger userbase (i.e., that job would instead go to someone else with a solid background algorithms/networking/systems). Similarly, work in data mining, quantitative finance, OS development, etc. will generally go to people with more background in computer science and math than the typical self-taught programmer has. That's not to say it's impossible to learn those things on your own, but it's worth noting that not many people manage to do so.","corpus": "reddit"},{"docID": "t5_2qhmr","qSentId": 9802,"question": "I'm sorry if this isn't the place to ask, but who hires compsci majors, and what jobs are generally more accessible to compsci majors than to someone who has learned programming on their own. Assume I understand that compsci != programming","aSentId": 9819,"answer": "Though I'm taking Software Engineering, I feel this also applies to comp sci since we share many of the same courses.\n\nBefore uni I had done a lot of programming/web dev in my free time and felt like I knew almost everything and could get a job without a degree. Regardless, I still went into uni as my parents recommended and am very glad I did.\n\nThere is so much more to the field that you don't realize exists and without getting an education, you may never come across these things which you may enjoy way more in the long run. I feel like uni is about the experience more than a piece of paper showing that you know stuff.\n\nAnother huge part for me was internships. My school requires you to take internships at real software companies throughout your degree. Being able to learn about concepts then applying them to real world problems helps you grow so much more than you would have otherwise. It also gives you a great network for after you graduate. Most graduates I know went on to work for companies that they previously worked for in an internship.\n\ntl;dr: Uni is about the experience not the certification.","corpus": "reddit"},{"docID": "t5_2qhmr","qSentId": 9822,"question": "My innovation : a SAT solver using floating point arithmetics and nested intervals","aSentId": 9823,"answer": "&gt; Slow and inefficient, but innovative !\n\nyou are warned","corpus": "reddit"},{"docID": "t5_2qhmr","qSentId": 9824,"question": "&gt; Slow and inefficient, but innovative !\n\nyou are warned","aSentId": 9825,"answer": "yes !","corpus": "reddit"},{"docID": "t5_2qhmr","qSentId": 9822,"question": "My innovation : a SAT solver using floating point arithmetics and nested intervals","aSentId": 9827,"answer": "What is ment with SAT?","corpus": "reddit"},{"docID": "t5_2qhmr","qSentId": 9828,"question": "What is ment with SAT?","aSentId": 9829,"answer": "The satisfiability problem (NP complete)","corpus": "reddit"},{"docID": "t5_2qhmr","qSentId": 9831,"question": "What's a good complementary major for computer science?","aSentId": 9832,"answer": "mathematics. ","corpus": "reddit"},{"docID": "t5_2qhmr","qSentId": 9833,"question": "mathematics. ","aSentId": 9834,"answer": "Set Theory, Logic, and Combinatorics are good high-level electives to take if your school has them. ","corpus": "reddit"},{"docID": "t5_2qhmr","qSentId": 9835,"question": "Set Theory, Logic, and Combinatorics are good high-level electives to take if your school has them. ","aSentId": 9836,"answer": "my favorite subjects","corpus": "reddit"},{"docID": "t5_2qhmr","qSentId": 9835,"question": "Set Theory, Logic, and Combinatorics are good high-level electives to take if your school has them. ","aSentId": 9838,"answer": "I don't think my school does.","corpus": "reddit"},{"docID": "t5_2qhmr","qSentId": 9833,"question": "mathematics. ","aSentId": 9840,"answer": "Yes I said that in the OP. I'm not too interested in straight up math though, I might gouge my eyes out after 1 semester. ","corpus": "reddit"},{"docID": "t5_2qhmr","qSentId": 9831,"question": "What's a good complementary major for computer science?","aSentId": 9842,"answer": "knowing a second language comes in handy.","corpus": "reddit"},{"docID": "t5_2qhmr","qSentId": 9843,"question": "knowing a second language comes in handy.","aSentId": 9844,"answer": "Well that's kind of obvious.","corpus": "reddit"},{"docID": "t5_2qhmr","qSentId": 9831,"question": "What's a good complementary major for computer science?","aSentId": 9846,"answer": "Biology and medicine-related fields are in dire need of GOOD software engineers and computer scientists that also have a background in these other fields.","corpus": "reddit"},{"docID": "t5_2qhmr","qSentId": 9847,"question": "Biology and medicine-related fields are in dire need of GOOD software engineers and computer scientists that also have a background in these other fields.","aSentId": 9848,"answer": "What about physics?","corpus": "reddit"},{"docID": "t5_2qhmr","qSentId": 9849,"question": "What about physics?","aSentId": 9850,"answer": "Depending on the school I wouldn't necessarily call a physics Bsc a 'complementary' degree. I'm a compsci/physics double major and I end up putting quite a bit more time into the physics side getting through upper level classes.\n\nThat said physics is an incredibly rewarding field of study and it absolutely will equip you with a set of tools for problem solving that you are unlikely to see on the compsci side.","corpus": "reddit"},{"docID": "t5_2qhmr","qSentId": 9851,"question": "Depending on the school I wouldn't necessarily call a physics Bsc a 'complementary' degree. I'm a compsci/physics double major and I end up putting quite a bit more time into the physics side getting through upper level classes.\n\nThat said physics is an incredibly rewarding field of study and it absolutely will equip you with a set of tools for problem solving that you are unlikely to see on the compsci side.","aSentId": 9852,"answer": "&gt;Depending on the school I wouldn't necessarily call a physics Bsc a 'complementary' degree. \n\nYes, but what if you're programming a rocket, or programming physics in a game? I could see how it would be useful in those situations.\n\n&gt;I'm a compsci/physics double major and I end up putting quite a bit more time into the physics side getting through upper level classes.\n\nHow many years in are you? I'm going into my second year.\n\n&gt;That said physics is an incredibly rewarding field of study and it absolutely will equip you with a set of tools for problem solving that you are unlikely to see on the compsci side.\n\nYeah I think I'd do it for not just the benefits it will give for compsci(there will be benefits to compsci, but not necessarily significant), but also for the things you can do in the physics field.","corpus": "reddit"},{"docID": "t5_2qhmr","qSentId": 9853,"question": "&gt;Depending on the school I wouldn't necessarily call a physics Bsc a 'complementary' degree. \n\nYes, but what if you're programming a rocket, or programming physics in a game? I could see how it would be useful in those situations.\n\n&gt;I'm a compsci/physics double major and I end up putting quite a bit more time into the physics side getting through upper level classes.\n\nHow many years in are you? I'm going into my second year.\n\n&gt;That said physics is an incredibly rewarding field of study and it absolutely will equip you with a set of tools for problem solving that you are unlikely to see on the compsci side.\n\nYeah I think I'd do it for not just the benefits it will give for compsci(there will be benefits to compsci, but not necessarily significant), but also for the things you can do in the physics field.","aSentId": 9854,"answer": "I mean its not really a complementary degree since the only credit overlap will only be the Calc series (at least for my school), you will likely be nearly doubling the number of courses you need to take (compared to Physics/Math or CompSci/math where a number of course requirements overlap).\n\nCurrently I'm a senior by hours, but in my fifth year.\n\n[Edit]: For stuff like physics engines in game programming a full degree in Physics would be overkill. Not too many games are going to use QM or upper level EM, probably 95% of what happens in a game engine is stuff you would learn in Linear Algebra anyways.","corpus": "reddit"},{"docID": "t5_2qhmr","qSentId": 9855,"question": "I mean its not really a complementary degree since the only credit overlap will only be the Calc series (at least for my school), you will likely be nearly doubling the number of courses you need to take (compared to Physics/Math or CompSci/math where a number of course requirements overlap).\n\nCurrently I'm a senior by hours, but in my fifth year.\n\n[Edit]: For stuff like physics engines in game programming a full degree in Physics would be overkill. Not too many games are going to use QM or upper level EM, probably 95% of what happens in a game engine is stuff you would learn in Linear Algebra anyways.","aSentId": 9856,"answer": "&gt; I mean its not really a complementary degree since the only credit overlap will only be the Calc series \n\nI meant complementary in the sense both degrees work well together. And I don't mind how many courses I would have to take.\n\n&gt;For stuff like physics engines in game programming a full degree in Physics would be overkill. \n\nPhysics isn't just useful for that. What about launching rockets for example? There are heaps of applications where physics meets with technology.\n\n&gt; Not too many games are going to use QM or upper level EM, probably 95% of what happens in a game engine is stuff you would learn in Linear Algebra anyways.\n\nAre you sure the mathematics picked up in the course won't give an advantage when building games? And what about fields where science meets technology, like simulations of atoms? What about quantum computing? Quantum computing will likely be a big thing in the future.\n\n","corpus": "reddit"},{"docID": "t5_2qhmr","qSentId": 9847,"question": "Biology and medicine-related fields are in dire need of GOOD software engineers and computer scientists that also have a background in these other fields.","aSentId": 9858,"answer": "With a biology or even bioengineering degree I think bioinformatics would be a very strong/applicable field.","corpus": "reddit"},{"docID": "t5_2qhmr","qSentId": 9860,"question": "At my university we have another computer science course that also has plenty of elements from economics in it. The stigma is that after their graduation they can do neither but it has its appeal for some. \n\nAnother one is media combined with comp sci. They spend a whole lot more time on the graphical portion of this field and often go into game development.","aSentId": 9861,"answer": "I'm interested in game development, but I don't necessarily think uni is the best place to learn that. It's kind of like going to uni for art... You're paying them thousands of dollars when it's one of those fields that you can learn easily yourself by actually doing it. Well you might say you could learn computer science on your own, fair enough, but it's a hard subject to pick up on your own, and a lot of employers require a degree. To go well in CS you need to do your own projects AND have a degree.\n\nIf you want to do art, or game design/dev, you have to develop a good portfolio. Game companies won't care if you have a degree in philosophy or economics if you know how to make games. Just as animation/art companies will hire you based on how good your art is. The same goes with fields like writing, you could write your own book right now if you wanted to, there's nothing stopping you. It may not be any good, but you know...","corpus": "reddit"},{"docID": "t5_2qhmr","qSentId": 9862,"question": "I'm interested in game development, but I don't necessarily think uni is the best place to learn that. It's kind of like going to uni for art... You're paying them thousands of dollars when it's one of those fields that you can learn easily yourself by actually doing it. Well you might say you could learn computer science on your own, fair enough, but it's a hard subject to pick up on your own, and a lot of employers require a degree. To go well in CS you need to do your own projects AND have a degree.\n\nIf you want to do art, or game design/dev, you have to develop a good portfolio. Game companies won't care if you have a degree in philosophy or economics if you know how to make games. Just as animation/art companies will hire you based on how good your art is. The same goes with fields like writing, you could write your own book right now if you wanted to, there's nothing stopping you. It may not be any good, but you know...","aSentId": 9863,"answer": "Oh I probably worded out a bit weird. It's still a perfectly fine degree in computer science but your focus is a bit more on graphical things of it. They study for example interpolation of pictures or virtual reality (and the technology behind it). 3D modelling is also one of the topics there.  In short they spend more time on how the visual output of a computer works instead of drawing pretty pictures. \n\nThe problem for you could be finding a course like that since it's not a bachelor of arts.","corpus": "reddit"},{"docID": "t5_2qhmr","qSentId": 9866,"question": "Business. Seriously. I'm an executive at a large company because I combined technical and nontechnical studies. Threw in psychology as a minor and have never regretted those choices.","aSentId": 9867,"answer": "Wait, so you've done compsci major with business and a psychology minor? The psychology minor looks sort of out of place with that. I thought you couldn't do a minor while doing two majors?","corpus": "reddit"},{"docID": "t5_2qhmr","qSentId": 9868,"question": "Wait, so you've done compsci major with business and a psychology minor? The psychology minor looks sort of out of place with that. I thought you couldn't do a minor while doing two majors?","aSentId": 9869,"answer": "Short explanation is I have more than one degree. My point, however, was that although combining CS with math or science is commendable and sensible because some of the courses are the same, another way to go is to combine dissimilar fields. You can also do that with CS undergrad plus an MBA, for instance.\n\nFor me, throwing psych in with CS and business made sense because for every technical problem I face, there's often an equal number of managerial problems and people problems. I rose through the technical ranks to an executive level because I have skills at solving more than one type of problem and problems come in clusters.","corpus": "reddit"},{"docID": "t5_2qhmr","qSentId": 9870,"question": "Short explanation is I have more than one degree. My point, however, was that although combining CS with math or science is commendable and sensible because some of the courses are the same, another way to go is to combine dissimilar fields. You can also do that with CS undergrad plus an MBA, for instance.\n\nFor me, throwing psych in with CS and business made sense because for every technical problem I face, there's often an equal number of managerial problems and people problems. I rose through the technical ranks to an executive level because I have skills at solving more than one type of problem and problems come in clusters.","aSentId": 9871,"answer": "&gt; Short explanation is I have more than one degree. My point, however, was that although combining CS with math or science is commendable and sensible because some of the courses are the same, another way to go is to combine dissimilar fields. You can also do that with CS undergrad plus an MBA, for instance.\n\nOK, makes sense. The only dissimilar field that I'd like to do is probably too dissimilar. I like creative writing, and I was even doing a minor in that last year, however the combination of a full creative writing major + CS major makes almost no sense. However it would make sense for game design, but that's all I can think of.\n\n&gt;For me, throwing psych in with CS and business made sense because for every technical problem I face, there's often an equal number of managerial problems and people problems. I rose through the technical ranks to an executive level because I have skills at solving more than one type of problem and problems come in clusters.\n\nBut I guess any major/minor choice will give you certain strengths... If you did a philosophy major (which is dare I say pretty much useless is most cases) with CS, then that philosophy experience will give you an edge; in the sense you'd be far better at formulating arguments and knocking down counter arguments of co-workers. Say one person wants to design an application in one way, and you want it in another way. You'd have the edge here.","corpus": "reddit"},{"docID": "t5_2qhmr","qSentId": 9872,"question": "&gt; Short explanation is I have more than one degree. My point, however, was that although combining CS with math or science is commendable and sensible because some of the courses are the same, another way to go is to combine dissimilar fields. You can also do that with CS undergrad plus an MBA, for instance.\n\nOK, makes sense. The only dissimilar field that I'd like to do is probably too dissimilar. I like creative writing, and I was even doing a minor in that last year, however the combination of a full creative writing major + CS major makes almost no sense. However it would make sense for game design, but that's all I can think of.\n\n&gt;For me, throwing psych in with CS and business made sense because for every technical problem I face, there's often an equal number of managerial problems and people problems. I rose through the technical ranks to an executive level because I have skills at solving more than one type of problem and problems come in clusters.\n\nBut I guess any major/minor choice will give you certain strengths... If you did a philosophy major (which is dare I say pretty much useless is most cases) with CS, then that philosophy experience will give you an edge; in the sense you'd be far better at formulating arguments and knocking down counter arguments of co-workers. Say one person wants to design an application in one way, and you want it in another way. You'd have the edge here.","aSentId": 9873,"answer": "Writing (and public speaking) are useful skills. For instance, some day you may present a paper at a CS conference. And you'll need those skills on the job too. Career paths vary by company, but it's not uncommon for talented people to move beyond coding into architecture and team leadership. That's hard to do if you can't communicate clearly. \n\nReading (and listening) are essential skills. The half-life of information in an technology-related field is measured in years you can count on your fingers. Thus, the need for lifelong learning may sound trite, but it's true. \n\nSome readers may object to my reference to CS and technology in the same comment. And it's true that they can be entirely separate. That said, if you get a non-academic CS-related job, you're gonna be dealing with technology. Things that aren't computable today may be tomorrow. Things that are unaffordable today may be affordable tomorrow. Things that you can sell today may not have a market tomorrow. And so it goes.","corpus": "reddit"},{"docID": "t5_2qhmr","qSentId": 9874,"question": "Writing (and public speaking) are useful skills. For instance, some day you may present a paper at a CS conference. And you'll need those skills on the job too. Career paths vary by company, but it's not uncommon for talented people to move beyond coding into architecture and team leadership. That's hard to do if you can't communicate clearly. \n\nReading (and listening) are essential skills. The half-life of information in an technology-related field is measured in years you can count on your fingers. Thus, the need for lifelong learning may sound trite, but it's true. \n\nSome readers may object to my reference to CS and technology in the same comment. And it's true that they can be entirely separate. That said, if you get a non-academic CS-related job, you're gonna be dealing with technology. Things that aren't computable today may be tomorrow. Things that are unaffordable today may be affordable tomorrow. Things that you can sell today may not have a market tomorrow. And so it goes.","aSentId": 9875,"answer": "&gt; Writing (and public speaking) are useful skills. \n\nI agree, but one could improve that in other ways that don't require a degree. I could read more, write more, and do improv or something. In fact improv would be better for that.\n\nPhysics on the other hand would be very hard to learn yourself. Getting a B.Sc is more of a one shot kind of thing, one opportunity. If I wanted to get into say the science field (and I didn't get a B.Sc while at uni) I would have to go back to uni again for 3 years and get a degree. On the other hand if I wanted to become a writer I'd just start writing. I could write my own book if I wanted to right now (not that it would be any good).\n\nI really liked doing creative writing last semester, I really did. But creative writing is a field where your degree doesn't mean much, and your portfolio is #1. So that degree doesn't give much of an advantage in the writing field, a part from improving your writing skills. I think I'd be better off getting a degree in a field where that degree is a requirement, and then improving myself in other ways, like writing and speaking on the side.\n\n&gt;Some readers may object to my reference to CS and technology in the same comment. And it's true that they can be entirely separate. That said, if you get a non-academic CS-related job, you're gonna be dealing with technology. \n\nCS could change because of technology. Example: Quantum computing. Quantum computers would be a game changer. Oh, and that could be another reason to get that physics degree...\n\n&gt;Things that aren't computable today may be tomorrow. Things that are unaffordable today may be affordable tomorrow. Things that you can sell today may not have a market tomorrow. And so it goes.\n\nExactly, and that makes this an exciting field to get into. Get this: I just got my lenovo ultrabook not long ago, and I just found out on the same day I received it lenovo are releasing a new ultrabook that's slightly lighter, runs cooler(intel 5th gen), and has a bigger screen... Just shows you how technology is constantly shifting.\n\n","corpus": "reddit"},{"docID": "t5_2qhmr","qSentId": 9870,"question": "Short explanation is I have more than one degree. My point, however, was that although combining CS with math or science is commendable and sensible because some of the courses are the same, another way to go is to combine dissimilar fields. You can also do that with CS undergrad plus an MBA, for instance.\n\nFor me, throwing psych in with CS and business made sense because for every technical problem I face, there's often an equal number of managerial problems and people problems. I rose through the technical ranks to an executive level because I have skills at solving more than one type of problem and problems come in clusters.","aSentId": 9877,"answer": "Excuse me sir I have a question for you since you seem to be very knowledgeable. Currently I am a bio major and planned on taking the premed route but in lieu of its competitiveness I plan on switching to cs or business informatics as these are options that are less competitive and seem to fit my needs. I am currently doing the ochem series and I honestly made the decision this quarter. I have finished the general bio series too.\n\nCurrently I'm in vector calculus and intro to c++ and ochem. I'm a second year. I want to switch to something cs based because these disciplines tend to have more of an emphasis on math (I do like math). I have considered business informatics because it ties three important aspects together: business, math, and cs. I have also considered cs since it emphasizes math as well. I honestly can't decide which of the two I would choose and I'd like to have an honest perspective on the versatility and circumstances each choice possesses. I would be grateful for any kind of a response as I am confused :( thank you for your time ","corpus": "reddit"},{"docID": "t5_2qhmr","qSentId": 9878,"question": "Excuse me sir I have a question for you since you seem to be very knowledgeable. Currently I am a bio major and planned on taking the premed route but in lieu of its competitiveness I plan on switching to cs or business informatics as these are options that are less competitive and seem to fit my needs. I am currently doing the ochem series and I honestly made the decision this quarter. I have finished the general bio series too.\n\nCurrently I'm in vector calculus and intro to c++ and ochem. I'm a second year. I want to switch to something cs based because these disciplines tend to have more of an emphasis on math (I do like math). I have considered business informatics because it ties three important aspects together: business, math, and cs. I have also considered cs since it emphasizes math as well. I honestly can't decide which of the two I would choose and I'd like to have an honest perspective on the versatility and circumstances each choice possesses. I would be grateful for any kind of a response as I am confused :( thank you for your time ","aSentId": 9879,"answer": "You are asking great questions, but I think you should talk to faculty and counselors in both departments you're considering. One additional question you should ask is how much math do graduates actually use on the job after graduation. The answer might surprise you. ","corpus": "reddit"},{"docID": "t5_2qhmr","qSentId": 9880,"question": "You are asking great questions, but I think you should talk to faculty and counselors in both departments you're considering. One additional question you should ask is how much math do graduates actually use on the job after graduation. The answer might surprise you. ","aSentId": 9881,"answer": "I have asked faculty but not graduates. I have to find a graduate fair and another one won't occur until next quarter and I have to enroll for classes later this month :(","corpus": "reddit"},{"docID": "t5_2qhmr","qSentId": 9884,"question": "I have a second major in physics right now. I haven't graduated but it helps with graphics modeling and I'm sure if I get into the games industry it would be a huge plus. It's definitely difficult though ","aSentId": 9885,"answer": "So you found that even the more complex parts of the physics degree would help with making games? I heard from someone here that most of what will be involved is linear algebra, so the physics degree for that would be overkill.","corpus": "reddit"},{"docID": "t5_2qhmr","qSentId": 9887,"question": "&gt; since the *mathematical* skills picked up in physics would translate well to compsci\n\nWhy not just go straight to Mathematics then? Unless you want to do what you described: building game engines later in life where background in Physics will help for realism. ","aSentId": 9888,"answer": "&gt; building game engines\n\nPretty much this. Also I'm not very interested in in mathematics. And I also mentioned that it expands what you can do in other areas in science. There's a lot more you can do with physics knowledge than make games though.\n","corpus": "reddit"},{"docID": "t5_2qhmr","qSentId": 9890,"question": "The Ambiguously-Typed Lambda Calculus (feel free to ask questions or call B.S.)","aSentId": 9891,"answer": "I feel like I'm missing a whole lot of context. Is there an explanation of the (dynamic) semantics of the \"____ priority\" forms and a hand-wavy prose pseudo-definition of this notion of \"size\" somewhere?","corpus": "reddit"},{"docID": "t5_2qhmr","qSentId": 9892,"question": "I feel like I'm missing a whole lot of context. Is there an explanation of the (dynamic) semantics of the \"____ priority\" forms and a hand-wavy prose pseudo-definition of this notion of \"size\" somewhere?","aSentId": 9893,"answer": "Yeah, it's a bit difficult for me to explain completely, I've just been on a power binge just to get this finished. But you're completely correct, that is dynamic - all top-level, possibly free terms automatically have a polymorphic type (denoting an unknown arity, it's \"size\"), and when we build up higher terms or deconstruct a free variable into a lambda term, we use this strange arithmetic.\n\n__EDIT__:\nSmall step, we're making size inferences based on immediate &amp; local AST context. In the large step, we unify a complicated type like `\\x -&gt; f x : forall a b. {a &gt;= 1} =&gt; (a-1) + |b| + 1` to `\\x -&gt; f x : forall c. =&gt; c`, but we can still make sense out of the system if we hold on to these references, and make conclusions _across_ ASTs.","corpus": "reddit"},{"docID": "t5_2qhmr","qSentId": 9894,"question": "Yeah, it's a bit difficult for me to explain completely, I've just been on a power binge just to get this finished. But you're completely correct, that is dynamic - all top-level, possibly free terms automatically have a polymorphic type (denoting an unknown arity, it's \"size\"), and when we build up higher terms or deconstruct a free variable into a lambda term, we use this strange arithmetic.\n\n__EDIT__:\nSmall step, we're making size inferences based on immediate &amp; local AST context. In the large step, we unify a complicated type like `\\x -&gt; f x : forall a b. {a &gt;= 1} =&gt; (a-1) + |b| + 1` to `\\x -&gt; f x : forall c. =&gt; c`, but we can still make sense out of the system if we hold on to these references, and make conclusions _across_ ASTs.","aSentId": 9895,"answer": "&gt; But you're completely correct, that is dynamic -  \n\nEr... I was looking for how things in this language are evaluated (or what their \"meaning\" is if you don't really have \"evaluation\" going on) -- \"dynamic semantics\" as opposed to \"static semantics.\"","corpus": "reddit"},{"docID": "t5_2qhmr","qSentId": 9896,"question": "&gt; But you're completely correct, that is dynamic -  \n\nEr... I was looking for how things in this language are evaluated (or what their \"meaning\" is if you don't really have \"evaluation\" going on) -- \"dynamic semantics\" as opposed to \"static semantics.\"","aSentId": 9897,"answer": "How is evaluation not going on? Pretty sure this will work with simple runtime tags, just have to make sure that unification is strongly normalizing so this doesn't go boom.","corpus": "reddit"},{"docID": "t5_2qhmr","qSentId": 9898,"question": "How is evaluation not going on? Pretty sure this will work with simple runtime tags, just have to make sure that unification is strongly normalizing so this doesn't go boom.","aSentId": 9899,"answer": "&gt; How is evaluation not going on?\n\nSo far, I can't tell whether it is or not. I take it from this most recent comment that you do have some notion of evaluation in mind, then?","corpus": "reddit"},{"docID": "t5_2qhmr","qSentId": 9900,"question": "&gt; How is evaluation not going on?\n\nSo far, I can't tell whether it is or not. I take it from this most recent comment that you do have some notion of evaluation in mind, then?","aSentId": 9901,"answer": "Making the interpreter right now :)","corpus": "reddit"},{"docID": "t5_2qhmr","qSentId": 9903,"question": "Feeling lost and unnerved as a college CS student","aSentId": 9904,"answer": "Go to office hours and ask for help. Ask your peers too. No need to be proud.\n\nCoding can be really tough, even if you understand the concepts. You're going to have to try  (and fail) at least a few times.\n\nI'm not being negative, just realistic. The process can be difficult and it is for many people. You're at a slight disadvantage, but you can make up the difference if you work in a diligent and efficient manner.\n\nGood luck!","corpus": "reddit"},{"docID": "t5_2qhmr","qSentId": 9905,"question": "Go to office hours and ask for help. Ask your peers too. No need to be proud.\n\nCoding can be really tough, even if you understand the concepts. You're going to have to try  (and fail) at least a few times.\n\nI'm not being negative, just realistic. The process can be difficult and it is for many people. You're at a slight disadvantage, but you can make up the difference if you work in a diligent and efficient manner.\n\nGood luck!","aSentId": 9906,"answer": "I strongly agree. Learning to code well requires a lot of trial and error. The key is to learn from your failures, and not to get discouraged. If you love programming \u2014 and it sounds like you do \u2014 then you shouldn't give up on it. Buckle down, practice daily, and you'll be a pro in no time!","corpus": "reddit"},{"docID": "t5_2qhmr","qSentId": 9905,"question": "Go to office hours and ask for help. Ask your peers too. No need to be proud.\n\nCoding can be really tough, even if you understand the concepts. You're going to have to try  (and fail) at least a few times.\n\nI'm not being negative, just realistic. The process can be difficult and it is for many people. You're at a slight disadvantage, but you can make up the difference if you work in a diligent and efficient manner.\n\nGood luck!","aSentId": 9908,"answer": "thanks for your words of encouragement. I will keep trying!\n","corpus": "reddit"},{"docID": "t5_2qhmr","qSentId": 9909,"question": "thanks for your words of encouragement. I will keep trying!\n","aSentId": 9910,"answer": "In fact, in the corporate world, it's expected to seek out help","corpus": "reddit"},{"docID": "t5_2qhmr","qSentId": 9911,"question": "In fact, in the corporate world, it's expected to seek out help","aSentId": 9912,"answer": "Yeah, if you don't know something, or are unsure, ask senior staff. Sure it takes a few minutes of their time, but odds are they can give you a good answer and be back to their own stuff faster than if you just tried on your own. And the company probably doesn't want to pay you to just sit and spin your wheels and possibly introduce bugs ","corpus": "reddit"},{"docID": "t5_2qhmr","qSentId": 9909,"question": "thanks for your words of encouragement. I will keep trying!\n","aSentId": 9914,"answer": "First thing is you are not alone. CS is usually one of those degrees that drop people out, intentionally, because programming itself is not an easy thing. In many ways programming is engineering to a degree and in many schools is treated as such. And, I swear our brains are so much better at picking this stuff up when we are younger, but it is never impossible to start learning no matter how old you are. Key thing, its difficult but rewarding.\n\nThough, second thing is, plenty of programmers started late and have done as well or even better than everyone else. It just takes time and effort, unfortunately in a more compacted way that someone who has been able to start learning programming since they were younger. You just have to accept that you need help. So like carmichael561 said, don't be shy about asking for help. It can end up being a nonstop struggle to remain in good form and know what you need to know and program the things you need to program, but again ultimately can be extremely rewarding.\n\nThird, programming in my opinion is a journey of problem solving, engineering, social services, discovery, and often enough even more I can't even describe. You will find veteran programmers using stackexchange and other sites to find out how to solve things, it's not an uncommon thing. If you find programming fun but difficult then its just a matter of time learning the things you need to learn. \n\nGiven the above, if you stick with it and find programming fun and/or stimulating I think you will eventually feel right at home as a programmer. \n","corpus": "reddit"},{"docID": "t5_2qhmr","qSentId": 9905,"question": "Go to office hours and ask for help. Ask your peers too. No need to be proud.\n\nCoding can be really tough, even if you understand the concepts. You're going to have to try  (and fail) at least a few times.\n\nI'm not being negative, just realistic. The process can be difficult and it is for many people. You're at a slight disadvantage, but you can make up the difference if you work in a diligent and efficient manner.\n\nGood luck!","aSentId": 9916,"answer": "I second asking a classmate for help. I've always found that working with my classmates helps my own comprehension of the material, even when I have a good grasp on it.","corpus": "reddit"},{"docID": "t5_2qhmr","qSentId": 9903,"question": "Feeling lost and unnerved as a college CS student","aSentId": 9918,"answer": "Like any other field expertise comes with experience and skill comes with practice.\n\nOn the other side, impostor syndrome is more prevalent than in any field I've ever known. Your classmates might have more experience and also spending more time on tasks than you think.\n\nNobody was born knowing everything about coding. Patience and humbleness.","corpus": "reddit"},{"docID": "t5_2qhmr","qSentId": 9903,"question": "Feeling lost and unnerved as a college CS student","aSentId": 9920,"answer": "I will be completely honest with you here, I am 22. I live in Bosnia, I dropped out of college (Mechanical Eng.) here because we are poor, no one understands what a computer is here, and I am under constant pressure from all sides (parents don't look to happy, they think computer is only made for games). I've learned HTML/CSS, I know how to design a website in PS, and go PSD&gt;HTML, I have no income at all (STILL), and this PC is dying :/ (core2duo 1.8 for PS? Cmooon) and you think that I will stop? I sometimes feel like you; that I am too stupid for all of this, that I was too late (new frameworks come out every week, people creating AWESOME things, and look at me, still nothing). My man, you are aiming too high now, take some small steps, start creating small projects, move step by step. That feeling that you have happends because you want to build a spaceship on day one. Take it easy, start reading Sitepoint, they have the best advices for beginners. ","corpus": "reddit"},{"docID": "t5_2qhmr","qSentId": 9921,"question": "I will be completely honest with you here, I am 22. I live in Bosnia, I dropped out of college (Mechanical Eng.) here because we are poor, no one understands what a computer is here, and I am under constant pressure from all sides (parents don't look to happy, they think computer is only made for games). I've learned HTML/CSS, I know how to design a website in PS, and go PSD&gt;HTML, I have no income at all (STILL), and this PC is dying :/ (core2duo 1.8 for PS? Cmooon) and you think that I will stop? I sometimes feel like you; that I am too stupid for all of this, that I was too late (new frameworks come out every week, people creating AWESOME things, and look at me, still nothing). My man, you are aiming too high now, take some small steps, start creating small projects, move step by step. That feeling that you have happends because you want to build a spaceship on day one. Take it easy, start reading Sitepoint, they have the best advices for beginners. ","aSentId": 9922,"answer": "Best of luck to you, dude. That sounds rough. I hope you can find a new pc. :(","corpus": "reddit"},{"docID": "t5_2qhmr","qSentId": 9921,"question": "I will be completely honest with you here, I am 22. I live in Bosnia, I dropped out of college (Mechanical Eng.) here because we are poor, no one understands what a computer is here, and I am under constant pressure from all sides (parents don't look to happy, they think computer is only made for games). I've learned HTML/CSS, I know how to design a website in PS, and go PSD&gt;HTML, I have no income at all (STILL), and this PC is dying :/ (core2duo 1.8 for PS? Cmooon) and you think that I will stop? I sometimes feel like you; that I am too stupid for all of this, that I was too late (new frameworks come out every week, people creating AWESOME things, and look at me, still nothing). My man, you are aiming too high now, take some small steps, start creating small projects, move step by step. That feeling that you have happends because you want to build a spaceship on day one. Take it easy, start reading Sitepoint, they have the best advices for beginners. ","aSentId": 9924,"answer": "I hope you and OP keep moving forward. Remember, what you create may not be 'glamorous', it's still awesome. You are telling machines what you want them to do and ultimately when you finish your task they do it. I at least think that's awesome. ","corpus": "reddit"},{"docID": "t5_2qhmr","qSentId": 9921,"question": "I will be completely honest with you here, I am 22. I live in Bosnia, I dropped out of college (Mechanical Eng.) here because we are poor, no one understands what a computer is here, and I am under constant pressure from all sides (parents don't look to happy, they think computer is only made for games). I've learned HTML/CSS, I know how to design a website in PS, and go PSD&gt;HTML, I have no income at all (STILL), and this PC is dying :/ (core2duo 1.8 for PS? Cmooon) and you think that I will stop? I sometimes feel like you; that I am too stupid for all of this, that I was too late (new frameworks come out every week, people creating AWESOME things, and look at me, still nothing). My man, you are aiming too high now, take some small steps, start creating small projects, move step by step. That feeling that you have happends because you want to build a spaceship on day one. Take it easy, start reading Sitepoint, they have the best advices for beginners. ","aSentId": 9926,"answer": "Don't be disencouraged by those around you, you enjoy it so you just go for it.","corpus": "reddit"},{"docID": "t5_2qhmr","qSentId": 9928,"question": "Take a deep breath.\n\nWe all go through it. I have my PhD in CS and I went through it in undergrad. Went through it again (repeatedly) in grad school. Go through it now too.\n\nAs a professor, my top tip:\n\n* Ask for help *as soon as you need it.* Swallow your pride if you're not used to asking for help. Professors and TA's hold office hours just to help you. That's what they're getting paid for, so let them help you learn! Establishing a one-on-one relationship with them will bring you a looooong way.","aSentId": 9929,"answer": "&gt; Ask for help as soon as you need it.\n\nThere's a limit to this. If you are having problems with your code, you must try to reduce the problem to its simplest reproducible case. If you go to the TA with hundreds of lines of \"this is broken\" before trying to reduce the problem, you are robbing yourself of debugging experience and the TA of their sanity. ","corpus": "reddit"},{"docID": "t5_2qhmr","qSentId": 9930,"question": "&gt; Ask for help as soon as you need it.\n\nThere's a limit to this. If you are having problems with your code, you must try to reduce the problem to its simplest reproducible case. If you go to the TA with hundreds of lines of \"this is broken\" before trying to reduce the problem, you are robbing yourself of debugging experience and the TA of their sanity. ","aSentId": 9931,"answer": "Yes, this is very safe advice, and not just to save you from being decapitated by the TA. Making mistakes, understanding why they were mistakes, and fixing them is critical to the learning process. Hell, I think you could make a strong argument that this IS the learning process.","corpus": "reddit"},{"docID": "t5_2qhmr","qSentId": 9932,"question": "Yes, this is very safe advice, and not just to save you from being decapitated by the TA. Making mistakes, understanding why they were mistakes, and fixing them is critical to the learning process. Hell, I think you could make a strong argument that this IS the learning process.","aSentId": 9933,"answer": "Yea I know one of my first year classes (for Java) didn't allow you to use Eclipse in the tests for this reason. Granted Java compile time errors are pretty descriptive and helpful compared to other languages, it still helped develop some problem solving skills without relying on the IDE.","corpus": "reddit"},{"docID": "t5_2qhmr","qSentId": 9934,"question": "Yea I know one of my first year classes (for Java) didn't allow you to use Eclipse in the tests for this reason. Granted Java compile time errors are pretty descriptive and helpful compared to other languages, it still helped develop some problem solving skills without relying on the IDE.","aSentId": 9935,"answer": "Sounds much better than what we do at our school on exams. We have to write the code by hand, so we don't get to compile and see if there are any errors or things like that, you just have to hope that you double checked things well and were diligent enough that you didn't screw up. It really doesn't make much sense to me why we do it that way. There is no time, except perhaps interviews, that you would not get to test out your code, and where you only get one shot to write it. It also strips away one of my favorite parts about programming, which is you don't have to be perfect. You can make mistakes and try again to make things better. You don't just memorize things, you can get help online and try to improve on what you were able to come up with.","corpus": "reddit"},{"docID": "t5_2qhmr","qSentId": 9936,"question": "Sounds much better than what we do at our school on exams. We have to write the code by hand, so we don't get to compile and see if there are any errors or things like that, you just have to hope that you double checked things well and were diligent enough that you didn't screw up. It really doesn't make much sense to me why we do it that way. There is no time, except perhaps interviews, that you would not get to test out your code, and where you only get one shot to write it. It also strips away one of my favorite parts about programming, which is you don't have to be perfect. You can make mistakes and try again to make things better. You don't just memorize things, you can get help online and try to improve on what you were able to come up with.","aSentId": 9937,"answer": "I don't get the idea of timed tests where you hand write code with zero references. It's bullshit, you never code like that. You don't commit code without making damn sure it works right, so why would you submit code via a test without proper testing? \n","corpus": "reddit"},{"docID": "t5_2qhmr","qSentId": 9932,"question": "Yes, this is very safe advice, and not just to save you from being decapitated by the TA. Making mistakes, understanding why they were mistakes, and fixing them is critical to the learning process. Hell, I think you could make a strong argument that this IS the learning process.","aSentId": 9939,"answer": "Right.  The learning process in most subjects IS the homework.","corpus": "reddit"},{"docID": "t5_2qhmr","qSentId": 9930,"question": "&gt; Ask for help as soon as you need it.\n\nThere's a limit to this. If you are having problems with your code, you must try to reduce the problem to its simplest reproducible case. If you go to the TA with hundreds of lines of \"this is broken\" before trying to reduce the problem, you are robbing yourself of debugging experience and the TA of their sanity. ","aSentId": 9941,"answer": "But what if the OP doesn't even know how to \"reduce the problem to its simplest reproducible case\" because none of the OP's classes taught *that*?\n\nThe answer is go to the TA or professor anyway.  They may have to first teach how to reduce the problem to its simplest reproducible case.  Or they may have to clear up some misunderstanding about basic concepts, or about program design, or something else.\n\nIn any event, ask for help as soon as you need it is the right advice.\n\nLeave it to the helper to decide how much help to give and in what form.  Ideal help is just enough to allow the questioner to figure the rest out for themselves, but that is really hard to gauge and may require a lot of trial and error on the part of the helper.\n\nThat's why I never mind students asking any question whatsoever.  I always learn something about teaching from the process.  I am not a CS professor; I am a statistics professor; but the same issues apply for any questions from students in any subject.","corpus": "reddit"},{"docID": "t5_2qhmr","qSentId": 9928,"question": "Take a deep breath.\n\nWe all go through it. I have my PhD in CS and I went through it in undergrad. Went through it again (repeatedly) in grad school. Go through it now too.\n\nAs a professor, my top tip:\n\n* Ask for help *as soon as you need it.* Swallow your pride if you're not used to asking for help. Professors and TA's hold office hours just to help you. That's what they're getting paid for, so let them help you learn! Establishing a one-on-one relationship with them will bring you a looooong way.","aSentId": 9943,"answer": "&gt; Professors and TA's hold office hours just to help you. That's what they're getting paid for, so let them help you learn!\n\nThis isn't true for all universities. Some don't have office hours and some don't get paid for office hours.","corpus": "reddit"},{"docID": "t5_2qhmr","qSentId": 9944,"question": "&gt; Professors and TA's hold office hours just to help you. That's what they're getting paid for, so let them help you learn!\n\nThis isn't true for all universities. Some don't have office hours and some don't get paid for office hours.","aSentId": 9945,"answer": "Professors don't get paid hourly anyways, we have salaries. But the point is that there is instructional staff (whether Professor, instructor, TA, or some combination thereof) who's job is to teach you.","corpus": "reddit"},{"docID": "t5_2qhmr","qSentId": 9947,"question": "&gt; I still love to write code\n\nThis to me is the key. If you love it, stick with it. I learned to program while at work, and I made a lot of mistakes. There were people who thought I should quit. But I was determined to learn, and I kept at it. I recently built the software for a commercial embedded system from scratch almost by myself. There's a lot of good advice ITT, so I'm sure you will use it. But in my mind, the best single piece of advice you can get is, if you love it, stick with it. ","aSentId": 9948,"answer": "&gt; If you love it, stick with it.\n\nI agree with that. When I was starting high school and was thinking about what I wanted to do, there was lots of options presented to me but when I found that I loved CS and writing code then I knew that was exactly for me.","corpus": "reddit"},{"docID": "t5_2qhmr","qSentId": 9952,"question": "Time invested = skill.\n\nIf you lack behind invest more time, problem solved.\n\nMost people i know which started at younger age don't have much advantage. \nOnly very very few take it seriously enough to accomplish more difficult stuff on their own. So it doesn't help too much for the more advanced CS classes.","aSentId": 9953,"answer": "skillLevel += (timeInvested * skill) ?\n\nAlso, don't most people start *in* college? Usually that is your first introduction to programming, right?","corpus": "reddit"},{"docID": "t5_2qhmr","qSentId": 9979,"question": "Office hours, go to them. Stack Exchange is for professionals to stroke each others ego.  Don't waste your time there. Often times if you can't get a good answer, it's because you aren't asking a good question. You can't ask a good question if you don't know what it is you should be asking.  If you've reached a stumbling block, ask for advice.  Check out /r/learnprogramming.","aSentId": 9980,"answer": "regarding Stack Exchange, i have had the exact opposite experience.\n\ni've gone there with specific questions and more times than not i get reasonable answers that have helped out a whole lot.\n\ni get the occasional douchebag who decreases my \"reputation\" by voting down my questions for being too basic but \u2026 fuck you douchebag\n\n","corpus": "reddit"},{"docID": "t5_2qhmr","qSentId": 9988,"question": "How should I take advantage of this funding opportunity?","aSentId": 9989,"answer": "It would help to know what class size this is for and what you already have/do.","corpus": "reddit"},{"docID": "t5_2qhmr","qSentId": 9988,"question": "How should I take advantage of this funding opportunity?","aSentId": 9991,"answer": "If you do a lot of programming in your curriculum then maybe an online school like Treehouse or Code Academy would be a good investment but this is a reoccurring cost.\n\nA few Arduinos or Raspberry Pi's would definitely be a good shout, there's also the Tessel Machine which is powered by JavaScript.\n\nIt would be best to maybe fill gaps first, such as old textbooks and materials and then spend the rest on the fun stuff.","corpus": "reddit"},{"docID": "t5_2qhmr","qSentId": 9992,"question": "If you do a lot of programming in your curriculum then maybe an online school like Treehouse or Code Academy would be a good investment but this is a reoccurring cost.\n\nA few Arduinos or Raspberry Pi's would definitely be a good shout, there's also the Tessel Machine which is powered by JavaScript.\n\nIt would be best to maybe fill gaps first, such as old textbooks and materials and then spend the rest on the fun stuff.","aSentId": 9993,"answer": "Thanks for the suggestions! I'll look into those things.","corpus": "reddit"},{"docID": "t5_2qhmr","qSentId": 9995,"question": "Is combinatorics useful/needed for CompSci?","aSentId": 9996,"answer": "It's absolutely useful. As an example, lots of NP hard problems have space efficient algorithms based on the principle of inclusion exclusion. Hamilton Path and Steiner Trees are the ones I know about. \n\nAlso, solving recurrence relations is very useful for finding time complexities of recursive algorithms. ","corpus": "reddit"},{"docID": "t5_2qhmr","qSentId": 9995,"question": "Is combinatorics useful/needed for CompSci?","aSentId": 9998,"answer": "i found the style of thinking in combinatorics matches programming.  discrete math gets you thinking about specific numbers of things, breaking things down into special cases, iterating over patterns.  \n\nBreaking things down into granular, enumerated, well defined sets is a big part of what programming is about.  so it's the thinking style of discrete math that I think is valuable in programming","corpus": "reddit"},{"docID": "t5_2qhmr","qSentId": 9995,"question": "Is combinatorics useful/needed for CompSci?","aSentId": 10000,"answer": "I'd imagine it's more useful than Calc if you have to choose between the two, but normally you'd take calc as an entry level math anyway, right?","corpus": "reddit"},{"docID": "t5_2qhmr","qSentId": 10001,"question": "I'd imagine it's more useful than Calc if you have to choose between the two, but normally you'd take calc as an entry level math anyway, right?","aSentId": 10002,"answer": "I've taken up to Calc III, and have done really well in them. After reading other comments it seems combin. is more important though.","corpus": "reddit"},{"docID": "t5_2qhmr","qSentId": 10003,"question": "I've taken up to Calc III, and have done really well in them. After reading other comments it seems combin. is more important though.","aSentId": 10004,"answer": "Have you taken a proofwriting course? If not, you may have simply jumped the gun by taking a higher level course than you were ready for. To be perfectly honest, and I say this as someone in grad school for math, combinatorics is an easier subject than analysis (at the undergrad level). The analysis courses are practically universally seen as the hardest a math major will take. Analysis isn't much like regular calc, unless you took an honors proof-based version. Analysis is about formal proofs and rigor, you can't just go to class, bang out your homework in an hour or two and then get an A like you could in Calc. Download Abbott's Understanding Analysis from the piratebay and look at what the text is like, you might be surprised. After Calc, no other math course is as computationally-focused as it is. ","corpus": "reddit"},{"docID": "t5_2qhmr","qSentId": 10005,"question": "Have you taken a proofwriting course? If not, you may have simply jumped the gun by taking a higher level course than you were ready for. To be perfectly honest, and I say this as someone in grad school for math, combinatorics is an easier subject than analysis (at the undergrad level). The analysis courses are practically universally seen as the hardest a math major will take. Analysis isn't much like regular calc, unless you took an honors proof-based version. Analysis is about formal proofs and rigor, you can't just go to class, bang out your homework in an hour or two and then get an A like you could in Calc. Download Abbott's Understanding Analysis from the piratebay and look at what the text is like, you might be surprised. After Calc, no other math course is as computationally-focused as it is. ","aSentId": 10006,"answer": "Well I have heard that analysis is also known as \"advanced calc\" but I'm not sure if its the same thing at my school. Here is the description of the advanced calc with one variable course at my school:\n\n\"Topology of the real line; continuity, uniform continuity, differentiability, integration, sequences and series of functions\"\n\nDoes this sound like the analysis class you are referring to?","corpus": "reddit"},{"docID": "t5_2qhmr","qSentId": 10007,"question": "Well I have heard that analysis is also known as \"advanced calc\" but I'm not sure if its the same thing at my school. Here is the description of the advanced calc with one variable course at my school:\n\n\"Topology of the real line; continuity, uniform continuity, differentiability, integration, sequences and series of functions\"\n\nDoes this sound like the analysis class you are referring to?","aSentId": 10008,"answer": "Yeah that's analysis. Some universities call it Advanced Calc, others call it Analysis or Real Variables. Even more confusing is the fact that Vector Analysis (a different subject entirely) used to be called Advanced Calculus, haha. But yeah, when I said Analysis it was exactly the course you just described. It's nothing like introductory calculus at all, especially if you didn't take an honors proof-based version of calc. Seriously, download Abbott's textbook from the piratebay and look at it, skip to the chapter on differentiation or integration or sequences and see how much more rigorous it is than what you did, though the first chapter's rigor might also be a bit of a shock for you too. Jumping from introductory, computation-driven calc to real analysis, without any kind of proofwriting/set theory course first, would be suicide, especially if you feel combinatorics is overwhelming. I don't mean to be a jerk, just trying to give you the information you need to keep from making a bad decision. Also, Analysis wouldn't be incredibly useful for a computer scientist. I'd suggest you take your proofwriting course (or a course called Discrete Math that's only offered to CS majors, serves as a substitute for the proofwriting course and also introduces you to subjects related to CS) and then take Abstract Algebra (might be called Modern Algebra) and *then* take other upper level courses like Combinatorics, Graph Theory, Numerical Analysis and Advanced Linear Algebra. If the first Abstract Algebra class is on a topic called Groups, stay for the second semester on \"rings\" since this will introduce you to fields and polynomials, which will be just unbelievably useful for all the other math courses I just listed. ","corpus": "reddit"},{"docID": "t5_2qhmr","qSentId": 10009,"question": "Yeah that's analysis. Some universities call it Advanced Calc, others call it Analysis or Real Variables. Even more confusing is the fact that Vector Analysis (a different subject entirely) used to be called Advanced Calculus, haha. But yeah, when I said Analysis it was exactly the course you just described. It's nothing like introductory calculus at all, especially if you didn't take an honors proof-based version of calc. Seriously, download Abbott's textbook from the piratebay and look at it, skip to the chapter on differentiation or integration or sequences and see how much more rigorous it is than what you did, though the first chapter's rigor might also be a bit of a shock for you too. Jumping from introductory, computation-driven calc to real analysis, without any kind of proofwriting/set theory course first, would be suicide, especially if you feel combinatorics is overwhelming. I don't mean to be a jerk, just trying to give you the information you need to keep from making a bad decision. Also, Analysis wouldn't be incredibly useful for a computer scientist. I'd suggest you take your proofwriting course (or a course called Discrete Math that's only offered to CS majors, serves as a substitute for the proofwriting course and also introduces you to subjects related to CS) and then take Abstract Algebra (might be called Modern Algebra) and *then* take other upper level courses like Combinatorics, Graph Theory, Numerical Analysis and Advanced Linear Algebra. If the first Abstract Algebra class is on a topic called Groups, stay for the second semester on \"rings\" since this will introduce you to fields and polynomials, which will be just unbelievably useful for all the other math courses I just listed. ","aSentId": 10010,"answer": "Do you think taking modern algebra would help at all with learning proofs or do you reccomend I take a more introductory style proof course first? And graph theory would work with the minor also so I will think about that.\n\nEdit: Oh okay I see that you said I should take a course like Dicrete Math first before Modern Algebra or Graph Theory. I can't find a course like that though in my school's course catalogs.","corpus": "reddit"},{"docID": "t5_2qhmr","qSentId": 10014,"question": "Oh yeah.  We used a ton of combinatorics in my pseudorandom numbers class.","aSentId": 10015,"answer": "Which school offers a pseudorandom numbers class?","corpus": "reddit"},{"docID": "t5_2qhmr","qSentId": 10016,"question": "Which school offers a pseudorandom numbers class?","aSentId": 10017,"answer": "Michigan State.  That class was actually part of the math curriculum, though.","corpus": "reddit"},{"docID": "t5_2qhmr","qSentId": 10018,"question": "Michigan State.  That class was actually part of the math curriculum, though.","aSentId": 10019,"answer": "I tried to find it on their website, but failed. What's the course number?\n","corpus": "reddit"},{"docID": "t5_2qhmr","qSentId": 10020,"question": "I tried to find it on their website, but failed. What's the course number?\n","aSentId": 10021,"answer": "MTH 496.  It was a capstone class taught by prof. Jonathan Hall at the time.  I can't find a class page for it so maybe they haven't offered it in a while.","corpus": "reddit"},{"docID": "t5_2qhmr","qSentId": 10022,"question": "MTH 496.  It was a capstone class taught by prof. Jonathan Hall at the time.  I can't find a class page for it so maybe they haven't offered it in a while.","aSentId": 10023,"answer": "Yeah, I can't find any trace of it either. It's a shame, because it sounds like it would have been really interesting and it would have been cool to have seen the course pages.\n\nI don't suppose there was a textbook?","corpus": "reddit"},{"docID": "t5_2qhmr","qSentId": 10024,"question": "Yeah, I can't find any trace of it either. It's a shame, because it sounds like it would have been really interesting and it would have been cool to have seen the course pages.\n\nI don't suppose there was a textbook?","aSentId": 10025,"answer": "I think it was primarily online content distributed by the prof.  If there was a textbook I can't remember for the life of me what it was.","corpus": "reddit"},{"docID": "t5_2qhmr","qSentId": 10029,"question": "OP, it seems pretty clear you just jumped the gun on higher level math classes. In college you start to see real math, which is completely unlike anything you've done in a math class before, and that includes collegiate level calc, ODE and introductory linear algebra. If you're not writing proofs, you're not doing math. If you've decided to stay in combinatorics (which I'd advise against honestly, take the series of courses I listed in my other comment if you want to continue with math courses), probably the best thing you could do would be to take this weekend and completely work through How to Prove It by Richard Velleman. If you go to a larger school, your bookstore should have it but you can also try the library or just download it from the piratebay. It's short, very readable and none of the problems are too challenging. However it will introduce you to basic proofwriting techniques and will allow you to survive the class until you can take a formal class on proofs. But it'll seriously take pretty much the entire weekend to work through it and learn everything in it by heart, or at least get through the first 100 pages or so. That's seriously the best thing you could do, other than simply dropping the class and taking it later when you've got some mid-level math courses under your belt. Again, I'm in grad school for math (at a top 20 school), this is good advice-you probably shouldn't ignore it. Good luck.","aSentId": 10030,"answer": "Thanks for your concern and advice! But so far we haven't done anything proof based and instead have just been learning the basics to combinatorics, we are already nearing chapter 3 and still no proofs and I am doing a little better than I was in the beginning. But is that normal to not do proofs at first or do you think I am in a non-proof based combin. class?\n\nEdit: I guess I could just look further into my textbook.\n\nEdit: Nope, I am not seeing any proofs throughout the book.","corpus": "reddit"},{"docID": "t5_2qhmr","qSentId": 10032,"question": "ELI5: Multiplication Method for Hashing","aSentId": 10033,"answer": "It sounds like you need a good textbook.  Both of those equations serve to obscure what's going on more than prose.  The simplest description of multiplication hashing I know is:\n\n&gt; Choose some irrational `A: 0&lt;A&lt;1`.  Multiply the input by `A` and take the fractional part.  Then take the most significant `w` bits from the result, and this is your hash.\n\nIf you start from that description and think about how to do it efficiently in code, you should reach one of the equations you described.  Hint:  fixed point math.\n\nFor your last question, think about:\n\n* what sizes can you choose for your hash table in each case?\n* why do we want to choose an irrational `A` instead of a simple fraction?","corpus": "reddit"},{"docID": "t5_2qhmr","qSentId": 10034,"question": "It sounds like you need a good textbook.  Both of those equations serve to obscure what's going on more than prose.  The simplest description of multiplication hashing I know is:\n\n&gt; Choose some irrational `A: 0&lt;A&lt;1`.  Multiply the input by `A` and take the fractional part.  Then take the most significant `w` bits from the result, and this is your hash.\n\nIf you start from that description and think about how to do it efficiently in code, you should reach one of the equations you described.  Hint:  fixed point math.\n\nFor your last question, think about:\n\n* what sizes can you choose for your hash table in each case?\n* why do we want to choose an irrational `A` instead of a simple fraction?","aSentId": 10035,"answer": "0 &lt; 1 &lt; A ?","corpus": "reddit"},{"docID": "t5_2qhmr","qSentId": 10036,"question": "0 &lt; 1 &lt; A ?","aSentId": 10037,"answer": "Looks like I got carried away with irrationality ;-) .. fixed; thanks!","corpus": "reddit"},{"docID": "t5_2qhmr","qSentId": 10038,"question": "Looks like I got carried away with irrationality ;-) .. fixed; thanks!","aSentId": 10039,"answer": "Yeah, I wasn't sure if you meant 0&lt;A&lt;1, or if that was some sort of notation I didn't know...","corpus": "reddit"},{"docID": "t5_2qhmr","qSentId": 10042,"question": "Commits.io \u2013 Create a poster from your code","aSentId": 10043,"answer": "Shut up and take my Intellectual Property","corpus": "reddit"},{"docID": "t5_2qhmr","qSentId": 10042,"question": "Commits.io \u2013 Create a poster from your code","aSentId": 10045,"answer": "Well that's a brilliant way to collect the source code from dozens of companies and any trade secrets held within. ","corpus": "reddit"},{"docID": "t5_2qhmr","qSentId": 10047,"question": "Join Stanford researchers to form the largest crowdsourcing research project ever","aSentId": 10048,"answer": "* Individual submissions are not allowed.\n\n\nYou need to have a team before being part of it :(","corpus": "reddit"},{"docID": "t5_2qhmr","qSentId": 10049,"question": "* Individual submissions are not allowed.\n\n\nYou need to have a team before being part of it :(","aSentId": 10050,"answer": "Yea, that was/is a bummer. ","corpus": "reddit"},{"docID": "t5_2qhmr","qSentId": 10049,"question": "* Individual submissions are not allowed.\n\n\nYou need to have a team before being part of it :(","aSentId": 10052,"answer": "I mean, technically, we can create a team on Reddit.","corpus": "reddit"},{"docID": "t5_2qhmr","qSentId": 10053,"question": "I mean, technically, we can create a team on Reddit.","aSentId": 10054,"answer": "I'm in boys.","corpus": "reddit"},{"docID": "t5_2qhmr","qSentId": 10047,"question": "Join Stanford researchers to form the largest crowdsourcing research project ever","aSentId": 10056,"answer": "So, who wants to start a team? I'm a cs student with some web dev skills.","corpus": "reddit"},{"docID": "t5_2qhmr","qSentId": 10047,"question": "Join Stanford researchers to form the largest crowdsourcing research project ever","aSentId": 10058,"answer": "Do you have to be a student to participate in this?","corpus": "reddit"},{"docID": "t5_2qhmr","qSentId": 10060,"question": "This is great! Any of you guys want to team up and do this?\nI'm a computer science student. ","aSentId": 10061,"answer": "Pm me,  along with anybody else who wants to be on a team. I think this is a phenomenal opportunity. ","corpus": "reddit"},{"docID": "t5_2qhmr","qSentId": 10064,"question": "random numbers for boost::multiprecision::mpfr_float types","aSentId": 10065,"answer": "How many times do you change the arbitrary precision of your `mpfr_float`s?   I get the impression that that's not something you're supposed to be doing all the time.\n\nDo you cycle through a fixed number of precision values?  If it's like 10 or so values, you can statically create an array of generators and just reference each one from its index.","corpus": "reddit"},{"docID": "t5_2qhmr","qSentId": 10066,"question": "How many times do you change the arbitrary precision of your `mpfr_float`s?   I get the impression that that's not something you're supposed to be doing all the time.\n\nDo you cycle through a fixed number of precision values?  If it's like 10 or so values, you can statically create an array of generators and just reference each one from its index.","aSentId": 10067,"answer": "we change precision as necessary to get around loss of precision due to inversion of near-singular matrices.  the array of generators is not really practical for our situation, unfortunately.","corpus": "reddit"},{"docID": "t5_2qhmr","qSentId": 10068,"question": "we change precision as necessary to get around loss of precision due to inversion of near-singular matrices.  the array of generators is not really practical for our situation, unfortunately.","aSentId": 10069,"answer": "Have you considered writing your own independent_bits_engine, variable_independent_bits_engine?  There is probably at least one reference implementation of independent_bits_engine that you can use.","corpus": "reddit"},{"docID": "t5_2qhmr","qSentId": 10070,"question": "Have you considered writing your own independent_bits_engine, variable_independent_bits_engine?  There is probably at least one reference implementation of independent_bits_engine that you can use.","aSentId": 10071,"answer": "seems like that may be what I have to do!  ","corpus": "reddit"},{"docID": "t5_2qhmr","qSentId": 10073,"question": "Compilers are absolutely fascinating to me","aSentId": 10074,"answer": "I'll go against the flow here - the dragon book is antiquated, and needlessly arid. I really liked Torczon's *Engineering a Compiler*, great bedtime reading. Do the exercises though.","corpus": "reddit"},{"docID": "t5_2qhmr","qSentId": 10073,"question": "Compilers are absolutely fascinating to me","aSentId": 10076,"answer": "What the hell? No compilers course?\n\nCopenhagen Institute of CS has it as a required course for Bachelor students! How else are you even supposed to have a well-grounded grasp of your second most important tool as a programmer? (Text editor is the most important tool, code is foremost for humans to read, and secondarily for compilers to occasionally compile.)","corpus": "reddit"},{"docID": "t5_2qhmr","qSentId": 10077,"question": "What the hell? No compilers course?\n\nCopenhagen Institute of CS has it as a required course for Bachelor students! How else are you even supposed to have a well-grounded grasp of your second most important tool as a programmer? (Text editor is the most important tool, code is foremost for humans to read, and secondarily for compilers to occasionally compile.)","aSentId": 10078,"answer": "The CS department at Ume\u00e5 University doesn't have one either. Instead, they teach the fundamental of theoretical CS, automata/grammars and so on. While nobody will tell you outright how a compiler does things, putting the pieces together isn't very hard.\n\nIn fact, I wrote one as part of my bachelors thesis: it was very much a sub-task, only after the fact did I realize that the thing I've written actually *was* a compiler. At the time, it was merely a collection of tokenizers, parsers and output mappings.","corpus": "reddit"},{"docID": "t5_2qhmr","qSentId": 10079,"question": "The CS department at Ume\u00e5 University doesn't have one either. Instead, they teach the fundamental of theoretical CS, automata/grammars and so on. While nobody will tell you outright how a compiler does things, putting the pieces together isn't very hard.\n\nIn fact, I wrote one as part of my bachelors thesis: it was very much a sub-task, only after the fact did I realize that the thing I've written actually *was* a compiler. At the time, it was merely a collection of tokenizers, parsers and output mappings.","aSentId": 10080,"answer": "That's a very fine replacement for a dedicated compilers course, I'll readily admit.","corpus": "reddit"},{"docID": "t5_2qhmr","qSentId": 10077,"question": "What the hell? No compilers course?\n\nCopenhagen Institute of CS has it as a required course for Bachelor students! How else are you even supposed to have a well-grounded grasp of your second most important tool as a programmer? (Text editor is the most important tool, code is foremost for humans to read, and secondarily for compilers to occasionally compile.)","aSentId": 10082,"answer": "Nor at my school in Australia. No OS course, no compiler course, pretty much just Algorithms and Data Structures, and a bunch of programming/OO/webdev.\n\n","corpus": "reddit"},{"docID": "t5_2qhmr","qSentId": 10083,"question": "Nor at my school in Australia. No OS course, no compiler course, pretty much just Algorithms and Data Structures, and a bunch of programming/OO/webdev.\n\n","aSentId": 10084,"answer": "Are you sure you're taking CS? Maybe it's a Software Engineering degree.","corpus": "reddit"},{"docID": "t5_2qhmr","qSentId": 10085,"question": "Are you sure you're taking CS? Maybe it's a Software Engineering degree.","aSentId": 10086,"answer": "I'm certain the title is Computer Science, yes. ","corpus": "reddit"},{"docID": "t5_2qhmr","qSentId": 10083,"question": "Nor at my school in Australia. No OS course, no compiler course, pretty much just Algorithms and Data Structures, and a bunch of programming/OO/webdev.\n\n","aSentId": 10088,"answer": "Wow. The advice I usually give is that most schools only require one of OS/Compilers and I always recommend you take both, audit if you must.","corpus": "reddit"},{"docID": "t5_2qhmr","qSentId": 10083,"question": "Nor at my school in Australia. No OS course, no compiler course, pretty much just Algorithms and Data Structures, and a bunch of programming/OO/webdev.\n\n","aSentId": 10090,"answer": "Same here (also in Aus) - the closest was our unit on theory of computation (automata, context free langauges, etc.). We also did Prolog in that unit, which was a little weird given that we don't do any functional programming...\n\nI was really disappointed when I found out that they didn't have any units on kernel design, and the closest we had to an OS unit was an introductory unit on using C (and Bash and Perl) in Linux.","corpus": "reddit"},{"docID": "t5_2qhmr","qSentId": 10092,"question": "That is outragerous.\n\n\"Here is some math. Here is some practical stuff. We're not going to give you anything that tie the two together. Have fun making erroneous assumptions until your Master's degree.\"\n\nWat.\n\nLet me guess, they don't have functional programming classes either? Or general classes in discrete mathematics and linear algebra?","aSentId": 10093,"answer": "When I got my BS in Computer Science (15 years ago) we had a full semester in each of Data Structures, Algorithms and Operating Systems.  We also had two semesters of discrete mathemetics.\n\nWe didn't have any linear algebra, Calc II was the highest required math and no compiler course... so this claim doesn't seem that far fetched.\n\nThat said I wish we'd had those courses as I sure do need them now.  I had to go back and learn those on my own on the job.","corpus": "reddit"},{"docID": "t5_2qhmr","qSentId": 10077,"question": "What the hell? No compilers course?\n\nCopenhagen Institute of CS has it as a required course for Bachelor students! How else are you even supposed to have a well-grounded grasp of your second most important tool as a programmer? (Text editor is the most important tool, code is foremost for humans to read, and secondarily for compilers to occasionally compile.)","aSentId": 10095,"answer": "My school's CS department is laughable, that's why! There are graduating seniors who need classes to graduate and they tell them \"tough luck, just graduate late.\" They don't give 2 shits about us. There are around 10 CS courses that have been permanently cut and will never be offered again since 2005. It's absolutely a joke. It has gotten to the point where we are so understaffed that there are professors teaching courses that they have no background in.\n\nYou are allowed to take 7 math electives instead of CS electives if you want, and there are people who graduate with a CS degree having taken only 4 CS upper division courses and 8+ math courses since it is nearly impossible to get a seat in any CS class here unless you are a senior.","corpus": "reddit"},{"docID": "t5_2qhmr","qSentId": 10096,"question": "My school's CS department is laughable, that's why! There are graduating seniors who need classes to graduate and they tell them \"tough luck, just graduate late.\" They don't give 2 shits about us. There are around 10 CS courses that have been permanently cut and will never be offered again since 2005. It's absolutely a joke. It has gotten to the point where we are so understaffed that there are professors teaching courses that they have no background in.\n\nYou are allowed to take 7 math electives instead of CS electives if you want, and there are people who graduate with a CS degree having taken only 4 CS upper division courses and 8+ math courses since it is nearly impossible to get a seat in any CS class here unless you are a senior.","aSentId": 10097,"answer": "I got my undergrad in Computational Math, and even I had more CS electives to take than that.","corpus": "reddit"},{"docID": "t5_2qhmr","qSentId": 10073,"question": "Compilers are absolutely fascinating to me","aSentId": 10100,"answer": "How good is your C++ ?  \nInstead of learning theory yourself, I would advise you to try and learn to use the clang libTooling API to make some simple tools.  \nYou will get much more practical results and have some first hand idea of how a real compiler works.\nOf course, after you do that, any book on compiler theory will make much more sense. ","corpus": "reddit"},{"docID": "t5_2qhmr","qSentId": 10105,"question": "/r/compilers","aSentId": 10106,"answer": "Truly there is a sub reddit for everything. Thank you!","corpus": "reddit"}]