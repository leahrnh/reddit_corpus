[{"docID": "t5_2fwo", "qSentId": 42646, "question": "How to create a Basic Game Engine using modern OpenGL.", "aSentId": 42647, "answer": "At the end under \"Engine Issues\" section he probably should have mentioned that each `Triangle::Draw` / `Quad::Draw` _is a single draw call_ -- and that for rendering large amounts of stuff you'll want to put them in the same vertex buffer for decent performance.\n\nThat is, putting 1000 triangles in a single vertex buffer will be much faster than 1000 `Triangle::Draw` calls here.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 42648, "question": "At the end under \"Engine Issues\" section he probably should have mentioned that each `Triangle::Draw` / `Quad::Draw` _is a single draw call_ -- and that for rendering large amounts of stuff you'll want to put them in the same vertex buffer for decent performance.\n\nThat is, putting 1000 triangles in a single vertex buffer will be much faster than 1000 `Triangle::Draw` calls here.", "aSentId": 42649, "answer": "Hey I'm one of the authors of those tutorials.\n\nYes, you are right, putting all models (same type) in one buffer will have a huge boost in performance. I didn't mention this because I was thinking that if you have a more complex scenario  with different models it would be hard to track all models in one single  buffer.\nI was thinking that I could mention that in later chapters where I will order the scene and apply this technique.\n\nThanks for feedback :)\n ", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 42650, "question": "Hey I'm one of the authors of those tutorials.\n\nYes, you are right, putting all models (same type) in one buffer will have a huge boost in performance. I didn't mention this because I was thinking that if you have a more complex scenario  with different models it would be hard to track all models in one single  buffer.\nI was thinking that I could mention that in later chapters where I will order the scene and apply this technique.\n\nThanks for feedback :)\n ", "aSentId": 42651, "answer": "Still new to some of this stuff, so ignore if I seem naive, but what would happen if it was, let's say, 4 vertex buffers with 200 triangles each?", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 42652, "question": "Still new to some of this stuff, so ignore if I seem naive, but what would happen if it was, let's say, 4 vertex buffers with 200 triangles each?", "aSentId": 42653, "answer": "4 drawcalls. One per buffer :)", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 42654, "question": "4 drawcalls. One per buffer :)", "aSentId": 42655, "answer": "To expand on this -- modern games like GTA make ~2500 draw calls per frame. \n\nYou will likely see similar frame rates (depending on CPU) with 2500 draw calls of say 25k triangles in each buffer vs. just one triangle in each buffer.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 42656, "question": "To expand on this -- modern games like GTA make ~2500 draw calls per frame. \n\nYou will likely see similar frame rates (depending on CPU) with 2500 draw calls of say 25k triangles in each buffer vs. just one triangle in each buffer.", "aSentId": 42657, "answer": "Wow :-o\n\nI didn't know that the performance difference would be this drastic. ", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 42656, "question": "To expand on this -- modern games like GTA make ~2500 draw calls per frame. \n\nYou will likely see similar frame rates (depending on CPU) with 2500 draw calls of say 25k triangles in each buffer vs. just one triangle in each buffer.", "aSentId": 42659, "answer": "And the major goal in current graphics R&amp;D for games is to reduce that number. Mantle, OpenGLnext, Dx12, etc. are all focused on exactly that.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 42648, "question": "At the end under \"Engine Issues\" section he probably should have mentioned that each `Triangle::Draw` / `Quad::Draw` _is a single draw call_ -- and that for rendering large amounts of stuff you'll want to put them in the same vertex buffer for decent performance.\n\nThat is, putting 1000 triangles in a single vertex buffer will be much faster than 1000 `Triangle::Draw` calls here.", "aSentId": 42661, "answer": "Do you always wants to stuff as much as possible into a vertex buffer to avoid more draw calls? Or is there a trade-off to using this technique?", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 42662, "question": "Do you always wants to stuff as much as possible into a vertex buffer to avoid more draw calls? Or is there a trade-off to using this technique?", "aSentId": 42663, "answer": "The trade-off is one of _dynamism (slow)_ versus _complexity (fast)_.\n\n- It's hard to pack multiple independent objects into the same vertex buffer and have them move independently etc (you only have so many uniform inputs available, more complex shaders, etc).\n- Addition/removal of objects from a single vertex buffer also becomes tedious.\n- Culling techniques do not work as well (you will be rendering the whole vertex buffer instead of a select few objects). There are ways around this limitation but they're complex.\n\nModern game engines use so-called \"batching\" to place many small objects into a single vertex buffer and reduce draw calls.\n\nIn general: The lower number of draw calls the less CPU your application will utilize -- but it also increases complexity of your app.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 42664, "question": "The trade-off is one of _dynamism (slow)_ versus _complexity (fast)_.\n\n- It's hard to pack multiple independent objects into the same vertex buffer and have them move independently etc (you only have so many uniform inputs available, more complex shaders, etc).\n- Addition/removal of objects from a single vertex buffer also becomes tedious.\n- Culling techniques do not work as well (you will be rendering the whole vertex buffer instead of a select few objects). There are ways around this limitation but they're complex.\n\nModern game engines use so-called \"batching\" to place many small objects into a single vertex buffer and reduce draw calls.\n\nIn general: The lower number of draw calls the less CPU your application will utilize -- but it also increases complexity of your app.", "aSentId": 42665, "answer": "This tradeoff isn't unique to 3D rendering, of course.  Any time you create a sophisticated system for performance, reliability, etc., you generally wind up forcing the user of your API to jump through a few hoops.", "corpus": "reddit"}{"docID": "t5_2fwo", "qSentId": 42646, "question": "How to create a Basic Game Engine using modern OpenGL.", "aSentId": 42667, "answer": "Oh, and if you want to create a game engine without having to roll your own rendering engine, I've heard good things about [BGFX](https://github.com/bkaradzic/bgfx).", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 42668, "question": "Oh, and if you want to create a game engine without having to roll your own rendering engine, I've heard good things about [BGFX](https://github.com/bkaradzic/bgfx).", "aSentId": 42669, "answer": "Cool didn t knew about it", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 42668, "question": "Oh, and if you want to create a game engine without having to roll your own rendering engine, I've heard good things about [BGFX](https://github.com/bkaradzic/bgfx).", "aSentId": 42671, "answer": "There's also [LWJGL](http://lwjgl.org/) for Java.", "corpus": "reddit"}{"docID": "t5_2fwo", "qSentId": 42646, "question": "How to create a Basic Game Engine using modern OpenGL.", "aSentId": 42673, "answer": "TBH this should have been titled \"Modern OpenGL Tutorial\" and restructured less on a \"basic game engine\" considering the design isn't that great and it's mainly about rendering anyway. \n\nSome constructive points for the code: \n\n- You're using modern OpenGL, but not modern C++ (you seem to be using C++11's override keyword, but that's it?)? \n- Why use inheritance for primitives when a factory would suffice or even better: composition? i.e. Let a class such as `VertexBufferObject` handle all the OpenGL nitty gritties, and just define data for classes such as `Quad` where `Quad::setWidth()` would change underlying vertices within the `VertexBufferObject`. All you're really doing is code duplication with OpenGL code... (with `Quad` and `Triangle`).\n- So much namespace nesting... This isn't C# or Java. Namespaces are for name collision.\n- Why are you using vectors when it's unncessary? e.g.\n\n        std::vector&lt;VertexFormat&gt; vertices;\n        vertices.push_back(VertexFormat(glm::vec3(-0.25, 0.5, 0.0),//pos\n                                      glm::vec4( 1, 0, 0, 1)));   //color\n        vertices.push_back(VertexFormat(glm::vec3(-0.25, 0.75, 0.0),//pos\n                                      glm::vec4( 0, 0, 0, 1)));   //color\n        vertices.push_back(VertexFormat(glm::vec3(0.25, 0.5, 0.0),  //pos\n                                      glm::vec4( 0, 1, 0, 1)));   //color\n        //4th vertex\n        vertices.push_back(VertexFormat(glm::vec3(0.25, 0.75, 0.0),//pos\n                                      glm::vec4(0, 0, 1, 1)));   //color\n\n    could just be a static (un-resizeable) array; also use initializer lists pls. And in this case since `vertices` seems to be the same for every darn `Quad` object just make it a static const or constexpr (again, using a static array).\n- smart pointers and more use of RAII pls\n- Not really sure why you're using virtual inheritance when you're not doing multiple inheritance nor do I see the diamond problem anywhere (unless that's explained in the text somewhere?).", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 42674, "question": "TBH this should have been titled \"Modern OpenGL Tutorial\" and restructured less on a \"basic game engine\" considering the design isn't that great and it's mainly about rendering anyway. \n\nSome constructive points for the code: \n\n- You're using modern OpenGL, but not modern C++ (you seem to be using C++11's override keyword, but that's it?)? \n- Why use inheritance for primitives when a factory would suffice or even better: composition? i.e. Let a class such as `VertexBufferObject` handle all the OpenGL nitty gritties, and just define data for classes such as `Quad` where `Quad::setWidth()` would change underlying vertices within the `VertexBufferObject`. All you're really doing is code duplication with OpenGL code... (with `Quad` and `Triangle`).\n- So much namespace nesting... This isn't C# or Java. Namespaces are for name collision.\n- Why are you using vectors when it's unncessary? e.g.\n\n        std::vector&lt;VertexFormat&gt; vertices;\n        vertices.push_back(VertexFormat(glm::vec3(-0.25, 0.5, 0.0),//pos\n                                      glm::vec4( 1, 0, 0, 1)));   //color\n        vertices.push_back(VertexFormat(glm::vec3(-0.25, 0.75, 0.0),//pos\n                                      glm::vec4( 0, 0, 0, 1)));   //color\n        vertices.push_back(VertexFormat(glm::vec3(0.25, 0.5, 0.0),  //pos\n                                      glm::vec4( 0, 1, 0, 1)));   //color\n        //4th vertex\n        vertices.push_back(VertexFormat(glm::vec3(0.25, 0.75, 0.0),//pos\n                                      glm::vec4(0, 0, 1, 1)));   //color\n\n    could just be a static (un-resizeable) array; also use initializer lists pls. And in this case since `vertices` seems to be the same for every darn `Quad` object just make it a static const or constexpr (again, using a static array).\n- smart pointers and more use of RAII pls\n- Not really sure why you're using virtual inheritance when you're not doing multiple inheritance nor do I see the diamond problem anywhere (unless that's explained in the text somewhere?).", "aSentId": 42675, "answer": "Thanks for feedback man...I ll try to point out some answers:\n\n  * This \"basic game engine\" is going to be use  for next chapters where we begin and present other techniques.\n \n  * I wrote a whole article about this architecture issues that you told about : http://in2gpu.com/2015/03/15/create-a-game-engine-part-viii-performance/ with all the inheritance. and why DOD is better as you pointed out. \n  \n  * It's a matter of taste TBH with the namespace thing. I was a C# programmer before I switch over to C++ a few years ago\n \n  * About the array...it's still something about taste. I agree maybe I should have use an simple array.\n \n  * since it's a beginner tutorial I somehow didn't wanted to use smart pointers\n\n  * that virtual keyword it's a mistake. diamond problems should be avoided. I ll modify the article.\n\nPS. Hope you are not angry or something \n", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 42676, "question": "Thanks for feedback man...I ll try to point out some answers:\n\n  * This \"basic game engine\" is going to be use  for next chapters where we begin and present other techniques.\n \n  * I wrote a whole article about this architecture issues that you told about : http://in2gpu.com/2015/03/15/create-a-game-engine-part-viii-performance/ with all the inheritance. and why DOD is better as you pointed out. \n  \n  * It's a matter of taste TBH with the namespace thing. I was a C# programmer before I switch over to C++ a few years ago\n \n  * About the array...it's still something about taste. I agree maybe I should have use an simple array.\n \n  * since it's a beginner tutorial I somehow didn't wanted to use smart pointers\n\n  * that virtual keyword it's a mistake. diamond problems should be avoided. I ll modify the article.\n\nPS. Hope you are not angry or something \n", "aSentId": 42677, "answer": "&gt; since it's a beginner tutorial I somehow didn't wanted to use smart pointers\n\nI would actually start them on smart pointers early.  I used to get a little bothered by this, but std::unique_ptr helps you avoid many many problems.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 42678, "question": "&gt; since it's a beginner tutorial I somehow didn't wanted to use smart pointers\n\nI would actually start them on smart pointers early.  I used to get a little bothered by this, but std::unique_ptr helps you avoid many many problems.", "aSentId": 42679, "answer": "Hmm you have to be very careful with smartpointers and how you use them in game dev...they can introduce overhead. Maybe I ll use them in next chapters", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 42680, "question": "Hmm you have to be very careful with smartpointers and how you use them in game dev...they can introduce overhead. Maybe I ll use them in next chapters", "aSentId": 42681, "answer": "`std::unique_ptr` has no overhead compared to a raw pointer. `std::shared_ptr` is rarely needed in performance-critical game code. Also, `new` and `delete` should almost never be used in C++11/14. **Especially** from beginners.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 42682, "question": "`std::unique_ptr` has no overhead compared to a raw pointer. `std::shared_ptr` is rarely needed in performance-critical game code. Also, `new` and `delete` should almost never be used in C++11/14. **Especially** from beginners.", "aSentId": 42683, "answer": "I'm starting to get back into C++ from a stint in C#.  Are there any good tutorials or best practices docs for the new features in C++11/14?", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 42676, "question": "Thanks for feedback man...I ll try to point out some answers:\n\n  * This \"basic game engine\" is going to be use  for next chapters where we begin and present other techniques.\n \n  * I wrote a whole article about this architecture issues that you told about : http://in2gpu.com/2015/03/15/create-a-game-engine-part-viii-performance/ with all the inheritance. and why DOD is better as you pointed out. \n  \n  * It's a matter of taste TBH with the namespace thing. I was a C# programmer before I switch over to C++ a few years ago\n \n  * About the array...it's still something about taste. I agree maybe I should have use an simple array.\n \n  * since it's a beginner tutorial I somehow didn't wanted to use smart pointers\n\n  * that virtual keyword it's a mistake. diamond problems should be avoided. I ll modify the article.\n\nPS. Hope you are not angry or something \n", "aSentId": 42685, "answer": "&gt; since it's a beginner tutorial I somehow didn't wanted to use smart pointers\n\nI think it's a really bad idea to attempt to teach *programming* and a field like game development or computer graphics at the same time. Being nice to people who aren't experienced with programming should not come at the expense of the tutorial's quality. And it's not just you, it is becoming a bad clich\u00e8.\n\nI think we should assume that people are proficient at programming before picking up game development, digital signal processing, computer graphics or whatever. I don't think our code has to suffer just to cater to the absolute beginners. If people are totally unexperienced with programming, you won't be able to teach them anything anyway.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 42686, "question": "&gt; since it's a beginner tutorial I somehow didn't wanted to use smart pointers\n\nI think it's a really bad idea to attempt to teach *programming* and a field like game development or computer graphics at the same time. Being nice to people who aren't experienced with programming should not come at the expense of the tutorial's quality. And it's not just you, it is becoming a bad clich\u00e8.\n\nI think we should assume that people are proficient at programming before picking up game development, digital signal processing, computer graphics or whatever. I don't think our code has to suffer just to cater to the absolute beginners. If people are totally unexperienced with programming, you won't be able to teach them anything anyway.", "aSentId": 42687, "answer": "Oh I can agree with you. But I immediately remember some friends of mine who tried the game development field and they became frustrated over 3-4 tutorials because the syntax was too hard. Especially with DirectX.\n\n ", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 42674, "question": "TBH this should have been titled \"Modern OpenGL Tutorial\" and restructured less on a \"basic game engine\" considering the design isn't that great and it's mainly about rendering anyway. \n\nSome constructive points for the code: \n\n- You're using modern OpenGL, but not modern C++ (you seem to be using C++11's override keyword, but that's it?)? \n- Why use inheritance for primitives when a factory would suffice or even better: composition? i.e. Let a class such as `VertexBufferObject` handle all the OpenGL nitty gritties, and just define data for classes such as `Quad` where `Quad::setWidth()` would change underlying vertices within the `VertexBufferObject`. All you're really doing is code duplication with OpenGL code... (with `Quad` and `Triangle`).\n- So much namespace nesting... This isn't C# or Java. Namespaces are for name collision.\n- Why are you using vectors when it's unncessary? e.g.\n\n        std::vector&lt;VertexFormat&gt; vertices;\n        vertices.push_back(VertexFormat(glm::vec3(-0.25, 0.5, 0.0),//pos\n                                      glm::vec4( 1, 0, 0, 1)));   //color\n        vertices.push_back(VertexFormat(glm::vec3(-0.25, 0.75, 0.0),//pos\n                                      glm::vec4( 0, 0, 0, 1)));   //color\n        vertices.push_back(VertexFormat(glm::vec3(0.25, 0.5, 0.0),  //pos\n                                      glm::vec4( 0, 1, 0, 1)));   //color\n        //4th vertex\n        vertices.push_back(VertexFormat(glm::vec3(0.25, 0.75, 0.0),//pos\n                                      glm::vec4(0, 0, 1, 1)));   //color\n\n    could just be a static (un-resizeable) array; also use initializer lists pls. And in this case since `vertices` seems to be the same for every darn `Quad` object just make it a static const or constexpr (again, using a static array).\n- smart pointers and more use of RAII pls\n- Not really sure why you're using virtual inheritance when you're not doing multiple inheritance nor do I see the diamond problem anywhere (unless that's explained in the text somewhere?).", "aSentId": 42689, "answer": "Oddly enough, many people would say that using a static un-resizeable arrays in that code was \"not modern C++\", and that it should use a vector instead.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 42690, "question": "Oddly enough, many people would say that using a static un-resizeable arrays in that code was \"not modern C++\", and that it should use a vector instead.", "aSentId": 42691, "answer": "If they do, they'd be wrong. `vector`s are for dynamically resized arrays, not for arrays whose sizes are known at compile time.  unlike `vector`s, static arrays incur no heap allocations in and of themselves.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 42692, "question": "If they do, they'd be wrong. `vector`s are for dynamically resized arrays, not for arrays whose sizes are known at compile time.  unlike `vector`s, static arrays incur no heap allocations in and of themselves.", "aSentId": 42693, "answer": "And besides, we've got `std::array` now as a static-length drop-in replacement for `std::vector`. No reason to add that overhead when a plain array will do, but it's there.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 42674, "question": "TBH this should have been titled \"Modern OpenGL Tutorial\" and restructured less on a \"basic game engine\" considering the design isn't that great and it's mainly about rendering anyway. \n\nSome constructive points for the code: \n\n- You're using modern OpenGL, but not modern C++ (you seem to be using C++11's override keyword, but that's it?)? \n- Why use inheritance for primitives when a factory would suffice or even better: composition? i.e. Let a class such as `VertexBufferObject` handle all the OpenGL nitty gritties, and just define data for classes such as `Quad` where `Quad::setWidth()` would change underlying vertices within the `VertexBufferObject`. All you're really doing is code duplication with OpenGL code... (with `Quad` and `Triangle`).\n- So much namespace nesting... This isn't C# or Java. Namespaces are for name collision.\n- Why are you using vectors when it's unncessary? e.g.\n\n        std::vector&lt;VertexFormat&gt; vertices;\n        vertices.push_back(VertexFormat(glm::vec3(-0.25, 0.5, 0.0),//pos\n                                      glm::vec4( 1, 0, 0, 1)));   //color\n        vertices.push_back(VertexFormat(glm::vec3(-0.25, 0.75, 0.0),//pos\n                                      glm::vec4( 0, 0, 0, 1)));   //color\n        vertices.push_back(VertexFormat(glm::vec3(0.25, 0.5, 0.0),  //pos\n                                      glm::vec4( 0, 1, 0, 1)));   //color\n        //4th vertex\n        vertices.push_back(VertexFormat(glm::vec3(0.25, 0.75, 0.0),//pos\n                                      glm::vec4(0, 0, 1, 1)));   //color\n\n    could just be a static (un-resizeable) array; also use initializer lists pls. And in this case since `vertices` seems to be the same for every darn `Quad` object just make it a static const or constexpr (again, using a static array).\n- smart pointers and more use of RAII pls\n- Not really sure why you're using virtual inheritance when you're not doing multiple inheritance nor do I see the diamond problem anywhere (unless that's explained in the text somewhere?).", "aSentId": 42695, "answer": "&gt; Not really sure why you're using virtual inheritance\n\nIs there another type that gives you run-time dispatch?", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 42697, "question": "    virtual const std::vector&lt;GLuint&gt; GetVbos() const = 0;\n\nThis returns a copy of the vector.  It should be a reference (or if you actually intended to return a copy, you can drop the first const because it has no effect.)\n", "aSentId": 42698, "answer": "modified", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 42697, "question": "    virtual const std::vector&lt;GLuint&gt; GetVbos() const = 0;\n\nThis returns a copy of the vector.  It should be a reference (or if you actually intended to return a copy, you can drop the first const because it has no effect.)\n", "aSentId": 42700, "answer": "I guess you are right...shouldn't be copy elision from VS2013 there?...I mean the compiler should make something like this virtual  void GetVbos( const std::vector&lt;GLuint&gt;&amp; __hiddenVect__) const = 0;\nI don't know for sure if this applies (for const declared functions)", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 42701, "question": "I guess you are right...shouldn't be copy elision from VS2013 there?...I mean the compiler should make something like this virtual  void GetVbos( const std::vector&lt;GLuint&gt;&amp; __hiddenVect__) const = 0;\nI don't know for sure if this applies (for const declared functions)", "aSentId": 42702, "answer": "No, because that would change the semantics.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 42703, "question": "No, because that would change the semantics.", "aSentId": 42704, "answer": "k", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 42701, "question": "I guess you are right...shouldn't be copy elision from VS2013 there?...I mean the compiler should make something like this virtual  void GetVbos( const std::vector&lt;GLuint&gt;&amp; __hiddenVect__) const = 0;\nI don't know for sure if this applies (for const declared functions)", "aSentId": 42706, "answer": "This is named value return optimization aka NVRO.  It can only work when you have optimizations enabled, and of course isn't guaranteed on every compiler or even in every situation, so best not to depend on it.\n", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 42707, "question": "This is named value return optimization aka NVRO.  It can only work when you have optimizations enabled, and of course isn't guaranteed on every compiler or even in every situation, so best not to depend on it.\n", "aSentId": 42708, "answer": "Thanks..right answer", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 42710, "question": "I'm currently learning GLFW in school so I was wondering how similar GLUT is to GLFW and if I can still use this as a guide on top of what I'm learning?", "aSentId": 42711, "answer": "Definitely. GLFW, SDL, SFML and glut serve (mostly) the same purpose which is window creation and input handling, and they should be fairly interchangeable. Look into them to see their differences and which is most suitable for you.\n\nI would recommend any of the other three above glut, though.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 42712, "question": "Definitely. GLFW, SDL, SFML and glut serve (mostly) the same purpose which is window creation and input handling, and they should be fairly interchangeable. Look into them to see their differences and which is most suitable for you.\n\nI would recommend any of the other three above glut, though.", "aSentId": 42713, "answer": "Yeah, I learned on GLUT and then made some toys with the other three.  GLUT was definitely the most difficult for me to use, YMMV", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 42710, "question": "I'm currently learning GLFW in school so I was wondering how similar GLUT is to GLFW and if I can still use this as a guide on top of what I'm learning?", "aSentId": 42715, "answer": "You shouldn't be using GLUT for anything other than learning OpenGL from old tutorials. Anything else is much better.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 42710, "question": "I'm currently learning GLFW in school so I was wondering how similar GLUT is to GLFW and if I can still use this as a guide on top of what I'm learning?", "aSentId": 42717, "answer": "Cool that you learn GLFW, it's modern. I learned wih GLUT. Except from how you create the context they shouldn't be different.  ( I spent little time with GLFW to tell you exact differences, maybe someone more experienced could tell us :) )", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 42719, "question": "OpenGL predates OOP? No it doesn't. OpenGL is written as a C library because it is far easier to handle the API surface that way. Methods are your only exports, instead of having models for objects and classes. Secondly, by relying on a smaller set of language features, you can interop with other languages more easily (languages that are not OOP for example).\n\nIt is nothing to do with OOP's timeframe. Since OOP was around for at least a decade longer than OpenGL.", "aSentId": 42720, "answer": "Correct. I'll modify that right away.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 42719, "question": "OpenGL predates OOP? No it doesn't. OpenGL is written as a C library because it is far easier to handle the API surface that way. Methods are your only exports, instead of having models for objects and classes. Secondly, by relying on a smaller set of language features, you can interop with other languages more easily (languages that are not OOP for example).\n\nIt is nothing to do with OOP's timeframe. Since OOP was around for at least a decade longer than OpenGL.", "aSentId": 42722, "answer": "Actually, OOP was implemented in hardware before it was implemented in software Alan Kay has mentioned some early machines that used objects at the most fundamental level that go back tot he early 1960's. Don't know anything more about it than that. He was just making a point that the concept had been around for a long time before Smalltalk implemented it in the early 70's.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 42723, "question": "Actually, OOP was implemented in hardware before it was implemented in software Alan Kay has mentioned some early machines that used objects at the most fundamental level that go back tot he early 1960's. Don't know anything more about it than that. He was just making a point that the concept had been around for a long time before Smalltalk implemented it in the early 70's.", "aSentId": 42724, "answer": "Right... but none of that is the reason OpenGL is a C library and not something else.\n", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 42725, "question": "Right... but none of that is the reason OpenGL is a C library and not something else.\n", "aSentId": 42726, "answer": "As a thought-experiment, what kind of graphics/physics/game engine would you implement if you had access to a system with as many as 1.0 x 10^9 processors with as many as 0.8 x 10^6 processors in a single \"chip?\"\n\nSaid processors use an OOP-oriented ISA, in case you were wondering...\n", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 42727, "question": "As a thought-experiment, what kind of graphics/physics/game engine would you implement if you had access to a system with as many as 1.0 x 10^9 processors with as many as 0.8 x 10^6 processors in a single \"chip?\"\n\nSaid processors use an OOP-oriented ISA, in case you were wondering...\n", "aSentId": 42728, "answer": "I'm not knocking OOP in any way here - I concede all that stuff.\n\nI'm just saying...... \n", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 42719, "question": "OpenGL predates OOP? No it doesn't. OpenGL is written as a C library because it is far easier to handle the API surface that way. Methods are your only exports, instead of having models for objects and classes. Secondly, by relying on a smaller set of language features, you can interop with other languages more easily (languages that are not OOP for example).\n\nIt is nothing to do with OOP's timeframe. Since OOP was around for at least a decade longer than OpenGL.", "aSentId": 42730, "answer": "Thanks", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 42732, "question": "Looks really good. Wanted to dig into OpenGL for the longest time. Just one thing: the top shadow of the website is quite annoying and really distracts me from reading the text. Is there a way to deactivate it?", "aSentId": 42733, "answer": "you mean that bar? with some social media buttons?", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 42734, "question": "you mean that bar? with some social media buttons?", "aSentId": 42735, "answer": "I mean the shadow/dimming right beneath the bar", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 42732, "question": "Looks really good. Wanted to dig into OpenGL for the longest time. Just one thing: the top shadow of the website is quite annoying and really distracts me from reading the text. Is there a way to deactivate it?", "aSentId": 42737, "answer": "in any modern browser right click \"Inspect Element\" on the \"bar\" area .... then in the parent-most Div or element just do `display: none;` in the css.\n\nyour custom css rule will presist until you refresh the page.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 42741, "question": "Thank you for this tutorial, I will give it a shot. \n\nI have just read the beginning to get an idea of the style. I am puzzled by the fact that you encourage people to copy the dependencies' libraries and headers into the project. I am very suspicious about that. Do you favour this approach because it is a tutorial or do you do the same when coding for real projects ? ", "aSentId": 42742, "answer": "Depends on the situation. I usually prefer to have 3rd party thing inside the project (of course if there are just a few dll/lib files and not hundreds of MB) ", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 42744, "question": "Thank you so much for this. I tried getting into this a month or two ago, but found zero guides on how to set this stuff up in Visual Studio. I can now finally learn OpenGL :D", "aSentId": 42745, "answer": "Thanks if you have some problems let me kknow", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 42747, "question": "Isn't openGL obsolete, when Khronos/Vulkan is coming? pls answer?", "aSentId": 42748, "answer": "It will still be quite a while before Vulkan is widely supported by drivers, at the moment they haven't even finished the spec. Also OpenGL is still going to be used in WebGL, so far I haven't heard any plans to make a WebVulkan. Another thing is that jumping directly into Vulkan without prior OpenGL knowledge is pretty much impossible. A simple \"Hello Triangle\" app is around 10 lines of code in OpenGL, in Vulkan it's 600. So it's not exactly newbie friendly.\n", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 42749, "question": "It will still be quite a while before Vulkan is widely supported by drivers, at the moment they haven't even finished the spec. Also OpenGL is still going to be used in WebGL, so far I haven't heard any plans to make a WebVulkan. Another thing is that jumping directly into Vulkan without prior OpenGL knowledge is pretty much impossible. A simple \"Hello Triangle\" app is around 10 lines of code in OpenGL, in Vulkan it's 600. So it's not exactly newbie friendly.\n", "aSentId": 42750, "answer": "Maybe not as long as you would think.  The key benefit to vulkan is that it does a lot less than opengl does.  This means a much lower barrier for GPU manufacturers to implement it in their drivers.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 42751, "question": "Maybe not as long as you would think.  The key benefit to vulkan is that it does a lot less than opengl does.  This means a much lower barrier for GPU manufacturers to implement it in their drivers.", "aSentId": 42752, "answer": "Also, the current most used game engines all have low barriers of entry, and once those engines implement vulkan, every game made by them will also be compatible.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 42749, "question": "It will still be quite a while before Vulkan is widely supported by drivers, at the moment they haven't even finished the spec. Also OpenGL is still going to be used in WebGL, so far I haven't heard any plans to make a WebVulkan. Another thing is that jumping directly into Vulkan without prior OpenGL knowledge is pretty much impossible. A simple \"Hello Triangle\" app is around 10 lines of code in OpenGL, in Vulkan it's 600. So it's not exactly newbie friendly.\n", "aSentId": 42754, "answer": "&gt; A simple \"Hello Triangle\" app is around 10 lines of code in OpenGL, in Vulkan it's 600.\n\nWat? Is it possible to show the code examples?", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 42755, "question": "&gt; A simple \"Hello Triangle\" app is around 10 lines of code in OpenGL, in Vulkan it's 600.\n\nWat? Is it possible to show the code examples?", "aSentId": 42756, "answer": "They haven't yet released any code, but essentially in classic old-school OpenGL you just send the vertex coordinates and the driver handles all the rest. In Vulkan you start of with far more detailed initialization, you have to setup allocators for memory management, query for graphics card and displays, then setup queues and buffers to handle the vertex coordinates, then you have to upload the shaders, which you have to supply now as byte-code, not source code, if you want a matrix stack, you have to write that yourself and so on.\n\nCompared with OpenGL4.4 Core Profile the difference isn't that huge, as OpenGL has been moving away from the fixed function pipeline for quite a few years and thus required the user to setup shaders, vertex arrays, vertex buffer objects, vertex attribute objects and so on, but the older functionality was still available via Compatibility Profile or just by using an older OpenGL version. In Vulkan not only is all the easy-to-use stuff gone, you also have a lot more low level stuff to twiddle with. That's great if you want to have a high performance multi threaded graphics engine and not so great when you are a newbie struggling to put a single triangle on the screen.\n", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 42749, "question": "It will still be quite a while before Vulkan is widely supported by drivers, at the moment they haven't even finished the spec. Also OpenGL is still going to be used in WebGL, so far I haven't heard any plans to make a WebVulkan. Another thing is that jumping directly into Vulkan without prior OpenGL knowledge is pretty much impossible. A simple \"Hello Triangle\" app is around 10 lines of code in OpenGL, in Vulkan it's 600. So it's not exactly newbie friendly.\n", "aSentId": 42758, "answer": "&gt; A simple \"Hello Triangle\" app is around 10 lines of code in OpenGL, in Vulkan it's 600. So it's not exactly newbie friendly.\n\n-1, that's massively out of context. The \"other 590 lines\" in the OpenGL case are in the graphics driver. Abstractions over Vulkan can just as easily be used, but as code libraries instead.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 42747, "question": "Isn't openGL obsolete, when Khronos/Vulkan is coming? pls answer?", "aSentId": 42761, "answer": "No. People still gimp around on OpenGL 2.x. Vulkan is also very, very low level. They said what takes you 5 lines of code in classic OpenGL took them 600 in Vulkan (and you'll need like 15-20 in modern OpenGL). \n\nSo learning OpenGL now will be relevant for a while. Especially for private projects. ", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 42762, "question": "No. People still gimp around on OpenGL 2.x. Vulkan is also very, very low level. They said what takes you 5 lines of code in classic OpenGL took them 600 in Vulkan (and you'll need like 15-20 in modern OpenGL). \n\nSo learning OpenGL now will be relevant for a while. Especially for private projects. ", "aSentId": 42763, "answer": "What we are likely going to see is new Opengl/directx esq libraries built on top of vulkan.  Which is a good thing. These libraries will be able to evolve and move at paces that DirectX and OpenGl could never dream of.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 42764, "question": "What we are likely going to see is new Opengl/directx esq libraries built on top of vulkan.  Which is a good thing. These libraries will be able to evolve and move at paces that DirectX and OpenGl could never dream of.", "aSentId": 42765, "answer": "Hopefully (though, I can't wait to dig into the Vulkan specs once it's out). But it's still not a bad idea to learn OpenGL.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 42766, "question": "Hopefully (though, I can't wait to dig into the Vulkan specs once it's out). But it's still not a bad idea to learn OpenGL.", "aSentId": 42767, "answer": "&gt; But it's still not a bad idea to learn OpenGL.\n\nAgreed. Ultimately the knowledge you get from learning opengl will be translatable to other libraries/frameworks (DirectX, new library x).", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 42764, "question": "What we are likely going to see is new Opengl/directx esq libraries built on top of vulkan.  Which is a good thing. These libraries will be able to evolve and move at paces that DirectX and OpenGl could never dream of.", "aSentId": 42769, "answer": "Putting new middle wares on top of Vulcan defeats the purpose of having a low level API. Also why do you need new high level graphics APIs when GL and DX are both very mature?", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 42770, "question": "Putting new middle wares on top of Vulcan defeats the purpose of having a low level API. Also why do you need new high level graphics APIs when GL and DX are both very mature?", "aSentId": 42771, "answer": "No, putting new middleware on top of Vulcan means 1) the middleware can be written and maintained once rather than for all graphics cards, by people whose primary job is middleware rather than hardware, and 2) that middleware can be more easily debugged, changed, or replaced when needed.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 42770, "question": "Putting new middle wares on top of Vulcan defeats the purpose of having a low level API. Also why do you need new high level graphics APIs when GL and DX are both very mature?", "aSentId": 42773, "answer": "To the first point.  It is sort of a natural and inevitable thing.  It happens pretty much everywhere there is a low level api.  It doesn't defeat the purpose of vulkan, if anything it exemplifies the power of what vulkan can allow us to do.\n\n&gt; why do you need new high level graphics APIs when GL and DX are both very mature?\n\nMaturity is good, but it has its drawbacks.  OpenGL is somewhat of a clunky API.  It has random state, contexts, and variable support from one card to the next.  As well, the support for multithreading is pathetically bad.\n\nDirectX (I haven't dealt as much with it) is microsoft only.  While it does a better job of documenting and concertizing the API, it doesn't help if you are trying to target android, linux, or macs.  On top of that, you are somewhat bound to whatever version of directx the card supports.  That forces you do do some fun stuff where you either have to say \"No, I don't support this\" or \"I hope emulation is good enough\" or \"Lets write this in DX12, DX11, DX10, and DX9\".\n\nEven for opengl and directx, moving the high level interaction out of the graphics card driver and into user space libraries will be a godsend.  Assuming vulkan and SPIR stay significantly low level and unchanging it means that now you can use opengl version \"whatever\" and distribute that with your application.  You no longer have to worry about whether or not the graphics card supports the version of opengl you are targeting because you are distributing it with your executable.\n\nNow, my hunch is that many of these game companies are going to say something to the effect of \"I like these things about opengl, these things about dx, and I really wish I could do X with opengl and dx\".  And, boom, a new high level library will be born.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 42747, "question": "Isn't openGL obsolete, when Khronos/Vulkan is coming? pls answer?", "aSentId": 42775, "answer": "You would want to be compatible with old hardware still. And we can't expect that all graphics cards will get updates (or even have the possibility to be compatible). It'll take a few years to get that far", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 42776, "question": "You would want to be compatible with old hardware still. And we can't expect that all graphics cards will get updates (or even have the possibility to be compatible). It'll take a few years to get that far", "aSentId": 42777, "answer": "I've heard people saying that hardware that supports GLES 3.1, can support Vulkan, but GLES 3.1 is a pretty new spec.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 42778, "question": "I've heard people saying that hardware that supports GLES 3.1, can support Vulkan, but GLES 3.1 is a pretty new spec.", "aSentId": 42779, "answer": "Like, 'that spec was finished the day before the Vulkan announcement' new.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 42780, "question": "Like, 'that spec was finished the day before the Vulkan announcement' new.", "aSentId": 42781, "answer": "Looks like I had the wrong date, I though it was released last year but that was an announcement. ", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 42778, "question": "I've heard people saying that hardware that supports GLES 3.1, can support Vulkan, but GLES 3.1 is a pretty new spec.", "aSentId": 42783, "answer": "&gt;I've heard people saying that hardware that supports GLES 3.1, can support Vulkan, but GLES 3.1 is a pretty new spec.\n\nCAN is the important word here. If the manufacturer doesn't ship updated drivers with vulkan support you'll be SOL. ", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 42784, "question": "&gt;I've heard people saying that hardware that supports GLES 3.1, can support Vulkan, but GLES 3.1 is a pretty new spec.\n\nCAN is the important word here. If the manufacturer doesn't ship updated drivers with vulkan support you'll be SOL. ", "aSentId": 42785, "answer": "It is important to note that the same is true with OpenGL. When it comes to mobile, a lot of the GPUs have pretty shitty GL drivers.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 42786, "question": "It is important to note that the same is true with OpenGL. When it comes to mobile, a lot of the GPUs have pretty shitty GL drivers.", "aSentId": 42787, "answer": "\nOr OSX for that matter. We can't even get OpenGL 4.2 support, let alone 4.5, who says Apple is going to even allow Vulkan. I could see them not allowing it just to force people to use their own apis like Metal, they seem to enjoy doing things like that.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 42786, "question": "It is important to note that the same is true with OpenGL. When it comes to mobile, a lot of the GPUs have pretty shitty GL drivers.", "aSentId": 42789, "answer": "compared to what, directx?", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 42790, "question": "compared to what, directx?", "aSentId": 42791, "answer": "I just mean inconsistent and buggy compared to what the OpenGL spec calls for. The Adreno line has given me some trouble in my personal projects. I do hobbyist level work with OpenGL across a lot of devices for the hell of it. One of the issues I had was updating uniform buffer blocks. For whatever reason, I had to clear and rebind the the shader program before I could update my skeleton buffer. I only experienced this problem on my Nexus 5 running the Adreno 330. The Nexus 6's Adreno 420 worked fine, along with the various Tegra chips I tried.\n\nTo get an idea of the types of issues, check out this post from the Dolphin emulator team: https://dolphin-emu.org/blog/2013/09/26/dolphin-emulator-and-opengl-drivers-hall-fameshame/\n\nThe post itself is old, but it shows the variance in quality across the various vendors. The one thing that lots of people hope for with Vulkan is that by moving the state management from the driver to the application, developers will more easily be able to fix things. You no longer will be working around bugs in the driver implementation. Instead, it will now be a bug with your code.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 42778, "question": "I've heard people saying that hardware that supports GLES 3.1, can support Vulkan, but GLES 3.1 is a pretty new spec.", "aSentId": 42793, "answer": "The spec is new but the hardware level of it is not. It's equivalent to GL 4.3 or Direct3D 11, meaning any hardware sold in the last 5 years.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 42797, "question": "I seriously hope driver vendors don't think like that and drop OpenGL.\n\nOn the plus side, it probably can be reimplemented on Vulkan to a certain degree.", "aSentId": 42798, "answer": "Yes, let's force developers to either support new GPU's or old GPU's. That'll work out great. Especially with legacy games.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 42799, "question": "Yes, let's force developers to either support new GPU's or old GPU's. That'll work out great. Especially with legacy games.", "aSentId": 42800, "answer": "Sarcasm detected. Please remind yourself what excuses hardware vendors came up for not (properly) implementing OpenGL drivers.\n\nNone, they didn't need an excuse to support it shuddy and patchy.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 42807, "question": "Now with Vulkan looming around the corner I feel that OpenGL gaming is not worth the effort.", "aSentId": 42808, "answer": "Hmm...We'll wait and see.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 42812, "question": "Why Are Geospatial Databases So Hard To Build? \u00b7 J. Andrew Rogers", "aSentId": 42813, "answer": "&gt; Not only do you need to parse, index, and store complex spatial data at rates of petabytes per day, but this must be concurrent with low-latency queries against incoming and historical data that cannot be summarized.\n\nJust this alone is asking for a small miracle. Not that it's impossible, but multiple PB/day is in the ballpark of the amount of data handled by biggest distributed infrastructures out there (Google, Facebook, possibly certain intelligence agencies *cough*). To make it available for immediate querying with low-latency would quite possibly exhaust the worldwide capabilities of producing enough RAM chips to fill the machines you'd have to put that dataset on (completely discounting other necessary components to build such a massive system).\n\nSo yeah, we aren't there yet hardware-wise. When ordinary servers start routinely having multiple TBs of RAMs, it'll become more feasible.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 42814, "question": "&gt; Not only do you need to parse, index, and store complex spatial data at rates of petabytes per day, but this must be concurrent with low-latency queries against incoming and historical data that cannot be summarized.\n\nJust this alone is asking for a small miracle. Not that it's impossible, but multiple PB/day is in the ballpark of the amount of data handled by biggest distributed infrastructures out there (Google, Facebook, possibly certain intelligence agencies *cough*). To make it available for immediate querying with low-latency would quite possibly exhaust the worldwide capabilities of producing enough RAM chips to fill the machines you'd have to put that dataset on (completely discounting other necessary components to build such a massive system).\n\nSo yeah, we aren't there yet hardware-wise. When ordinary servers start routinely having multiple TBs of RAMs, it'll become more feasible.", "aSentId": 42815, "answer": "The lack of detail here on exactly what sources he is referring to was very disappointing. When one calls the Twitter firehose a \"trickle\", you expect a bit more explanation.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 42816, "question": "The lack of detail here on exactly what sources he is referring to was very disappointing. When one calls the Twitter firehose a \"trickle\", you expect a bit more explanation.", "aSentId": 42817, "answer": "Satellite and airplane imagery. Proprietary stuff. Not a public feed. ", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 42814, "question": "&gt; Not only do you need to parse, index, and store complex spatial data at rates of petabytes per day, but this must be concurrent with low-latency queries against incoming and historical data that cannot be summarized.\n\nJust this alone is asking for a small miracle. Not that it's impossible, but multiple PB/day is in the ballpark of the amount of data handled by biggest distributed infrastructures out there (Google, Facebook, possibly certain intelligence agencies *cough*). To make it available for immediate querying with low-latency would quite possibly exhaust the worldwide capabilities of producing enough RAM chips to fill the machines you'd have to put that dataset on (completely discounting other necessary components to build such a massive system).\n\nSo yeah, we aren't there yet hardware-wise. When ordinary servers start routinely having multiple TBs of RAMs, it'll become more feasible.", "aSentId": 42819, "answer": "Is the problem with sharding data like this that there are not neat \"boundaries\" between regions - where you may have to do computations across regions or shards? ", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 42820, "question": "Is the problem with sharding data like this that there are not neat \"boundaries\" between regions - where you may have to do computations across regions or shards? ", "aSentId": 42821, "answer": "Like article metions, basic assumptions about data such as natural ordering (sortability) and that a datapoint is a scalar singular item (instead it is an interval) make a lot of intuitive algorithms unaplicable.\n\nLet's say you have 2 2D areas ((1,1),(3,3)) and ((1,0),(4,2)). How do you sort it? If you can't sort it, it is not easy to shard it either.\n\n", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 42822, "question": "Like article metions, basic assumptions about data such as natural ordering (sortability) and that a datapoint is a scalar singular item (instead it is an interval) make a lot of intuitive algorithms unaplicable.\n\nLet's say you have 2 2D areas ((1,1),(3,3)) and ((1,0),(4,2)). How do you sort it? If you can't sort it, it is not easy to shard it either.\n\n", "aSentId": 42823, "answer": "If you just used Mongo then it would be web scale.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 42822, "question": "Like article metions, basic assumptions about data such as natural ordering (sortability) and that a datapoint is a scalar singular item (instead it is an interval) make a lot of intuitive algorithms unaplicable.\n\nLet's say you have 2 2D areas ((1,1),(3,3)) and ((1,0),(4,2)). How do you sort it? If you can't sort it, it is not easy to shard it either.\n\n", "aSentId": 42825, "answer": "Look at how SQL Server handles its spatial indexes. Once you understand that, sharding isn't much of a leap.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 42826, "question": "Look at how SQL Server handles its spatial indexes. Once you understand that, sharding isn't much of a leap.", "aSentId": 42827, "answer": "But how do SQL servers shard spatial data, and most importantly to they shard it such that spatial queries later on make sense?\n", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 42822, "question": "Like article metions, basic assumptions about data such as natural ordering (sortability) and that a datapoint is a scalar singular item (instead it is an interval) make a lot of intuitive algorithms unaplicable.\n\nLet's say you have 2 2D areas ((1,1),(3,3)) and ((1,0),(4,2)). How do you sort it? If you can't sort it, it is not easy to shard it either.\n\n", "aSentId": 42829, "answer": "If you can put an upper bound on both x and y coordinates then you can map them to an integer.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 42830, "question": "If you can put an upper bound on both x and y coordinates then you can map them to an integer.", "aSentId": 42831, "answer": "You can even map Z^4 to Z^1 but the topological properties will be lost.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 42820, "question": "Is the problem with sharding data like this that there are not neat \"boundaries\" between regions - where you may have to do computations across regions or shards? ", "aSentId": 42833, "answer": "You have data X with an image. It has a lat/long associated. What city, state, country, postal code is that in, using your database? Seemingly trivial in concept but in practice... ", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 42834, "question": "You have data X with an image. It has a lat/long associated. What city, state, country, postal code is that in, using your database? Seemingly trivial in concept but in practice... ", "aSentId": 42835, "answer": "That actually sounds pretty easy to model - are we talking a range of lat long or a point? From what I could tell the range was what was problematic", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 42812, "question": "Why Are Geospatial Databases So Hard To Build? \u00b7 J. Andrew Rogers", "aSentId": 42837, "answer": "Yes, they're hard, and it seems that he's cracked the nut in this article, so why not share concrete stories about solutions (if not the solutions themselves)? He says he's spent years creating something that works, but gives no indication of what ... so, reading this I get that geospatial is hard and ... nothing else.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 42812, "question": "Why Are Geospatial Databases So Hard To Build? \u00b7 J. Andrew Rogers", "aSentId": 42839, "answer": "Nice article, very interesting read for someone working with these sorts of things daily.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 42841, "question": "\"Most software engineers assume today, as I did a decade ago, that the design of scalable geospatial databases is a straightforward task.\"\n\nWho assumes this? ", "aSentId": 42842, "answer": "Actually, I assumed this prior to reading the article.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 42845, "question": "A function for partitioning Python arrays. Brilliant code, or insane code?", "aSentId": 42846, "answer": " * camel case\n * comments what, not why, not how\n * magic number\n * obfuscation\n\nMerge that shit.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 42845, "question": "A function for partitioning Python arrays. Brilliant code, or insane code?", "aSentId": 42848, "answer": "It makes sense to me on first glance - iter takes a list and makes it into a generator, the *3 copies that generator into 3 of the same thing, and zip gets passed the three generators as direct parameters rather than a tuple due to the first *. Then the zip function will read from each generator sequentially, getting three items per loop. \n\nThat being said, I understand this because I've been using python for a while, and I'm versed in some simple functional programming principles and as such, I understand what zip does. \n\nThat said, this is basically the equivalent of a grouped() function, which would explain the code immensely better. ", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 42849, "question": "It makes sense to me on first glance - iter takes a list and makes it into a generator, the *3 copies that generator into 3 of the same thing, and zip gets passed the three generators as direct parameters rather than a tuple due to the first *. Then the zip function will read from each generator sequentially, getting three items per loop. \n\nThat being said, I understand this because I've been using python for a while, and I'm versed in some simple functional programming principles and as such, I understand what zip does. \n\nThat said, this is basically the equivalent of a grouped() function, which would explain the code immensely better. ", "aSentId": 42850, "answer": "Yeah. The line is neither insane nor genius. It's just someone comfortable with Python taking the shortest route from A to B.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 42851, "question": "Yeah. The line is neither insane nor genius. It's just someone comfortable with Python taking the shortest route from A to B.", "aSentId": 42852, "answer": "Which is why I find the top comment to be sober fuddling. This is just generators and zip in action.\n\nPretty fundamental if you're doing concurrency-related projects (Tornado, asyncio, etc).\n\nThen again I have seen entire blog posts devoted to explaining what a generator is.\n\nDoesn't mean they're \"too magical\" or complex.\n\n    def gen():\n        yield 1\n        yield 2\n        yield 3\n\n    &gt;&gt;&gt; g = gen()\n    &gt;&gt;&gt; next(g)\n    1\n    &gt;&gt;&gt; for i in g:\n    ...         print(i)\n    ...         break\n    2\n    &gt;&gt;&gt; list(g)\n    [3]\n\n\nNot rocket science. This one liner isn't much of a jump from that.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 42849, "question": "It makes sense to me on first glance - iter takes a list and makes it into a generator, the *3 copies that generator into 3 of the same thing, and zip gets passed the three generators as direct parameters rather than a tuple due to the first *. Then the zip function will read from each generator sequentially, getting three items per loop. \n\nThat being said, I understand this because I've been using python for a while, and I'm versed in some simple functional programming principles and as such, I understand what zip does. \n\nThat said, this is basically the equivalent of a grouped() function, which would explain the code immensely better. ", "aSentId": 42854, "answer": "You could very easily make it readable:\n\n    it = iter(l)\n    return zip(it, it, it)", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 42855, "question": "You could very easily make it readable:\n\n    it = iter(l)\n    return zip(it, it, it)", "aSentId": 42856, "answer": "Sure, but if there were a grouped function in python (I'm actually surprised there isn't in the stdlib), you could write something like\n\n    return grouped(l, 3)\n\nwhich would clearly group items in list `l` into groups of 3.\n\nAlso I tend to avoid solutions like what you posted, as it isn't very DRY - that's just a personal preference though\n", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 42857, "question": "Sure, but if there were a grouped function in python (I'm actually surprised there isn't in the stdlib), you could write something like\n\n    return grouped(l, 3)\n\nwhich would clearly group items in list `l` into groups of 3.\n\nAlso I tend to avoid solutions like what you posted, as it isn't very DRY - that's just a personal preference though\n", "aSentId": 42858, "answer": "given:\n\n    &gt;&gt;&gt; orig = ('x1', 'y1', 'z1', 'x2', 'y2', 'z2', 'x3', 'y3', 'z3', 'x4', 'y4', 'z4')\nthe two things that are like \"grouping\" I can think of are grouping an index counter:\n\n    &gt;&gt;&gt; [tuple(orig[i:i+3]) for i in range(0, len(orig), 3)]\n    [('x1', 'y1', 'z1'), ('x2', 'y2', 'z2'), ('x3', 'y3', 'z3'), ('x4', 'y4', 'z4')]\n\nor using the \"groupby\" function:\n\n    &gt;&gt;&gt; [tuple(elem[1] for elem in coll) for key, coll                                                               \n    ... in itertools.groupby(enumerate(orig), lambda key: key[0] / 3)]\n    [('x1', 'y1', 'z1'), ('x2', 'y2', 'z2'), ('x3', 'y3', 'z3'), ('x4', 'y4', 'z4')]\n\nbut i think this posted solution is amazing and should pretty much be considered the \"grouped\" function in Python.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 42859, "question": "given:\n\n    &gt;&gt;&gt; orig = ('x1', 'y1', 'z1', 'x2', 'y2', 'z2', 'x3', 'y3', 'z3', 'x4', 'y4', 'z4')\nthe two things that are like \"grouping\" I can think of are grouping an index counter:\n\n    &gt;&gt;&gt; [tuple(orig[i:i+3]) for i in range(0, len(orig), 3)]\n    [('x1', 'y1', 'z1'), ('x2', 'y2', 'z2'), ('x3', 'y3', 'z3'), ('x4', 'y4', 'z4')]\n\nor using the \"groupby\" function:\n\n    &gt;&gt;&gt; [tuple(elem[1] for elem in coll) for key, coll                                                               \n    ... in itertools.groupby(enumerate(orig), lambda key: key[0] / 3)]\n    [('x1', 'y1', 'z1'), ('x2', 'y2', 'z2'), ('x3', 'y3', 'z3'), ('x4', 'y4', 'z4')]\n\nbut i think this posted solution is amazing and should pretty much be considered the \"grouped\" function in Python.", "aSentId": 42860, "answer": "The Python documentation even suggests doing it this way. That's where I learned it. No clue why it's not in itertools.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 42859, "question": "given:\n\n    &gt;&gt;&gt; orig = ('x1', 'y1', 'z1', 'x2', 'y2', 'z2', 'x3', 'y3', 'z3', 'x4', 'y4', 'z4')\nthe two things that are like \"grouping\" I can think of are grouping an index counter:\n\n    &gt;&gt;&gt; [tuple(orig[i:i+3]) for i in range(0, len(orig), 3)]\n    [('x1', 'y1', 'z1'), ('x2', 'y2', 'z2'), ('x3', 'y3', 'z3'), ('x4', 'y4', 'z4')]\n\nor using the \"groupby\" function:\n\n    &gt;&gt;&gt; [tuple(elem[1] for elem in coll) for key, coll                                                               \n    ... in itertools.groupby(enumerate(orig), lambda key: key[0] / 3)]\n    [('x1', 'y1', 'z1'), ('x2', 'y2', 'z2'), ('x3', 'y3', 'z3'), ('x4', 'y4', 'z4')]\n\nbut i think this posted solution is amazing and should pretty much be considered the \"grouped\" function in Python.", "aSentId": 42862, "answer": "Yeah, I agree - if the posted code was a separate function called \"grouped\", and the explanation instead was what grouped did, then people probably wouldn't be bitching (except for the people who impulsively bitch at everything)", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 42857, "question": "Sure, but if there were a grouped function in python (I'm actually surprised there isn't in the stdlib), you could write something like\n\n    return grouped(l, 3)\n\nwhich would clearly group items in list `l` into groups of 3.\n\nAlso I tend to avoid solutions like what you posted, as it isn't very DRY - that's just a personal preference though\n", "aSentId": 42864, "answer": "c\u2019mon, 3 repetitions of a 2 letter variable isn\u2019t DRY? srsly?", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 42865, "question": "c\u2019mon, 3 repetitions of a 2 letter variable isn\u2019t DRY? srsly?", "aSentId": 42866, "answer": "Yes, a repetition is a repetition. If repetitions were only okay based on the variable length, DRY wouldn't be a thing. ", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 42867, "question": "Yes, a repetition is a repetition. If repetitions were only okay based on the variable length, DRY wouldn't be a thing. ", "aSentId": 42868, "answer": "sorry i don\u2019t think you got the gist of it.\n\nDRY mainly means \u201cdon\u2019t use copy-pasted code or very similar code, but instead encapsulate and reuse that functionality\u201d\n\n`zip(it, it, it)` is *far* easier to understand than `zip(*([it] * 3))`. if there were 7 repetitions, i\u2019d prefer something along the lines of\n\n    its = [it] * 7\n    return zip(*its)", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 42869, "question": "sorry i don\u2019t think you got the gist of it.\n\nDRY mainly means \u201cdon\u2019t use copy-pasted code or very similar code, but instead encapsulate and reuse that functionality\u201d\n\n`zip(it, it, it)` is *far* easier to understand than `zip(*([it] * 3))`. if there were 7 repetitions, i\u2019d prefer something along the lines of\n\n    its = [it] * 7\n    return zip(*its)", "aSentId": 42870, "answer": "Your second example is much better, and I would use that regardless of the number of repetitions, even if it's as few as three.\n\nAs for the meaning of \"DRY\", it literally means \"Don't Repeat Yourself\". Obviously that doesn't mean screw everything else to make sure you never repeat anything ever, but that doesn't mean make no effort either.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 42871, "question": "Your second example is much better, and I would use that regardless of the number of repetitions, even if it's as few as three.\n\nAs for the meaning of \"DRY\", it literally means \"Don't Repeat Yourself\". Obviously that doesn't mean screw everything else to make sure you never repeat anything ever, but that doesn't mean make no effort either.", "aSentId": 42872, "answer": "&gt; Obviously that doesn't mean screw everything else to make sure you never repeat anything ever\n\nthat was exactly my point.\n\n`its = [it] * 3; return zip(*its)` is more complex than `return zip(it, it, it)` and the repetition is minimal and obvious.\n\nrepetition at a larger scale has the disadvantage that you can easily change one instance without affecting the others, introducing a bug. this can hardly happen here as the change in `zip(it2, it, it)` is obvious. the other usual disadvantage of repetition is that it\u2019s less clear what\u2019s happening: it\u2019s less complex in structure, but more complex to parse visually (think three consecutive slightly different repetitions of 5 moderately complex lines of code). this is also not the case here", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 42873, "question": "&gt; Obviously that doesn't mean screw everything else to make sure you never repeat anything ever\n\nthat was exactly my point.\n\n`its = [it] * 3; return zip(*its)` is more complex than `return zip(it, it, it)` and the repetition is minimal and obvious.\n\nrepetition at a larger scale has the disadvantage that you can easily change one instance without affecting the others, introducing a bug. this can hardly happen here as the change in `zip(it2, it, it)` is obvious. the other usual disadvantage of repetition is that it\u2019s less clear what\u2019s happening: it\u2019s less complex in structure, but more complex to parse visually (think three consecutive slightly different repetitions of 5 moderately complex lines of code). this is also not the case here", "aSentId": 42874, "answer": "Really, it should be separated into its own functionality as a `grouped()` function - at that point it doesn't matter too much what the implementation is. \n\nOn top of this, you can then re-use this same function for any number of values per group. You also get self-describing code without requiring Python knowledge.\n\nAlso, the other issue with the code as it exists (and you have used as an example) is it's very unintuitive for someone to duplicate a generator multiple times, passing it to a zip function, etc. requires knowledge of how an iterator works in Python - not something that any joe blow would necessarily know.\n\n`grouped()` on the other hand? \"Function that groups items together from a list\", done. What's the implementation behind it? Who cares? We know how it works.\n\nEDIT: as for one other thing, I like that you quoted only what you wanted to hear, and completely ignored the other part saying\n\n&gt; but that doesn't mean make no effort either.\n\nNext time, you should read **all** of the 3 sentences I write, and not make a conscious effort to completely ignore opposing viewpoints.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 42875, "question": "Really, it should be separated into its own functionality as a `grouped()` function - at that point it doesn't matter too much what the implementation is. \n\nOn top of this, you can then re-use this same function for any number of values per group. You also get self-describing code without requiring Python knowledge.\n\nAlso, the other issue with the code as it exists (and you have used as an example) is it's very unintuitive for someone to duplicate a generator multiple times, passing it to a zip function, etc. requires knowledge of how an iterator works in Python - not something that any joe blow would necessarily know.\n\n`grouped()` on the other hand? \"Function that groups items together from a list\", done. What's the implementation behind it? Who cares? We know how it works.\n\nEDIT: as for one other thing, I like that you quoted only what you wanted to hear, and completely ignored the other part saying\n\n&gt; but that doesn't mean make no effort either.\n\nNext time, you should read **all** of the 3 sentences I write, and not make a conscious effort to completely ignore opposing viewpoints.", "aSentId": 42876, "answer": "don\u2019t be a dick, of course i read it all. it was just a conscious decision to go with the repetition in this case, not an oversight.\n\ni\u2019m a sucker for DRY, but if we go without introducing the `grouped` function (whose definition is a good idea btw.), i prefer `zip(it, it, it)` for its clarity.\n\nthe whole bit about iterator knowledge is true, but irrelevant because we were talking about repetition vs. no repetition without touching the other parts of the implementation.\n\n    def grouped(seq, n):\n        \"\"\"\n        Returns  an iterator over the values in seq grouped into n-tuples\n        Leaves out the last tuple if incomplete. e.g.:\n        grouped([1, 2, 3, 4], 2) \u2192 (1, 2) (3, 4)\n        grouped([1, 2, 3, 4, 5, 6, 7], 3) \u2192 (1, 2, 3) (4, 5, 6)\n        \"\"\"\n        its = [iter(seq)] * n\n        return zip(*its)", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 42877, "question": "don\u2019t be a dick, of course i read it all. it was just a conscious decision to go with the repetition in this case, not an oversight.\n\ni\u2019m a sucker for DRY, but if we go without introducing the `grouped` function (whose definition is a good idea btw.), i prefer `zip(it, it, it)` for its clarity.\n\nthe whole bit about iterator knowledge is true, but irrelevant because we were talking about repetition vs. no repetition without touching the other parts of the implementation.\n\n    def grouped(seq, n):\n        \"\"\"\n        Returns  an iterator over the values in seq grouped into n-tuples\n        Leaves out the last tuple if incomplete. e.g.:\n        grouped([1, 2, 3, 4], 2) \u2192 (1, 2) (3, 4)\n        grouped([1, 2, 3, 4, 5, 6, 7], 3) \u2192 (1, 2, 3) (4, 5, 6)\n        \"\"\"\n        its = [iter(seq)] * n\n        return zip(*its)", "aSentId": 42878, "answer": "Yeah, that's a good looking function in my opinion, and still dry. \n\nAlso sorry, I wasn't intending to be a dick - I just have people cherry-picking my arguments often to misrepresent then and I went a bit overboard here. Doesn't matter much now though, since I've managed to amass like 30 downvotes for my comments. Oh well. ", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 42867, "question": "Yes, a repetition is a repetition. If repetitions were only okay based on the variable length, DRY wouldn't be a thing. ", "aSentId": 42880, "answer": "The only measure of code that matters is how easy it is to maintain. If DRY causes an increase in maintenance difficulty, you can bet your ass DRY won't be a thing in that code if I'm the one writing it.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 42849, "question": "It makes sense to me on first glance - iter takes a list and makes it into a generator, the *3 copies that generator into 3 of the same thing, and zip gets passed the three generators as direct parameters rather than a tuple due to the first *. Then the zip function will read from each generator sequentially, getting three items per loop. \n\nThat being said, I understand this because I've been using python for a while, and I'm versed in some simple functional programming principles and as such, I understand what zip does. \n\nThat said, this is basically the equivalent of a grouped() function, which would explain the code immensely better. ", "aSentId": 42882, "answer": "Obviously \"copies\" is incorrect here. It uses the same generator otherwise it would not work.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 42883, "question": "Obviously \"copies\" is incorrect here. It uses the same generator otherwise it would not work.", "aSentId": 42884, "answer": "Yeah true, though it depends - it's copying the reference, not necessarily the value. I guess it depends on what you refer to as copying - it's also partially implied by \"3 of the same thing\"", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 42885, "question": "Yeah true, though it depends - it's copying the reference, not necessarily the value. I guess it depends on what you refer to as copying - it's also partially implied by \"3 of the same thing\"", "aSentId": 42886, "answer": "3 separate arrays that all contained the same data would qualify as \"3 of the same thing\", but passing an iterable for each to zip would fail miserably.\n\n\"some simple functional programming principles\" doesn't explain why you're comfortable with immediately understanding the side effect of zip taking a value from one iterable automatically updating the \"other 2\" iterables.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 42887, "question": "3 separate arrays that all contained the same data would qualify as \"3 of the same thing\", but passing an iterable for each to zip would fail miserably.\n\n\"some simple functional programming principles\" doesn't explain why you're comfortable with immediately understanding the side effect of zip taking a value from one iterable automatically updating the \"other 2\" iterables.", "aSentId": 42888, "answer": "&gt;3 separate arrays that all contained the same data would qualify as \"3 of the same thing\", but passing an iterable for each to zip would fail miserably.\n\nI don't understand what you mean. The references to the generator were duplicated and it works fine. \n\n&gt;\"some simple functional programming principles\" doesn't explain why you're comfortable with immediately understanding the side effect of zip taking a value from one iterable automatically updating the \"other 2\" iterables.\n\nI just meant I've done a bit of FP and as such, I know what zip does. No need to get your panties in a knot. ", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 42845, "question": "A function for partitioning Python arrays. Brilliant code, or insane code?", "aSentId": 42890, "answer": "Insane. Aliasing is nasty, so intentionally doing it leads to incomprehensible and fragile code. Just look at how it took an entire blog post to explain how the single line works.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 42891, "question": "Insane. Aliasing is nasty, so intentionally doing it leads to incomprehensible and fragile code. Just look at how it took an entire blog post to explain how the single line works.", "aSentId": 42892, "answer": "Just wait til someone decides to make \"zip\" pull stuff off it's respective lists in parallel due to more and more cores in each CPU.   And then people'll be wondering why the results are showing up in random orders.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 42891, "question": "Insane. Aliasing is nasty, so intentionally doing it leads to incomprehensible and fragile code. Just look at how it took an entire blog post to explain how the single line works.", "aSentId": 42894, "answer": "No, it's elegant and expressive. You just need to get used to functional programming paradigm. Once people in your team are used to such idioms, you no longer need a blog post about monads or stateful iter monads.  Haskell code is full of such idioms and elegant expressions. But it's not web scale cause only node.js is async io out of the box. Sorry.\n", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 42895, "question": "No, it's elegant and expressive. You just need to get used to functional programming paradigm. Once people in your team are used to such idioms, you no longer need a blog post about monads or stateful iter monads.  Haskell code is full of such idioms and elegant expressions. But it's not web scale cause only node.js is async io out of the box. Sorry.\n", "aSentId": 42896, "answer": "There is a beautiful functional solution to his, but it doesn't involve creating multiple aliases of a mutable iteratator and relying on the side effects of consuming them in Zip. ", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 42897, "question": "There is a beautiful functional solution to his, but it doesn't involve creating multiple aliases of a mutable iteratator and relying on the side effects of consuming them in Zip. ", "aSentId": 42898, "answer": "\n    groupN n xs = (take n xs) : (groupN n (drop n xs))\n       \n\nany sensible compiler with fusion compiles this into basically _mutable_ iterator (thunks) aliasing....\n\npython version is just more explicit hence exposing control to programmers.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 42899, "question": "\n    groupN n xs = (take n xs) : (groupN n (drop n xs))\n       \n\nany sensible compiler with fusion compiles this into basically _mutable_ iterator (thunks) aliasing....\n\npython version is just more explicit hence exposing control to programmers.", "aSentId": 42900, "answer": "The Python version, besides not terminating the result with an infinite number of `[]`s on finite lists, also drops any leftover elements at the end.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 42895, "question": "No, it's elegant and expressive. You just need to get used to functional programming paradigm. Once people in your team are used to such idioms, you no longer need a blog post about monads or stateful iter monads.  Haskell code is full of such idioms and elegant expressions. But it's not web scale cause only node.js is async io out of the box. Sorry.\n", "aSentId": 42902, "answer": "Except the issue here is aliasing to the same mutable container (generator); that's pretty much as far as you can get from haskell-like functional programming as you can.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 42903, "question": "Except the issue here is aliasing to the same mutable container (generator); that's pretty much as far as you can get from haskell-like functional programming as you can.", "aSentId": 42904, "answer": "Yah that's ture. For true functional programming, it's better to use io.js instead of node.js because io.js is ES harmony with generators out of the box to facilitate light weight middlewares based event driven reactive components systems without cumbersome hooks and callbacks but super fast and resilient systems programming model of virtual address spaces that are binary translation agnostic and of course async out of the box in the web scale clouds.\n", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 42905, "question": "Yah that's ture. For true functional programming, it's better to use io.js instead of node.js because io.js is ES harmony with generators out of the box to facilitate light weight middlewares based event driven reactive components systems without cumbersome hooks and callbacks but super fast and resilient systems programming model of virtual address spaces that are binary translation agnostic and of course async out of the box in the web scale clouds.\n", "aSentId": 42906, "answer": "I guess you're pretending to be a markov chain?", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 42908, "question": "If I can't *read* what is happening, then it's probably on the side of bad.", "aSentId": 42909, "answer": "Agreed.  Write the code for readability, and where you need to prefer performance over readability, write comments to clarify what's going on in your code. Not only to clarify to the reader what's going on, but to clarify *why* you chose to implement it in an obfuscated way.\n\nAs someone mentioned in the article, this would be way more readable: \n\n    iterator = iter(l)\n    return zip(iterator, iterator, iterator)\n", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 42910, "question": "Agreed.  Write the code for readability, and where you need to prefer performance over readability, write comments to clarify what's going on in your code. Not only to clarify to the reader what's going on, but to clarify *why* you chose to implement it in an obfuscated way.\n\nAs someone mentioned in the article, this would be way more readable: \n\n    iterator = iter(l)\n    return zip(iterator, iterator, iterator)\n", "aSentId": 42911, "answer": "All I see is a useless name (iterator). The only thing that may be unclear from the original is that zip advances the iterator affecting the other parameters (as they are the same, rather than making copies of its arguments or whatever) since we have mutation, which is something your solution doesn't fix.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 42912, "question": "All I see is a useless name (iterator). The only thing that may be unclear from the original is that zip advances the iterator affecting the other parameters (as they are the same, rather than making copies of its arguments or whatever) since we have mutation, which is something your solution doesn't fix.", "aSentId": 42913, "answer": "*3 is also not clear in my opinion. It is bad that it makes you think how it is multiplied - by reference or value. I would say that mutable data should not be multiplied this way.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 42914, "question": "*3 is also not clear in my opinion. It is bad that it makes you think how it is multiplied - by reference or value. I would say that mutable data should not be multiplied this way.", "aSentId": 42915, "answer": "That's a very good point. The notion of *3 returning a 3-tuple is common in most scripting languages, but the question of by reference or by value is truly the confusing part. I would argue that mutation is really what makes this example hard to grok, and that the rest is just syntax that anyone experienced in the language should have no problem reading. ", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 42908, "question": "If I can't *read* what is happening, then it's probably on the side of bad.", "aSentId": 42917, "answer": "This is used in python fairly often, I would call it known pythonic idiom. Of course accompanying it with a short comment is always nice.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 42918, "question": "This is used in python fairly often, I would call it known pythonic idiom. Of course accompanying it with a short comment is always nice.", "aSentId": 42919, "answer": "No it is not used all that often. But when it is, it may need explanation.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 42918, "question": "This is used in python fairly often, I would call it known pythonic idiom. Of course accompanying it with a short comment is always nice.", "aSentId": 42921, "answer": "&gt; This is used in python fairly often\n\nNever going back to Python.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 42908, "question": "If I can't *read* what is happening, then it's probably on the side of bad.", "aSentId": 42923, "answer": "I really don't like that line of thinking, because of the lowest-common-denominator implications.\n\nWhen I want a polling loop in a C# `async` method, I usually do something like:\n\n    for(var timeout = DateTime.Now.addSeconds(5); DateTime.Now &lt; timeout; await Task.Delay(500)) {\n        //polling code\n    }\n\nI've heard people go \"wtf\" on it, but it's actually a super useful pattern.\n\nE: So apparently this is \"too clever\" or something. How about:\n\n    for(int i = 0; str[i] != '\\0'; i++) {\n        //string manipulation code\n    }\n\nA for loop is exactly as powerful as tail recursion, with the added benefit that your control flow code is isolated from the logic. What's not to like?", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 42924, "question": "I really don't like that line of thinking, because of the lowest-common-denominator implications.\n\nWhen I want a polling loop in a C# `async` method, I usually do something like:\n\n    for(var timeout = DateTime.Now.addSeconds(5); DateTime.Now &lt; timeout; await Task.Delay(500)) {\n        //polling code\n    }\n\nI've heard people go \"wtf\" on it, but it's actually a super useful pattern.\n\nE: So apparently this is \"too clever\" or something. How about:\n\n    for(int i = 0; str[i] != '\\0'; i++) {\n        //string manipulation code\n    }\n\nA for loop is exactly as powerful as tail recursion, with the added benefit that your control flow code is isolated from the logic. What's not to like?", "aSentId": 42925, "answer": "Except I can read what is happening there.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 42926, "question": "Except I can read what is happening there.", "aSentId": 42927, "answer": "Well, assuming you're familiar with python iterators, you can also read what's happening in the linked post :)", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 42928, "question": "Well, assuming you're familiar with python iterators, you can also read what's happening in the linked post :)", "aSentId": 42929, "answer": "I'm very familiar with Python iterators, and this code is unreadable. Less so for what it does, and more that it has more punctuation than words. It actually looks like Perl. Simply naming the iterator and giving up the \\*unpacking will make it way better.\n\nYour code uses list multiplication, an explicit iter() call, and unpacking a list of computed size. It uses the \\* operator in 2 different contexts 13 characters apart. If I were you, I'd write code that does the exact same thing, but I'll make it a function n_tuples() that takes an iterable and a number. GetContourPoints would call n_tuples(array, 3). It would be just as fast and wouldn't be nearly as cryptic.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 42924, "question": "I really don't like that line of thinking, because of the lowest-common-denominator implications.\n\nWhen I want a polling loop in a C# `async` method, I usually do something like:\n\n    for(var timeout = DateTime.Now.addSeconds(5); DateTime.Now &lt; timeout; await Task.Delay(500)) {\n        //polling code\n    }\n\nI've heard people go \"wtf\" on it, but it's actually a super useful pattern.\n\nE: So apparently this is \"too clever\" or something. How about:\n\n    for(int i = 0; str[i] != '\\0'; i++) {\n        //string manipulation code\n    }\n\nA for loop is exactly as powerful as tail recursion, with the added benefit that your control flow code is isolated from the logic. What's not to like?", "aSentId": 42931, "answer": "Why the hell would you hide the await in a for loop instead of writing a while loop?", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 42932, "question": "Why the hell would you hide the await in a for loop instead of writing a while loop?", "aSentId": 42933, "answer": "When this pattern is used correctly, it's nice because you're putting 100% of your flow control in the `for` header and 100% of your data processing into `for` body.\n\nUnfortunately, polling loops necessarily have some flow control in the loop block. You'll almost always see a `continue` statement in there somewhere. Sometimes it's two or three lines at the very beginning of the block and it's ok, sometimes the `for` header is disguising the fact that there still exists flow control deeper in the loop block.\n\nMy data structures professor hated all my:\n\n    for(Node p = list; p != null; p = p.getNext()) {\n        final Data data = p.getData();\n\n        // do business logic with data, don't touch p.\n    }\n\nstuff, and wanted us to use while loops in basically every circumstance that didn't boil down to `for(int i = start; i &lt; stop; i++)`. But why? I don't want flow control cluttering my logic, and I don't want logic cluttering my flow control. If your flow control and logic are necessarily intertwined, (such as a polling loop) I agree that it's probably better to use some other iteration structure.\n\nBut if you can completely encapsulate your flow control into a `for` header, I prefer to do so. Do you really want your flow control broken up into 3 parts: one statement before the `while` loop, once statement in the `while` header, and a third statement at the end of the `while` block?", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 42932, "question": "Why the hell would you hide the await in a for loop instead of writing a while loop?", "aSentId": 42935, "answer": "Your usual for loop iterates over an integer index; I'm iterating over *time*.\n\n^(whoaaaaaaa duuuuuude)", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 42936, "question": "Your usual for loop iterates over an integer index; I'm iterating over *time*.\n\n^(whoaaaaaaa duuuuuude)", "aSentId": 42937, "answer": "Yes, and you are hiding that fact in an unusual place instead of giving it separate line as people reading the code would expect.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 42938, "question": "Yes, and you are hiding that fact in an unusual place instead of giving it separate line as people reading the code would expect.", "aSentId": 42939, "answer": "People reading the code expect control flow in the parentheses, and business logic in the curly braces. I'm giving them exactly that.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 42940, "question": "People reading the code expect control flow in the parentheses, and business logic in the curly braces. I'm giving them exactly that.", "aSentId": 42941, "answer": "That's one way to look at it. I have always seen for loops as a shortcut for very specific pattern - initialize a loop variable; check a condition; move the loop variable. I think most people see it this way. For other needs there is the while loop.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 42924, "question": "I really don't like that line of thinking, because of the lowest-common-denominator implications.\n\nWhen I want a polling loop in a C# `async` method, I usually do something like:\n\n    for(var timeout = DateTime.Now.addSeconds(5); DateTime.Now &lt; timeout; await Task.Delay(500)) {\n        //polling code\n    }\n\nI've heard people go \"wtf\" on it, but it's actually a super useful pattern.\n\nE: So apparently this is \"too clever\" or something. How about:\n\n    for(int i = 0; str[i] != '\\0'; i++) {\n        //string manipulation code\n    }\n\nA for loop is exactly as powerful as tail recursion, with the added benefit that your control flow code is isolated from the logic. What's not to like?", "aSentId": 42943, "answer": "What's more important, you feeling clever about how you wrote that, or someone else being able to read and understand it easily?", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 42946, "question": "Put a function around it, document that function, make that function have a decent signature, and write a comment that has the URL of the explanation in it.\n\nIf we were never allowed to write hard to grok code, then C++ would be off-limits in full.", "aSentId": 42947, "answer": "Maybe because I learned C, C++ and Java before I ever touched Python, but to me C++ is much more readable. The code is verbose but it spells out what's going to happen. ", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 42948, "question": "Maybe because I learned C, C++ and Java before I ever touched Python, but to me C++ is much more readable. The code is verbose but it spells out what's going to happen. ", "aSentId": 42949, "answer": "Not really, part of the issue is that I'm by no means a cpp expert, but on the recent project I've been working on, I spent hours dealing with an issue that came down to defining an object on the heap vs. on the stack, that I had done incorrectly because of missing parenthesis.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 42956, "question": "No comments and no unit test to expose it when it breaks down the line? Bad code. Doesn't matter if it's faster if full responsibility for its dangers is not taken. I'd be pissed at an engineer who did that on my team.", "aSentId": 42957, "answer": "Would your stance change if the function was guaranteed by the Python spec not to break?", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 42958, "question": "Would your stance change if the function was guaranteed by the Python spec not to break?", "aSentId": 42959, "answer": "Python doesn't have a formal specification.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 42961, "question": "Why is it hard to write a compiler for Perl 6?", "aSentId": 42962, "answer": "So perl6 is really a dream of some meta-language for defining languages. I always thought that language was called lisp (or smalltalk).\n\nNow onto the most obvious question. Why not implement the most obvious features of this dream and then bootstrap the rest? Once you have the grammar facilities that allow arbitrary re-writing of grammatical structures you basically have a compile-time compiler in your language and can use it for all sorts of neat stuff. Maybe they do this already.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 42963, "question": "So perl6 is really a dream of some meta-language for defining languages. I always thought that language was called lisp (or smalltalk).\n\nNow onto the most obvious question. Why not implement the most obvious features of this dream and then bootstrap the rest? Once you have the grammar facilities that allow arbitrary re-writing of grammatical structures you basically have a compile-time compiler in your language and can use it for all sorts of neat stuff. Maybe they do this already.", "aSentId": 42964, "answer": "I believe PyPy (RPython) also shares the mostly same dream, and they\u2019ve achieved the much amount of it.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 42966, "question": "Khan Academy: Algorithms", "aSentId": 42967, "answer": "There is also \"Algorithms 2\" course starting on Coursera in couple days. Lead by profs. from Princeton University.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 42968, "question": "There is also \"Algorithms 2\" course starting on Coursera in couple days. Lead by profs. from Princeton University.", "aSentId": 42969, "answer": "Definitely a good course, just finishing up the first one", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 42968, "question": "There is also \"Algorithms 2\" course starting on Coursera in couple days. Lead by profs. from Princeton University.", "aSentId": 42971, "answer": "For anyone looking for a more \"mathy\" approach, the second part of Design and Analysis of Algorithms on coursera is also starting next week.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 42966, "question": "Khan Academy: Algorithms", "aSentId": 42973, "answer": "This looks great. Thanks.\n\nCan anyone tell me how this compares to a real university algorithms course?", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 42974, "question": "This looks great. Thanks.\n\nCan anyone tell me how this compares to a real university algorithms course?", "aSentId": 42975, "answer": "Its basically the same syllabus as a first year course.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 42976, "question": "Its basically the same syllabus as a first year course.", "aSentId": 42977, "answer": "But probably not an algorithms course, just a general programming course.  These algorithms were just in the programming II course that goes over data structures and stuff, at least for me", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 42966, "question": "Khan Academy: Algorithms", "aSentId": 42979, "answer": "Great post but /r/learnprogramming is the sub you're looking for I think.\n\nWith that said I really appreciate this now with midterms coming in data structures!", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 42980, "question": "Great post but /r/learnprogramming is the sub you're looking for I think.\n\nWith that said I really appreciate this now with midterms coming in data structures!", "aSentId": 42981, "answer": "Still better than \"Stop opressing my pink slides\", \"Ditching X for Y\" and \"Why interviews are worthless: reason n\u00b0 95736204\" kind of posts", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 42983, "question": "Ah, I tried to implement binary search recursively but it wouldn't let me.\n\nGood resource though, I have still a lot to learn.", "aSentId": 42984, "answer": "&gt; it wouldn't let me.\n\nWhat didn't let you?\n", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 42985, "question": "&gt; it wouldn't let me.\n\nWhat didn't let you?\n", "aSentId": 42986, "answer": "Our grader. It's pretty strict.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 42987, "question": "Our grader. It's pretty strict.", "aSentId": 42988, "answer": "Strictly *wrong*, if it rejects correct, reasonable solutions. I bite my thumb at your grader.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 42985, "question": "&gt; it wouldn't let me.\n\nWhat didn't let you?\n", "aSentId": 42990, "answer": "The compiler?", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 42985, "question": "&gt; it wouldn't let me.\n\nWhat didn't let you?\n", "aSentId": 42992, "answer": "The damn stack!", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 42993, "question": "The damn stack!", "aSentId": 42994, "answer": "Recursive binary search will have either O(lg n) or O(1) stack depth, depending on how it's written and whether or not the compiler optimizes tail recursion. Neither one of those should run into problems on any but the most space-constrained of embedded systems.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 42997, "question": "Just say 'No!' to benefits-only analysis!", "aSentId": 42998, "answer": "I'm really feeling this. I like Haskell, I do some hobby programming in Haskell, but *it needs to be put down a peg*.\n\n&gt;As it turns out, there are few less qualified to teach others about a technology than one who has not experienced its implications. For an incredibly deep and thoughtful language like Haskell, this take a long, long time.\n\nI fall in that category myself. I've been learning Haskell and coding in it for *three years*, and I still don't know what the fuck I'm doing. I do know that I'm marginally more experienced than the average Haskell proselyte, and that if I'm in no position to be advocating it, then *they aren't either*.\n\nThe worst part is, I find Haskell positively wonderful, yet I find myself *constantly bashing it* online and elsewhere, because the Haskell crowd is failing really hard at managing non-Haskellers' expectations. It's probably not easier or simpler or more effective than your favorite language; learning curve-wise, it's more akin to an aggressively experimental C++.\n\nIt's got its fair share of poor design decisions, of accumulated cruft, of caveats. It has shit for tools, dependency management is the tenth circle of hell, and the documentation is disorganized, condescending, and/or undecipherable to anyone without a serious background in abstract mathematics.\n\nHaskell is a total fucking shit show. How could it *not* be, when that is also the case of *every single commercially successful language*? \n\nPeople need to be reminded that Haskell is not the second coming of Jesus Christ; what it is is a better-than-average programming platform for the math-inclined. That in itself is a sizeable achievement, and the result of Herculean amounts of work by a lot of very smart people. Let's not diminish that through dishonest proselytism.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 42999, "question": "I'm really feeling this. I like Haskell, I do some hobby programming in Haskell, but *it needs to be put down a peg*.\n\n&gt;As it turns out, there are few less qualified to teach others about a technology than one who has not experienced its implications. For an incredibly deep and thoughtful language like Haskell, this take a long, long time.\n\nI fall in that category myself. I've been learning Haskell and coding in it for *three years*, and I still don't know what the fuck I'm doing. I do know that I'm marginally more experienced than the average Haskell proselyte, and that if I'm in no position to be advocating it, then *they aren't either*.\n\nThe worst part is, I find Haskell positively wonderful, yet I find myself *constantly bashing it* online and elsewhere, because the Haskell crowd is failing really hard at managing non-Haskellers' expectations. It's probably not easier or simpler or more effective than your favorite language; learning curve-wise, it's more akin to an aggressively experimental C++.\n\nIt's got its fair share of poor design decisions, of accumulated cruft, of caveats. It has shit for tools, dependency management is the tenth circle of hell, and the documentation is disorganized, condescending, and/or undecipherable to anyone without a serious background in abstract mathematics.\n\nHaskell is a total fucking shit show. How could it *not* be, when that is also the case of *every single commercially successful language*? \n\nPeople need to be reminded that Haskell is not the second coming of Jesus Christ; what it is is a better-than-average programming platform for the math-inclined. That in itself is a sizeable achievement, and the result of Herculean amounts of work by a lot of very smart people. Let's not diminish that through dishonest proselytism.", "aSentId": 43000, "answer": "I use Haskell, or FP in general, to better my understanding of computing. In that regard, IMO, Haskell (and Idris, etc.) is really awesome.\n\nNow, I wouldn't know if Haskell in production is as shitty as you say it is.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43001, "question": "I use Haskell, or FP in general, to better my understanding of computing. In that regard, IMO, Haskell (and Idris, etc.) is really awesome.\n\nNow, I wouldn't know if Haskell in production is as shitty as you say it is.", "aSentId": 43002, "answer": "Two things:\n\n* I'm not saying that Haskell is *particularly* shitty in production, or even *relatively* shitty in production. I'm saying it's about as bad as the other options, trading one set of caveats for another.\n\n* Haskell sure is an excellent learning tool, but it's usually not sold as such.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43003, "question": "Two things:\n\n* I'm not saying that Haskell is *particularly* shitty in production, or even *relatively* shitty in production. I'm saying it's about as bad as the other options, trading one set of caveats for another.\n\n* Haskell sure is an excellent learning tool, but it's usually not sold as such.", "aSentId": 43004, "answer": "At my university, we took a course (\"Intro to CS 3\", basically) that was all about functional programming. We used OcaML, but my prof made it a point to say (a hundred times) \"This is just like Haskell\" about all sorts of constructs/techniques.\n\nEDIT: If you downvoted me for this... could you at least explain why ?", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43005, "question": "At my university, we took a course (\"Intro to CS 3\", basically) that was all about functional programming. We used OcaML, but my prof made it a point to say (a hundred times) \"This is just like Haskell\" about all sorts of constructs/techniques.\n\nEDIT: If you downvoted me for this... could you at least explain why ?", "aSentId": 43006, "answer": "Basic stuff is the same, but the two start to diverge quite fast. For example, `let rec fix f = f (fix f)` gives you a useless infinite loop in Ocaml, but it gives you recursion in Haskell.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 42997, "question": "Just say 'No!' to benefits-only analysis!", "aSentId": 43008, "answer": "As much as people up talk Haskell, python is probably a better demonstration language for your argument. If Haskell posters are religious, python posters are fundamentalists.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43009, "question": "As much as people up talk Haskell, python is probably a better demonstration language for your argument. If Haskell posters are religious, python posters are fundamentalists.", "aSentId": 43010, "answer": "*ahem* Clojure", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43009, "question": "As much as people up talk Haskell, python is probably a better demonstration language for your argument. If Haskell posters are religious, python posters are fundamentalists.", "aSentId": 43012, "answer": "To me it definitely seems to be the other way around. This post is actually the most substantial critique of Haskell I've ever read (not that it's particularly substantial, but very very nearly everything else I've ever read about it is 100% positive), whereas I'm aware of and have repeatedly heard many criticisms of python (speed, fragmentation between 2 and 3, some aspects designed to the reference implementation rather than implemented to a design, having to muck about with virtualenvs in lieu of local dependency installation...).\n\nI know Pythonistas can be pretty religious about it (often myself included) but Haskell seems like a much more fundamentalist cult. ", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43013, "question": "To me it definitely seems to be the other way around. This post is actually the most substantial critique of Haskell I've ever read (not that it's particularly substantial, but very very nearly everything else I've ever read about it is 100% positive), whereas I'm aware of and have repeatedly heard many criticisms of python (speed, fragmentation between 2 and 3, some aspects designed to the reference implementation rather than implemented to a design, having to muck about with virtualenvs in lieu of local dependency installation...).\n\nI know Pythonistas can be pretty religious about it (often myself included) but Haskell seems like a much more fundamentalist cult. ", "aSentId": 43014, "answer": "This actually isn't a very good critique of Haskell. It seems more like a critique of the Haskell community to me.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43016, "question": "CSS Sans - A font made only with CSS", "aSentId": 43017, "answer": "A great way to create un-selectable text.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43018, "question": "A great way to create un-selectable text.", "aSentId": 43019, "answer": "An absolutely perfect way to make certain that IE users will never read your text.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43018, "question": "A great way to create un-selectable text.", "aSentId": 43021, "answer": "I'm not sure 'great' is the word I'd describe this method.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43022, "question": "I'm not sure 'great' is the word I'd describe this method.", "aSentId": 43023, "answer": "I would also hesitate to describe the end goal of creating un-selectable text as great, or even reasonable.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43018, "question": "A great way to create un-selectable text.", "aSentId": 43025, "answer": "Or you could just use Chrome.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43016, "question": "CSS Sans - A font made only with CSS", "aSentId": 43027, "answer": "Has CSS gone too far?", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43028, "question": "Has CSS gone too far?", "aSentId": 43029, "answer": "Not until you have a full Unicode set!", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43030, "question": "Not until you have a full Unicode set!", "aSentId": 43031, "answer": "Not until it can send email", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43032, "question": "Not until it can send email", "aSentId": 43033, "answer": "Not until you can make games with it. ", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43034, "question": "Not until you can make games with it. ", "aSentId": 43035, "answer": "[Somebody did that](http://q42.nl/blog/post/59093199911/tyrian-demo-in-pure-css-without-javascript-or-html), apparently, but I can't find an archived version of their demo.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43036, "question": "[Somebody did that](http://q42.nl/blog/post/59093199911/tyrian-demo-in-pure-css-without-javascript-or-html), apparently, but I can't find an archived version of their demo.", "aSentId": 43037, "answer": "Awesome! :D", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43030, "question": "Not until you have a full Unicode set!", "aSentId": 43039, "answer": "Not until you can run it on the backend and has a package manager", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43030, "question": "Not until you have a full Unicode set!", "aSentId": 43041, "answer": "Not until we can do CSS3D physics with collision detection", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43016, "question": "CSS Sans - A font made only with CSS", "aSentId": 43044, "answer": "    &lt;span class=\"h\"&gt;&lt;/span&gt;\n    &lt;span class=\"e\"&gt;&lt;/span&gt;\n    &lt;span class=\"l\"&gt;&lt;/span&gt;\n    &lt;span class=\"l\"&gt;&lt;/span&gt;\n    &lt;span class=\"o\"&gt;&lt;/span&gt;\n    &lt;span style=\"display: inline-block; width: 14px;\"&gt;&lt;/span&gt;\n    &lt;span class=\"w\"&gt;&lt;/span&gt;\n    &lt;span class=\"o\"&gt;&lt;/span&gt;\n    &lt;span class=\"r\"&gt;&lt;/span&gt;\n    &lt;span class=\"l\"&gt;&lt;/span&gt;\n    &lt;span class=\"d\"&gt;&lt;/span&gt;", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43045, "question": "    &lt;span class=\"h\"&gt;&lt;/span&gt;\n    &lt;span class=\"e\"&gt;&lt;/span&gt;\n    &lt;span class=\"l\"&gt;&lt;/span&gt;\n    &lt;span class=\"l\"&gt;&lt;/span&gt;\n    &lt;span class=\"o\"&gt;&lt;/span&gt;\n    &lt;span style=\"display: inline-block; width: 14px;\"&gt;&lt;/span&gt;\n    &lt;span class=\"w\"&gt;&lt;/span&gt;\n    &lt;span class=\"o\"&gt;&lt;/span&gt;\n    &lt;span class=\"r\"&gt;&lt;/span&gt;\n    &lt;span class=\"l\"&gt;&lt;/span&gt;\n    &lt;span class=\"d\"&gt;&lt;/span&gt;", "aSentId": 43046, "answer": "Now ain't that nice &amp; succinct. ", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43047, "question": "Now ain't that nice &amp; succinct. ", "aSentId": 43048, "answer": "I know, right?\n\nTime for CSS to adopt a JSON syntax.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43049, "question": "I know, right?\n\nTime for CSS to adopt a JSON syntax.", "aSentId": 43050, "answer": "They're pretty similar, that'd be great. However, I'd love things like variables in vanilla CSS, &amp; it'd be hard to fit into a JSON format. ", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43051, "question": "They're pretty similar, that'd be great. However, I'd love things like variables in vanilla CSS, &amp; it'd be hard to fit into a JSON format. ", "aSentId": 43052, "answer": "(I think you're unaware that I'm joking.  JSON is just the more hipster cousin of XML, and in the case of monstrosity that is a CSS font, the result will be just as bad.)", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43053, "question": "(I think you're unaware that I'm joking.  JSON is just the more hipster cousin of XML, and in the case of monstrosity that is a CSS font, the result will be just as bad.)", "aSentId": 43054, "answer": "Are you bashing JSON? JSON has many strengths over XML, but they both still have their own best use-cases.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43053, "question": "(I think you're unaware that I'm joking.  JSON is just the more hipster cousin of XML, and in the case of monstrosity that is a CSS font, the result will be just as bad.)", "aSentId": 43056, "answer": "XML is just a shitty version of s-exprs.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43045, "question": "    &lt;span class=\"h\"&gt;&lt;/span&gt;\n    &lt;span class=\"e\"&gt;&lt;/span&gt;\n    &lt;span class=\"l\"&gt;&lt;/span&gt;\n    &lt;span class=\"l\"&gt;&lt;/span&gt;\n    &lt;span class=\"o\"&gt;&lt;/span&gt;\n    &lt;span style=\"display: inline-block; width: 14px;\"&gt;&lt;/span&gt;\n    &lt;span class=\"w\"&gt;&lt;/span&gt;\n    &lt;span class=\"o\"&gt;&lt;/span&gt;\n    &lt;span class=\"r\"&gt;&lt;/span&gt;\n    &lt;span class=\"l\"&gt;&lt;/span&gt;\n    &lt;span class=\"d\"&gt;&lt;/span&gt;", "aSentId": 43058, "answer": "no class for space?", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43059, "question": "no class for space?", "aSentId": 43060, "answer": "You might think that there should be, but I'm trying to use the library as intended.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43045, "question": "    &lt;span class=\"h\"&gt;&lt;/span&gt;\n    &lt;span class=\"e\"&gt;&lt;/span&gt;\n    &lt;span class=\"l\"&gt;&lt;/span&gt;\n    &lt;span class=\"l\"&gt;&lt;/span&gt;\n    &lt;span class=\"o\"&gt;&lt;/span&gt;\n    &lt;span style=\"display: inline-block; width: 14px;\"&gt;&lt;/span&gt;\n    &lt;span class=\"w\"&gt;&lt;/span&gt;\n    &lt;span class=\"o\"&gt;&lt;/span&gt;\n    &lt;span class=\"r\"&gt;&lt;/span&gt;\n    &lt;span class=\"l\"&gt;&lt;/span&gt;\n    &lt;span class=\"d\"&gt;&lt;/span&gt;", "aSentId": 43062, "answer": "I would just take the already readable text iterate through it character by character and replace it will the spans. On the plus side it's totally backwards compatible while being completely crazy.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43063, "question": "I would just take the already readable text iterate through it character by character and replace it will the spans. On the plus side it's totally backwards compatible while being completely crazy.", "aSentId": 43064, "answer": "How is it backwards compatible? It won't display at all correctly in browsers that don't support psuedo-elements.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43065, "question": "How is it backwards compatible? It won't display at all correctly in browsers that don't support psuedo-elements.", "aSentId": 43066, "answer": "It's not but if you just replace existing text then you can target compatible browsers. It's totally pointless but that doesn't matter. ", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43067, "question": "It's not but if you just replace existing text then you can target compatible browsers. It's totally pointless but that doesn't matter. ", "aSentId": 43068, "answer": "I hope you aren't encouraging user-agent sniffing. I guess you could do the substitution client side with JavaScript with capabilities detection...", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43069, "question": "I hope you aren't encouraging user-agent sniffing. I guess you could do the substitution client side with JavaScript with capabilities detection...", "aSentId": 43070, "answer": "I'm not encouraging anything and yes you get idea.  Basically taking an already working page and substituting for essentially no reason. ", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43072, "question": "That's a pretty cool idea. It may have not much practical use, but I like it.\n\n&gt; CSS, the programming language for web designing\n\nIts not a \"programming language\" though.\n", "aSentId": 43073, "answer": "Well, markup-languages could certainly be called programming, despite not being turing-complete.    \nI think that they are defined as domain specific languages.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43074, "question": "Well, markup-languages could certainly be called programming, despite not being turing-complete.    \nI think that they are defined as domain specific languages.", "aSentId": 43075, "answer": "\"Certainly\" seems like the wrong word to use here. It would have been better to say \"technically,\" as I am certain most people in the industry would look at you funny if you claimed you only programmed in HTML. ", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43074, "question": "Well, markup-languages could certainly be called programming, despite not being turing-complete.    \nI think that they are defined as domain specific languages.", "aSentId": 43077, "answer": "It's definitely not programming. It's a mix of content placement and formatting, then the interactive stuff only is programming.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43072, "question": "That's a pretty cool idea. It may have not much practical use, but I like it.\n\n&gt; CSS, the programming language for web designing\n\nIts not a \"programming language\" though.\n", "aSentId": 43079, "answer": "[Or is it?](http://stackoverflow.com/a/5239256/2441808)", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43080, "question": "[Or is it?](http://stackoverflow.com/a/5239256/2441808)", "aSentId": 43081, "answer": "That's pretty cool!\n\nThough, I would still agree with this comment from the thread you linked:\n\n&gt; CSS is only able to calculate 1 iteration of the state-machine.\n\n", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43083, "question": "Any practical use for this?", "aSentId": 43084, "answer": "Some people who REALLY don't want you to copy-paste their text will probably like it.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43085, "question": "Some people who REALLY don't want you to copy-paste their text will probably like it.", "aSentId": 43086, "answer": "Circumventing this block wouldn't be harder than with other \"copy prevention\" methods... the letters are still in the css class names in the html, after all. (If all else fails, there's OCR.)", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43087, "question": "Circumventing this block wouldn't be harder than with other \"copy prevention\" methods... the letters are still in the css class names in the html, after all. (If all else fails, there's OCR.)", "aSentId": 43088, "answer": "Would block normal users even harder than disabling right click.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43089, "question": "Would block normal users even harder than disabling right click.", "aSentId": 43090, "answer": "and you could change the class names to like NN, NNN, NNNN, etc. So find and replace wouldn't work either. ", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43091, "question": "and you could change the class names to like NN, NNN, NNNN, etc. So find and replace wouldn't work either. ", "aSentId": 43092, "answer": "You could use :nth-child variations and have an encrypted message decoded by the CSS.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43091, "question": "and you could change the class names to like NN, NNN, NNNN, etc. So find and replace wouldn't work either. ", "aSentId": 43094, "answer": "It does. You just have to start with the longest sequence of N* and then work backwards.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43095, "question": "It does. You just have to start with the longest sequence of N* and then work backwards.", "aSentId": 43096, "answer": "yeah i thought of that as soon as i posted it lol ", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43087, "question": "Circumventing this block wouldn't be harder than with other \"copy prevention\" methods... the letters are still in the css class names in the html, after all. (If all else fails, there's OCR.)", "aSentId": 43098, "answer": "Beyond the level of like 99% of users though.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43083, "question": "Any practical use for this?", "aSentId": 43100, "answer": "None. It's a fun project to see if it's possible.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43083, "question": "Any practical use for this?", "aSentId": 43102, "answer": "Maybe safely displaying email addresses so automatic scrapers can't add you to a spam list?", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43105, "question": "Exactly. Just what are the benefits here?", "aSentId": 43106, "answer": "Oh come on... didn't you ever do anything with the sole reason \"because I can\"? ", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43107, "question": "Oh come on... didn't you ever do anything with the sole reason \"because I can\"? ", "aSentId": 43108, "answer": "Well sure! But when I noticed there was an unfavorable difference in execution, I discovered it was a waste of time. I.E., the end-goal of this CSS Sans can be accomplished with single, simple tag or style definition. Using this code as is, I would have to increase the size of a CSS file that's probably already too big.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43105, "question": "Exactly. Just what are the benefits here?", "aSentId": 43110, "answer": "Not sure, but I'd guess dependencies. It's always nice to have one less! I've seen many webpages turn awful due to missing fonts. ", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43111, "question": "Not sure, but I'd guess dependencies. It's always nice to have one less! I've seen many webpages turn awful due to missing fonts. ", "aSentId": 43112, "answer": "That shouldn't be an issue. The user doesn't need to have the font installed, it can be loaded with the page. ", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43114, "question": "fonts have more than just A-Z", "aSentId": 43115, "answer": "I think it's just a proof of concept.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43114, "question": "fonts have more than just A-Z", "aSentId": 43117, "answer": "I knew wingdings was missing something but I could never put my finger on it, until now.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43114, "question": "fonts have more than just A-Z", "aSentId": 43119, "answer": "And they usually support more than just black on white.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43122, "question": "Most of the comments are idiotic here, \"CSS is not a programming language\", \"what's its use\". It's just art, it also demonstrates the expressiveness of CSS and the creativity of the author, don't be so first degree.", "aSentId": 43123, "answer": "Isn't it's purpose to display the evolution of CSS?", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43122, "question": "Most of the comments are idiotic here, \"CSS is not a programming language\", \"what's its use\". It's just art, it also demonstrates the expressiveness of CSS and the creativity of the author, don't be so first degree.", "aSentId": 43125, "answer": "&gt; It's just art\n\nThen post it to /r/Art.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43133, "question": "Swift WTF", "aSentId": 43134, "answer": "&gt; the blog was not updated since Xcode 6.0 beta 3 was out.\n\nWho cares if there were some bugs in a beta a year ago?", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43135, "question": "&gt; the blog was not updated since Xcode 6.0 beta 3 was out.\n\nWho cares if there were some bugs in a beta a year ago?", "aSentId": 43136, "answer": "SourceKit was still crashing in XCode 6.1 in a Swift project. I struggled to finish a little side project simply because of constant SourceKit crashes every few minutes.\n\nMaybe I'll try again when it's released, but when they said Beta they meant it.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43135, "question": "&gt; the blog was not updated since Xcode 6.0 beta 3 was out.\n\nWho cares if there were some bugs in a beta a year ago?", "aSentId": 43138, "answer": "Not to mention that Swift is not even a year old.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43135, "question": "&gt; the blog was not updated since Xcode 6.0 beta 3 was out.\n\nWho cares if there were some bugs in a beta a year ago?", "aSentId": 43140, "answer": "It took the Xcode people about a year to add *replace in selection* (basic text-editing functionality), if not maybe longer! And most of the (70-odd...) Xcode bugs I filed in Radar were open for a year apiece, including the ones that are probably still open today.\n\nOf course, if you can point to bugs fixed, great... but I for one am quite prepared to believe that bugs present last year will still be there now ;)\n", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43141, "question": "It took the Xcode people about a year to add *replace in selection* (basic text-editing functionality), if not maybe longer! And most of the (70-odd...) Xcode bugs I filed in Radar were open for a year apiece, including the ones that are probably still open today.\n\nOf course, if you can point to bugs fixed, great... but I for one am quite prepared to believe that bugs present last year will still be there now ;)\n", "aSentId": 43142, "answer": "&gt; Please note that all of the posts on the blog are already very old, and I believe Apple has already fixed many issues.\n\nAlso, Xcode is not the same project as Swift.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43143, "question": "&gt; Please note that all of the posts on the blog are already very old, and I believe Apple has already fixed many issues.\n\nAlso, Xcode is not the same project as Swift.", "aSentId": 43144, "answer": "Judging by my Radar bug posting experience, it doesn't really matter which project it is ;)", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43133, "question": "Swift WTF", "aSentId": 43146, "answer": "I don't understand one.\n\n    str=\"foo\"\n    str == str      /* true */\n    str === str    /* false */\n\nThe answer given is that strings are values not objects and === is not for values. But, why does this not work? It still 'should'?", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43147, "question": "I don't understand one.\n\n    str=\"foo\"\n    str == str      /* true */\n    str === str    /* false */\n\nThe answer given is that strings are values not objects and === is not for values. But, why does this not work? It still 'should'?", "aSentId": 43148, "answer": "The third now doesn't give false (Xcode 6.2), instead it gives an error. The === is for testing of equality between objects (i.e., that they're the exact same object). String isn't an object, so you can only test for equivalence.\n\nThe problem with this blog is that it's based on an Xcode 6.0 beta from a year ago, so a lot isn't true anymore.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43133, "question": "Swift WTF", "aSentId": 43150, "answer": "What the hell..\n\nI opened the page in safari on my rMBP, read read click on some of the clips.. hmm.. nice examples of bugs.. \n\nBack to reddit comments, scroll down.. bam! Mouse stops working, caps lock light stops responding.. close laptop, open laptop.. reboots.. \n\nhuh! Looking at swift bugs seems to have crashed my mac... This is getting a bit meta.\n", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43152, "question": "&gt;&gt; What a nice and buggy language. \n\nbut compared to JavaScript ...", "aSentId": 43153, "answer": "If that's what you're basing the benefits of you're language on....", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43154, "question": "If that's what you're basing the benefits of you're language on....", "aSentId": 43155, "answer": "MUMPS for example has an inbuilt key-value store. That's a really nice feature. Still, that's no excuse for MUMPS' enormous weaknesses.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43156, "question": "MUMPS for example has an inbuilt key-value store. That's a really nice feature. Still, that's no excuse for MUMPS' enormous weaknesses.", "aSentId": 43157, "answer": "    s ^b(a)=\"Hello world\"\n    s:'a a=\"w ^b(a)\"\n    x a\n\nI've seen things you people wouldn't believe...\n\nedit-   This should really be more like:\n\n    s a=\"\"\n    s ^b(\"a\")=\"Hello world\"\n    s:'a a=\"w ^b(\"\"a\"\")\" ; a is defined but empty, so falsy\n    x a\n\nOtherwise (the first write) a isn't defined at all, meaning that \\^b(a) may not work (I think that it's implementation dependent as to whether or not to allow empty nodes) and that the final \\^b(a) is not the same as the original.  Here, we're using \"a\" as a string literal to be a sub-node of \\^b, escaping a single quote in the assignment to a by repeating the quotes.  (Double quotes \"\" in a string turn into one literal quote).", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43158, "question": "    s ^b(a)=\"Hello world\"\n    s:'a a=\"w ^b(a)\"\n    x a\n\nI've seen things you people wouldn't believe...\n\nedit-   This should really be more like:\n\n    s a=\"\"\n    s ^b(\"a\")=\"Hello world\"\n    s:'a a=\"w ^b(\"\"a\"\")\" ; a is defined but empty, so falsy\n    x a\n\nOtherwise (the first write) a isn't defined at all, meaning that \\^b(a) may not work (I think that it's implementation dependent as to whether or not to allow empty nodes) and that the final \\^b(a) is not the same as the original.  Here, we're using \"a\" as a string literal to be a sub-node of \\^b, escaping a single quote in the assignment to a by repeating the quotes.  (Double quotes \"\" in a string turn into one literal quote).", "aSentId": 43159, "answer": "After doing some searches ...\n\n    set global b(a) // a is a sub-variable of b\n    set a to \"write global b(a)\" if not a\n    execute a\n\nSort of interesting, but oh god. ", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43160, "question": "After doing some searches ...\n\n    set global b(a) // a is a sub-variable of b\n    set a to \"write global b(a)\" if not a\n    execute a\n\nSort of interesting, but oh god. ", "aSentId": 43161, "answer": "I don't know MUMPS. What does that do?", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43162, "question": "I don't know MUMPS. What does that do?", "aSentId": 43163, "answer": "Exactly what I wrote. It sets the global b(a) (which in the context of MUMPS means b is a persistent array, available to all programs running on this installation, and a is a member of this array) to \"Hello World\", then sets a to the string \"w \\^b(a)\" if a hasn't been set, and then executes a, which interprets the string in a, which writes the value in \\^b(a) (i.e. \"Hello World\") to stdout. At least that was my interpretation.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43152, "question": "&gt;&gt; What a nice and buggy language. \n\nbut compared to JavaScript ...", "aSentId": 43165, "answer": "I've been using Swift in Xcode 6.2 (so not the latest version in the 6.3 Beta) and with the exception of a few things (like no stored class properties), it's decent. This blog is very outdated as it's based on a beta of Xcode 6.0 from a year ago.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43167, "question": "So are we supposed to hate on Swift now rather than love it? Sometimes I have trouble keeping up with the /r/programming majority opinion, it changes its mind so much.", "aSentId": 43168, "answer": "Yeh, public opinion is currently:\n\n * Go - Bad, plateaued,\n * Rust - Good, worsening,\n * Swift - Good, worsening,\n\n * Scala - Bad, worsening,\n * Clojure - Good, worsening,\n\n * Java - Bad, improving,\n * C# - Good, improving,\n\n * Python - Good, plateaued,\n * Ruby - Good, plateaued,\n * Javascript - Good, improving,\n\n * Haskell - Good, plateaued,\n * OCaml - Good, improving,\n\nEdit: I need to make an API for this information. Reddit, which stack should I use?", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43169, "question": "Yeh, public opinion is currently:\n\n * Go - Bad, plateaued,\n * Rust - Good, worsening,\n * Swift - Good, worsening,\n\n * Scala - Bad, worsening,\n * Clojure - Good, worsening,\n\n * Java - Bad, improving,\n * C# - Good, improving,\n\n * Python - Good, plateaued,\n * Ruby - Good, plateaued,\n * Javascript - Good, improving,\n\n * Haskell - Good, plateaued,\n * OCaml - Good, improving,\n\nEdit: I need to make an API for this information. Reddit, which stack should I use?", "aSentId": 43170, "answer": "Javascript - some parts good, crockfording. ", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43169, "question": "Yeh, public opinion is currently:\n\n * Go - Bad, plateaued,\n * Rust - Good, worsening,\n * Swift - Good, worsening,\n\n * Scala - Bad, worsening,\n * Clojure - Good, worsening,\n\n * Java - Bad, improving,\n * C# - Good, improving,\n\n * Python - Good, plateaued,\n * Ruby - Good, plateaued,\n * Javascript - Good, improving,\n\n * Haskell - Good, plateaued,\n * OCaml - Good, improving,\n\nEdit: I need to make an API for this information. Reddit, which stack should I use?", "aSentId": 43172, "answer": "Sweet, what's the newest hotness?  I need to nullify a decade of experience in my current toolset.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43173, "question": "Sweet, what's the newest hotness?  I need to nullify a decade of experience in my current toolset.", "aSentId": 43174, "answer": "probably Nim", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43173, "question": "Sweet, what's the newest hotness?  I need to nullify a decade of experience in my current toolset.", "aSentId": 43176, "answer": "Not my language of choice, but I think it could be OCaml. Functional and statically-typed. It has an excellent to-js compiler. It's not suffering from an excess of hype.\n\nThat said, you can't go wrong with JavaScript (sorry).", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43169, "question": "Yeh, public opinion is currently:\n\n * Go - Bad, plateaued,\n * Rust - Good, worsening,\n * Swift - Good, worsening,\n\n * Scala - Bad, worsening,\n * Clojure - Good, worsening,\n\n * Java - Bad, improving,\n * C# - Good, improving,\n\n * Python - Good, plateaued,\n * Ruby - Good, plateaued,\n * Javascript - Good, improving,\n\n * Haskell - Good, plateaued,\n * OCaml - Good, improving,\n\nEdit: I need to make an API for this information. Reddit, which stack should I use?", "aSentId": 43178, "answer": "JavaScript is terrible! Maybe improving, but many hate it!\n\nOnly language here that I think gets more hate is PHP, I'd say:\n\n* PHP - Disaster, beyond help\n", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43179, "question": "JavaScript is terrible! Maybe improving, but many hate it!\n\nOnly language here that I think gets more hate is PHP, I'd say:\n\n* PHP - Disaster, beyond help\n", "aSentId": 43180, "answer": "I'm no javascript fan, but in terms of public opinion, it seems to be invincible.\n\nPHP hasn't received any bad press recently. I'd say it's Bad, plateaued. It's probably due a resurgence.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43181, "question": "I'm no javascript fan, but in terms of public opinion, it seems to be invincible.\n\nPHP hasn't received any bad press recently. I'd say it's Bad, plateaued. It's probably due a resurgence.", "aSentId": 43182, "answer": "&gt;I'd say it's Bad, plateaued. It's probably due a resurgence.\n\nThey're working on the 7 release at the moment, it looks good so far IMO. Not sure when exactly it's due though.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43184, "question": "Why is Rust worsening? They're stabilizing everything!", "aSentId": 43185, "answer": "It's kind of borderline. Stabilizing is really the problem; everyone's happy when they're making breaking changes, but when the music stops and people look at the language that they are going to be using (rather than imagining the language that it'll become), they are inevitably going to go away disappointed.\n\nIt's not that it's not a good language, it's just reached that point in the hype cycle.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43186, "question": "It's kind of borderline. Stabilizing is really the problem; everyone's happy when they're making breaking changes, but when the music stops and people look at the language that they are going to be using (rather than imagining the language that it'll become), they are inevitably going to go away disappointed.\n\nIt's not that it's not a good language, it's just reached that point in the hype cycle.", "aSentId": 43187, "answer": "*No dependent types for Rust 1.0 ... yuck, pass!*", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43188, "question": "*No dependent types for Rust 1.0 ... yuck, pass!*", "aSentId": 43189, "answer": "I'd be happy with HKTs.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43190, "question": "I'd be happy with HKTs.", "aSentId": 43191, "answer": "+1 to this. \"Post-1.0 feature\"... Yeah, I hope they actually do it and don't hesitate to break the library now.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43192, "question": "+1 to this. \"Post-1.0 feature\"... Yeah, I hope they actually do it and don't hesitate to break the library now.", "aSentId": 43193, "answer": "Literally no one has even proposed what HKT would imply.\n\nI don't think it makes sense to implement something for 1.0 (2 months away) that hasn't been specified. Or even sketched.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43184, "question": "Why is Rust worsening? They're stabilizing everything!", "aSentId": 43195, "answer": "It was one truly dynamic language. And now it gets stabilized... ", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43197, "question": "My interpretation:\n\n * Go - Butt of all jokes, plateaued,\n * Rust - Good, improving,\n * Swift - Questionable, worsening,\n * Scala - Okay, worsening,\n * Clojure - Mostly unknown, worsening,\n * Java - Bad, plateaued,\n * C# - Good, plateaued,\n * Python - Good, slightly worsening,\n * Ruby - Divisive, plateaued,\n * Javascript - Divisive, improving,\n * Haskell - Good, worsening,\n * OCaml - Mostly unknown, plateaued", "aSentId": 43198, "answer": "You might be right with Python and Haskell.\n\nWith Ocaml, it's not getting a lot of exposure on r/programming or hacker news, but within functional circles it's getting talked about.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43199, "question": "You might be right with Python and Haskell.\n\nWith Ocaml, it's not getting a lot of exposure on r/programming or hacker news, but within functional circles it's getting talked about.", "aSentId": 43200, "answer": "\"within functional circles\" is super niche :P", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43201, "question": "\"within functional circles\" is super niche :P", "aSentId": 43202, "answer": "What can I say, I'm a victim of my bubble.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43204, "question": "What's worsening about Clojure opinion exactly. Seems like everybody who actually uses it is very happy with it.", "aSentId": 43205, "answer": "Another borderline one. Certainly agree that people that use it have been very happy with Clojure, but there's a bit of an undercurrent against dynamic typing that Clojure has been the victim of in this case and `core.typed` hasn't done enough to stave off the hoards.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43206, "question": "Another borderline one. Certainly agree that people that use it have been very happy with Clojure, but there's a bit of an undercurrent against dynamic typing that Clojure has been the victim of in this case and `core.typed` hasn't done enough to stave off the hoards.", "aSentId": 43207, "answer": "Static typing is certainly a fad nowadays, but that's been the case since before Clojure even existed. With `core.typed` it's certainly ahead of stuff like Python, Ruby, and Js in that department. Hence why I'm not seeing why the opinion would be worsening in this case. If anything `core.typed` should be improving things as it provides a decent type system that's better than what's available in many languages.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43208, "question": "Static typing is certainly a fad nowadays, but that's been the case since before Clojure even existed. With `core.typed` it's certainly ahead of stuff like Python, Ruby, and Js in that department. Hence why I'm not seeing why the opinion would be worsening in this case. If anything `core.typed` should be improving things as it provides a decent type system that's better than what's available in many languages.", "aSentId": 43209, "answer": "Don't take it too seriously; I didn't spend a long time thinking about this and as I say it's borderline.\n\nI do think static-typing has picked up steam recently. Gradual typing especially is becoming popular; things like typescript, flow, hack, etc. I see those things as a gateway drug to more rigid type systems.\n\nI think this has affected Clojure especially, because it's on the JVM which primes peoples' expectations. Clojurescript, by contrast, is doing better IMO.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43210, "question": "Don't take it too seriously; I didn't spend a long time thinking about this and as I say it's borderline.\n\nI do think static-typing has picked up steam recently. Gradual typing especially is becoming popular; things like typescript, flow, hack, etc. I see those things as a gateway drug to more rigid type systems.\n\nI think this has affected Clojure especially, because it's on the JVM which primes peoples' expectations. Clojurescript, by contrast, is doing better IMO.", "aSentId": 43211, "answer": "That is a fair assessment ;)", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43213, "question": "Wait what? Javascript...improving? No.", "aSentId": 43214, "answer": "JS has gotten a boost recently with ES6. I think saying improving is justified.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43215, "question": "JS has gotten a boost recently with ES6. I think saying improving is justified.", "aSentId": 43216, "answer": "On those grounds, with Dotty on the way, I'd say Scala is improving rather than worsening.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43167, "question": "So are we supposed to hate on Swift now rather than love it? Sometimes I have trouble keeping up with the /r/programming majority opinion, it changes its mind so much.", "aSentId": 43218, "answer": "&gt; Sometimes I have trouble keeping up with the /r/programming majority opinion, it changes its mind so much.\n\nAlternatively there is no \"hive mind\" with regards to Swift and the reason you see people both hate and love it is *proof* of that.\n\nYou complaining that it's hard to figure out what the *hive mind* is, *shows  that there is no hive mind*.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43167, "question": "So are we supposed to hate on Swift now rather than love it? Sometimes I have trouble keeping up with the /r/programming majority opinion, it changes its mind so much.", "aSentId": 43220, "answer": "It's almost as if /r/programming was a community consisting of several different people who are passionate about different things! Besides, why should you base your opinion on what other people think?", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43221, "question": "It's almost as if /r/programming was a community consisting of several different people who are passionate about different things! Besides, why should you base your opinion on what other people think?", "aSentId": 43222, "answer": "It's a community but it sure as hell has a hivemind most of the time. The hype for Rust (and I'm going to bet in 6 months that opinion is going to turn), the hype for Swift (already happening), the hate-on for Go, the hate-on for MongoDB (okay, that one is justified). And so on.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43223, "question": "It's a community but it sure as hell has a hivemind most of the time. The hype for Rust (and I'm going to bet in 6 months that opinion is going to turn), the hype for Swift (already happening), the hate-on for Go, the hate-on for MongoDB (okay, that one is justified). And so on.", "aSentId": 43224, "answer": "What exactly are you basing this on? Was there a poll taken?", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43225, "question": "What exactly are you basing this on? Was there a poll taken?", "aSentId": 43226, "answer": "Reddit is a platform for polls. That's what the up and down vote buttons are.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43227, "question": "Reddit is a platform for polls. That's what the up and down vote buttons are.", "aSentId": 43228, "answer": "Yeah, but making some judgement about the \"hive mind\" when there are 600k subscribers and about a hundred vote on each submission is a bit much.\n\nThe hive mind doesn't exist.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43231, "question": "If you depend on a Google Code project, export it to GitHub! (You'll get their revision history, too)", "aSentId": 43232, "answer": "\"Project cannot be migrated because it has too many issues.\"\n\n:(", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43233, "question": "\"Project cannot be migrated because it has too many issues.\"\n\n:(", "aSentId": 43234, "answer": "Ouch. Tweet at @github to say you would love to have an option to get only so many issues.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43235, "question": "Ouch. Tweet at @github to say you would love to have an option to get only so many issues.", "aSentId": 43236, "answer": "As someone currently working in QA, please don't I need work.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43237, "question": "As someone currently working in QA, please don't I need work.", "aSentId": 43238, "answer": "Sometimes, you only need what's been relevant for the last year. Not the last 10.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43237, "question": "As someone currently working in QA, please don't I need work.", "aSentId": 43240, "answer": "wtf does 'please dont i need work' even mean. do you need a comma or something. i cant tell what your saying. makes me think github hired retards who dont know how to type", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43241, "question": "wtf does 'please dont i need work' even mean. do you need a comma or something. i cant tell what your saying. makes me think github hired retards who dont know how to type", "aSentId": 43242, "answer": "Says the guy responding in all lowercase letters. Get fucked ya damn bottom feeder. ", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43241, "question": "wtf does 'please dont i need work' even mean. do you need a comma or something. i cant tell what your saying. makes me think github hired retards who dont know how to type", "aSentId": 43244, "answer": "&gt;your", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43241, "question": "wtf does 'please dont i need work' even mean. do you need a comma or something. i cant tell what your saying. makes me think github hired retards who dont know how to type", "aSentId": 43246, "answer": "&gt;Wtf does 'please dont i need work' even mean? Do you need a comma or something? I can't tell what you're saying.  It makes me think Github hired retards who don't know how to type.\n\nFtfy\n\n", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43247, "question": "&gt;Wtf does 'please dont i need work' even mean? Do you need a comma or something? I can't tell what you're saying.  It makes me think Github hired retards who don't know how to type.\n\nFtfy\n\n", "aSentId": 43248, "answer": "&gt;&gt;WTF does \"please dont i need work\" even mean? Do you need a comma or something? I can't tell what you're saying. It makes me think Github hired retards who don't know how to type.\n&gt;\n&gt;FTFY\n\nFTFTFYFY", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43235, "question": "Ouch. Tweet at @github to say you would love to have an option to get only so many issues.", "aSentId": 43253, "answer": "I'd also love if the github guys would fix a couple of the issues to get them below the threshold.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43233, "question": "\"Project cannot be migrated because it has too many issues.\"\n\n:(", "aSentId": 43255, "answer": "Just mark them all resolved. #yolo", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43233, "question": "\"Project cannot be migrated because it has too many issues.\"\n\n:(", "aSentId": 43257, "answer": "Dude, you have issues.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43258, "question": "Dude, you have issues.", "aSentId": 43259, "answer": "Too many.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43231, "question": "If you depend on a Google Code project, export it to GitHub! (You'll get their revision history, too)", "aSentId": 43262, "answer": "Its a 1 click process and the googlecode app deletes itself when it finishes running. Really a superb api integration", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43263, "question": "Its a 1 click process and the googlecode app deletes itself when it finishes running. Really a superb api integration", "aSentId": 43264, "answer": "That messed me up as I was expecting a COPY, not a migrate..\n\nPissed off a few people.. !", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43265, "question": "That messed me up as I was expecting a COPY, not a migrate..\n\nPissed off a few people.. !", "aSentId": 43266, "answer": "maybe you should read before you do something?", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43267, "question": "maybe you should read before you do something?", "aSentId": 43268, "answer": "\"Export\" implies the original copy will be retained.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43269, "question": "\"Export\" implies the original copy will be retained.", "aSentId": 43270, "answer": "\"Migrate\" would be the correct term I think.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43269, "question": "\"Export\" implies the original copy will be retained.", "aSentId": 43272, "answer": "Maybe you should test before you do it to something bigger?", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43273, "question": "Maybe you should test before you do it to something bigger?", "aSentId": 43274, "answer": "You can always argue \"buyer beware.\" Generally, that's a sign that what you're buying is crap.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43275, "question": "You can always argue \"buyer beware.\" Generally, that's a sign that what you're buying is crap.", "aSentId": 43276, "answer": "This is a free tool though, and since it's newly released it's always good to test it with a dummy repo to ensure everything will work nicely. ", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43277, "question": "This is a free tool though, and since it's newly released it's always good to test it with a dummy repo to ensure everything will work nicely. ", "aSentId": 43278, "answer": "You can't test with a dummy repo sadly, they disabled the ability to make new repos", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43263, "question": "Its a 1 click process and the googlecode app deletes itself when it finishes running. Really a superb api integration", "aSentId": 43280, "answer": "Why would it do that?", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43231, "question": "If you depend on a Google Code project, export it to GitHub! (You'll get their revision history, too)", "aSentId": 43282, "answer": "Last time I migrated an external project from Google Code to GitHub, I got in big trouble with the author. Use caution with this.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43283, "question": "Last time I migrated an external project from Google Code to GitHub, I got in big trouble with the author. Use caution with this.", "aSentId": 43284, "answer": "Well, you should tell that author that he already can't do anything. Google Code required you to put the code under a FLOSS license, so... share away.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43285, "question": "Well, you should tell that author that he already can't do anything. Google Code required you to put the code under a FLOSS license, so... share away.", "aSentId": 43286, "answer": "I know, but I didn't want any trouble so I just took it down.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43287, "question": "I know, but I didn't want any trouble so I just took it down.", "aSentId": 43288, "answer": "That's smart. Those guys will break your legs.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43287, "question": "I know, but I didn't want any trouble so I just took it down.", "aSentId": 43290, "answer": "I'm curious, what did he tell you? He doesn't want people to fork it?", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43291, "question": "I'm curious, what did he tell you? He doesn't want people to fork it?", "aSentId": 43292, "answer": "Yes, there are projects whose developers consider forks  as 'malware' eg. - TextSecure. It's opensource project, but developers don't want to add it to be added to F-Droid or built it yourself because they 'don't know how many people really use it'.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43293, "question": "Yes, there are projects whose developers consider forks  as 'malware' eg. - TextSecure. It's opensource project, but developers don't want to add it to be added to F-Droid or built it yourself because they 'don't know how many people really use it'.", "aSentId": 43294, "answer": "Oh dear.\n\nLink for the lazy: https://f-droid.org/posts/security-notice-textsecure/", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43285, "question": "Well, you should tell that author that he already can't do anything. Google Code required you to put the code under a FLOSS license, so... share away.", "aSentId": 43296, "answer": "There are things he could do \n\nI moved someone's project to Sourceforge, the author got upset, registered the name of the project as trademark and started to sue Sourceforge &amp;#3232;\\_&amp;#3232;\n\n(at least that is what they told me)", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43285, "question": "Well, you should tell that author that he already can't do anything. Google Code required you to put the code under a FLOSS license, so... share away.", "aSentId": 43298, "answer": "They did, but that doesn't mean it has to be that.  I just exported a project from Github (not mine) and made it public domain because it should be public domain because it used to be public domain (it's a bunch of old NASA software).  The person who found the discs put the license on the data presumably because Google only gave them those options.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43283, "question": "Last time I migrated an external project from Google Code to GitHub, I got in big trouble with the author. Use caution with this.", "aSentId": 43300, "answer": "Suuuuck. Which one, out of curiosity?", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43302, "question": "There's also https://gitlab.com or https://bitbucket.org if you don't want to contribute to the github monoculture.  (Or mercurial, if you think git itself has too much mindshare).", "aSentId": 43303, "answer": "Bitbucket svn import is shallow.  You need to import it with full history at github, then import the git to bitbucket.  A bit of a difference ;-)", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43302, "question": "There's also https://gitlab.com or https://bitbucket.org if you don't want to contribute to the github monoculture.  (Or mercurial, if you think git itself has too much mindshare).", "aSentId": 43305, "answer": "Is there any non git based vcs website that's like github which you should suggest or recommend? I would like to try out a new version control system with a decent online site that shows it off but have yet to find anything. \n\nLaunchpad seems to be the closest to what I ask but is a very far cry from github. ", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43306, "question": "Is there any non git based vcs website that's like github which you should suggest or recommend? I would like to try out a new version control system with a decent online site that shows it off but have yet to find anything. \n\nLaunchpad seems to be the closest to what I ask but is a very far cry from github. ", "aSentId": 43307, "answer": "You have the choice of using Git or Mercurial with BitBucket.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43306, "question": "Is there any non git based vcs website that's like github which you should suggest or recommend? I would like to try out a new version control system with a decent online site that shows it off but have yet to find anything. \n\nLaunchpad seems to be the closest to what I ask but is a very far cry from github. ", "aSentId": 43309, "answer": "Mercurial (which is great) is possible on Bitbucket, plus you get free repos for git/mercurial as well.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43306, "question": "Is there any non git based vcs website that's like github which you should suggest or recommend? I would like to try out a new version control system with a decent online site that shows it off but have yet to find anything. \n\nLaunchpad seems to be the closest to what I ask but is a very far cry from github. ", "aSentId": 43311, "answer": "Gitorious, but it is not as developed as github. It is open source though.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43312, "question": "Gitorious, but it is not as developed as github. It is open source though.", "aSentId": 43313, "answer": "They're being bought out by gitlab. So I suppose gitlab. ", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43302, "question": "There's also https://gitlab.com or https://bitbucket.org if you don't want to contribute to the github monoculture.  (Or mercurial, if you think git itself has too much mindshare).", "aSentId": 43315, "answer": "What is the problem with github monoculture? ", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43316, "question": "What is the problem with github monoculture? ", "aSentId": 43317, "answer": "The one thing that's always a problem with monocultures -- single point of failure.  Homogeneity breeds fragility.  A github outage, change of policy, etc, shouldn't be able to affect whole swathes of the opensource ecosystem (not to mention knock out build scripts etc that assume it's always on).\n\nAlso, there's the increasing expectation that a project will be on github, or it doesn't exist -- I've seen some people who don't even do a web search, they just check github.  So when a project wants to do something github doesn't support (non-git vcs, customize issue tracking in some way, etc), they're forced to choose between doing things github's way, or lose a large chunk of their potential audience. \n\n", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43318, "question": "The one thing that's always a problem with monocultures -- single point of failure.  Homogeneity breeds fragility.  A github outage, change of policy, etc, shouldn't be able to affect whole swathes of the opensource ecosystem (not to mention knock out build scripts etc that assume it's always on).\n\nAlso, there's the increasing expectation that a project will be on github, or it doesn't exist -- I've seen some people who don't even do a web search, they just check github.  So when a project wants to do something github doesn't support (non-git vcs, customize issue tracking in some way, etc), they're forced to choose between doing things github's way, or lose a large chunk of their potential audience. \n\n", "aSentId": 43319, "answer": "I can see the point -- Github has been adding a lot of tools above and beyond Git. If Github just has your source, that's not a single point of failure, because every contributor has the complete history. But if they also have your website, your issue tracker, your continuous integration, and so on, that might take a bit more work.\n\nStill, it's hard to be that concerned when it's a DVCS at heart -- like I said, it's not a SPOF for your source.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43316, "question": "What is the problem with github monoculture? ", "aSentId": 43321, "answer": "I think its a diversity thing. Github is great, but having alternatives keeps them on their toes and gives people options when they're not a fan of Github. ", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43316, "question": "What is the problem with github monoculture? ", "aSentId": 43323, "answer": "Community-wise, nothing at all. The GitHub community is great, benefits heavily from network effects, and is pretty much the best open source community out there.\n\nBut product-wise, GitLab and Bitbucket do offer several features that GitHub doesn't, like free private repos. That's why competition is good.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43324, "question": "Community-wise, nothing at all. The GitHub community is great, benefits heavily from network effects, and is pretty much the best open source community out there.\n\nBut product-wise, GitLab and Bitbucket do offer several features that GitHub doesn't, like free private repos. That's why competition is good.", "aSentId": 43325, "answer": "Gitlab can also be selfhosted for free.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43326, "question": "Gitlab can also be selfhosted for free.", "aSentId": 43327, "answer": "And that's the difference between free software (Gitlab) and proprietary software (Github).", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43328, "question": "And that's the difference between free software (Gitlab) and proprietary software (Github).", "aSentId": 43329, "answer": "Free software is a powerful thing, they're doing a business model I always wished to participate in.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43328, "question": "And that's the difference between free software (Gitlab) and proprietary software (Github).", "aSentId": 43331, "answer": "I thought Gitlab isn't GPL...", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43332, "question": "I thought Gitlab isn't GPL...", "aSentId": 43333, "answer": "Well the [community edition](https://gitlab.com/gitlab-org/gitlab-ce/tree/master) is released under the MIT license.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43334, "question": "Well the [community edition](https://gitlab.com/gitlab-org/gitlab-ce/tree/master) is released under the MIT license.", "aSentId": 43335, "answer": "Even better :)", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43332, "question": "I thought Gitlab isn't GPL...", "aSentId": 43337, "answer": "There are much freer licenses than gpl out there, copy left can be a scourge if you're trying to do commercial software on unix platforms.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43328, "question": "And that's the difference between free software (Gitlab) and proprietary software (Github).", "aSentId": 43339, "answer": "Isn't Github open-source and on Github?", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43340, "question": "Isn't Github open-source and on Github?", "aSentId": 43341, "answer": "Nope.\n\nThey do offer an enterprise version where you can host it locally, but it's not free and not open-source.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43324, "question": "Community-wise, nothing at all. The GitHub community is great, benefits heavily from network effects, and is pretty much the best open source community out there.\n\nBut product-wise, GitLab and Bitbucket do offer several features that GitHub doesn't, like free private repos. That's why competition is good.", "aSentId": 43343, "answer": "your bashing github for something they specifically do not offer (for a very valid reason). that makes no sense", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43350, "question": "You may use SubGit (http://subgit.com) to mirror or import google code SVN repository to Git - then push it to your Git server (git push --mirror to push all branches and tags). \n\nSubGit works well with GitLab, so one may set up a mirror on the GitLab server. There is also SubGit based add-on for Atlassian Stah.", "aSentId": 43351, "answer": "How is subgit doing? Last I heard It wasn't quite as good as git-svn. They botg have their issues though, but if subgit has improved then I may swap over", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43350, "question": "You may use SubGit (http://subgit.com) to mirror or import google code SVN repository to Git - then push it to your Git server (git push --mirror to push all branches and tags). \n\nSubGit works well with GitLab, so one may set up a mirror on the GitLab server. There is also SubGit based add-on for Atlassian Stah.", "aSentId": 43353, "answer": "You can just use git-svn for free. Where google code says \"svn checkout\" just replace that with \"git svn clone\" and you get the whole repo along with commit history.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43355, "question": "Why always GitHub :(", "aSentId": 43356, "answer": "Because it's got the best api.\n\nBitbucket doesn't do oauth right, gitlab has very little api. Gitorious is apparently going away. Github is the best choice given the constraints.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43357, "question": "Because it's got the best api.\n\nBitbucket doesn't do oauth right, gitlab has very little api. Gitorious is apparently going away. Github is the best choice given the constraints.", "aSentId": 43358, "answer": "Forgive my ignorance but what do you use github's api for?", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43359, "question": "Forgive my ignorance but what do you use github's api for?", "aSentId": 43360, "answer": "porting a googlecode project to github for one", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43359, "question": "Forgive my ignorance but what do you use github's api for?", "aSentId": 43362, "answer": "All sorts of shit. They have a fantastic oauth api that can have deploy keys and web hooks and magical shit on the back end. As well, pretty much any action can be handled via their api -- issues, pull requests, even commits if you dig deep enough. Google seriously just had to call some web hooks, say where to get a copy of the code, use the issues api to bulk import and there was *little to no* work for either side. The importer probably took... A week or two to write, and it seriously just works. ", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43363, "question": "All sorts of shit. They have a fantastic oauth api that can have deploy keys and web hooks and magical shit on the back end. As well, pretty much any action can be handled via their api -- issues, pull requests, even commits if you dig deep enough. Google seriously just had to call some web hooks, say where to get a copy of the code, use the issues api to bulk import and there was *little to no* work for either side. The importer probably took... A week or two to write, and it seriously just works. ", "aSentId": 43364, "answer": "&gt; and it seriously just works\n\nIn my case, except for sending an email saying it failed to migrate (it actually migrated fine).", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43357, "question": "Because it's got the best api.\n\nBitbucket doesn't do oauth right, gitlab has very little api. Gitorious is apparently going away. Github is the best choice given the constraints.", "aSentId": 43366, "answer": "Besides, you could always manually upload a repo to another site (converting it to Git if you want). The tool here just automates this for you. It's hardly the only option.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43367, "question": "Besides, you could always manually upload a repo to another site (converting it to Git if you want). The tool here just automates this for you. It's hardly the only option.", "aSentId": 43368, "answer": "It's an *easy button*, yes. I never said it was the only option (plus, those who use Bitbucket and friends probably already know how to do this sort of magic)", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43357, "question": "Because it's got the best api.\n\nBitbucket doesn't do oauth right, gitlab has very little api. Gitorious is apparently going away. Github is the best choice given the constraints.", "aSentId": 43370, "answer": "You can't search inside a forked repo.  What is that about?", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43371, "question": "You can't search inside a forked repo.  What is that about?", "aSentId": 43372, "answer": "No goddamn clue. Something to do with how they handle forks internally (I believe it has to do with the fact that a \"fork\" is really just a branch on the other side.)", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43374, "question": "Can you expand on what Bitbucket gets wrong with OAuth?", "aSentId": 43375, "answer": "Apparently they've fixed it recently, but they used to be fairly painful in terms of oauth. I know of it via a [ticket in Gratipay](https://github.com/gratipay/gratipay.com/issues/1945).", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43355, "question": "Why always GitHub :(", "aSentId": 43377, "answer": "Because it's the most popular and will cover 80% of the cases. \n\nIf you need you can export to anything else yourself. ", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43355, "question": "Why always GitHub :(", "aSentId": 43379, "answer": "Because that's where everyone is.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43381, "question": "Because Github is amazing.  Why, do you have some sort of issue with it?", "aSentId": 43382, "answer": "My issue is them reinventing the open source wheel, and replacing it with a proprietary one. Git is perfectly capable of handing pull requests on it's own. That functionality didn't need replaced by what is arguable a crappier version. I use Gitlab instead.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43383, "question": "My issue is them reinventing the open source wheel, and replacing it with a proprietary one. Git is perfectly capable of handing pull requests on it's own. That functionality didn't need replaced by what is arguable a crappier version. I use Gitlab instead.", "aSentId": 43384, "answer": "&gt; Git is perfectly capable of handing pull requests on it's own\n\npull requests via e-mail or do you mean something else?", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43385, "question": "&gt; Git is perfectly capable of handing pull requests on it's own\n\npull requests via e-mail or do you mean something else?", "aSentId": 43386, "answer": "I think they mean publishing your code online somewhere, and sending people (by email, chat, or whatever) the output of a `git request-pull` command or something similar to that. Given that, they're still discounting the convenience factor of GitHub's pull requests, which is something technical people keep doing whenever something new and convenient is introduced ('Dropbox? I can just use rsync over a VPN tunnel, with the proper proxy settings, to sync my files!')", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43383, "question": "My issue is them reinventing the open source wheel, and replacing it with a proprietary one. Git is perfectly capable of handing pull requests on it's own. That functionality didn't need replaced by what is arguable a crappier version. I use Gitlab instead.", "aSentId": 43388, "answer": "Exactly.  You don't need to use GitHub to do pull requests.  The code on GitHub is just a mirror, you aren't dependent upon it.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43381, "question": "Because Github is amazing.  Why, do you have some sort of issue with it?", "aSentId": 43390, "answer": "Their code search is kind of terrible. Not that Google Code was any better... Anyway, competition is good.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43391, "question": "Their code search is kind of terrible. Not that Google Code was any better... Anyway, competition is good.", "aSentId": 43392, "answer": "I think Google Code shutdown is not really the place to promote diversity in the ecosystem. Github has the largest amount of co-users of Google Code already. This makes it easier on the whole for the majority of them. I think this is best for the developers of any Google Code project. ", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43391, "question": "Their code search is kind of terrible. Not that Google Code was any better... Anyway, competition is good.", "aSentId": 43394, "answer": "I think their code indexer only indexes whole words, so searches for parts of symbols often come up with no results, even when you know the word stem you are searching for is in there. ", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43391, "question": "Their code search is kind of terrible. Not that Google Code was any better... Anyway, competition is good.", "aSentId": 43396, "answer": "Part of the google shutdown is because there is competition and that those competitors do most of everything right. ", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43398, "question": "Competition *is* good, but you're also kinda implying that winning is bad.", "aSentId": 43399, "answer": "Yes, in the sense that a monopoly is bad.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43400, "question": "Yes, in the sense that a monopoly is bad.", "aSentId": 43401, "answer": "Git is distributed by nature, there is no real vendor lockin.  Sure, GitHub has a nice web UI, but that's about it.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43402, "question": "Git is distributed by nature, there is no real vendor lockin.  Sure, GitHub has a nice web UI, but that's about it.", "aSentId": 43403, "answer": "&gt; Git is distributed by nature, there is no real vendor lockin. \n\nWhich would have been relevant if we were talking about git.\n\nGitHub has things like *issues* and other features that people get used to. If you want to migrate from GitHub, you might have to migrate thousands of issues to something else. That's one example.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43400, "question": "Yes, in the sense that a monopoly is bad.", "aSentId": 43405, "answer": "But isn't Github itself open source?", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43406, "question": "But isn't Github itself open source?", "aSentId": 43407, "answer": "Nope", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43406, "question": "But isn't Github itself open source?", "aSentId": 43409, "answer": "Your point better not be \"you can just fork it if you're not happy, bro\". It's more complicated than that.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43410, "question": "Your point better not be \"you can just fork it if you're not happy, bro\". It's more complicated than that.", "aSentId": 43411, "answer": "'Course it is. I just can't really find a way to see Github as the evil guys.\n\n But yeah, monopoly in all cases are bad.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43406, "question": "But isn't Github itself open source?", "aSentId": 43413, "answer": "Uhm, no, it isn't?\n\nAnd many people don't like the idea that large parts of the open source ecosystem rely on a non-opensource product for critical functions.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43398, "question": "Competition *is* good, but you're also kinda implying that winning is bad.", "aSentId": 43415, "answer": "Winning *is* bad if it means you've won permanently. Lots of little battles seems to promote the most innovation.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43398, "question": "Competition *is* good, but you're also kinda implying that winning is bad.", "aSentId": 43417, "answer": "&gt;Competition is good, but you're also kinda implying that winning is bad.\n\nWinning is good for the entity winning, and to some degree for the people associated with that entity, but if it outright wins completely, there's no more competition, and the market/product stagnates. \n\nAs with so many things, individual benefit can mean systemic harm.\n", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43419, "question": "SourceForge was the winner once, and we all loved it. Things can change. It only takes, say, github to start sharing the contents of private repositories with advertisers and government agencies, for the trust landscape to change again. \n\nWe just need to know there is an escape hatch and somewhere else to go if it all goes pair shaped. ", "aSentId": 43420, "answer": "&gt; and we all loved it\n\nSpeak for yourself. Remember waiting 5 seconds for the countdown then choosing mirrors? No authors ever bothered to write a spiel about the project, where GitHub encourages readmes straight up. Sourceforge always was half baked and still is, I doubt anybody loved it.  \n", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43381, "question": "Because Github is amazing.  Why, do you have some sort of issue with it?", "aSentId": 43422, "answer": "For me problem with GitHub is its popularity. Too many projects become dependent on it with no actual mirrors on BitBucket or Codeplex or even Sourceforge. Not a great thing in a long run.\n\nPlus again due to its popularity it's filled with dead and useless projects making it not that easy to find some piece of code if you're not looking for a particular project. Not to mention countless forks made by people to link in their resume.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43423, "question": "For me problem with GitHub is its popularity. Too many projects become dependent on it with no actual mirrors on BitBucket or Codeplex or even Sourceforge. Not a great thing in a long run.\n\nPlus again due to its popularity it's filled with dead and useless projects making it not that easy to find some piece of code if you're not looking for a particular project. Not to mention countless forks made by people to link in their resume.", "aSentId": 43424, "answer": "&gt;Too many projects become dependent on it with no actual mirrors on BitBucket or Codeplex or even Sourceforge.\n\nThis is a weak issue, IMO. Anyone who has downloaded the repo can upload it to another site easily enough. Mirrors aren't really that important with a distributed VCS, which git is (as /u/indrora mentioned).\n\nReally the opposite applies, too. There's projects on other sites and not on Github. Not as common, though, since almost nobody moves a project to Sourceforge or something because they don't like GitHub. GitHub is pretty much the apex host for open source projects.\n\n&gt;Plus again due to its popularity it's filled with dead and useless projects making it not that easy to find some piece of code if you're not looking for a particular project.\n\nThis would apply to any kind of searchable host. What's your solution? Besides, many dead projects are still useful (particularly for libraries in niche fields). In my experience, Google does well at finding the most relevant repos (and if no such repos exist, what can it do?).\n\n&gt;Not to mention countless forks made by people to link in their resume.\n\nWhat makes you think that's why those exist? The preferred way to make changes to a GitHub project is to make a pull request, which requires a fork. So everyone who has ever contributed to a GitHub project would have a fork of some other project.\n\nEven if they don't make changes to the fork, that doesn't mean anything. Maybe they just gave up or decided against making the change once they saw the code? The typical process of making a change will fork first, clone that, and then look at the code. That way changes can be easily pushed to your fork.\n\nAnd then there's people who use forking as a means of favouriting a repo. Not really correct usage, since GitHub lets you star a repo, but forking would provide protection from a repo that get destroyed in the future (eg, by a rebase).", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43425, "question": "&gt;Too many projects become dependent on it with no actual mirrors on BitBucket or Codeplex or even Sourceforge.\n\nThis is a weak issue, IMO. Anyone who has downloaded the repo can upload it to another site easily enough. Mirrors aren't really that important with a distributed VCS, which git is (as /u/indrora mentioned).\n\nReally the opposite applies, too. There's projects on other sites and not on Github. Not as common, though, since almost nobody moves a project to Sourceforge or something because they don't like GitHub. GitHub is pretty much the apex host for open source projects.\n\n&gt;Plus again due to its popularity it's filled with dead and useless projects making it not that easy to find some piece of code if you're not looking for a particular project.\n\nThis would apply to any kind of searchable host. What's your solution? Besides, many dead projects are still useful (particularly for libraries in niche fields). In my experience, Google does well at finding the most relevant repos (and if no such repos exist, what can it do?).\n\n&gt;Not to mention countless forks made by people to link in their resume.\n\nWhat makes you think that's why those exist? The preferred way to make changes to a GitHub project is to make a pull request, which requires a fork. So everyone who has ever contributed to a GitHub project would have a fork of some other project.\n\nEven if they don't make changes to the fork, that doesn't mean anything. Maybe they just gave up or decided against making the change once they saw the code? The typical process of making a change will fork first, clone that, and then look at the code. That way changes can be easily pushed to your fork.\n\nAnd then there's people who use forking as a means of favouriting a repo. Not really correct usage, since GitHub lets you star a repo, but forking would provide protection from a repo that get destroyed in the future (eg, by a rebase).", "aSentId": 43426, "answer": "It is OK for people to not like and/or not use GitHub. I'm not sure why people get so defensive about it.\n\nReminds me of how people get defensive about Apple.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43427, "question": "It is OK for people to not like and/or not use GitHub. I'm not sure why people get so defensive about it.\n\nReminds me of how people get defensive about Apple.", "aSentId": 43428, "answer": "It's fine for people to not like or use Github. But I don't see anything wrong with defending something. Discussion is always a push pull and it allows participants of discussion to see flaws in their thoughts they may not have seen otherwise as well as allowing the readers to have an informed decision on something they may not have known otherwise.\n\nWhen held civilly defensive discussion spreads knowledge.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43423, "question": "For me problem with GitHub is its popularity. Too many projects become dependent on it with no actual mirrors on BitBucket or Codeplex or even Sourceforge. Not a great thing in a long run.\n\nPlus again due to its popularity it's filled with dead and useless projects making it not that easy to find some piece of code if you're not looking for a particular project. Not to mention countless forks made by people to link in their resume.", "aSentId": 43430, "answer": "That would be why git is a dvcs and thus mostly immune to this. You need no mirrors until you have to. ", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43433, "question": "Nobody else has a free Windows client.", "aSentId": 43434, "answer": "I can think of at least two Windows ports of git, and several GUI frontends.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43435, "question": "I can think of at least two Windows ports of git, and several GUI frontends.", "aSentId": 43436, "answer": "I can think of one: Gibhub Client", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43437, "question": "I can think of one: Gibhub Client", "aSentId": 43438, "answer": "[Then you haven't looked very hard](http://git-scm.com/downloads/guis).", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43437, "question": "I can think of one: Gibhub Client", "aSentId": 43440, "answer": "Atlassian has SourceTree", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43443, "question": "FYI to everyone - it doesn't seem to export the main page of the project to github (either as a markdowned readme or as a simple text dump), so if you want that you'll need to do it manually\n\nEDIT: As pointed out below, it is migrated! The repo on github will have a wiki branch", "aSentId": 43444, "answer": "Unless I'm mistaken, the `wiki` branch should contain `index.md` -- the frontpage looks right for me.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43445, "question": "Unless I'm mistaken, the `wiki` branch should contain `index.md` -- the frontpage looks right for me.", "aSentId": 43446, "answer": "Ah, thanks for pointing that out!", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43448, "question": "&gt; If you depend on a Google product, export your data to some other product before they shut it down!\n\nFTFY", "aSentId": 43449, "answer": "&gt; If you depend on a external product, export your data to some other product before they shut it down!\n\nThis applies to everything you don't fully control.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43448, "question": "&gt; If you depend on a Google product, export your data to some other product before they shut it down!\n\nFTFY", "aSentId": 43451, "answer": "Yeah no shit. ", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43453, "question": "Exported Mercurial project to Sourceforge and worked like a dream, and didn't support the GitHub monopoly either. ", "aSentId": 43454, "answer": "Sourceforge is crap nowadays, they even bundled malware in installers for some time.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43455, "question": "Sourceforge is crap nowadays, they even bundled malware in installers for some time.", "aSentId": 43456, "answer": "We've had our project downloads hosted there for a while now, since Google dropped support for that. Seems ok. GitHub would be better i it allowed Downloads of packaged builds", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43457, "question": "We've had our project downloads hosted there for a while now, since Google dropped support for that. Seems ok. GitHub would be better i it allowed Downloads of packaged builds", "aSentId": 43458, "answer": "You can attach builds to a release on github.\n\nEDIT: For example, look at bottom of https://github.com/gorhill/uBlock/releases/tag/0.9.1.0", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43459, "question": "You can attach builds to a release on github.\n\nEDIT: For example, look at bottom of https://github.com/gorhill/uBlock/releases/tag/0.9.1.0", "aSentId": 43460, "answer": "Didn't know that! Thats interesting", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43462, "question": "github  doesn't work in china", "aSentId": 43463, "answer": "Try a different government.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43462, "question": "github  doesn't work in china", "aSentId": 43465, "answer": "Try bitbucket or gitlab.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43467, "question": "Here is a tip, don't ever depend on external code in the first place. Always maintain your own version of that branch. I can't think of a good reason to not do that other than laziness and laziness leads to bugginess.", "aSentId": 43468, "answer": "And sometimes you get smacked upside the face. ", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43470, "question": "&gt; export it to GitHub!\n\nOr any other forge if you don't want to contribute to building a monopoly (even if GitHub seem a nice company, there are no nice monopolies).\n\nAn open source and self-hostable forge like [GitLab](https://gitlab.com) would be even better.", "aSentId": 43471, "answer": "As always, it's convenience vs. control. My projects are low-stakes enough that GitHub + whatever shitty local backups I have are good enough. If I was making production-level code GitHub would be one of many tools I would use, because it still has a great interface.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43470, "question": "&gt; export it to GitHub!\n\nOr any other forge if you don't want to contribute to building a monopoly (even if GitHub seem a nice company, there are no nice monopolies).\n\nAn open source and self-hostable forge like [GitLab](https://gitlab.com) would be even better.", "aSentId": 43473, "answer": "Digital Ocean has a pre-install of a Gitlab box, if you are lazy.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43476, "question": "Just pulled [my senior project](https://github.com/curtmack/bullet-rain) over. Looking back at that code, I'm amazed it doesn't catch fire.", "aSentId": 43477, "answer": "I also just ported over some old projects that I did in college.  I spot checked to make sure the code was there but I wasn't brave enough to actually look at the code.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43481, "question": "Run gitlab in a vm on a raid 6 NAS and use its amazon s3 backup feature, if ur wanting private repo's ", "aSentId": 43482, "answer": "Or just use gitlab.com, it offers unlimited number of private repos.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43481, "question": "Run gitlab in a vm on a raid 6 NAS and use its amazon s3 backup feature, if ur wanting private repo's ", "aSentId": 43484, "answer": "Or, run it on a box you own with your own backups if you're that paranoid.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43486, "question": "Neural network optical character recognition", "aSentId": 43487, "answer": "Cool project! If I may ask, why was the input set the pixels of the glyphs? I understand that it's easier to just plug in that way, but human perception of characters is heavily pre-processed, relying much more on contour features, so I would expect this to be overfit in non-intuitive ways. I'm also wary of the accuracy ratings because the distortions seem biased in favor of the chosen model.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43488, "question": "Cool project! If I may ask, why was the input set the pixels of the glyphs? I understand that it's easier to just plug in that way, but human perception of characters is heavily pre-processed, relying much more on contour features, so I would expect this to be overfit in non-intuitive ways. I'm also wary of the accuracy ratings because the distortions seem biased in favor of the chosen model.", "aSentId": 43489, "answer": "Thanks! I preferred it that way for convenience. The purpose of the project is not to mimic the human perception of characters, but rather develop a working, flexible neural network for OCR.\n\nThe accuracy ratings don't really mean that much unless applied to a real testing set, but they do show a promising potential.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43491, "question": "Portable Computing Language (pocl) v0.11 released", "aSentId": 43492, "answer": "&gt; Portable .. Language\n\n&gt; * experimental Windows support (many things still broken there)\n", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43494, "question": "AstroBuild - Deploy based on the planet alignments", "aSentId": 43495, "answer": "Shouldn't it be the other way? It should only compile when the planets align, then the saying makes sense.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43494, "question": "AstroBuild - Deploy based on the planet alignments", "aSentId": 43497, "answer": "I see...", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43499, "question": "Pruning and Polishing OpenBSD code", "aSentId": 43500, "answer": "It loads in comic sans, and as soon as you scroll it changes font...", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43501, "question": "It loads in comic sans, and as soon as you scroll it changes font...", "aSentId": 43502, "answer": "That's some next-level trolling right there.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43501, "question": "It loads in comic sans, and as soon as you scroll it changes font...", "aSentId": 43504, "answer": "OpenBSD have weaponised Comic Sans.\n\nWhen they started LibreSSL effort, they even put this footer in:\n\n&gt; *\"This page scientifically designed to annoy web hipsters.  Donate now to stop the Comic Sans and Blink Tags.\"*\n\n:)", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43501, "question": "It loads in comic sans, and as soon as you scroll it changes font...", "aSentId": 43506, "answer": "lol, take a look at the source of the page; it does this on purpose :).", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43499, "question": "Pruning and Polishing OpenBSD code", "aSentId": 43508, "answer": "&gt; These locks, which were really macros which expanded to nothing, were introduced long before the kernel was actually capable of multiprocessor operation in a case of premature optimism. When SMP support was finally added, intervening code changes meant that many of the lock and unlock operations were incorrectly placed. In other cases, new developers were not always aware that the locks were empty macros and would attempt to use them in code which required functioning locks. Considerable developer effort was expended moving the locks around and trying to maintain the comments describing the necessary locking protocols in code which had never been tested.\n\nwhat a remarkably stupid idea.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43499, "question": "Pruning and Polishing OpenBSD code", "aSentId": 43510, "answer": "I wonder why they didn't add mallocarray() as well, along with reallocarray(), to the standard libary at the time. That would avoid the situation where reallocarray() is now used for both initialization and resizing depending on whether you give it a null pointer or not.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43511, "question": "I wonder why they didn't add mallocarray() as well, along with reallocarray(), to the standard libary at the time. That would avoid the situation where reallocarray() is now used for both initialization and resizing depending on whether you give it a null pointer or not.", "aSentId": 43512, "answer": "A function called mallocarray() was added to libc first. It was removed shortly after and replaced with reallocarray(), which was deemed more useful.\n\nA different function called mallocarray() is now used in the kernel. It's more complex. Depending on its arguments, it may panic, return null, or sleep until memory is available. It also allows a type to be specified, which allows for the collection of statistics on memory use by kernel subsystems.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43516, "question": "Which parallel sorting algorithm has the best average case performance?", "aSentId": 43517, "answer": "Quicksort doesn't have the fastest running time \"on average\", complexity-wise (which he talks about), but rather it does in practice. ", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43519, "question": "LinkedIn to slowly phase out Scala in favor of Java 8", "aSentId": 43520, "answer": "Please, stop with the Quora links.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43521, "question": "Please, stop with the Quora links.", "aSentId": 43522, "answer": "right-click\n\ninspect element\n\nsee line of code\n\nright-click\n\ndelete node\n\nProfit", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43523, "question": "right-click\n\ninspect element\n\nsee line of code\n\nright-click\n\ndelete node\n\nProfit", "aSentId": 43524, "answer": "&gt; right-click\n&gt; \n&gt; delete node\n\nYou can press the delete key to remove the currently highlighted node.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43525, "question": "&gt; right-click\n&gt; \n&gt; delete node\n\nYou can press the delete key to remove the currently highlighted node.", "aSentId": 43526, "answer": "well, then\n\nsmarter every day", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43521, "question": "Please, stop with the Quora links.", "aSentId": 43528, "answer": "Doesn't the \"share=1\" query parameter bypass the registration stuff?", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43521, "question": "Please, stop with the Quora links.", "aSentId": 43530, "answer": "What's wrong with quora? The forced login is annoying but everything else is ok.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43531, "question": "What's wrong with quora? The forced login is annoying but everything else is ok.", "aSentId": 43532, "answer": "Forced login.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43533, "question": "Forced login.", "aSentId": 43534, "answer": "&gt; Forced login.\n\nThis is just a translucent div you can easily remove with developer console. But, without question, it is annoying.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43519, "question": "LinkedIn to slowly phase out Scala in favor of Java 8", "aSentId": 43536, "answer": "I like these guys. They love to jump from technology to technology.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43537, "question": "I like these guys. They love to jump from technology to technology.", "aSentId": 43538, "answer": "I guess when you can't roll out any new features that anyone wants to use all you have left is to rewrite your system over and over.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43539, "question": "I guess when you can't roll out any new features that anyone wants to use all you have left is to rewrite your system over and over.", "aSentId": 43540, "answer": "They've spawned some well-adopted technologies in the process.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43539, "question": "I guess when you can't roll out any new features that anyone wants to use all you have left is to rewrite your system over and over.", "aSentId": 43542, "answer": "They really should just form stealth startups internally and let the engineers go wild with some other brand name like LinkedInX or something. They're obviously bored as hell might as well let them try random awesome things like Google engineers do.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43543, "question": "They really should just form stealth startups internally and let the engineers go wild with some other brand name like LinkedInX or something. They're obviously bored as hell might as well let them try random awesome things like Google engineers do.", "aSentId": 43544, "answer": "***LinkedInX announces that it will move away from Java 8 in favor of a Haskell/Racket/Julia stack***", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43545, "question": "***LinkedInX announces that it will move away from Java 8 in favor of a Haskell/Racket/Julia stack***", "aSentId": 43546, "answer": "I want to go to there!", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43545, "question": "***LinkedInX announces that it will move away from Java 8 in favor of a Haskell/Racket/Julia stack***", "aSentId": 43548, "answer": "You don't even need the Racket and Julia parts - just make a monad stack and stack Racket and Julia on top of it.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43545, "question": "***LinkedInX announces that it will move away from Java 8 in favor of a Haskell/Racket/Julia stack***", "aSentId": 43550, "answer": "Or like Paypal with NodeJS ", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43552, "question": "What? Julia maybe, but haskell? *racket*??? racket is like 500 year old dinosaur technology. Why not Nim?", "aSentId": 43553, "answer": "\\&gt;Using Julia and Nim in production, but not Haskell and Racket\n\n8/10 trolling", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43552, "question": "What? Julia maybe, but haskell? *racket*??? racket is like 500 year old dinosaur technology. Why not Nim?", "aSentId": 43555, "answer": "What's wrong with haskell?", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43552, "question": "What? Julia maybe, but haskell? *racket*??? racket is like 500 year old dinosaur technology. Why not Nim?", "aSentId": 43557, "answer": "Racket is great don't hate", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43543, "question": "They really should just form stealth startups internally and let the engineers go wild with some other brand name like LinkedInX or something. They're obviously bored as hell might as well let them try random awesome things like Google engineers do.", "aSentId": 43559, "answer": "They actually already do this through their internal Hackathons. Winner gets their own team to develop their idea into a product. ", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43537, "question": "I like these guys. They love to jump from technology to technology.", "aSentId": 43561, "answer": "Linkedin is exactly the kind of shop so gullible that it'd take my node.js web scale lectures to heart and replace all their web sites with mongodb nodejs angularjs. \n\nNode.js evangelism has started on Linkedin. This year will be great.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43562, "question": "Linkedin is exactly the kind of shop so gullible that it'd take my node.js web scale lectures to heart and replace all their web sites with mongodb nodejs angularjs. \n\nNode.js evangelism has started on Linkedin. This year will be great.", "aSentId": 43563, "answer": "They release a lot of open source, so I like them. Their JVM-based OSS is pretty neat.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43562, "question": "Linkedin is exactly the kind of shop so gullible that it'd take my node.js web scale lectures to heart and replace all their web sites with mongodb nodejs angularjs. \n\nNode.js evangelism has started on Linkedin. This year will be great.", "aSentId": 43565, "answer": "When I first read about the MEAN stack, I thought it was a joke. LAMP might suck now, but *at some point* each of those technologies were the best choice for web. MEAN was already broken out of the box.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43566, "question": "When I first read about the MEAN stack, I thought it was a joke. LAMP might suck now, but *at some point* each of those technologies were the best choice for web. MEAN was already broken out of the box.", "aSentId": 43567, "answer": "Only part broken on the MEAN stack is Mongo. That is without a doubt not as good as you typical SQL database. The rest of the MEAN stack is just fine.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43568, "question": "Only part broken on the MEAN stack is Mongo. That is without a doubt not as good as you typical SQL database. The rest of the MEAN stack is just fine.", "aSentId": 43569, "answer": "Node.js is also pretty shitty. Is it still callback hell land?", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43562, "question": "Linkedin is exactly the kind of shop so gullible that it'd take my node.js web scale lectures to heart and replace all their web sites with mongodb nodejs angularjs. \n\nNode.js evangelism has started on Linkedin. This year will be great.", "aSentId": 43571, "answer": "I believe they've already gone through that particular cycle.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43537, "question": "I like these guys. They love to jump from technology to technology.", "aSentId": 43573, "answer": "I thought they were a Ruby shop?", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43574, "question": "I thought they were a Ruby shop?", "aSentId": 43575, "answer": "Exactly!", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43576, "question": "Exactly!", "aSentId": 43577, "answer": "Uh, they've ALWAYS been a Java shop... Not sure how people don't know this, especially after Kevin Scott said it himself in his Quora answer...", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43574, "question": "I thought they were a Ruby shop?", "aSentId": 43579, "answer": "Whoa that's a long time ago.\n\nThey started out RoR then they moved their backend to Scala but kept their front end stuff with Ruby IIRC.\n\nThen they tried a bit of html5 for mobile and that didn't work out. Last I heard they're doing Node.JS for some stuff while pushing out several useful real time apache projects (kafka, storm, etc..). \n\nNow they're moving away from Scala to Java 8. To be honest Java starting to look a bit like Scala in term of code. And I also move daway from Scala a long time ago and I think this migration is going to be seen in other companies. Scala might find a niche in data science project tho &gt;____&lt;. Flink, Spark, etc...", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43580, "question": "Whoa that's a long time ago.\n\nThey started out RoR then they moved their backend to Scala but kept their front end stuff with Ruby IIRC.\n\nThen they tried a bit of html5 for mobile and that didn't work out. Last I heard they're doing Node.JS for some stuff while pushing out several useful real time apache projects (kafka, storm, etc..). \n\nNow they're moving away from Scala to Java 8. To be honest Java starting to look a bit like Scala in term of code. And I also move daway from Scala a long time ago and I think this migration is going to be seen in other companies. Scala might find a niche in data science project tho &gt;____&lt;. Flink, Spark, etc...", "aSentId": 43581, "answer": "That's quite a good point you make about the new additions to the Java language.\n\nI quite enjoy working with Scala but I don't get to use it at work apart from a couple of projects.\n\nKafka is amazing, it's going to be exciting to see what Confluent get up to. Hopefully they'll continue to contribute back any major improvements they make.\n\nJust to point out that you probably meant Samza, Storm was developed by Backtype/Twitter.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43580, "question": "Whoa that's a long time ago.\n\nThey started out RoR then they moved their backend to Scala but kept their front end stuff with Ruby IIRC.\n\nThen they tried a bit of html5 for mobile and that didn't work out. Last I heard they're doing Node.JS for some stuff while pushing out several useful real time apache projects (kafka, storm, etc..). \n\nNow they're moving away from Scala to Java 8. To be honest Java starting to look a bit like Scala in term of code. And I also move daway from Scala a long time ago and I think this migration is going to be seen in other companies. Scala might find a niche in data science project tho &gt;____&lt;. Flink, Spark, etc...", "aSentId": 43583, "answer": "Scala is fast enough for data science, and has a foothold in Spark.\n\nBut most data scientists I work with aren't interested in a language with that much obscurity and complexity that's there for the purpose of large system construction rather than data analysis.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43574, "question": "I thought they were a Ruby shop?", "aSentId": 43585, "answer": "No, they were porting their Java to node.js last I heard.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43586, "question": "No, they were porting their Java to node.js last I heard.", "aSentId": 43587, "answer": "No one in their right mind are \"porting their Java to node.js\" - as these technologies really are not comparable at all. They might port some of their server-side web-layer to node.js - but no architect worth his salt will port core business logic from Java to node.js. Node.js is great however if you want the web-devs to be able to write their own middle-tier. ", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43588, "question": "No one in their right mind are \"porting their Java to node.js\" - as these technologies really are not comparable at all. They might port some of their server-side web-layer to node.js - but no architect worth his salt will port core business logic from Java to node.js. Node.js is great however if you want the web-devs to be able to write their own middle-tier. ", "aSentId": 43589, "answer": "They run SOA. They would never replace their whole stack. Maybe a micro service experimentally etc. one big benefit of SOA is not having to rewrite everything to try something new", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43519, "question": "LinkedIn to slowly phase out Scala in favor of Java 8", "aSentId": 43591, "answer": "new thing that ran on the old thing replaced by new old thing", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43592, "question": "new thing that ran on the old thing replaced by new old thing", "aSentId": 43593, "answer": "because the former new thing became not so new", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43594, "question": "because the former new thing became not so new", "aSentId": 43595, "answer": "but the former new thing was only thought to be new, but at the time was old too (some 8 years).\n\nThe only new thing about Scala was that some fellow called Odersky just started to shout about it.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43597, "question": "*Minimizing our Scala dependence right now - gonna increase our Swift dependence to compensate.*", "aSentId": 43598, "answer": "Unlike Scala, Swift isn't going anywhere. It'll be on Apple devices twenty years from now, just like Objective-C has been on them for the past twenty.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43600, "question": "I don't understand how Scala requires any additional development infrastructure to a team using Java 8. You can use the exact same builds tools, profiling tools, IDEs, etc.", "aSentId": 43601, "answer": "In my experience with Scala (which by this point is a year or so out of date) it required a bit more fiddling with the GC (Scala makes new classes like they're going out of style, Java assumes classes are forever) and had various random performance gotchas. To their credit they are fixing the latter pretty quickly, it just means that you often have to replace slow sections of your code with java anyway.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43602, "question": "In my experience with Scala (which by this point is a year or so out of date) it required a bit more fiddling with the GC (Scala makes new classes like they're going out of style, Java assumes classes are forever) and had various random performance gotchas. To their credit they are fixing the latter pretty quickly, it just means that you often have to replace slow sections of your code with java anyway.", "aSentId": 43603, "answer": "&gt; Scala makes new classes like they're going out of style\n\nThis is a major thing I understand gets fixed when we can assume JVM 8, which happens IIRC, in Scala 2.12.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43602, "question": "In my experience with Scala (which by this point is a year or so out of date) it required a bit more fiddling with the GC (Scala makes new classes like they're going out of style, Java assumes classes are forever) and had various random performance gotchas. To their credit they are fixing the latter pretty quickly, it just means that you often have to replace slow sections of your code with java anyway.", "aSentId": 43605, "answer": "&gt; to replace slow sections of your code with java anyway.\n\nYou can write Java-like Scala with mutable state, standard loops, etc if you want. You don't actually need to change to Java in the vast majority of cases.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43606, "question": "&gt; to replace slow sections of your code with java anyway.\n\nYou can write Java-like Scala with mutable state, standard loops, etc if you want. You don't actually need to change to Java in the vast majority of cases.", "aSentId": 43607, "answer": "Oh there were some instances (e.g. dealing with arrays of primitives) which saw a 10-20x improvement after straightforward translation to java. My understanding is that they've put a lot of work into useful primitive since I've used it, so it would be nice if it were only a stylistic issue now. Certainly their collection library needed a lot of performance work as well.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43608, "question": "Oh there were some instances (e.g. dealing with arrays of primitives) which saw a 10-20x improvement after straightforward translation to java. My understanding is that they've put a lot of work into useful primitive since I've used it, so it would be nice if it were only a stylistic issue now. Certainly their collection library needed a lot of performance work as well.", "aSentId": 43609, "answer": "Were you using default collections in Scala, or using their mutable ones?  In Scala you have to explicitly say that you're going to use a mutable list (to help reduce the chance of accidental side effects)  and that could be why you saw performance increases from switching to Java in those places. \n\nScala mutable and immutable collections have largely the same functions, so it's damningly easy for a new Scala developer to accidentally kill performance.  For example when you do myMutableList ++ someObject, it just appends it (like Java's .add method) but since Scala defaults to immutable lists, you were probably creating new instances of said list every modification you had. \n\nIt's not really Scala's fault that it creates tons of instances of things. That's just what FP requires to truly be sideeffectless, and there are ways around it if performance is really an issue. Plus most scala-based projects leverage akka actors well enough that starting a new node is relatively trivial. \n\nEdit: Autocorrect. That is all. \n\nEdit2: Clarification\n\nEdit3: I accidentally the accidentally\n\nEdit4: FP", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43608, "question": "Oh there were some instances (e.g. dealing with arrays of primitives) which saw a 10-20x improvement after straightforward translation to java. My understanding is that they've put a lot of work into useful primitive since I've used it, so it would be nice if it were only a stylistic issue now. Certainly their collection library needed a lot of performance work as well.", "aSentId": 43611, "answer": "You know that your language is slow when switch to java improves performance!", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43612, "question": "You know that your language is slow when switch to java improves performance!", "aSentId": 43613, "answer": "&gt; You know that your language is slow when switch to java improves performance!\n\nWelcome to the decade! Were you in a coma this whole time?", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43614, "question": "&gt; You know that your language is slow when switch to java improves performance!\n\nWelcome to the decade! Were you in a coma this whole time?", "aSentId": 43615, "answer": "No, he just took CS1000 with a professor who hadn't written a line of code since the early 90s.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43614, "question": "&gt; You know that your language is slow when switch to java improves performance!\n\nWelcome to the decade! Were you in a coma this whole time?", "aSentId": 43617, "answer": "I didn't know Scala was 10-20x slower than java.  I figured that it was on par with java and python and the likes.\n\nI'm not writing in those languages, how would I know?", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43618, "question": "I didn't know Scala was 10-20x slower than java.  I figured that it was on par with java and python and the likes.\n\nI'm not writing in those languages, how would I know?", "aSentId": 43619, "answer": "&gt; I'm not writing in those languages, how would I know?\n\nThey why did you feel the need to make a snarky comment about Java?\n\nSomehow trying to be funny by repeating the joke that wasn't funny anymore 10 years ago that Java is slow, while in fact in current times it's one of the top performing languages.\n", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43618, "question": "I didn't know Scala was 10-20x slower than java.  I figured that it was on par with java and python and the likes.\n\nI'm not writing in those languages, how would I know?", "aSentId": 43621, "answer": "How could something be on par with java and python? Java is typically anywhere from 4 to 100 times faster than python. Your statement makes no sense.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43606, "question": "&gt; to replace slow sections of your code with java anyway.\n\nYou can write Java-like Scala with mutable state, standard loops, etc if you want. You don't actually need to change to Java in the vast majority of cases.", "aSentId": 43623, "answer": "Yes, but that soon becomes utterly terrible. It's ok as a transition strategy, but not long-term maintainable. If you basically want to write imperative style, then why not, do it in Java, it's made for that. Part of the bad rep Scala sometimes gets comes from code that tries to write Java-style in Scala.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43600, "question": "I don't understand how Scala requires any additional development infrastructure to a team using Java 8. You can use the exact same builds tools, profiling tools, IDEs, etc.", "aSentId": 43625, "answer": "It also requires engineers that know Scala, which is a much smaller subset than engineers that know Java.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43626, "question": "It also requires engineers that know Scala, which is a much smaller subset than engineers that know Java.", "aSentId": 43627, "answer": "It's a real shame that nobody invests in training for their employees anymore.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43628, "question": "It's a real shame that nobody invests in training for their employees anymore.", "aSentId": 43629, "answer": "&gt; Looking for Scala developers! We require minimum 400 hours of experience with Scala, and preferably some mildly successful OSS projects on GitHub that we can use to evaluate your code (let's say, minimum 50 stars). Because fuck you we don't train our employees ourself.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43626, "question": "It also requires engineers that know Scala, which is a much smaller subset than engineers that know Java.", "aSentId": 43631, "answer": "If *LinkedIn* has trouble finding Scala developers then something has gone terribly wrong...", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43632, "question": "If *LinkedIn* has trouble finding Scala developers then something has gone terribly wrong...", "aSentId": 43633, "answer": "Everybody is having a hard time finding Scala developers, there are just not that many around. And that number is shrinking rapidly.\n", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43634, "question": "Everybody is having a hard time finding Scala developers, there are just not that many around. And that number is shrinking rapidly.\n", "aSentId": 43635, "answer": "Scala developers.... What an awful thing to be a languageX developer. Remember the good old days when you could learn new things?", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43636, "question": "Scala developers.... What an awful thing to be a languageX developer. Remember the good old days when you could learn new things?", "aSentId": 43637, "answer": "If you're in the field being productive where does one find time to learn the flavor of the month?\n\nBetter to focus on what you know and become highly skilled at it, then become half good (and half rubbish) at every industry fad that comes along.\n\nEven developers need to eat.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43638, "question": "If you're in the field being productive where does one find time to learn the flavor of the month?\n\nBetter to focus on what you know and become highly skilled at it, then become half good (and half rubbish) at every industry fad that comes along.\n\nEven developers need to eat.", "aSentId": 43639, "answer": "You don't need to lean everything, just like linkedin didn't need to find _scala_ developers. People can learn your tech stack, you just need to find good developers.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43626, "question": "It also requires engineers that know Scala, which is a much smaller subset than engineers that know Java.", "aSentId": 43641, "answer": "I'm sure there's more people that know scala than know how to use java8 features well.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43642, "question": "I'm sure there's more people that know scala than know how to use java8 features well.", "aSentId": 43643, "answer": "Java 8's new features (essentially streams and method refs) can be picked up in three days flat if you already know the language and have been paying attention to functional langs patterns. Scala's core features runs _much_ deeper. No meta-programming, redefine-the-world is possible in Java. For better and worse.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43600, "question": "I don't understand how Scala requires any additional development infrastructure to a team using Java 8. You can use the exact same builds tools, profiling tools, IDEs, etc.", "aSentId": 43645, "answer": "What's prevented me from looking at Scala is that on IntelliJ (at least on my machine) it's MUCH slower to develop for Scala.  ", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43647, "question": "Different flavor of the month", "aSentId": 43648, "answer": "Java is not a flavour of the month.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43650, "question": "What do LinkedIn engineers do at work aside from change platforms like my wife changes outfits before we go out?", "aSentId": 43651, "answer": "Gather emails from your contact lists into a database?", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43654, "question": "A few years ago, when people were hopping on the Scala bandwagon, I had the impression it was going to be a colossal failure. Indeed, those days all I ever read about Scala is companies phasing it out.\n\nNote that I had the same hunch about Node.js, but it looks like that one is here to stay.", "aSentId": 43655, "answer": "&gt;A few years ago, when people were hopping on the Scala bandwagon, I had the impression it was going to be a colossal failure. Indeed, those days all I ever read about Scala is companies phasing it out.\n\nReally typical how things always go. If you read back the comments of those days (right here on reddit or elsewhere) people were so utterly convinced that Scala was going to be the best thing ever and at many posts about Java there was always some clown who found it necessary to reply with something like: \"Are people seriously still using Java? Just switch to Scala and all your problems are solved!\"\n\nAnd then hundreds of startups in these days like the lemmings that they are start building their new products with Scala. \n\nSupposedly they have done research into what works best for their case. But it's too much of a coincidence of that at exactly the same time hundreds of companies suddenly decide Scala matches their product best, even though all those products are totally different.\n\nOf course Scala wasn't necessarily the best tool for the job. The only thing that counts is what bunny23x and mashed_moon_watch over at hackers news think is cool.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43657, "question": "First Twitter, now LinkedIn... That's a pretty big blow for Scala.\n", "aSentId": 43658, "answer": "Could you post some references to Twitter leaving scala?", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43657, "question": "First Twitter, now LinkedIn... That's a pretty big blow for Scala.\n", "aSentId": 43660, "answer": "Twitter has not abandoned or deprecated Scala", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43661, "question": "Twitter has not abandoned or deprecated Scala", "aSentId": 43662, "answer": "Are you guys still maintaining your own fork of Scala?", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43663, "question": "Are you guys still maintaining your own fork of Scala?", "aSentId": 43664, "answer": "We haven't forked Scala, we're just behind in versions (currently on 2.10)", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43657, "question": "First Twitter, now LinkedIn... That's a pretty big blow for Scala.\n", "aSentId": 43666, "answer": "Oh Hi, Cedric Beust. Stop trolling.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43668, "question": "killed by complexity. who is left rooting for scala? yahoo seems to have taken a shining to spark....is yahoo enough?", "aSentId": 43669, "answer": "Lots of people use Spark, Netflix being another big one. Besides, with Spark, Scala's collection performance isn't going to be your bottleneck.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43668, "question": "killed by complexity. who is left rooting for scala? yahoo seems to have taken a shining to spark....is yahoo enough?", "aSentId": 43671, "answer": "Verizon OnCue is a large Scala shop, FWIW.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43668, "question": "killed by complexity. who is left rooting for scala? yahoo seems to have taken a shining to spark....is yahoo enough?", "aSentId": 43673, "answer": "&gt; killed by complexity. who is left rooting for scala?\n\nEbay's national platform in The Netherlands (marktplaats.nl) had to do a rewrite from their ancient PHP codebase. This rewrite started exactly when the Scala hype was at its top, so guess what Ebay choose for their software in The Netherlands...\n\nWhen other Ebay projects needed rewrites later when the Scala hype was over, magically Scala wasn't chosen for those. Now is their any more proof of how Internet hypes influence technical decision making?\n", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43677, "question": "Scholarly Markdown", "aSentId": 43678, "answer": "What's the reason for a complete fork of Pandoc? I might have missed something, but it seemed like this is mostly a new reader and a new writer for pandoc?", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43679, "question": "What's the reason for a complete fork of Pandoc? I might have missed something, but it seemed like this is mostly a new reader and a new writer for pandoc?", "aSentId": 43680, "answer": "It's explained in the Hacker News post (the author posted a comment on that post). Basically, it's forked to test ideas that pandoc doesn't support at the moment.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43681, "question": "It's explained in the Hacker News post (the author posted a comment on that post). Basically, it's forked to test ideas that pandoc doesn't support at the moment.", "aSentId": 43682, "answer": "Thanks for the info, that sounds reasonable.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43677, "question": "Scholarly Markdown", "aSentId": 43684, "answer": "\"semantic XML-second\" why XML before latex?", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43677, "question": "Scholarly Markdown", "aSentId": 43686, "answer": "What exactly is wrong with just using LaTeX?", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43687, "question": "What exactly is wrong with just using LaTeX?", "aSentId": 43688, "answer": "I think it's mainly that LaTeX isn't the best if you want other output formats other than PDF (e.g., HTML). There's programs to convert to HTML, but they have problems.\n\nThe biggest problem I've had with pretty much all the Markdown implementations is that it doesn't seem that you can number equations (and subsequently cross-reference). Just having an equation isn't enough for me. This oddly puts the equation number at the start (why?) and doesn't seem to support equation numbers for the individual equations in a block, just one for the whole thing.\n\nOverall, it's another Markdown that's useless for me.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43689, "question": "I think it's mainly that LaTeX isn't the best if you want other output formats other than PDF (e.g., HTML). There's programs to convert to HTML, but they have problems.\n\nThe biggest problem I've had with pretty much all the Markdown implementations is that it doesn't seem that you can number equations (and subsequently cross-reference). Just having an equation isn't enough for me. This oddly puts the equation number at the start (why?) and doesn't seem to support equation numbers for the individual equations in a block, just one for the whole thing.\n\nOverall, it's another Markdown that's useless for me.", "aSentId": 43690, "answer": "I personally dislike Markdown heavily. It's okay for something like reddit where primarily you want to do *this* or **this** or\n\n1. this\n2. this, and\n3. this\n\nI don't really care how the text appears as long as there's some sort of emphasis, then some sort of stronger emphasis, then some sort of numbered list.\n\nIn comparison, when writing an assignment at university, I wanted repeatable and pretty strictly defined, theoretically sound text alignment, proper mathematical typesetting, numbered and labelled equations and graphs, etc. ", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43694, "question": "On verbosity in programming languages", "aSentId": 43695, "answer": "&gt; Languages in which compactness is seen as virtue tend to have styles where many operations are performed on the same line (Perl being particularly notorious), whereas those which favour readability tend to have one or two.\n\nAren't compact languages typically compact in an attempt to favor readability?", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43696, "question": "&gt; Languages in which compactness is seen as virtue tend to have styles where many operations are performed on the same line (Perl being particularly notorious), whereas those which favour readability tend to have one or two.\n\nAren't compact languages typically compact in an attempt to favor readability?", "aSentId": 43697, "answer": "Perl one-liners may sacrifice readability in exchange for being easy to embed in a shell script.\nAs usual it's not the language that makes it less readable but the usage. \n\n", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43696, "question": "&gt; Languages in which compactness is seen as virtue tend to have styles where many operations are performed on the same line (Perl being particularly notorious), whereas those which favour readability tend to have one or two.\n\nAren't compact languages typically compact in an attempt to favor readability?", "aSentId": 43699, "answer": "syntax sugar makes languages readable, also it makes the language more complex. in how many ways can you define a function?\nscheme for example: define lambda, define (), define-match, define-etc..", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43696, "question": "&gt; Languages in which compactness is seen as virtue tend to have styles where many operations are performed on the same line (Perl being particularly notorious), whereas those which favour readability tend to have one or two.\n\nAren't compact languages typically compact in an attempt to favor readability?", "aSentId": 43701, "answer": "You've obviously never seen APL.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43704, "question": "Great Haskell talks, that you might be interested.", "aSentId": 43705, "answer": "Tangentially-related rant -\n\nI grow so weary hearing about Haskell as if it were a language with no trade-offs. There are massive tradeoffs with its laziness, quite non-trivial tradeoffs with its level of strictness, and various bits of tradeoffs in nooks and crannies throughout the rest of it. But because so much Haskell advocacy is of a religious bent, providing mere _benefits-only_ analysis, a divisive confusion often prevails over clarity.\n\nEvery time you talk about the benefits of a technology, it is also your moral obligation to realistically talk about the trade-offs that enabled those benefits. If you can't think of any trade-offs, or automatically shrug them off as 'irrelevant' - then it is time to check yourself for a religious mindset.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43706, "question": "Tangentially-related rant -\n\nI grow so weary hearing about Haskell as if it were a language with no trade-offs. There are massive tradeoffs with its laziness, quite non-trivial tradeoffs with its level of strictness, and various bits of tradeoffs in nooks and crannies throughout the rest of it. But because so much Haskell advocacy is of a religious bent, providing mere _benefits-only_ analysis, a divisive confusion often prevails over clarity.\n\nEvery time you talk about the benefits of a technology, it is also your moral obligation to realistically talk about the trade-offs that enabled those benefits. If you can't think of any trade-offs, or automatically shrug them off as 'irrelevant' - then it is time to check yourself for a religious mindset.", "aSentId": 43707, "answer": "Yeah, this is why I always try to be clear about trade offs when when advocating it. I once remember hearing a very wise person say if someone is trying to sell you technology and they can't name five gripes they have with it they clearly haven't used it enough to have an opinion worth listening too.\n\n1) It's hard to learn (though arguably rewarding) so you can't expect to be productive in it right away. Not a problem for me, but it will if you need something done right now.\n\n2) Cabal still has problems, though work done by fpcomplete on stackage means this isn't nearly as much of a problem as it was even a year or two ago.\n\n3) It can be fast, but you have to really, really know what you're doing, otherwise performance is going to be a bit unpredictable.\n\n4) Module system feels not so great. Sometimes it's hard to work out what import a symbol came from and if you can't do that it's hard to find the documentation.\n\n5) Record syntax especially with regards to name clashes.\n\nThose are my five. I still like Haskell though. Given free choice I would pick it for a webapp but probably not a game, say.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43708, "question": "Yeah, this is why I always try to be clear about trade offs when when advocating it. I once remember hearing a very wise person say if someone is trying to sell you technology and they can't name five gripes they have with it they clearly haven't used it enough to have an opinion worth listening too.\n\n1) It's hard to learn (though arguably rewarding) so you can't expect to be productive in it right away. Not a problem for me, but it will if you need something done right now.\n\n2) Cabal still has problems, though work done by fpcomplete on stackage means this isn't nearly as much of a problem as it was even a year or two ago.\n\n3) It can be fast, but you have to really, really know what you're doing, otherwise performance is going to be a bit unpredictable.\n\n4) Module system feels not so great. Sometimes it's hard to work out what import a symbol came from and if you can't do that it's hard to find the documentation.\n\n5) Record syntax especially with regards to name clashes.\n\nThose are my five. I still like Haskell though. Given free choice I would pick it for a webapp but probably not a game, say.", "aSentId": 43709, "answer": "&gt;3) It can be fast, but you have to really, really know what you're doing, otherwise performance is going to be a bit unpredictable.\n\nI feel like you're exaggerating about having to \"really, really know what you are doing.\n\n&gt;4) Module system feels not so great. Sometimes it's hard to work out what import a symbol came from and if you can't do that it's hard to find the documentation.\n\nWhen does :info symbol not work for this?\n\n&gt;5) Record syntax especially with regards to name clashes.\n\nYeah, its annoying. Tried Vinyl?\n\n", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43710, "question": "&gt;3) It can be fast, but you have to really, really know what you're doing, otherwise performance is going to be a bit unpredictable.\n\nI feel like you're exaggerating about having to \"really, really know what you are doing.\n\n&gt;4) Module system feels not so great. Sometimes it's hard to work out what import a symbol came from and if you can't do that it's hard to find the documentation.\n\nWhen does :info symbol not work for this?\n\n&gt;5) Record syntax especially with regards to name clashes.\n\nYeah, its annoying. Tried Vinyl?\n\n", "aSentId": 43711, "answer": "&gt; I feel like you're exaggerating about having to \"really, really know what you are doing.\n\nOkay, maybe just one really. But to really squeeze every drop of performance you're going to be using lots of GHC pragams, looking at the core, using unboxed types, doing loop fusions, writing GHC rewrite rules. Basically, all a long way from Learn You a Haskell. Compare to C where I feel like I at least have a better mental model of where all the bytes are going.\n\n&gt; When does :info symbol not work for this?\n\nYes, but only if the module has no type errors, otherwise you can't load it with ghci until you fix them or comment them out. Ghci also won't help you if you're browsing code on github or something. \n\nAdmittedly, this is a deficiency of many languages. The counter example is Java where you can almost always find the origin package of a symbol just by looking at the code (so long as no static imports have been used). Ironically, Java has such a strong IDE culture that this is rarely necessary to do.\n\n&gt;Yeah, its annoying. Tried Vinyl?\n\nNope, but you bet I'm googling it right now.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43706, "question": "Tangentially-related rant -\n\nI grow so weary hearing about Haskell as if it were a language with no trade-offs. There are massive tradeoffs with its laziness, quite non-trivial tradeoffs with its level of strictness, and various bits of tradeoffs in nooks and crannies throughout the rest of it. But because so much Haskell advocacy is of a religious bent, providing mere _benefits-only_ analysis, a divisive confusion often prevails over clarity.\n\nEvery time you talk about the benefits of a technology, it is also your moral obligation to realistically talk about the trade-offs that enabled those benefits. If you can't think of any trade-offs, or automatically shrug them off as 'irrelevant' - then it is time to check yourself for a religious mindset.", "aSentId": 43713, "answer": "I think discussion about Haskell simply goes to where it is interesting to go.\n\nAlso, there *are* certain benefits in Haskell which are simply better design, not trade-offs.  Most of them are common to all ML-style languages (e.g: Maybe type, sum types and safe pattern-matching in general). Some of them are unique to Haskell (type-classes vs. OO interfaces).\n\nSure, Haskell sucks at various fronts. It makes various trade-offs (laziness is a huge trade-off indeed). But do note that most talk about Haskell isn't really about laziness. It's mostly about advanced type system features, and how to utilize them to write safer code. The trade-off involved there is one of research and implementation time already spent.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43706, "question": "Tangentially-related rant -\n\nI grow so weary hearing about Haskell as if it were a language with no trade-offs. There are massive tradeoffs with its laziness, quite non-trivial tradeoffs with its level of strictness, and various bits of tradeoffs in nooks and crannies throughout the rest of it. But because so much Haskell advocacy is of a religious bent, providing mere _benefits-only_ analysis, a divisive confusion often prevails over clarity.\n\nEvery time you talk about the benefits of a technology, it is also your moral obligation to realistically talk about the trade-offs that enabled those benefits. If you can't think of any trade-offs, or automatically shrug them off as 'irrelevant' - then it is time to check yourself for a religious mindset.", "aSentId": 43715, "answer": "&gt; I grow so weary hearing about Haskell as if it were a language with no trade-offs. [...]  But because so much Haskell advocacy is of a religious bent, providing mere benefits-only analysis, a divisive confusion often prevails over clarity.\n\nPeople who are enthusiastic about something generally start by telling you the reasons why they love that thing, in part because they hope to get you interested in it and in part just because they personally are enthusiastic about it and can't help talking positively about it when given the opportunity.  None of this is a Haskell-specific thing.\n\nI doubt that any of the people making these talks are trying to outright *convert* you to become a religious follower of the Haskell cult.  In fact, I'd bet that they would be pleased if you decided that you weren't interested in Haskell at all *but decided to steal some ideas from it to put in a more popular language* so that we could all benefit from them!  For example, I doubt that anyone in Haskell community were sad to see list comprehensions \"stolen\" from them by the Python community.\n\nSo anyway, the real problem here is that these talks are not for you.  If you want more critical discussion, I would invite you to go to /r/haskell where people discuss warts and difficulties of using Haskell all the time.  Otherwise if you just don't care about Haskell at all and never will (and nobody is telling you that you have to care, only that you're missing out if you don't), that is perfectly fine too.  All you have to do, then, is simply not watch these talks, since they are clearly not for you.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43704, "question": "Great Haskell talks, that you might be interested.", "aSentId": 43717, "answer": "The one by Mark Lentczner is the best Haskell talk I've seen so far.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43719, "question": "Bish: Shell scripting with a modern feel", "aSentId": 43720, "answer": "In bish:\n\n&gt; printall(ls());\n\nIn bash:\n\n&gt; ls\n\nIt's interesting, but I actually need to get stuff done. On a side note, you should read up on the unix philosophy and why bash doesn't implement ls internally. Good luck with your project.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43721, "question": "In bish:\n\n&gt; printall(ls());\n\nIn bash:\n\n&gt; ls\n\nIt's interesting, but I actually need to get stuff done. On a side note, you should read up on the unix philosophy and why bash doesn't implement ls internally. Good luck with your project.", "aSentId": 43722, "answer": "Yes, for simple tasks like navigating the file system and listing files, you probably don't need bish. However, as your shell script grows in complexity beyond just issuing 'cd' and 'ls' commands, bish can step in and lend a syntactical hand. Things like sane function call semantics and comparison operators can make things a lot easier.\n\nThat said, I should come up with some motivating examples where bish wins in readability.\n\nEdit: also, to clarify, bish doesn't reimplement commands like ls. The builtin bish command ls is just syntactic sugar: a wrapper to make ls a language-level function call instead of a call to an external command.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43723, "question": "Yes, for simple tasks like navigating the file system and listing files, you probably don't need bish. However, as your shell script grows in complexity beyond just issuing 'cd' and 'ls' commands, bish can step in and lend a syntactical hand. Things like sane function call semantics and comparison operators can make things a lot easier.\n\nThat said, I should come up with some motivating examples where bish wins in readability.\n\nEdit: also, to clarify, bish doesn't reimplement commands like ls. The builtin bish command ls is just syntactic sugar: a wrapper to make ls a language-level function call instead of a call to an external command.", "aSentId": 43724, "answer": "&gt; as your shell script grows in complexity beyond just issuing 'cd' and 'ls' commands\n\n... then you should move to a standard language like Python with far more expressiveness and the ability to write unit tests for your code.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43721, "question": "In bish:\n\n&gt; printall(ls());\n\nIn bash:\n\n&gt; ls\n\nIt's interesting, but I actually need to get stuff done. On a side note, you should read up on the unix philosophy and why bash doesn't implement ls internally. Good luck with your project.", "aSentId": 43726, "answer": "&gt; In bish:\n\n&gt; &gt; printall(ls());\n\n&gt; In bash:\n\n&gt; &gt; ls\n\nThat's not really a good example. It's like saying that C is worse than Python based on their respective hello worlds, without delving deeper into both.\n\nI'm sure that this has it's uses for someone.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43719, "question": "Bish: Shell scripting with a modern feel", "aSentId": 43728, "answer": "Compilation back to bash is a neat idea, making it useful for writing scripts to be executed on some ancient / stripped down boxes that doesn't even have Python installed. But for typical applications, I'd prefer Python + [sh](https://github.com/amoffat/sh).", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43719, "question": "Bish: Shell scripting with a modern feel", "aSentId": 43730, "answer": "Is it object-oriented (like powershell) or text-oriented ? ", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43731, "question": "Is it object-oriented (like powershell) or text-oriented ? ", "aSentId": 43732, "answer": "It is text oriented, like bash.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43733, "question": "It is text oriented, like bash.", "aSentId": 43734, "answer": "I was really hoping that wouldn't be the case. &gt;.&lt;", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43737, "question": "Dad and The Ten Commandments of Egoless Programming", "aSentId": 43738, "answer": "&gt; Application Error\n&gt; An error occurred in the application and your page could not be \n&gt; served. Please try again in a few moments.\n&gt; \n&gt; If you are the application owner, check your logs for details.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43739, "question": "&gt; Application Error\n&gt; An error occurred in the application and your page could not be \n&gt; served. Please try again in a few moments.\n&gt; \n&gt; If you are the application owner, check your logs for details.", "aSentId": 43740, "answer": "Well, laugh learn and move on.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43739, "question": "&gt; Application Error\n&gt; An error occurred in the application and your page could not be \n&gt; served. Please try again in a few moments.\n&gt; \n&gt; If you are the application owner, check your logs for details.", "aSentId": 43742, "answer": "It's archived by http://archive.org", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43737, "question": "Dad and The Ten Commandments of Egoless Programming", "aSentId": 43744, "answer": "Good stuff.  Wisdom for the ages.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43737, "question": "Dad and The Ten Commandments of Egoless Programming", "aSentId": 43746, "answer": "Thanks! Im currently looking for material exactly like this as our team develops guidelines for pair programming and peer code reviews at work.", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43747, "question": "Thanks! Im currently looking for material exactly like this as our team develops guidelines for pair programming and peer code reviews at work.", "aSentId": 43748, "answer": "Glad I could help :)", "corpus": "reddit"},{"docID": "t5_2fwo", "qSentId": 43755, "question": "Cool story bro, now edit a few words for each industry and copy / paste it to their subreddits too!", "aSentId": 43756, "answer": "Did you read #5?", "corpus": "reddit"}]