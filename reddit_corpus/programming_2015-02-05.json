[{"docID": "t5_2fwo","qSentId": 8778,"question": "CPU Backdoors","aSentId": 8779,"answer": "Ring 0 CPU control via javascript code is the holy grail of vulnerabilities.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 8780,"question": "Ring 0 CPU control via javascript code is the holy grail of vulnerabilities.","aSentId": 8781,"answer": "Ring 0 CPU control across an air-gap is the holy grail.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 8782,"question": "Ring 0 CPU control across an air-gap is the holy grail.","aSentId": 8783,"answer": "Aren't all drivers/ kernel modules at Ring 0. Aren't they all capable of severely buggering up the system?\n\n/noexpertise","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 8784,"question": "Aren't all drivers/ kernel modules at Ring 0. Aren't they all capable of severely buggering up the system?\n\n/noexpertise","aSentId": 8785,"answer": "Not all drivers, but the most critical ones generally are. And yes, anything with Ring 0 access will potentially allow you to do serious (read: arbitrary) damage to a system.\n\n\nHowever, an air-gap in this context means \"no connection whatsoever\", i.e., a totally isolated machine. Gaining total control of a system by this means is, practically by definition, impossible. I believe /u/ibisum was being facetious. ","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 8786,"question": "Not all drivers, but the most critical ones generally are. And yes, anything with Ring 0 access will potentially allow you to do serious (read: arbitrary) damage to a system.\n\n\nHowever, an air-gap in this context means \"no connection whatsoever\", i.e., a totally isolated machine. Gaining total control of a system by this means is, practically by definition, impossible. I believe /u/ibisum was being facetious. ","aSentId": 8787,"answer": "All [linux] kernel drivers execute with kernel context.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 8784,"question": "Aren't all drivers/ kernel modules at Ring 0. Aren't they all capable of severely buggering up the system?\n\n/noexpertise","aSentId": 8789,"answer": "Except for virtualized environement, all kernel code runs at Ring 0, and yes, a bad kernel module can pwn you. Rootkits aren't called *root*kits for nothing...","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 8782,"question": "Ring 0 CPU control across an air-gap is the holy grail.","aSentId": 8791,"answer": "Indeed. :)","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 8780,"question": "Ring 0 CPU control via javascript code is the holy grail of vulnerabilities.","aSentId": 8793,"answer": "I'm a noob to all this super low level software/hardware stiff. How would I go about learning what, for example, \"ring 0 cpu control\" is (and all the other words in the article I don't understand)? Is there are standard text on CPU's?","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 8780,"question": "Ring 0 CPU control via javascript code is the holy grail of vulnerabilities.","aSentId": 8795,"answer": "Not really, because then what do you do? You don't really have pointers so you cant escape your VM jail, now your browser has kernel mode privileges but how would you get it to go and muck up the kernel stuff? Basically how do you get your JS interpreter to write to arbitrary memory or emit privileged instructions it was never compiled with?\n\nEDIT: Thinking about this more, maybe you could have a string with the native code and the backdoor instruction could be a string manipulator (CMPS) that ring 0 executes it.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 8796,"question": "Not really, because then what do you do? You don't really have pointers so you cant escape your VM jail, now your browser has kernel mode privileges but how would you get it to go and muck up the kernel stuff? Basically how do you get your JS interpreter to write to arbitrary memory or emit privileged instructions it was never compiled with?\n\nEDIT: Thinking about this more, maybe you could have a string with the native code and the backdoor instruction could be a string manipulator (CMPS) that ring 0 executes it.","aSentId": 8797,"answer": "You might have to find another vulnerability in the browser.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 8796,"question": "Not really, because then what do you do? You don't really have pointers so you cant escape your VM jail, now your browser has kernel mode privileges but how would you get it to go and muck up the kernel stuff? Basically how do you get your JS interpreter to write to arbitrary memory or emit privileged instructions it was never compiled with?\n\nEDIT: Thinking about this more, maybe you could have a string with the native code and the backdoor instruction could be a string manipulator (CMPS) that ring 0 executes it.","aSentId": 8799,"answer": "Having Ring 0 control means that the entirety of RAM (and anything else addressable, really) is accessible to you, read and write. *Who cares* about the VM jail -- you just smuggled in a cellphone and have your best friend God on speed dial.\n\n-E- That is, the implication is that you would already have a way to call privileged instructions or read/write arbitrary RAM somehow, probably through an exploit in the implementation of something or other. (Ever seen a GB Pokemon speedrun? You get the idea.) You can get the browser or even the *kernel* to do whatever you want simply by modifying the running image on the fly. Breaking out of the VM jail at that point is really only for convenience.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 8800,"question": "Having Ring 0 control means that the entirety of RAM (and anything else addressable, really) is accessible to you, read and write. *Who cares* about the VM jail -- you just smuggled in a cellphone and have your best friend God on speed dial.\n\n-E- That is, the implication is that you would already have a way to call privileged instructions or read/write arbitrary RAM somehow, probably through an exploit in the implementation of something or other. (Ever seen a GB Pokemon speedrun? You get the idea.) You can get the browser or even the *kernel* to do whatever you want simply by modifying the running image on the fly. Breaking out of the VM jail at that point is really only for convenience.","aSentId": 8801,"answer": "&gt;Who cares about the VM jail\n\nI don't think you understand what a VM is, your code is interpreted and cannot perform arbitrary actions not allowed by the interpreter no matter what protection level you have. ( without an exploit, but that's a different problem not related to the backdoor instruction )\n\n","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 8796,"question": "Not really, because then what do you do? You don't really have pointers so you cant escape your VM jail, now your browser has kernel mode privileges but how would you get it to go and muck up the kernel stuff? Basically how do you get your JS interpreter to write to arbitrary memory or emit privileged instructions it was never compiled with?\n\nEDIT: Thinking about this more, maybe you could have a string with the native code and the backdoor instruction could be a string manipulator (CMPS) that ring 0 executes it.","aSentId": 8803,"answer": "I would argue that my gripe is the new attack vector which if someone finds an exploit for then the results will be total system control. But I know very little about systems on such a low level, so I could just be totally talking out my ass.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 8804,"question": "I would argue that my gripe is the new attack vector which if someone finds an exploit for then the results will be total system control. But I know very little about systems on such a low level, so I could just be totally talking out my ass.","aSentId": 8805,"answer": "A rule of thumb: If you think you might be talking out of your ass, you probably are talking out of your ass.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 8807,"question": "Depends on the vulnerability... \n\nThere was a claim above that Intel AMT accepted signed java over LAN, so you could have an exploited payload in a javascript file. Then suppose there was a browser JS vm vulnerability that allowed buffer overrun where you could directly call the network stack. Use the JS vm vulnerability to write the payload to LAN and address it to localhost.\n\nAll this is hypothetical, but it helps illustrate that almost anything is possible if the right breadcrumbs of maliciousness or ignorance are left.","aSentId": 8808,"answer": "What java has to do with Javascript?","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 8809,"question": "What java has to do with Javascript?","aSentId": 8810,"answer": "That whole post is a trainwreck. A CPU that accepts Java bytecode?\n\nAnd then some hand waving to JS. wtf.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 8811,"question": "That whole post is a trainwreck. A CPU that accepts Java bytecode?\n\nAnd then some hand waving to JS. wtf.","aSentId": 8812,"answer": "Not CPU. All current and a great many previous Intel chipsets incorporate an ARM \"Management Engine\" coprocessor into the north bridge. *Even if the computer is soft-off, i.e. S5, CPU and RAM UNPOWERED*, this processor is still active. This processor has unfettered access to, among other things, RAM and the Ethernet controller; if you can take control of it, no amount of software protection on the system can stop you. \n\nAccording to one reverser, the image it runs normally has a (possibly hardware-assisted?) Java runtime and will accept and run a signed Java bytecode image.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 8813,"question": "Not CPU. All current and a great many previous Intel chipsets incorporate an ARM \"Management Engine\" coprocessor into the north bridge. *Even if the computer is soft-off, i.e. S5, CPU and RAM UNPOWERED*, this processor is still active. This processor has unfettered access to, among other things, RAM and the Ethernet controller; if you can take control of it, no amount of software protection on the system can stop you. \n\nAccording to one reverser, the image it runs normally has a (possibly hardware-assisted?) Java runtime and will accept and run a signed Java bytecode image.","aSentId": 8814,"answer": "Hm hm hm hm hm hm hm. Every 6 months or so I dive into these topics. The last time was an Intel vPro feature that was up there with remote attenuation (for TPMs) that could allow someone to make kernel checks, push a black box of code into your CPU that is run without your knowledge or consent or ability to inspect.\n\nSounds like that's some hints about how it works, or another big lever they have.\n\nWe shouldn't be surprised. At least, as a software dev, I'm not. Half the shit i looked into today was just new hooks that we're exposing for troubleshooting and debugging so I want to give them the benefit of the doubt. But I also know better.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 8815,"question": "Hm hm hm hm hm hm hm. Every 6 months or so I dive into these topics. The last time was an Intel vPro feature that was up there with remote attenuation (for TPMs) that could allow someone to make kernel checks, push a black box of code into your CPU that is run without your knowledge or consent or ability to inspect.\n\nSounds like that's some hints about how it works, or another big lever they have.\n\nWe shouldn't be surprised. At least, as a software dev, I'm not. Half the shit i looked into today was just new hooks that we're exposing for troubleshooting and debugging so I want to give them the benefit of the doubt. But I also know better.","aSentId": 8816,"answer": "For what it's worth, the reverser's description of the security framework and checks in place made it sound completely unassailable so long as Intel has their crypto ducks in a row -- but as the Xbox 360 proved, theoretically perfect security is only as good as the quality of the hardware it's running on...\n\nThese are interesting times. Interesting times indeed.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 8817,"question": "For what it's worth, the reverser's description of the security framework and checks in place made it sound completely unassailable so long as Intel has their crypto ducks in a row -- but as the Xbox 360 proved, theoretically perfect security is only as good as the quality of the hardware it's running on...\n\nThese are interesting times. Interesting times indeed.","aSentId": 8818,"answer": "&gt;but as the Xbox 360 proved, theoretically perfect security is only as good as the quality of the hardware it's running on\n\n:) I fucking love the RGH. I hope that some day I'm smart enough to design and implement something like that.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 8809,"question": "What java has to do with Javascript?","aSentId": 8820,"answer": "It doesn't. He's saying that you could theoretically use a Javascript vulnerability that allows you to make arbitrary connnections, then use that to connect directly to the AMT coprocessor on the system running the browser, and deliver a Java payload to it.\n\nAlthough at that point, whether the payload is Java or not doesn't matter...","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 8823,"question": "Javascript is fucking retarded.  ","aSentId": 8824,"answer": "Clap clap for you. ","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 8825,"question": "Clap clap for you. ","aSentId": 8826,"answer": "Only if 90% of fortune 500's were as smart as me. ","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 8823,"question": "Javascript is fucking retarded.  ","aSentId": 8828,"answer": "JavaScript's mental capabilities are irrelevant to this discussion.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 8829,"question": "JavaScript's mental capabilities are irrelevant to this discussion.","aSentId": 8830,"answer": "I'm talking about its sex life. ","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 8823,"question": "Javascript is fucking retarded.  ","aSentId": 8832,"answer": "That's not true! It has extremely easy way of implementing classes in a very concise and readable manner.....\n\n.... ahh I couldn't keep my face straight!","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 8833,"question": "That's not true! It has extremely easy way of implementing classes in a very concise and readable manner.....\n\n.... ahh I couldn't keep my face straight!","aSentId": 8834,"answer": "Odd thing to pick on when that's one of the major features of es6","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 8835,"question": "Odd thing to pick on when that's one of the major features of es6","aSentId": 8836,"answer": "what the... man you blink for a few years and they change everything","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 8778,"question": "CPU Backdoors","aSentId": 8838,"answer": "You should check Intel Active Management Technology (AMT) which is part of  Intel Management Engine. AFIK it works even when PC is turned off (S5) and has access to LAN card, it runs signed java code. Putting backdoor on it will be brutal.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 8839,"question": "You should check Intel Active Management Technology (AMT) which is part of  Intel Management Engine. AFIK it works even when PC is turned off (S5) and has access to LAN card, it runs signed java code. Putting backdoor on it will be brutal.","aSentId": 8840,"answer": "Yes it is. --The NSA","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 8839,"question": "You should check Intel Active Management Technology (AMT) which is part of  Intel Management Engine. AFIK it works even when PC is turned off (S5) and has access to LAN card, it runs signed java code. Putting backdoor on it will be brutal.","aSentId": 8842,"answer": "How hard would it be for them to hide some flash memory on the CPU to store stuff?","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 8843,"question": "How hard would it be for them to hide some flash memory on the CPU to store stuff?","aSentId": 8844,"answer": "Not so easy I imagine. There are multiple people and organizations x-raying CPUs for various reasons. I suppose flash memory could be spotted this way, and people would certainly question what it's used for.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 8845,"question": "Not so easy I imagine. There are multiple people and organizations x-raying CPUs for various reasons. I suppose flash memory could be spotted this way, and people would certainly question what it's used for.","aSentId": 8846,"answer": "Like third ARM core on Hard disk controller which you can disable and disk still works normally?\n&gt;After some research, I found out that yes, the chip indeed seems to have three cores. There's two Feroceons, which are quite powerful arm9-like cores, and a Cortex-M3 core, which is a bit smaller, more microcontroller-ish core. Some more playing around (and later research) indicating the controllers all had different functions:\n&gt;\n&gt;\n&gt;-Feroceon 1 handles the physical reading and writing from/to the hard disk platters\n&gt;\n&gt;-Feroceon 2 handles the SATA-interface\n&gt;\n&gt;-Feroceon 2 also handles the cache and LBA to CHS translation\n&gt;\n&gt;-The Cortex-M3 handles... nothing? I could stop it and still have all hard disk functions.\n\n[source](http://spritesmods.com/?art=hddhack&amp;page=3)\nYou can even install Linux on Disk controller maybe something else too. :)","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 8847,"question": "Like third ARM core on Hard disk controller which you can disable and disk still works normally?\n&gt;After some research, I found out that yes, the chip indeed seems to have three cores. There's two Feroceons, which are quite powerful arm9-like cores, and a Cortex-M3 core, which is a bit smaller, more microcontroller-ish core. Some more playing around (and later research) indicating the controllers all had different functions:\n&gt;\n&gt;\n&gt;-Feroceon 1 handles the physical reading and writing from/to the hard disk platters\n&gt;\n&gt;-Feroceon 2 handles the SATA-interface\n&gt;\n&gt;-Feroceon 2 also handles the cache and LBA to CHS translation\n&gt;\n&gt;-The Cortex-M3 handles... nothing? I could stop it and still have all hard disk functions.\n\n[source](http://spritesmods.com/?art=hddhack&amp;page=3)\nYou can even install Linux on Disk controller maybe something else too. :)","aSentId": 8848,"answer": "To be fair, the Cortex-M3 is small enough that they might have just chucked it on the silicon just because, well, they had a license for it and there was spare floorplan. Then they might have turned out to not need it.\n\nBut these days, microcontrollers are very capable. An apparently unused microcontroller is still a real concern.\n\nIf it had program memory attached to it somehow, I'd *really* like to see what it was /actually/ doing.\n\nBTW, that project was the thing that *really* made me scared of my hardware. *Woah.* ","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 8849,"question": "To be fair, the Cortex-M3 is small enough that they might have just chucked it on the silicon just because, well, they had a license for it and there was spare floorplan. Then they might have turned out to not need it.\n\nBut these days, microcontrollers are very capable. An apparently unused microcontroller is still a real concern.\n\nIf it had program memory attached to it somehow, I'd *really* like to see what it was /actually/ doing.\n\nBTW, that project was the thing that *really* made me scared of my hardware. *Woah.* ","aSentId": 8850,"answer": "&gt; To be fair, the Cortex-M3 is small enough that they might have just chucked it on the silicon just because, well, they had a license for it and there was spare floorplan. Then they might have turned out to not need it.\n\ndo you think that they might use the same board for multiple models, and this particular model had no use for that particular CPU but that other models do?","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 8851,"question": "&gt; To be fair, the Cortex-M3 is small enough that they might have just chucked it on the silicon just because, well, they had a license for it and there was spare floorplan. Then they might have turned out to not need it.\n\ndo you think that they might use the same board for multiple models, and this particular model had no use for that particular CPU but that other models do?","aSentId": 8852,"answer": "Certainly plausible!","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 8853,"question": "Certainly plausible!","aSentId": 8854,"answer": "I'm a little surprised that you need that much computing power in a mere controller.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 8855,"question": "I'm a little surprised that you need that much computing power in a mere controller.","aSentId": 8856,"answer": "The whole disk controller?\n\nHard drives do a lot of stuff these days. Wear levelling, caching, etc.\n\nThe Cortex-M3 isn't going to add much in 'computing power' but would have been good for real-time control stuff (like, directly controlling motors). Those M-series ARM microcontrollers are hella fast though, for a uC. But I don't miss the old 8051 microcontrollers at all :P (Got a fondness for AVRs though).","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 8849,"question": "To be fair, the Cortex-M3 is small enough that they might have just chucked it on the silicon just because, well, they had a license for it and there was spare floorplan. Then they might have turned out to not need it.\n\nBut these days, microcontrollers are very capable. An apparently unused microcontroller is still a real concern.\n\nIf it had program memory attached to it somehow, I'd *really* like to see what it was /actually/ doing.\n\nBTW, that project was the thing that *really* made me scared of my hardware. *Woah.* ","aSentId": 8858,"answer": "Fyi use * around a word(s) in reddit to cause /italics/ *like this*","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 8859,"question": "Fyi use * around a word(s) in reddit to cause /italics/ *like this*","aSentId": 8860,"answer": "Thankyou. Yes, I used them on a few words, but used /.../ to try to convey a different tone to the italics used earlier in the sentence.\n\nStill, I do appreciate the advice :)","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 8861,"question": "Thankyou. Yes, I used them on a few words, but used /.../ to try to convey a different tone to the italics used earlier in the sentence.\n\nStill, I do appreciate the advice :)","aSentId": 8862,"answer": "Yes I guess that is kind of like *normal italics* /SERIOUS ITALICS/\n\n:-)","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 8845,"question": "Not so easy I imagine. There are multiple people and organizations x-raying CPUs for various reasons. I suppose flash memory could be spotted this way, and people would certainly question what it's used for.","aSentId": 8864,"answer": "Isn't there already writable memory for microcode updates in modern CPUs ?","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 8843,"question": "How hard would it be for them to hide some flash memory on the CPU to store stuff?","aSentId": 8866,"answer": "not hard","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 8839,"question": "You should check Intel Active Management Technology (AMT) which is part of  Intel Management Engine. AFIK it works even when PC is turned off (S5) and has access to LAN card, it runs signed java code. Putting backdoor on it will be brutal.","aSentId": 8868,"answer": "There are already POC's out there for that.\n\nThey can even host a web server.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 8778,"question": "CPU Backdoors","aSentId": 8872,"answer": "&gt; Would it be possible to store and dump AES-NI keys? It\u2019s probably infeasible to sneak flash memory onto a chip without anyone noticing, but modern chips have logic analyzer facilities that let you store and dump data. However, access to those is through some secret mechanism and it\u2019s not clear how you\u2019d even get access to binaries that would let you reverse engineer their operation.\n\nCan cpu microcode make assumptions about the software stack?  ie. that there is an ip connection and it can try to send a udp packet?\n\nYou can think this is really hard for cpu microcode, but its pretty easy for a motherboard bridge controller that handles traffic to and from the cpu ram and integrated network chip.  Its even easier than worrying about the OS network architecture, in that it only needs to detect ip network mode, and create packets the OS won't know about.\n\naes-ni is a recent cpu accelerated function, and it would make it easy for a motherboard bridge controller to detect.  To hide sneaky packet transmission better, (perhaps in loopback attempts to detect sneaky packets) the consumer network controller could eat special packets, or hide them from OS, as it retransmits them to the NSA.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 8873,"question": "&gt; Would it be possible to store and dump AES-NI keys? It\u2019s probably infeasible to sneak flash memory onto a chip without anyone noticing, but modern chips have logic analyzer facilities that let you store and dump data. However, access to those is through some secret mechanism and it\u2019s not clear how you\u2019d even get access to binaries that would let you reverse engineer their operation.\n\nCan cpu microcode make assumptions about the software stack?  ie. that there is an ip connection and it can try to send a udp packet?\n\nYou can think this is really hard for cpu microcode, but its pretty easy for a motherboard bridge controller that handles traffic to and from the cpu ram and integrated network chip.  Its even easier than worrying about the OS network architecture, in that it only needs to detect ip network mode, and create packets the OS won't know about.\n\naes-ni is a recent cpu accelerated function, and it would make it easy for a motherboard bridge controller to detect.  To hide sneaky packet transmission better, (perhaps in loopback attempts to detect sneaky packets) the consumer network controller could eat special packets, or hide them from OS, as it retransmits them to the NSA.","aSentId": 8874,"answer": "Why not just own the isp's routers?","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 8875,"question": "Why not just own the isp's routers?","aSentId": 8876,"answer": "An ISP's routers won't get you secret keys or passphrases on the endpoints.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 8875,"question": "Why not just own the isp's routers?","aSentId": 8878,"answer": "Because the ISPs routers cant see the text that you echoed into gpg from the terminal?\n\n","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 8875,"question": "Why not just own the isp's routers?","aSentId": 8880,"answer": "the attack would be to send AES keys secretly to our masters.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 8882,"question": "I think that a back door can be placed in practically any hardware or software system.  The biggest problem with back doors for the product developer is the possibility of discovery and exploitation.  Backdoors are essentially secured solely by obscurity.  For widely used, highly scrutinized products the probability that the backdoor will be discovered through de-engineering, accidental discovery, a leak, and etc.  Now with software backdoors can be installed and uninstalled with a simple software update.  When it comes to hardware backdoors if the backdoor is discovered the only way to correct the problem is to do a full recall. \n\nWith regard to CPU backdoors sure its possible, but I cannot imagine any CPU manufacturer taking the risk.  I mean could you imagine what would happen if there was a CPU backdoor discovered in say Intel's Haswell's architecture.  I would imagine it would be the end of Intel.  ","aSentId": 8883,"answer": "I used to work in design at Intel. CPU Design teams are fairly large and if a backdoor were intentionally inserted as part of the Verilog source, the odds of an internal leak getting it outside are way too high. There are internal security teams and white-box \"hackathons\" where these things are actively searched for. The place one really needs to be concerned is the microcode because it is, by design, patchable after manufacturing. However we knew this and patching was protected by multiple layers of security including digital signing and obscurity. You really need to know the nitty-gritty internals of the product to write binary microcode and each time the architecture changes, the microcode also changes a little in order to take advantage of it. I didn't work in security but I did have to take security classes and after the StuxNet attack, that was held up as an example of what we absolutely cannot let through. My assumption was that the goal was to make an exploit attack on the hardware so expensive to engineer that the software was deemed a much more attractive target.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 8884,"question": "I used to work in design at Intel. CPU Design teams are fairly large and if a backdoor were intentionally inserted as part of the Verilog source, the odds of an internal leak getting it outside are way too high. There are internal security teams and white-box \"hackathons\" where these things are actively searched for. The place one really needs to be concerned is the microcode because it is, by design, patchable after manufacturing. However we knew this and patching was protected by multiple layers of security including digital signing and obscurity. You really need to know the nitty-gritty internals of the product to write binary microcode and each time the architecture changes, the microcode also changes a little in order to take advantage of it. I didn't work in security but I did have to take security classes and after the StuxNet attack, that was held up as an example of what we absolutely cannot let through. My assumption was that the goal was to make an exploit attack on the hardware so expensive to engineer that the software was deemed a much more attractive target.","aSentId": 8885,"answer": "You should do a programming ama, working at Intel and actually designing the chips we all use on a day to day basis sounds incredibly interesting","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 8886,"question": "You should do a programming ama, working at Intel and actually designing the chips we all use on a day to day basis sounds incredibly interesting","aSentId": 8887,"answer": "Thanks. I don't work there anymore and the circumstances surrounding my departure have left me rather bitter with them (officially, I departed by volunteering to take the separation package offered to everyone in the product group; a nice way of saying I \"took one for the team\"). Anyway, I scanned that comment about 10 times to make sure I wasn't leaking anything sensitive before saving it (I'm pretty sure it's no big secret that Intel microcode is patchable since Intel publishes which errata are fixed by which microcode patches). I'm not sure an AMA would be of much value since in an abundance of caution I would not post anything which I thought might be trade secret.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 8888,"question": "Thanks. I don't work there anymore and the circumstances surrounding my departure have left me rather bitter with them (officially, I departed by volunteering to take the separation package offered to everyone in the product group; a nice way of saying I \"took one for the team\"). Anyway, I scanned that comment about 10 times to make sure I wasn't leaking anything sensitive before saving it (I'm pretty sure it's no big secret that Intel microcode is patchable since Intel publishes which errata are fixed by which microcode patches). I'm not sure an AMA would be of much value since in an abundance of caution I would not post anything which I thought might be trade secret.","aSentId": 8889,"answer": "Well, if design teams are large...\n\nTOR up, new account and you're good to go!\n\nUnless you still view it as immoral which is up to you.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 8890,"question": "Well, if design teams are large...\n\nTOR up, new account and you're good to go!\n\nUnless you still view it as immoral which is up to you.","aSentId": 8891,"answer": "I'm fairly confident I've posted enough information that someone who worked close with me could unmask me just reading this thread. More than that though, I signed a confidentiality agreement and they paid me a large sum when I left. I have no desire to damage them by exposing trade secrets. I guess that falls under the \"immoral / unethical\" bin.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 8892,"question": "I'm fairly confident I've posted enough information that someone who worked close with me could unmask me just reading this thread. More than that though, I signed a confidentiality agreement and they paid me a large sum when I left. I have no desire to damage them by exposing trade secrets. I guess that falls under the \"immoral / unethical\" bin.","aSentId": 8893,"answer": "I am glad that you say this. I really disliked that posters implication that it wasn't immoral to reveal trade secrets. Also, there are a lot of non-trade secret things that people might find interesting. What it was like to work for Intel, what the atmosphere was like, what their general opinion of ARM was etc.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 8894,"question": "I am glad that you say this. I really disliked that posters implication that it wasn't immoral to reveal trade secrets. Also, there are a lot of non-trade secret things that people might find interesting. What it was like to work for Intel, what the atmosphere was like, what their general opinion of ARM was etc.","aSentId": 8895,"answer": "&gt; What it was like to work for Intel, what the atmosphere was like\n\nWhich might be another reason why I wouldn't be a great candidate for that AMA. Generally it isn't that interesting to hear from someone who is bitter.\n\nI fell into a perfect storm where: my career growth was held back by my new-to-managing manager; upper management blocked my transfer to a better role because I was critical to the project; executive management offered a buyout so that they could externally hire somebody to fill the position I was blocked from taking.\n\nNobody acted maliciously, the corporate culture just has a fundamental flaw that allows that sort of thing to happen unchecked. On the up side, I got a lot of free lunches when I announced that I was taking the buyout by people who thought maybe there was some way to fix it... so at least there was that!\n\nSo... um... yeah, bitter.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 8894,"question": "I am glad that you say this. I really disliked that posters implication that it wasn't immoral to reveal trade secrets. Also, there are a lot of non-trade secret things that people might find interesting. What it was like to work for Intel, what the atmosphere was like, what their general opinion of ARM was etc.","aSentId": 8897,"answer": "&gt; I really disliked that posters implication that it wasn't immoral to reveal trade secrets.\n\nSee, I think trade secrets themselves are immoral because they hold back the progress we could achieve as a distributed effort. I do understand their utility in a competitive market, though, and the morality of a competitive market is for another discussion.\n\nI really doubt there's much /u/unpythonic could really say that would impact upon Intel's huge profits anyhow. Or rather, what they *would* say; if you dumped out all your knowledge about, idk, what Intel are doing to minimise cache timings in their next upcoming chip, that might allow AMD or an ARM vendor to get more performance. The process of how development works might not.\n\nLike I said, it's *up to them* to use *their discretion* on such things (because morality is subjective).","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 8898,"question": "&gt; I really disliked that posters implication that it wasn't immoral to reveal trade secrets.\n\nSee, I think trade secrets themselves are immoral because they hold back the progress we could achieve as a distributed effort. I do understand their utility in a competitive market, though, and the morality of a competitive market is for another discussion.\n\nI really doubt there's much /u/unpythonic could really say that would impact upon Intel's huge profits anyhow. Or rather, what they *would* say; if you dumped out all your knowledge about, idk, what Intel are doing to minimise cache timings in their next upcoming chip, that might allow AMD or an ARM vendor to get more performance. The process of how development works might not.\n\nLike I said, it's *up to them* to use *their discretion* on such things (because morality is subjective).","aSentId": 8899,"answer": "The problem is that Intel invested a lot of money into developing those trade secrets. When I started working there the figure I heard was that the average cost per head to the department I was working in was $150K/year (salary, benefits, perks, taxes, etc.). I assume it is even higher now. If a team of 8 guys spent 2 years coming up with Cache-Super-Coherency-for-Great-Justice hardware design, Intel has over $3 million sunk into that effort but if it gives them a 5% boost over the competition, then investors see that as money well spent.\n\nThere is nothing preventing ARM, AMD and Intel from all getting together in a trade-secret-sharing deal, but historically larger players always lose that game (partially because for some reason larger players seem to be less efficient when it comes to R&amp;D. I've always marveled at the way ARM and AMD were able to pump out good designs, sometimes even better designs, with fewer people. I know some of it has to do with HLS and highly synthesizable components, but that just doesn't seem to explain the entire gap).","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 8898,"question": "&gt; I really disliked that posters implication that it wasn't immoral to reveal trade secrets.\n\nSee, I think trade secrets themselves are immoral because they hold back the progress we could achieve as a distributed effort. I do understand their utility in a competitive market, though, and the morality of a competitive market is for another discussion.\n\nI really doubt there's much /u/unpythonic could really say that would impact upon Intel's huge profits anyhow. Or rather, what they *would* say; if you dumped out all your knowledge about, idk, what Intel are doing to minimise cache timings in their next upcoming chip, that might allow AMD or an ARM vendor to get more performance. The process of how development works might not.\n\nLike I said, it's *up to them* to use *their discretion* on such things (because morality is subjective).","aSentId": 8901,"answer": "Regardless of your opinion to trade secrets, he accepted a lot of money upon leaving the company based on keeping those secrets.\n\nIf I paid you $1000 to keep a secret, and you told someone that secret then yes, that is immoral.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 8902,"question": "Regardless of your opinion to trade secrets, he accepted a lot of money upon leaving the company based on keeping those secrets.\n\nIf I paid you $1000 to keep a secret, and you told someone that secret then yes, that is immoral.","aSentId": 8903,"answer": "Oh, if that's specifically why he was paid money, then I suppose so. I thought the money was to do with leaving the company, y'know to incentivise 'voluntary' redundancy.\n\nIf you paid me money to contribute my labour, and the NDA was just attached to that, and shitty management held me back and/or caused me to lose that job, well... frankly I don't care. Probably wouldn't drop a bombshell that would cause my [ex]coworkers to lose their jobs, and I wouldn't snuggle up to the competition/overtly engage in espionage, but I wouldn't stress so much about whether the brand of coffee used is a trade secret.\n\nBut... **like I said**, it's unpythonic's decision. They're more loyal and principled about it than I would be.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 8888,"question": "Thanks. I don't work there anymore and the circumstances surrounding my departure have left me rather bitter with them (officially, I departed by volunteering to take the separation package offered to everyone in the product group; a nice way of saying I \"took one for the team\"). Anyway, I scanned that comment about 10 times to make sure I wasn't leaking anything sensitive before saving it (I'm pretty sure it's no big secret that Intel microcode is patchable since Intel publishes which errata are fixed by which microcode patches). I'm not sure an AMA would be of much value since in an abundance of caution I would not post anything which I thought might be trade secret.","aSentId": 8905,"answer": "Yeah, don't bother, you're boring.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 8886,"question": "You should do a programming ama, working at Intel and actually designing the chips we all use on a day to day basis sounds incredibly interesting","aSentId": 8907,"answer": "Agreed! ","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 8884,"question": "I used to work in design at Intel. CPU Design teams are fairly large and if a backdoor were intentionally inserted as part of the Verilog source, the odds of an internal leak getting it outside are way too high. There are internal security teams and white-box \"hackathons\" where these things are actively searched for. The place one really needs to be concerned is the microcode because it is, by design, patchable after manufacturing. However we knew this and patching was protected by multiple layers of security including digital signing and obscurity. You really need to know the nitty-gritty internals of the product to write binary microcode and each time the architecture changes, the microcode also changes a little in order to take advantage of it. I didn't work in security but I did have to take security classes and after the StuxNet attack, that was held up as an example of what we absolutely cannot let through. My assumption was that the goal was to make an exploit attack on the hardware so expensive to engineer that the software was deemed a much more attractive target.","aSentId": 8909,"answer": "I write BIOS for a company that uses Intel processors. With secure firmware update and even secure boot becoming more and more prevalent, landing a backdoor on a CPU would be an extremely difficult task. \n","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 8910,"question": "I write BIOS for a company that uses Intel processors. With secure firmware update and even secure boot becoming more and more prevalent, landing a backdoor on a CPU would be an extremely difficult task. \n","aSentId": 8911,"answer": "It's only as secure as the algorithms responsible for encrypting the firmware, which goes back to software crypto which the NSA has been breaking and/or poisoning for decades.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 8912,"question": "It's only as secure as the algorithms responsible for encrypting the firmware, which goes back to software crypto which the NSA has been breaking and/or poisoning for decades.","aSentId": 8913,"answer": "Isn't the big deal the security of PRNG? I would think there'd major concern of backdoors in hardware RNGs.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 8914,"question": "Isn't the big deal the security of PRNG? I would think there'd major concern of backdoors in hardware RNGs.","aSentId": 8915,"answer": "I don't know anyone who really trusts the output of a HW RNG. From my experience if you are writing code that needs one, you aren't in a position to trust *anyone*, so the RN generated will be just one facet that will be added to other sources of entropy. This way, even if the HW RNG was compromised by an error (or the NSA, etc.), your program/code isn't suddenly naked in Times Square.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 8884,"question": "I used to work in design at Intel. CPU Design teams are fairly large and if a backdoor were intentionally inserted as part of the Verilog source, the odds of an internal leak getting it outside are way too high. There are internal security teams and white-box \"hackathons\" where these things are actively searched for. The place one really needs to be concerned is the microcode because it is, by design, patchable after manufacturing. However we knew this and patching was protected by multiple layers of security including digital signing and obscurity. You really need to know the nitty-gritty internals of the product to write binary microcode and each time the architecture changes, the microcode also changes a little in order to take advantage of it. I didn't work in security but I did have to take security classes and after the StuxNet attack, that was held up as an example of what we absolutely cannot let through. My assumption was that the goal was to make an exploit attack on the hardware so expensive to engineer that the software was deemed a much more attractive target.","aSentId": 8917,"answer": "NSA exploits the BIOS to stay persistent after OS reinstalls.  If they can do that, they can load custom microcode.  Intel microcode is AES encrypted, so the public has no visibility into the changes.  There are significant risks here, and with the NSA's track record, I think them seeing the microcode as a worthwhile target are significant.  They are well funded and could place moles inside Intel.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 8918,"question": "NSA exploits the BIOS to stay persistent after OS reinstalls.  If they can do that, they can load custom microcode.  Intel microcode is AES encrypted, so the public has no visibility into the changes.  There are significant risks here, and with the NSA's track record, I think them seeing the microcode as a worthwhile target are significant.  They are well funded and could place moles inside Intel.","aSentId": 8919,"answer": "&gt; NSA exploits the BIOS to stay persistent after OS reinstalls. If they can do that, they can load custom microcode.\n\nBeing able to re-flash part of the BIOS is the easiest part in such an attack since the BIOS has to be flashable via software so that motherboard OEMs can do in-field repair. That hole has long since been analyzed.\n\nIn theory the NSA / US Government could just issue a FISA court warrant for the files that contain the keys along with a gag order to prevent Intel from talking about it. Most, if not all, of the design team would never know and to the best of my knowledge the company policy was to fight its legal battles in the court system, not the media.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 8918,"question": "NSA exploits the BIOS to stay persistent after OS reinstalls.  If they can do that, they can load custom microcode.  Intel microcode is AES encrypted, so the public has no visibility into the changes.  There are significant risks here, and with the NSA's track record, I think them seeing the microcode as a worthwhile target are significant.  They are well funded and could place moles inside Intel.","aSentId": 8921,"answer": "Disturbingly enough, I can find no fault with your assumptions. This seems far too realistic especially considering that the NSA is likely one of the only entities that has already practiced brute forcing AES. ","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 8922,"question": "Disturbingly enough, I can find no fault with your assumptions. This seems far too realistic especially considering that the NSA is likely one of the only entities that has already practiced brute forcing AES. ","aSentId": 8923,"answer": "I think brute-forcing AES stronger than 96-bits is unlikely, but they have other mechanisms to gather the keys (moles, blackmail, etc.).","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 8924,"question": "I think brute-forcing AES stronger than 96-bits is unlikely, but they have other mechanisms to gather the keys (moles, blackmail, etc.).","aSentId": 8925,"answer": "I didn't state it explicitly, but yes, precisely. ","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 8924,"question": "I think brute-forcing AES stronger than 96-bits is unlikely, but they have other mechanisms to gather the keys (moles, blackmail, etc.).","aSentId": 8927,"answer": "&gt; (moles, blackmail, etc.)\n\nOr a National Security Letter...","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 8924,"question": "I think brute-forcing AES stronger than 96-bits is unlikely, but they have other mechanisms to gather the keys (moles, blackmail, etc.).","aSentId": 8929,"answer": "This was thought of as well. The solution is pretty old school - you need at least two such assets.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 8930,"question": "This was thought of as well. The solution is pretty old school - you need at least two such assets.","aSentId": 8931,"answer": "Glad they are at least taking this seriously.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 8918,"question": "NSA exploits the BIOS to stay persistent after OS reinstalls.  If they can do that, they can load custom microcode.  Intel microcode is AES encrypted, so the public has no visibility into the changes.  There are significant risks here, and with the NSA's track record, I think them seeing the microcode as a worthwhile target are significant.  They are well funded and could place moles inside Intel.","aSentId": 8933,"answer": "&gt; could place moles inside Intel\n\nThey wouldn't even need to. They are state supported, they may just need to ask nicely.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 8935,"question": "How long ago? Were you around when the ME stuff was getting rolling?\n\nIt was recently discovered that there's an always-on ARM processor in recent Intel chipsets and it has direct hardware access to some pretty scary things. The whole netsec world is quite nervous about it. The consequences of an exploit to take control of this processor getting out into the wild... I can't even begin to imagine.","aSentId": 8936,"answer": "My first assignment when I joined many years ago was maintaining and enhancing a tool that tested the ME's processor. I'm fairly familiar with how it was implemented circa Bearlake time frame, I'm not sure if it has changed much since then. It did have a tremendous amount of hazard potential as it had nearly unfettered access to the entire system. The idea was that this would be a premium feature for enterprise customers so that their IT departments could manage and upgrade your system by remote even if it was in S3.\n\nI see from Wikipedia that an exploit was created on Bearlake by mapping the ME-private physical RAM into the CPU visible space. That is pretty disappointing. I thought that the MCH was supposed to protect that RAM otherwise any PCI device could potentially DMA to or from it. I guess something broke down there.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 8882,"question": "I think that a back door can be placed in practically any hardware or software system.  The biggest problem with back doors for the product developer is the possibility of discovery and exploitation.  Backdoors are essentially secured solely by obscurity.  For widely used, highly scrutinized products the probability that the backdoor will be discovered through de-engineering, accidental discovery, a leak, and etc.  Now with software backdoors can be installed and uninstalled with a simple software update.  When it comes to hardware backdoors if the backdoor is discovered the only way to correct the problem is to do a full recall. \n\nWith regard to CPU backdoors sure its possible, but I cannot imagine any CPU manufacturer taking the risk.  I mean could you imagine what would happen if there was a CPU backdoor discovered in say Intel's Haswell's architecture.  I would imagine it would be the end of Intel.  ","aSentId": 8939,"answer": "Could you imagine what would happen if there was a backdoor discovered in all the most popular operating systems and websites?","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 8940,"question": "Could you imagine what would happen if there was a backdoor discovered in all the most popular operating systems and websites?","aSentId": 8941,"answer": "Exactly what happened after the NSA leaks. People would pretend to care for 3 weeks.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 8942,"question": "Exactly what happened after the NSA leaks. People would pretend to care for 3 weeks.","aSentId": 8943,"answer": "And then whole China would move to their own chips.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 8944,"question": "And then whole China would move to their own chips.","aSentId": 8945,"answer": "And then every bank has Chinese security consultants. ","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 8940,"question": "Could you imagine what would happen if there was a backdoor discovered in all the most popular operating systems and websites?","aSentId": 8947,"answer": "Consumers probably wouldn't care.\n\nOn the other hand, if private companies found out their hardware was backdoored then they'd freak out. In many areas of commerce there are tens, if not hundreds of companies offering similar products, so bad publicity can really hurt.\n\nAs an example, look at RSA. I can't imagine they've been having a great time since the whole Dual_EC_DRBG scandal.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 8948,"question": "Consumers probably wouldn't care.\n\nOn the other hand, if private companies found out their hardware was backdoored then they'd freak out. In many areas of commerce there are tens, if not hundreds of companies offering similar products, so bad publicity can really hurt.\n\nAs an example, look at RSA. I can't imagine they've been having a great time since the whole Dual_EC_DRBG scandal.","aSentId": 8949,"answer": "I think there's a serious problem with CPU manufactures here. On the x86 side you've got Intel and AMD, two US companies which are relevant to the market. If both of those companies were compromised there'd be no other manufacturer to switch to - except maybe VIA (but their CPU designs are quite a bit lacking)","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 8882,"question": "I think that a back door can be placed in practically any hardware or software system.  The biggest problem with back doors for the product developer is the possibility of discovery and exploitation.  Backdoors are essentially secured solely by obscurity.  For widely used, highly scrutinized products the probability that the backdoor will be discovered through de-engineering, accidental discovery, a leak, and etc.  Now with software backdoors can be installed and uninstalled with a simple software update.  When it comes to hardware backdoors if the backdoor is discovered the only way to correct the problem is to do a full recall. \n\nWith regard to CPU backdoors sure its possible, but I cannot imagine any CPU manufacturer taking the risk.  I mean could you imagine what would happen if there was a CPU backdoor discovered in say Intel's Haswell's architecture.  I would imagine it would be the end of Intel.  ","aSentId": 8951,"answer": "There would probably be a whole lot of people who would not care. Unless the news media ran with it.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 8952,"question": "There would probably be a whole lot of people who would not care. Unless the news media ran with it.","aSentId": 8953,"answer": "I'd think media definitely would run with it, and make it sound x20 worse. ","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 8954,"question": "I'd think media definitely would run with it, and make it sound x20 worse. ","aSentId": 8955,"answer": "\u2014A big computer manufacturer, Intel, has been preloading your everyday chips with viruses! This means that you, the viewers at home, may very probably be right now infected with a cybernetic virus!\n\n\u2014Now, John, do we have any information about how contagious are these viruses? Are the government scientists preparing a cybernetic vaccine to prevent the spread of these viruses?\n\n\u2014We don't have any information as of now, but here with us is an anti-vaccination advocate to shed some light on this case\n\n\u2014I don't care if other computers get sick because of my computer! Because my computer is PURE, and if god intends for our computers to have viruses, well, that's what it is!","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 8956,"question": "\u2014A big computer manufacturer, Intel, has been preloading your everyday chips with viruses! This means that you, the viewers at home, may very probably be right now infected with a cybernetic virus!\n\n\u2014Now, John, do we have any information about how contagious are these viruses? Are the government scientists preparing a cybernetic vaccine to prevent the spread of these viruses?\n\n\u2014We don't have any information as of now, but here with us is an anti-vaccination advocate to shed some light on this case\n\n\u2014I don't care if other computers get sick because of my computer! Because my computer is PURE, and if god intends for our computers to have viruses, well, that's what it is!","aSentId": 8957,"answer": "\"Who is this Four Chan?!?!\"","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 8958,"question": "\"Who is this Four Chan?!?!\"","aSentId": 8959,"answer": "Jackie Chan's brother","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 8954,"question": "I'd think media definitely would run with it, and make it sound x20 worse. ","aSentId": 8961,"answer": "And people still wouldn't care.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 8954,"question": "I'd think media definitely would run with it, and make it sound x20 worse. ","aSentId": 8963,"answer": "Not if the NSA tells them not to. Which it will.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 8952,"question": "There would probably be a whole lot of people who would not care. Unless the news media ran with it.","aSentId": 8965,"answer": "I dunno, there's a huge difference between favoring Intel CPUs on compilers and actually writing a backdoor. I'm a huge fan of Intel, but if they'd put a backdoor on my CPU, I would certainly be done with them right away.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 8967,"question": "CPU Backdoor Slots 3.","aSentId": 8968,"answer": "CPU Backdoor Slots 3 makes Cache Capers 4 look like Naughty NUMA 8!","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 8969,"question": "CPU Backdoor Slots 3 makes Cache Capers 4 look like Naughty NUMA 8!","aSentId": 8970,"answer": "If I'll ever find a cheap SGI Origin to add to my SGI collection it certainly will be named NaughtyNUMA8. I love that name!","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 8972,"question": "I don't see how you would keep this kind of functionality secret from the thousands of engineers it takes to develop CPUs.  If there were purpose built back doors I would expect that information to very quickly get leaked, considering the resources it takes to develop and validate modern day CPUs - and you can bet at least one of those engineers would have a serious objection to this kind of feature getting implemented by design.  Oversight and incompetence is another issue, such as in the AMD case with failing to implement signing and check sums on their microcode, but purpose built back doors is another issue entirely. ","aSentId": 8973,"answer": "Threats of violence could sort out that little problem, I guess?\n","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 8975,"question": "Open hardware should be considered just as important, if not more, than open source software.","aSentId": 8976,"answer": "hardware is the foundation for software. all the Free Software n the world won't do you good if you have a locked-down computer with a malicous TPM and a backdoored CPU","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 8978,"question": "This topic comes up from time to time but the question I have to ask is -- why worry about it? What can you *do* about it?\n\nI view it as more of a nation-state problem. For example, a veiled threat* to hold over the head of China (or whoever). Don't go to war with the USA, because we can remotely activate the cleverly placed killswitch on all your Intel CPUs, and you guys can't make your own CPU's for shit, so fuck you! Have fun with Loongson!\n\nI think at this point you would have to be pretty naive to think that there aren't hardware backdoors in all modern architecture, but you would have to be equally naive to think that it's capable of mass spyware. What's it going to do? Send a secret WiFi signal? Send hundreds of megabytes of instruction dumps over my ethernet?\n\nIt's not practical. This kind of shit would be noticed (the data movement, if not the actual backdoor)\n\nCompare this to people just *voluntarily giving up* their privacy. Your cellphone phones home automatically all the time. People know this, and still carry them around everywhere they go. They will allow applications to see their location, and it is widely known that three-letter-agencies can remotely turn on the microphone of a cellphone to eavesdrop on criminals. \n\nPractical backdoors for spying exist at the software level, not the hardware level. \n\nAnybody who plays with FPGA's regularly will at some point think about the possibility of hardware backdoors, but *there is nothing you can do about it*. When you come to the realization that the quickest way to reverse engineer a CPU/FPGA/etc is by looking at it with an x-ray microscope, that's when it's time to stop thinking about it.\n\n*--I mean veiled threat in the sense that it would be Something They Had To Worry About. Even if the killswitch was not actually there, they would have to assume that it COULD be there, and thus it's an Issue.","aSentId": 8979,"answer": "&gt; What can you do about it?\n\nOpen. Like intel was the only company of the planet.\n\nAlso, China, huh? The manufacturers of these processors?\n\nYou, in fact, are naive. Software backdoors have a basic problem, they are software. You don't spy on people who voluntarily give up their privacy, why would you?","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 8980,"question": "&gt; What can you do about it?\n\nOpen. Like intel was the only company of the planet.\n\nAlso, China, huh? The manufacturers of these processors?\n\nYou, in fact, are naive. Software backdoors have a basic problem, they are software. You don't spy on people who voluntarily give up their privacy, why would you?","aSentId": 8981,"answer": "Have you worked in semiconductor fab? \n\nBecause I have. It's not a discipline where manufacturing it gives you the ability to recreate it, or automagically design the next new version.\n\nPeople seem to really underestimate how many steps are involved, and supply chains and ridiculous amounts of tooling, engineering, maintenance, etc. is involved. It's insane. \n\nSecurity/sovereignty/immunity is one of the primary motivators for big government R&amp;D into Loongson.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 8982,"question": "Have you worked in semiconductor fab? \n\nBecause I have. It's not a discipline where manufacturing it gives you the ability to recreate it, or automagically design the next new version.\n\nPeople seem to really underestimate how many steps are involved, and supply chains and ridiculous amounts of tooling, engineering, maintenance, etc. is involved. It's insane. \n\nSecurity/sovereignty/immunity is one of the primary motivators for big government R&amp;D into Loongson.","aSentId": 8983,"answer": "Where did you work, may I ask?\n\nI can assume it wouldn't be that hard to ingere in the components on the manufacturing level. China already showed that they are capable of great things.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 8984,"question": "Where did you work, may I ask?\n\nI can assume it wouldn't be that hard to ingere in the components on the manufacturing level. China already showed that they are capable of great things.","aSentId": 8985,"answer": "While it's \"easy\" in principle to add malicious hardware to an existing hardware design without being obvious (there are competitions for this), the \"easy\" part is at a higher level, such as the writing VHDL/Verilog design stage, not the figuring-out-where-transistors-will-be stage.\n\nIn principle, if you were a contract fab, you could add malicious bits to your customers' designs, but you'd be relying on the hope that none of your customers ever has a chip fail that they tear down and look at the die - if you know what your chip should look like, and the real thing doesn't match, it's pretty easy to tell something has gone wrong. The shitshow that would erupt if a contract fab (TSMC, Samsung, etc) was modifying their customers' designs would easily put them out of business.\n\nOf course, if you're Intel, you don't contract out the fabrication of your main product lines. To compromise an Intel processor, you'd need to 1) design in the vulnerability from the start, which means Intel itself has to be onboard. \"Possible\", but the incredible impracticality of keeping it secret effectively rules it out 2) compromise a couple people involved in the design, and hope that no one else in the design teams finds out. Once again, \"possible\", but very impractical 3) compromise the manufacturing process and hope that none of Intel's automated design tools/failure analysis/boundary scan testing/software testing/whatever detects that the chips they've built are different from what they designed.\n\nThe only way to \"easily\" hide a malicious modification of a processor would be to modify parts of the design itself and make it look like a minor design error or (even better) a manufacturing flaw. Of course, a manufacturing flaw that manifests itself in all of your products looks awfully suspicious... I say \"easily\" because you'd basically have to reverse-engineer the entire processor down to the transistor level to understand it well enough to make the tiny changes you'd need.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 8986,"question": "While it's \"easy\" in principle to add malicious hardware to an existing hardware design without being obvious (there are competitions for this), the \"easy\" part is at a higher level, such as the writing VHDL/Verilog design stage, not the figuring-out-where-transistors-will-be stage.\n\nIn principle, if you were a contract fab, you could add malicious bits to your customers' designs, but you'd be relying on the hope that none of your customers ever has a chip fail that they tear down and look at the die - if you know what your chip should look like, and the real thing doesn't match, it's pretty easy to tell something has gone wrong. The shitshow that would erupt if a contract fab (TSMC, Samsung, etc) was modifying their customers' designs would easily put them out of business.\n\nOf course, if you're Intel, you don't contract out the fabrication of your main product lines. To compromise an Intel processor, you'd need to 1) design in the vulnerability from the start, which means Intel itself has to be onboard. \"Possible\", but the incredible impracticality of keeping it secret effectively rules it out 2) compromise a couple people involved in the design, and hope that no one else in the design teams finds out. Once again, \"possible\", but very impractical 3) compromise the manufacturing process and hope that none of Intel's automated design tools/failure analysis/boundary scan testing/software testing/whatever detects that the chips they've built are different from what they designed.\n\nThe only way to \"easily\" hide a malicious modification of a processor would be to modify parts of the design itself and make it look like a minor design error or (even better) a manufacturing flaw. Of course, a manufacturing flaw that manifests itself in all of your products looks awfully suspicious... I say \"easily\" because you'd basically have to reverse-engineer the entire processor down to the transistor level to understand it well enough to make the tiny changes you'd need.","aSentId": 8987,"answer": "Well, yes, pretty much. I'm talking more of a possibility. I'm not sure if I'd be able to find a good use case for that now.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 8988,"question": "Well, yes, pretty much. I'm talking more of a possibility. I'm not sure if I'd be able to find a good use case for that now.","aSentId": 8989,"answer": "Sure, it's a possibility. You can think of it as Nuclear Option. \n\nOnce that card gets played, there is no going back. So even if you were to assume that there was a scary backdoor in all your CPUs (which is a reasonable assumption to make if you are a paranoid nation-state beholden to Intel), you could also reasonably assume that this card wouldn't ever get played unless the shit was hitting the fan in a world-wide fashion. \n\nEvery major ally of the USA would have a metric shit-fit if the card was played, because everybody, and I do mean everybody, relies on CPUs for critical national security applications. It would be paramount to publicly admitting that the entire world could essentially just up-and-break at any moment -- and not only that, but that it had been designed to be so.\n\nSo this basically puts it in the realm of requiring a catastrophe to present itself. \n\nThis kind of thing is not at all unprecedented as far as technology as a whole goes. There are high end pieces of capital, like incredibly accurate/precise CNC machines that are coded with GPS to stop working if they are moved around. This is so that if they get stolen by some terrorist organization with the intent to make bombs or nuclear reactor parts or whatever the fuck, that the machines are rendered essentially useless. \n\nAnyways, again, it's pointless for you and me to worry about this kind of shit with the backdoors on CPUs. It's entirely plausible that there are backdoors kicking around -- but how plausible is it for them to actually be *used* even if they were there?","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 8990,"question": "Sure, it's a possibility. You can think of it as Nuclear Option. \n\nOnce that card gets played, there is no going back. So even if you were to assume that there was a scary backdoor in all your CPUs (which is a reasonable assumption to make if you are a paranoid nation-state beholden to Intel), you could also reasonably assume that this card wouldn't ever get played unless the shit was hitting the fan in a world-wide fashion. \n\nEvery major ally of the USA would have a metric shit-fit if the card was played, because everybody, and I do mean everybody, relies on CPUs for critical national security applications. It would be paramount to publicly admitting that the entire world could essentially just up-and-break at any moment -- and not only that, but that it had been designed to be so.\n\nSo this basically puts it in the realm of requiring a catastrophe to present itself. \n\nThis kind of thing is not at all unprecedented as far as technology as a whole goes. There are high end pieces of capital, like incredibly accurate/precise CNC machines that are coded with GPS to stop working if they are moved around. This is so that if they get stolen by some terrorist organization with the intent to make bombs or nuclear reactor parts or whatever the fuck, that the machines are rendered essentially useless. \n\nAnyways, again, it's pointless for you and me to worry about this kind of shit with the backdoors on CPUs. It's entirely plausible that there are backdoors kicking around -- but how plausible is it for them to actually be *used* even if they were there?","aSentId": 8991,"answer": "If you think that back doors in a cpu is a no going back kind of situation then just look back at the not so old events.\nHow plausible these events were before?\n\nAssuming the worst is a reasonable tactic when knowing zero.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 8992,"question": "If you think that back doors in a cpu is a no going back kind of situation then just look back at the not so old events.\nHow plausible these events were before?\n\nAssuming the worst is a reasonable tactic when knowing zero.","aSentId": 8993,"answer": "I think *usage* of a back door in a CPU is a no-going-back event. The mere *existence* of such a thing is just politics. \n\nThat's why it's kind of being called the \"nuclear option.\"","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 8986,"question": "While it's \"easy\" in principle to add malicious hardware to an existing hardware design without being obvious (there are competitions for this), the \"easy\" part is at a higher level, such as the writing VHDL/Verilog design stage, not the figuring-out-where-transistors-will-be stage.\n\nIn principle, if you were a contract fab, you could add malicious bits to your customers' designs, but you'd be relying on the hope that none of your customers ever has a chip fail that they tear down and look at the die - if you know what your chip should look like, and the real thing doesn't match, it's pretty easy to tell something has gone wrong. The shitshow that would erupt if a contract fab (TSMC, Samsung, etc) was modifying their customers' designs would easily put them out of business.\n\nOf course, if you're Intel, you don't contract out the fabrication of your main product lines. To compromise an Intel processor, you'd need to 1) design in the vulnerability from the start, which means Intel itself has to be onboard. \"Possible\", but the incredible impracticality of keeping it secret effectively rules it out 2) compromise a couple people involved in the design, and hope that no one else in the design teams finds out. Once again, \"possible\", but very impractical 3) compromise the manufacturing process and hope that none of Intel's automated design tools/failure analysis/boundary scan testing/software testing/whatever detects that the chips they've built are different from what they designed.\n\nThe only way to \"easily\" hide a malicious modification of a processor would be to modify parts of the design itself and make it look like a minor design error or (even better) a manufacturing flaw. Of course, a manufacturing flaw that manifests itself in all of your products looks awfully suspicious... I say \"easily\" because you'd basically have to reverse-engineer the entire processor down to the transistor level to understand it well enough to make the tiny changes you'd need.","aSentId": 8995,"answer": "I am by no means qualified to give input here, but aren't you missing the possibility of the fab company messing with the doping levels of certain transistors? It seems like if that is a possible avenue for attack, it would be extremely hard to detect. Naturally, looking at the die with an x-ray wouldn't reveal anything.\n\nAlso, what's it like working for a fab company? How does exactly one end up doing such a thing? ","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 8996,"question": "I am by no means qualified to give input here, but aren't you missing the possibility of the fab company messing with the doping levels of certain transistors? It seems like if that is a possible avenue for attack, it would be extremely hard to detect. Naturally, looking at the die with an x-ray wouldn't reveal anything.\n\nAlso, what's it like working for a fab company? How does exactly one end up doing such a thing? ","aSentId": 8997,"answer": "&gt;but aren't you missing the possibility of the fab company messing with the doping levels of certain transistors?\n\nIt would just end up breaking shit. The only way you could sneak shit at this level is if you *also* had access to the entire top level design of the CPU. Even if you did, tweaking things this far in would again most likely just break things.\n\nIt's too public of a step.\n\n&gt;Also, what's it like working for a fab company?\n\nIt's incredibly hard work. Everything breaks constantly. Constantly constantly constantly. \n\n&gt;How does exactly one end up doing such a thing? \n\nYou can end up at a semiconductor fab if you are a technical and hands on person. Tons of process and systems engineers are needed. Background in physics and chemistry helps a lot. \n\nNot a career path I'd recommend unless you really enjoy overtime.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 8999,"question": "My question: why do it on the CPU instead of, say, connecting it to a bus on the motherboard?  A little bus magic and you could do pretty much anything without the need to compromise the CPU at all.  And you could use pretty much the same attack vector (just using memory load/store instead of floating-point arithmetic).  Do that and you'd have a much bigger playground in which to hide eastereggs, so to speak.","aSentId": 9000,"answer": "With the CPU you've really put yourself in a good place. CPUs are hugely complex, even compared to the rest of a motherboard all together. In addition to being hugely complex, the design is largely hidden from people who could potentially audit the design. With motherboards you could feasibly trace buses and routes and discover a backdoor chip or design. With a CPU, really the only feasible way to discover it is to fuzz the design (which could take eons) or be inside the company and see the actual circuit that's being printed into silicon (not just the design on paper). Most of the reverse engineering that goes on for CPUs is at a macro-scale, where the layout and architecture is analyzed. Nobody (that I know of) has really taken apart a full, modern, consumer cpu circuit and seen how it works -- which is a stark contrast to even closed source, obfuscated software, which can be debugged or disassembled and studied.\n\nSure, it'd probably be cheaper to implement a bus-control, but how many motherboard producers are there? Hundreds; probably a few dozen consumer grade?. There aren't nearly as many consumer-grade CPU producers, so keeping it quiet is much easier.\n\nIt's a bit of a \"nuclear option\" so keeping the secret that you have a backdoor into most consumer devices would be very tightly kept. You wouldn't want one of dozens of companies to spill the beans or have their board disassembled to find the issue.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 9001,"question": "With the CPU you've really put yourself in a good place. CPUs are hugely complex, even compared to the rest of a motherboard all together. In addition to being hugely complex, the design is largely hidden from people who could potentially audit the design. With motherboards you could feasibly trace buses and routes and discover a backdoor chip or design. With a CPU, really the only feasible way to discover it is to fuzz the design (which could take eons) or be inside the company and see the actual circuit that's being printed into silicon (not just the design on paper). Most of the reverse engineering that goes on for CPUs is at a macro-scale, where the layout and architecture is analyzed. Nobody (that I know of) has really taken apart a full, modern, consumer cpu circuit and seen how it works -- which is a stark contrast to even closed source, obfuscated software, which can be debugged or disassembled and studied.\n\nSure, it'd probably be cheaper to implement a bus-control, but how many motherboard producers are there? Hundreds; probably a few dozen consumer grade?. There aren't nearly as many consumer-grade CPU producers, so keeping it quiet is much easier.\n\nIt's a bit of a \"nuclear option\" so keeping the secret that you have a backdoor into most consumer devices would be very tightly kept. You wouldn't want one of dozens of companies to spill the beans or have their board disassembled to find the issue.","aSentId": 9002,"answer": "It's nowhere near a modern CPU, but I was pretty impressed with the Visual6502 project where they reversed engineered the 6502 down to the last gate by exposing the die and taking lots of pictures.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 9004,"question": "Is there auditable hardware akin to a raspberry pi? Cause that would be cool if my tinfoil hat could be satisfied. ","aSentId": 9005,"answer": "There are some \"open source (design)\" CPUs that are low-end laptop quality. There's not really a good way of establishing whether or not the CPU is built to that source and not a malicious source. ","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 9009,"question": "Some people say the Backdoor is just the Frontdoor of the back.","aSentId": 9010,"answer": "That's what she said.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 9012,"question": "manufacturers should have to prove there are no backdoors","aSentId": 9013,"answer": "How do you imagine that? In the usual way of proving as we see it now? That is, saying there aren't backdoors and then, years later one finds out there were.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 9014,"question": "How do you imagine that? In the usual way of proving as we see it now? That is, saying there aren't backdoors and then, years later one finds out there were.","aSentId": 9015,"answer": "there are lots of ways but all of them require insight and transparency - no CPU manufacturer today is willing to do that. There are how ever. CPUs you can download the asic/fpga vhdl code for (ERC32 and LEON which are Sparc v5 based) there has been so many eyes on that code I can guarantee no back doors, proving that was the code that synthesized the chip is trivial, as a type of certification. of course you have to certify the whole way through the manufacturing process","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 9016,"question": "there are lots of ways but all of them require insight and transparency - no CPU manufacturer today is willing to do that. There are how ever. CPUs you can download the asic/fpga vhdl code for (ERC32 and LEON which are Sparc v5 based) there has been so many eyes on that code I can guarantee no back doors, proving that was the code that synthesized the chip is trivial, as a type of certification. of course you have to certify the whole way through the manufacturing process","aSentId": 9017,"answer": "&gt; there has been so many eyes on that code I can guarantee no back doors\n\nHeartbleed begs to differ. Open source does not mean more secure.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 9016,"question": "there are lots of ways but all of them require insight and transparency - no CPU manufacturer today is willing to do that. There are how ever. CPUs you can download the asic/fpga vhdl code for (ERC32 and LEON which are Sparc v5 based) there has been so many eyes on that code I can guarantee no back doors, proving that was the code that synthesized the chip is trivial, as a type of certification. of course you have to certify the whole way through the manufacturing process","aSentId": 9019,"answer": "&gt; there has been so many eyes on that code I can guarantee no back doors\n\nBecause we all know that Linux is totally bug-free with all the attention it gets... /s\n\nEven if you could somehow guarantee that the VHDL/Verilog for the processor was backdoor/defect-free, that tells you nothing about the security of the actual, physical processor you'd be using. You need to perfectly trust the VHDL/Verilog-&gt;bitstream(for FPGAs)/masks(for ASICs) generation process - not just the source for that program, but the actual binary code, too, which means you need to trust the compiler that produced that and so on...\n\nYou then need to trust that the physical hardware itself, either the raw FPGA+configuration ROM+configuration process or the fabricated processor die, is exactly what you expect from your initial VHDL/Verilog.\n\nIn short, to produce perfectly trust-able hardware, you would need to:\n\n- Make your own fab\n- Make your own design tools\n- Make your own processor designs\n\nOh, and by the way, you'd have to publicly document all of this so extensively that any college graduate could put it together from raw materials.\n\nIt would cost millions, probably billions of dollars to put everything together, and since you're completely transparent, you'll never be able to make back your investment because some fab in China/Russia/whatever will just snag all your hard work and make it themselves.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 9020,"question": "&gt; there has been so many eyes on that code I can guarantee no back doors\n\nBecause we all know that Linux is totally bug-free with all the attention it gets... /s\n\nEven if you could somehow guarantee that the VHDL/Verilog for the processor was backdoor/defect-free, that tells you nothing about the security of the actual, physical processor you'd be using. You need to perfectly trust the VHDL/Verilog-&gt;bitstream(for FPGAs)/masks(for ASICs) generation process - not just the source for that program, but the actual binary code, too, which means you need to trust the compiler that produced that and so on...\n\nYou then need to trust that the physical hardware itself, either the raw FPGA+configuration ROM+configuration process or the fabricated processor die, is exactly what you expect from your initial VHDL/Verilog.\n\nIn short, to produce perfectly trust-able hardware, you would need to:\n\n- Make your own fab\n- Make your own design tools\n- Make your own processor designs\n\nOh, and by the way, you'd have to publicly document all of this so extensively that any college graduate could put it together from raw materials.\n\nIt would cost millions, probably billions of dollars to put everything together, and since you're completely transparent, you'll never be able to make back your investment because some fab in China/Russia/whatever will just snag all your hard work and make it themselves.","aSentId": 9021,"answer": "&gt; but the actual binary code, too, which means you need to trust the compiler that produced that and so on...\n\nThis make me think of \"Reflections on Trusting Trust\", by Ken Thompson http://cm.bell-labs.com/who/ken/trust.html\n\n\n&gt;The moral is obvious. You can't trust code that you did not totally create yourself. (Especially code from companies that employ people like me.) No amount of source-level verification or scrutiny will protect you from using untrusted code. In demonstrating the possibility of this kind of attack, I picked on the C compiler. I could have picked on any program-handling program such as an assembler, a loader, or even hardware microcode. As the level of program gets lower, these bugs will be harder and harder to detect. A well installed microcode bug will be almost impossible to detect.\n\n","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 9020,"question": "&gt; there has been so many eyes on that code I can guarantee no back doors\n\nBecause we all know that Linux is totally bug-free with all the attention it gets... /s\n\nEven if you could somehow guarantee that the VHDL/Verilog for the processor was backdoor/defect-free, that tells you nothing about the security of the actual, physical processor you'd be using. You need to perfectly trust the VHDL/Verilog-&gt;bitstream(for FPGAs)/masks(for ASICs) generation process - not just the source for that program, but the actual binary code, too, which means you need to trust the compiler that produced that and so on...\n\nYou then need to trust that the physical hardware itself, either the raw FPGA+configuration ROM+configuration process or the fabricated processor die, is exactly what you expect from your initial VHDL/Verilog.\n\nIn short, to produce perfectly trust-able hardware, you would need to:\n\n- Make your own fab\n- Make your own design tools\n- Make your own processor designs\n\nOh, and by the way, you'd have to publicly document all of this so extensively that any college graduate could put it together from raw materials.\n\nIt would cost millions, probably billions of dollars to put everything together, and since you're completely transparent, you'll never be able to make back your investment because some fab in China/Russia/whatever will just snag all your hard work and make it themselves.","aSentId": 9023,"answer": "That is a bit of a defeatist attitude in my opinion - of course it's possible, anything is possible with enough effort. We have these things called computers today, they are fantastic things and very fast at doing things. Especially checking things. It is possible to construct independent QA systems that check each step of the manufacturing process. ","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 9024,"question": "That is a bit of a defeatist attitude in my opinion - of course it's possible, anything is possible with enough effort. We have these things called computers today, they are fantastic things and very fast at doing things. Especially checking things. It is possible to construct independent QA systems that check each step of the manufacturing process. ","aSentId": 9025,"answer": "Just to give you a window into the magnitude of this problem....\n\nThe Altera VHDL/Verilog compiler is like *10 gigabytes.* It is not open source. \n\nSo even if you had an open source design, you would have to reverse engineer a 10gb compiler just to ensure that thing hasn't been automatically fucked with.\n\n&gt;they are fantastic things and very fast at doing things. Especially checking things. It is possible to construct independent QA systems that check each step of the manufacturing process. \n\nYou need to learn more, experience more. Doing a full simulation on an ASIC design is a ridiculously expensive process. You can't even do a full simulation tbh because there's just too many possibilities. You do a \"good enough\" simulation then you start doing test runs!\n\nYou're talking about a process that costs millions of dollars, even tens of millions of dollars, to carry out even on a small scale.\n\nMaking ASICs is serious fucking business. \n\nYou know the most ironic part about all of this? You're talking about how great \"computers\" are at \"checking things\" when the fastest way to reverse engineer a chip would be to actually simply look at it with an X-ray microscope. And even doing that, it would take fucking foooorrreevvveerr......","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 9026,"question": "Just to give you a window into the magnitude of this problem....\n\nThe Altera VHDL/Verilog compiler is like *10 gigabytes.* It is not open source. \n\nSo even if you had an open source design, you would have to reverse engineer a 10gb compiler just to ensure that thing hasn't been automatically fucked with.\n\n&gt;they are fantastic things and very fast at doing things. Especially checking things. It is possible to construct independent QA systems that check each step of the manufacturing process. \n\nYou need to learn more, experience more. Doing a full simulation on an ASIC design is a ridiculously expensive process. You can't even do a full simulation tbh because there's just too many possibilities. You do a \"good enough\" simulation then you start doing test runs!\n\nYou're talking about a process that costs millions of dollars, even tens of millions of dollars, to carry out even on a small scale.\n\nMaking ASICs is serious fucking business. \n\nYou know the most ironic part about all of this? You're talking about how great \"computers\" are at \"checking things\" when the fastest way to reverse engineer a chip would be to actually simply look at it with an X-ray microscope. And even doing that, it would take fucking foooorrreevvveerr......","aSentId": 9027,"answer": "You could look at it with an xray microscope and check that things are as they should be (although as someone stated there are ways around that) you could also create the design to be self checking.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 9028,"question": "You could look at it with an xray microscope and check that things are as they should be (although as someone stated there are ways around that) you could also create the design to be self checking.","aSentId": 9029,"answer": "&gt;You could look at it with an xray microscope \n\nYou're repeating what I *just explained to you* and it would be *hard as fuck* to do that. That's why, when explaining it to you, it was in a tongue-in-cheek fashion.\n\nYou're talking about millions upon millions of dollars. This isn't some \"OK NO PROBLEMO\" thing.\n\nYou clearly have no fucking clue what the hell you are talking about.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 9030,"question": "&gt;You could look at it with an xray microscope \n\nYou're repeating what I *just explained to you* and it would be *hard as fuck* to do that. That's why, when explaining it to you, it was in a tongue-in-cheek fashion.\n\nYou're talking about millions upon millions of dollars. This isn't some \"OK NO PROBLEMO\" thing.\n\nYou clearly have no fucking clue what the hell you are talking about.","aSentId": 9031,"answer": "looking at your post history you are a troll who likes to make posts about things you know nothing about.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 9024,"question": "That is a bit of a defeatist attitude in my opinion - of course it's possible, anything is possible with enough effort. We have these things called computers today, they are fantastic things and very fast at doing things. Especially checking things. It is possible to construct independent QA systems that check each step of the manufacturing process. ","aSentId": 9033,"answer": "I think you underestimate the difficulty of independent QA.\n\n- Verifying your processor design at the VHDL/Verilog stage is the *easiest* part. \"Easiest\", of course, because even with decades of work, major software projects still encounter severe bugs all the time. Verified chip designs, like verified software, tend to be small and feature-limited.\n\n- Verifying the design tools is \"easy\" in the sense that it's just software, but hard in that you need high-performance design tools that work with the hardware you're using, that are also open source so you can go through them. You also, of course, have to ensure that the masks/bitstream produced by your copy of the design tools match the masks/bitstream that the fab uses (remember if you don't already trust the fab, you have to assume that they could be malicious at every level)\n\n- Finally, once you've actually made your hardware, you need to examine a significant number of them to make sure they match your design. Of course, it has to be impossible for the fab to know which ones you'll examine, since they could simply make a backdoor-free version when you check... Checking that the real chip matches the design involves careful recapping of the die, followed by stripping the die apart to reverse engineer the masks. Oh, and of course, if you don't have all the equipment to do this QA, you have to trust the QA providers themselves... If you think this seems far-fetched, then consider that if Adobe can detect when you have a photo of a banknote in Photoshop, then it hardly seems far-fetched that a compromised QA provider could detect one of their backdoors and hide it from you.\n\nAt the end of the day, you realize that it's almost *easier* to build everything yourself from the ground up, where you can actually trust in advance, rather than always having to question and double-check.\n\nThat's why there are trusted fabs - the NSA, for example, has its own fab capacity for some parts, it's why Intel and IBM keep fab capacity in the US for other customers to use as trusted production. Because it's so hard to meaningfully verify afterwards, especially if you're dealing with a powerful nation-state actor^*, it's so much easier to spend the money to trust the fabrication chain itself.\n\n^* Let's be honest here, the only reason anyone cares about this issue is because the NSA or a comparable actor. They're the only actors who could subvert the existing fab chains as is, and unless you do everything yourself, it's almost impossible to prevent them from subverting an independent QA.\n\nUnfortunately for this issue, \"possible with enough effort\" is meaningless when you're competing with actors whose specific job is to make *possible with enough effort* -&gt; **done**","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 9024,"question": "That is a bit of a defeatist attitude in my opinion - of course it's possible, anything is possible with enough effort. We have these things called computers today, they are fantastic things and very fast at doing things. Especially checking things. It is possible to construct independent QA systems that check each step of the manufacturing process. ","aSentId": 9035,"answer": "Even with automation, independent testing is an expensive process. You're basically asking some organization to duplicate the engineering time and infrastructure that Intel / AMD / whathaveyou have invested for testing purposes.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 9016,"question": "there are lots of ways but all of them require insight and transparency - no CPU manufacturer today is willing to do that. There are how ever. CPUs you can download the asic/fpga vhdl code for (ERC32 and LEON which are Sparc v5 based) there has been so many eyes on that code I can guarantee no back doors, proving that was the code that synthesized the chip is trivial, as a type of certification. of course you have to certify the whole way through the manufacturing process","aSentId": 9037,"answer": "I've heard about some open-source hardware.\n\nWasn't raspberry pi using an open gpu? I think I've read that.\n\nI agree, that's the way to go. It shouldn't be the producer who'd prove things, it should be people who would have ways available to do that.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 9038,"question": "I've heard about some open-source hardware.\n\nWasn't raspberry pi using an open gpu? I think I've read that.\n\nI agree, that's the way to go. It shouldn't be the producer who'd prove things, it should be people who would have ways available to do that.","aSentId": 9039,"answer": "But even if the design of the hardware is open-source, how do you verify that the physical hardware is produced with exactly that design without any alterations?\n\nIn a hypothetical future where anyone can print out their own CPU the idea is great, right now it's not really adding any security.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 9040,"question": "But even if the design of the hardware is open-source, how do you verify that the physical hardware is produced with exactly that design without any alterations?\n\nIn a hypothetical future where anyone can print out their own CPU the idea is great, right now it's not really adding any security.","aSentId": 9041,"answer": "One can always publish the whole design and a whole documentation of it. And if we're at it, one can also create stuff with others, that means not acting against progress in tech.\n\nManufacturing should take place not only in China in my opinion and not only because of this reason.\n\nI'm not saying that open source software is ultimately enough, but it definitely is something one can do, we have choices.\n\nEven with software you also trust the auditors, the creators, you can get something else than expected etc.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 9012,"question": "manufacturers should have to prove there are no backdoors","aSentId": 9045,"answer": "Can't prove a negative in a sufficiently complicated system.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 9012,"question": "manufacturers should have to prove there are no backdoors","aSentId": 9047,"answer": "It's hard to prove a negative...","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 9048,"question": "It's hard to prove a negative...","aSentId": 9049,"answer": "see my comment above. It is great to be downvoted for a factual comment - I have worked in the space grade CPU industry for 10 years. I personally don't think it is a big ask to require manufactures to give a guarantee that they have not knowingly added backdoors. ","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 9050,"question": "see my comment above. It is great to be downvoted for a factual comment - I have worked in the space grade CPU industry for 10 years. I personally don't think it is a big ask to require manufactures to give a guarantee that they have not knowingly added backdoors. ","aSentId": 9051,"answer": "It seems unlikely that a manufacturer would add a backdoor, then openly admit it. More probably they would lie and give the guarantee, so all manufacturers would say that they don't have backdoors and you'd have no more information in the end. What you need is a chain of trust and control of all the manufacturing process.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 9050,"question": "see my comment above. It is great to be downvoted for a factual comment - I have worked in the space grade CPU industry for 10 years. I personally don't think it is a big ask to require manufactures to give a guarantee that they have not knowingly added backdoors. ","aSentId": 9053,"answer": "The way you formulated yourself does not make that clear. My point is that *proving* - as in providing a recipe for a test a competent customer etc. can do on the part, which would rule out any backdors - is most likely impossible.\n\nWhat you are arguing is effectively that the manufacturer should pinky-swear that there are no backdoors they know about. Which is useless, as (1) they may be lying, possibly under duress from a governement etc., (2) there may be backdoors they don't know about, added by a bad employee or in the production line, and (3) the processors may have bugs / features which are not intended as, but could work as a backdoor.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 9054,"question": "The way you formulated yourself does not make that clear. My point is that *proving* - as in providing a recipe for a test a competent customer etc. can do on the part, which would rule out any backdors - is most likely impossible.\n\nWhat you are arguing is effectively that the manufacturer should pinky-swear that there are no backdoors they know about. Which is useless, as (1) they may be lying, possibly under duress from a governement etc., (2) there may be backdoors they don't know about, added by a bad employee or in the production line, and (3) the processors may have bugs / features which are not intended as, but could work as a backdoor.","aSentId": 9055,"answer": "not pinky swear, show verifiable evidence.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 9056,"question": "not pinky swear, show verifiable evidence.","aSentId": 9057,"answer": "That's my point. How could (say) Intel show that (1) their design is backdoor-free (2) every chip I bought matches the design (3) no bugs?","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 9056,"question": "not pinky swear, show verifiable evidence.","aSentId": 9059,"answer": "There's enough room for something like a double patterning/litho error to introduce a backdoor even if you released all your code/gds2 files and you could probably introduce that by design in layout if you wanted, unlikely ever to be found","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 9056,"question": "not pinky swear, show verifiable evidence.","aSentId": 9061,"answer": "I'm not saying it's not possible, but how?\n\nAFAIK, a CPU can be programmed with any program that is programmable and that can run on it? Wouldn't that imply that there are almost an infinite number of possible programs that could be run on a particular CPU? How would one prove that there is NOT some special sequence of instructions present, no matter how complex, that would not open said backdoor and unleash all the demons of hell on the user's shit?\n","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 9054,"question": "The way you formulated yourself does not make that clear. My point is that *proving* - as in providing a recipe for a test a competent customer etc. can do on the part, which would rule out any backdors - is most likely impossible.\n\nWhat you are arguing is effectively that the manufacturer should pinky-swear that there are no backdoors they know about. Which is useless, as (1) they may be lying, possibly under duress from a governement etc., (2) there may be backdoors they don't know about, added by a bad employee or in the production line, and (3) the processors may have bugs / features which are not intended as, but could work as a backdoor.","aSentId": 9063,"answer": "not pinky swear, show verifiable evidence.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 9066,"question": ".","aSentId": 9067,"answer": "That's a legit point. I honestly had not thought about the matter that way.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 9069,"question": "Beemer, Open Thyself! \u2013 Security vulnerabilities in BMW's ConnectedDrive","aSentId": 9070,"answer": "How people can figure out stuff like this never ceases to amaze me. ","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 9071,"question": "How people can figure out stuff like this never ceases to amaze me. ","aSentId": 9072,"answer": "It's in no way magical. He mostly explains it in the post. You just have to know what tools exist, and how to use them, and sometimes be handy enough to create a tool or two yourself.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 9073,"question": "It's in no way magical. He mostly explains it in the post. You just have to know what tools exist, and how to use them, and sometimes be handy enough to create a tool or two yourself.","aSentId": 9074,"answer": "An experience. Lots and lots of homebrew hacking experience. There is no class that teaches you the pains of reverse engineering firmware, since every device is different.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 9069,"question": "Beemer, Open Thyself! \u2013 Security vulnerabilities in BMW's ConnectedDrive","aSentId": 9076,"answer": "Great read!  I wonder how much of the DES and HTTP (without the S) was an oversight and how much was the need to work with low power equipment.\n\nMy only experience with low powered, embedded systems was Arduinos.  I didn't realize how much I had taken fast CPUs for granted on mobile/desktop until I tried to send some 'simple' HTTPS commands over network.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 9077,"question": "Great read!  I wonder how much of the DES and HTTP (without the S) was an oversight and how much was the need to work with low power equipment.\n\nMy only experience with low powered, embedded systems was Arduinos.  I didn't realize how much I had taken fast CPUs for granted on mobile/desktop until I tried to send some 'simple' HTTPS commands over network.","aSentId": 9078,"answer": "Sitting on a &gt;20Ah 12V battery is not exactly \"low powered\". Just sitting in idle mode on a typical gsm module will give you more than a year. In a sleep mode (to be waken up by sms) it will be 5 years.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 9079,"question": "Sitting on a &gt;20Ah 12V battery is not exactly \"low powered\". Just sitting in idle mode on a typical gsm module will give you more than a year. In a sleep mode (to be waken up by sms) it will be 5 years.","aSentId": 9080,"answer": "Fair point.\n\nThe article had mentioned BMW chose a lower power model so it didn't suck the battery dry.  I suppose I don't have a good idea of what kind of horsepower this device has","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 9081,"question": "Fair point.\n\nThe article had mentioned BMW chose a lower power model so it didn't suck the battery dry.  I suppose I don't have a good idea of what kind of horsepower this device has","aSentId": 9082,"answer": "Low-power was microcontroller, not GSM module. It's common to use small MCUs alongside with full-blown GHz CPUs for small tasks and power control while main CPU is shut down or sleeping.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 9077,"question": "Great read!  I wonder how much of the DES and HTTP (without the S) was an oversight and how much was the need to work with low power equipment.\n\nMy only experience with low powered, embedded systems was Arduinos.  I didn't realize how much I had taken fast CPUs for granted on mobile/desktop until I tried to send some 'simple' HTTPS commands over network.","aSentId": 9084,"answer": "The huge challenge must have been to mount the BGA on a special board, to read the code.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 9085,"question": "The huge challenge must have been to mount the BGA on a special board, to read the code.","aSentId": 9086,"answer": "Pshh, just need the right stencil. And a mail-ordered custom pcb. And a rework station... Which is probably why he outsourced that part.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 9077,"question": "Great read!  I wonder how much of the DES and HTTP (without the S) was an oversight and how much was the need to work with low power equipment.\n\nMy only experience with low powered, embedded systems was Arduinos.  I didn't realize how much I had taken fast CPUs for granted on mobile/desktop until I tried to send some 'simple' HTTPS commands over network.","aSentId": 9088,"answer": "Asymmetric crypto indeed needs way more processing power than symmetric crypto. \n\nI have been trying for months to get my hands on a RSA hardware module that can be used by an Arduino... it is not that easy.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 9069,"question": "Beemer, Open Thyself! \u2013 Security vulnerabilities in BMW's ConnectedDrive","aSentId": 9090,"answer": "That was an interesting read. This is the problem with implementing your own crypto scheme...","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 9091,"question": "That was an interesting read. This is the problem with implementing your own crypto scheme...","aSentId": 9092,"answer": "All the used crypto schemes are standard. That's not the problem here, it's using them inappropriately or not at all.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 9093,"question": "All the used crypto schemes are standard. That's not the problem here, it's using them inappropriately or not at all.","aSentId": 9094,"answer": "They've used the standard encryption primitives, but they've tried to roll their own encrypted protocol.\n\nAny idiot can encrypt a bunch of bytes and shove them out over the wire, the hard bit is implementing your entire scheme such that it isn't vulnerable despite using the strong encryption. ie what BMW failed to do, as evidenced byt the things listed in the article.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 9095,"question": "They've used the standard encryption primitives, but they've tried to roll their own encrypted protocol.\n\nAny idiot can encrypt a bunch of bytes and shove them out over the wire, the hard bit is implementing your entire scheme such that it isn't vulnerable despite using the strong encryption. ie what BMW failed to do, as evidenced byt the things listed in the article.","aSentId": 9096,"answer": "My guess is they had a supplier who did the engineering for this system. Automotive quality management is usually very strong, but in cases of a new technology in a car, QM prevents not all problems, because they don't know the basics well and don't want to many specialized engineers. \n\n","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 9095,"question": "They've used the standard encryption primitives, but they've tried to roll their own encrypted protocol.\n\nAny idiot can encrypt a bunch of bytes and shove them out over the wire, the hard bit is implementing your entire scheme such that it isn't vulnerable despite using the strong encryption. ie what BMW failed to do, as evidenced byt the things listed in the article.","aSentId": 9098,"answer": "No. Marshall Banana is right. The problem here is not the protocol. The usage of insufficient or wrong crypto primitives is to blame in this case.\n\nThere is no need to change the protocol in order to make it secure. The only thing BMW needs to do is to enable SSL / TLS on their server.\n","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 9099,"question": "No. Marshall Banana is right. The problem here is not the protocol. The usage of insufficient or wrong crypto primitives is to blame in this case.\n\nThere is no need to change the protocol in order to make it secure. The only thing BMW needs to do is to enable SSL / TLS on their server.\n","aSentId": 9100,"answer": "The encryption is part of the protocol. The overall protocol is comprised of all the constituent protocols including the transport layer, the encoding the encryption etc. They have an insecure protocol.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 9101,"question": "The encryption is part of the protocol. The overall protocol is comprised of all the constituent protocols including the transport layer, the encoding the encryption etc. They have an insecure protocol.","aSentId": 9102,"answer": "They have used existing protocols in a wrong way.  \nThey did not implement their own security protocol nor did they implement their own crypto scheme.\n\nWhere did you get the idea from? What part from the text makes you think that they tried to make the communication secure by \"rolling their own crypto\"?","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 9103,"question": "They have used existing protocols in a wrong way.  \nThey did not implement their own security protocol nor did they implement their own crypto scheme.\n\nWhere did you get the idea from? What part from the text makes you think that they tried to make the communication secure by \"rolling their own crypto\"?","aSentId": 9104,"answer": "By roll theor own crypto i didnt mean an encryption alorithm ala aes, i was using it in the more general sense as in they tried to implement a secure protocol based on known secure parts and failed. For one example: The article explicitly states they have the combox dial home to authorize the commands, thats still part of the command protocol, and they failed to encrypt it.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 9105,"question": "By roll theor own crypto i didnt mean an encryption alorithm ala aes, i was using it in the more general sense as in they tried to implement a secure protocol based on known secure parts and failed. For one example: The article explicitly states they have the combox dial home to authorize the commands, thats still part of the command protocol, and they failed to encrypt it.","aSentId": 9106,"answer": "ok. I understand your reasoning. At this point we are basically just arguing semantics. I'd say let's leave it like that. :)","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 9108,"question": "Rule of thumb:\n\nIf no asymmetric crypto is involved in the security concept of your distributed system, you are probably doing it wrong.","aSentId": 9109,"answer": "Kerberos would like a word with you.\n\nAlso, pre-shared keys are a thing.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 9110,"question": "Kerberos would like a word with you.\n\nAlso, pre-shared keys are a thing.","aSentId": 9111,"answer": "&gt; Also, pre-shared keys are a thing.\n\nYes, BMW used a pre-shared key. \nThis key was extracted and used to create (encrypt) the spoofed unlock command. Would not have been possible with asymmetric crypto.\n","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 9112,"question": "&gt; Also, pre-shared keys are a thing.\n\nYes, BMW used a pre-shared key. \nThis key was extracted and used to create (encrypt) the spoofed unlock command. Would not have been possible with asymmetric crypto.\n","aSentId": 9113,"answer": "It also would not have been possible if the PSKs were unique to each vehicle. I take it they were not?","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 9114,"question": "It also would not have been possible if the PSKs were unique to each vehicle. I take it they were not?","aSentId": 9115,"answer": "Same key for every vehicle. But you are right, different keys would also have worked.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 9116,"question": "Same key for every vehicle. But you are right, different keys would also have worked.","aSentId": 9117,"answer": "Wow. Failtality. Did they hire 13-year-olds to code this?","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 9108,"question": "Rule of thumb:\n\nIf no asymmetric crypto is involved in the security concept of your distributed system, you are probably doing it wrong.","aSentId": 9119,"answer": "&gt; If no asymmetric crypto is involved in the security concept of your distributed system\n\nI think you're confusing the physical layer (cell towers) with the logical layout: This is a **centralized** system. \n\nIt's strictly client-server: The clients (cars) never talk to one-another, and the only server(-farm) they should ever talk to is run by a single company... The same company that  manufactured them and created their identities and configurations.\n\nSo it's perfectly fine to use symmetric keys in this case, the real problem is that they didn't make it *per car*. (They should also probably give people a way to get the key changed after buying a used one.)","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 9123,"question": "Bimmer, not Beemer.","aSentId": 9124,"answer": "Cleary were the only BMW fans in this sub :(","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 9125,"question": "Cleary were the only BMW fans in this sub :(","aSentId": 9126,"answer": "Hahaha, only beemer fans spell it that way. EVERYONE else spells it beemer. Sorry :(\n\nBesides, it isn't pronounced like dimmer is it?","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 9127,"question": "Hahaha, only beemer fans spell it that way. EVERYONE else spells it beemer. Sorry :(\n\nBesides, it isn't pronounced like dimmer is it?","aSentId": 9128,"answer": "It's not supposed to be pronounced that way. There are bimmers and beemers, and they are two different things to enthusiasts.  \n\nhttp://www.boston-bmwcca.org/reference/bimmer-beemer.aspx","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 9129,"question": "It's not supposed to be pronounced that way. There are bimmers and beemers, and they are two different things to enthusiasts.  \n\nhttp://www.boston-bmwcca.org/reference/bimmer-beemer.aspx","aSentId": 9130,"answer": "Yeah, again, I'm sorry, but no one else makes this distinction. They're all beemers. Such is life.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 9131,"question": "Yeah, again, I'm sorry, but no one else makes this distinction. They're all beemers. Such is life.","aSentId": 9132,"answer": "No need to apologize to me. It's similar to the .gif debate. There is what is what it has become, and what it's supposed to be. I only wanted to provide a link that there is a difference. ","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 9133,"question": "No need to apologize to me. It's similar to the .gif debate. There is what is what it has become, and what it's supposed to be. I only wanted to provide a link that there is a difference. ","aSentId": 9134,"answer": "haha, i still use a hard G. sorry inventor but it's graphics not jraphics.\n\nKinda like trying to make a nickname for yourself. You can call yourself that all you want, but you're still gonna be Lil' Ray Ray, and not A Pimp Named Slickback.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 9136,"question": "Programmer momentum.","aSentId": 9137,"answer": "Very good advice. In the past I've struggled with productivity issues. I had a pattern where I would look at my task list, pick out the ones I could easily see how to do, and try to ignore the others.\n\n(On one occasion I literally ignored a bug for 18 months until the product was due to ship, then closed it as \"won't fix\".)\n\nThe solution, which made me much happier and productive, turns out to be simple: if you feel scared or reluctant to do a task, it's probably because it's actually a bunch of tasks tied together into one, and you haven't thought hard enough about what it actually involves. Break it down into a list of simpler subtasks. If necessary, repeat this process until the tasks are trivial.\n\nSometimes I think of my subconscious mind as a nervous child that doesn't want to do his homework, so I have to coach him through the process, and keep him calm.\n\n(Obviously, however, I haven't found a solution for the 'getting bored and reading Reddit' problem yet.)","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 9138,"question": "Very good advice. In the past I've struggled with productivity issues. I had a pattern where I would look at my task list, pick out the ones I could easily see how to do, and try to ignore the others.\n\n(On one occasion I literally ignored a bug for 18 months until the product was due to ship, then closed it as \"won't fix\".)\n\nThe solution, which made me much happier and productive, turns out to be simple: if you feel scared or reluctant to do a task, it's probably because it's actually a bunch of tasks tied together into one, and you haven't thought hard enough about what it actually involves. Break it down into a list of simpler subtasks. If necessary, repeat this process until the tasks are trivial.\n\nSometimes I think of my subconscious mind as a nervous child that doesn't want to do his homework, so I have to coach him through the process, and keep him calm.\n\n(Obviously, however, I haven't found a solution for the 'getting bored and reading Reddit' problem yet.)","aSentId": 9139,"answer": "I can relate to this. How often is it when you're actually forced to do one of these seemingly impossible tasks, you find it wasn't so bad after all? :-)\n\nPutting a little time aside, possibly just to investigate it first and get the mind going, can work wonders. ","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 9138,"question": "Very good advice. In the past I've struggled with productivity issues. I had a pattern where I would look at my task list, pick out the ones I could easily see how to do, and try to ignore the others.\n\n(On one occasion I literally ignored a bug for 18 months until the product was due to ship, then closed it as \"won't fix\".)\n\nThe solution, which made me much happier and productive, turns out to be simple: if you feel scared or reluctant to do a task, it's probably because it's actually a bunch of tasks tied together into one, and you haven't thought hard enough about what it actually involves. Break it down into a list of simpler subtasks. If necessary, repeat this process until the tasks are trivial.\n\nSometimes I think of my subconscious mind as a nervous child that doesn't want to do his homework, so I have to coach him through the process, and keep him calm.\n\n(Obviously, however, I haven't found a solution for the 'getting bored and reading Reddit' problem yet.)","aSentId": 9141,"answer": "I should have made reddit the number one distraction. But yea task management is a whole other topic.  I have a giant google spreadsheet that has each client's tasks by column, then sorted by (red) important (yellow) medium and (blue) ideas.  Yellow are things that only I care about or 1 person cares about. Red is the real list, of all the things that I should do when I get in.\n\nYou're also right that if something seems like a behemoth, it's because it's not broken down. HOWEVER, some tasks are just really hard and you don't know what the breakdown is until you dive in.  If you're about to learn a new API to integrate something, the line item might be \"Use UPS api to print shipping labels\". Seems simple, but boy does that take 3 months of work.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 9136,"question": "Programmer momentum.","aSentId": 9143,"answer": "*you're* boyfriend/girlfriend/SO *want\u2019s*","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 9144,"question": "*you're* boyfriend/girlfriend/SO *want\u2019s*","aSentId": 9145,"answer": "Ugh, thanks. No matter how many times you read over something.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 9136,"question": "Programmer momentum.","aSentId": 9147,"answer": "What this is missing is lunch.\n\nSomething we did that helped a lot was scheduling all meetings before lunch, so that devs would have the entire afternoon block to work.  There's nothing more crippling to momentum than a 3 pm meeting.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 9148,"question": "What this is missing is lunch.\n\nSomething we did that helped a lot was scheduling all meetings before lunch, so that devs would have the entire afternoon block to work.  There's nothing more crippling to momentum than a 3 pm meeting.","aSentId": 9149,"answer": "Good call, I guess not every eats lunch at their desk","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 9148,"question": "What this is missing is lunch.\n\nSomething we did that helped a lot was scheduling all meetings before lunch, so that devs would have the entire afternoon block to work.  There's nothing more crippling to momentum than a 3 pm meeting.","aSentId": 9151,"answer": "Why why why won't my boss understand this.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 9153,"question": "&gt;If you spend an hour in a meeting you\u2019ve lost three hours of programming time.\n\nThis can't be said often enough\n\nAnd here I have a meeting every day :( (except sometimes Friday)\n\nNever take a job that does not allow remote working","aSentId": 9154,"answer": "A meeting every day? What kind of horrible management needs to meet everyday?  There is time to discuss, and time to get shit done.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 9155,"question": "A meeting every day? What kind of horrible management needs to meet everyday?  There is time to discuss, and time to get shit done.","aSentId": 9156,"answer": "The boss has gotta make sure the devs are staying \"laser focused\" and not wasting time on trivial things like cleaning up our code base or finishing half-done libraries.\n\nBut even daily meetings aren't enough, he's gotta drop by later in the day to distract us with some new useless feature request or a petty interface change.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 9157,"question": "The boss has gotta make sure the devs are staying \"laser focused\" and not wasting time on trivial things like cleaning up our code base or finishing half-done libraries.\n\nBut even daily meetings aren't enough, he's gotta drop by later in the day to distract us with some new useless feature request or a petty interface change.","aSentId": 9158,"answer": "you're attitude towards this is telling.  Why is he that way? If the team is producing good work then he shouldn't have the need.  Usually managers get like this because a) they don't understand or b) they've been scarred in the past by bad devs.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 9159,"question": "you're attitude towards this is telling.  Why is he that way? If the team is producing good work then he shouldn't have the need.  Usually managers get like this because a) they don't understand or b) they've been scarred in the past by bad devs.","aSentId": 9160,"answer": "Probably a little of column A, a little of column B. It's a small company, so micromanagement is to be expected. It's particularly frustrating because despite all the meetings, my boss still hardly seems to know what's going on in our system, which leads to us redoing things a lot.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 9161,"question": "Probably a little of column A, a little of column B. It's a small company, so micromanagement is to be expected. It's particularly frustrating because despite all the meetings, my boss still hardly seems to know what's going on in our system, which leads to us redoing things a lot.","aSentId": 9162,"answer": "I would definitely bring that up. Or at least that you feel that way. It could be that his goals given to him keep changing too.  So you should know if he's not the one making changes.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 9153,"question": "&gt;If you spend an hour in a meeting you\u2019ve lost three hours of programming time.\n\nThis can't be said often enough\n\nAnd here I have a meeting every day :( (except sometimes Friday)\n\nNever take a job that does not allow remote working","aSentId": 9164,"answer": "It's tough to find a balance, I try to get the devs who are working on a specific project in the meetings with the end users so they can really understand what the user is trying to do.  I find if I don't do that I end up with a prescribed \"solution\" written up by BA's and the devs don't understand what the user actually wants and why.  In the long run this causes a lot of rework/shitty product.  That being said, I try to make sure that if they have multiple meetings in a day to go to they are all chunked together.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 9165,"question": "It's tough to find a balance, I try to get the devs who are working on a specific project in the meetings with the end users so they can really understand what the user is trying to do.  I find if I don't do that I end up with a prescribed \"solution\" written up by BA's and the devs don't understand what the user actually wants and why.  In the long run this causes a lot of rework/shitty product.  That being said, I try to make sure that if they have multiple meetings in a day to go to they are all chunked together.","aSentId": 9166,"answer": "So we usually work in a software architect -&gt; doers style. There is 1 dev in charge to communicate with the client and the others do their tasks given by that guy. And that rotates depending on project. So sometimes you're a doer, and other times you're the manager.  \n\nDev's don't always have to talk to clients, I like to, but you just need someone in charge of the project who knows what the client wants. You don't need everyone on that front.\n\nAlso, communication is super key. Younger devs are scared to speak up if they think something is stupid. You need to be vocal if you don't understand why you're doing something. Never just do because someone said to.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 9167,"question": "So we usually work in a software architect -&gt; doers style. There is 1 dev in charge to communicate with the client and the others do their tasks given by that guy. And that rotates depending on project. So sometimes you're a doer, and other times you're the manager.  \n\nDev's don't always have to talk to clients, I like to, but you just need someone in charge of the project who knows what the client wants. You don't need everyone on that front.\n\nAlso, communication is super key. Younger devs are scared to speak up if they think something is stupid. You need to be vocal if you don't understand why you're doing something. Never just do because someone said to.","aSentId": 9168,"answer": "Right, that's really pretty similar to what we do.  I don't have all of the devs in the meetings, just the one who is leading the specific project.  I am the dev manager, but I want the person who is going to be doing the work to at least have some first hand background into what is going on.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 9171,"question": "How a HyperLogLog works","aSentId": 9172,"answer": "Just because you use an analogy doesn't mean the concept is automatically easier to understand.  I feel like there's a better way to explain this concept. ","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 9171,"question": "How a HyperLogLog works","aSentId": 9174,"answer": "The article doesn't mention why it's useful: Lets us estimate the number of distinct elements in a set without having the whole set in memory.\n\nAlso, it seems like if we know that the distribution of elements in the set is fairly uniform we can sample only a part of the data, not the whole set. Is that part of the algorithm?\n\nCan anyone tell me the difference between HyperLogLog and LogLog?","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 9176,"question": "Bare-board ARM programming with Ada (GNAT)","aSentId": 9177,"answer": "I'm wondering why is Ada not more popular","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 9178,"question": "I'm wondering why is Ada not more popular","aSentId": 9179,"answer": "Ada is a great language, but ASM/C/C++ are good enough in most bare-metal applications, and have greater community momentum.  It kind of comes down to \"you don't hear about Ada because you don't hear about Ada\" unfortunately.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 9178,"question": "I'm wondering why is Ada not more popular","aSentId": 9181,"answer": "We used Ada for a bit at work. The most frustrating thing was the lack of good learning material on it relative to c/c++/java.\n\n\nTo answer your question, I believe its lack of popularity was due lack of affordable compilers for it at the time it was created.\n","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 9178,"question": "I'm wondering why is Ada not more popular","aSentId": 9183,"answer": "the free tools are a nightmare, and the non-free ones cost a lot.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 9185,"question": "Scala.js no longer experimental","aSentId": 9186,"answer": "I am using Scala.js for noncritical UIs at work, in combination with Facebook's React. It is a great experience ... static type-safety, all of Scala's standard library which includes Future and immutable collections, code that cross-compiles, same IntelliJ IDEA with refactoring and Intellisense, SBT with dependencies managed through Maven repositories, kickass testing support, minification through tree-shaking using Google's Closure compiler, good JavaScript interoperability, etc...\n\nI recommend you give it a try, it's awesome.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 9187,"question": "I am using Scala.js for noncritical UIs at work, in combination with Facebook's React. It is a great experience ... static type-safety, all of Scala's standard library which includes Future and immutable collections, code that cross-compiles, same IntelliJ IDEA with refactoring and Intellisense, SBT with dependencies managed through Maven repositories, kickass testing support, minification through tree-shaking using Google's Closure compiler, good JavaScript interoperability, etc...\n\nI recommend you give it a try, it's awesome.","aSentId": 9188,"answer": "can you recommend some tutorials on getting started with this stack","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 9187,"question": "I am using Scala.js for noncritical UIs at work, in combination with Facebook's React. It is a great experience ... static type-safety, all of Scala's standard library which includes Future and immutable collections, code that cross-compiles, same IntelliJ IDEA with refactoring and Intellisense, SBT with dependencies managed through Maven repositories, kickass testing support, minification through tree-shaking using Google's Closure compiler, good JavaScript interoperability, etc...\n\nI recommend you give it a try, it's awesome.","aSentId": 9190,"answer": "Any comparison with Typescript?","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 9191,"question": "Any comparison with Typescript?","aSentId": 9192,"answer": "Executive summary: Typescript is Javascript with a fairly weak type system, although it did recently get union types. Scala.js is Scala.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 9187,"question": "I am using Scala.js for noncritical UIs at work, in combination with Facebook's React. It is a great experience ... static type-safety, all of Scala's standard library which includes Future and immutable collections, code that cross-compiles, same IntelliJ IDEA with refactoring and Intellisense, SBT with dependencies managed through Maven repositories, kickass testing support, minification through tree-shaking using Google's Closure compiler, good JavaScript interoperability, etc...\n\nI recommend you give it a try, it's awesome.","aSentId": 9194,"answer": "~~tree-shacking~~ tree shaking, although I do like the visual of a tree shack, makes Scala.js even more appealing ;-)\n\n\n\n","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 9195,"question": "~~tree-shacking~~ tree shaking, although I do like the visual of a tree shack, makes Scala.js even more appealing ;-)\n\n\n\n","aSentId": 9196,"answer": "Sorry, typed that on my phone :-)","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 9185,"question": "Scala.js no longer experimental","aSentId": 9200,"answer": "Anyone try Scala.js with play? How do they work together? Would be awesome if typesafe folded it in.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 9201,"question": "Anyone try Scala.js with play? How do they work together? Would be awesome if typesafe folded it in.","aSentId": 9202,"answer": "See this example project to get started with Play! https://github.com/vmunier/play-with-scalajs-example It needs a bit of wiring up in sbt (taken care of in this skeleton repo), and after that it's all good :-)","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 9185,"question": "Scala.js no longer experimental","aSentId": 9204,"answer": "I think it's awesome that more and more languages can compile to JS and give you a good web dev experience. It can only be positive for the web.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 9205,"question": "I think it's awesome that more and more languages can compile to JS and give you a good web dev experience. It can only be positive for the web.","aSentId": 9206,"answer": "But why JS -- that seems like a very verbose bloated intermediate language that needs the overhead of rather complex parsing on the client.\n\nSurely it'd be better to compile to some half-way-pre-compiled write-once-run-anywhere byte-code?\n\n[Serious question - any resemblance to Sun's Java PR in the 1990's is purely coincidence]\n\n\n\n ","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 9207,"question": "But why JS -- that seems like a very verbose bloated intermediate language that needs the overhead of rather complex parsing on the client.\n\nSurely it'd be better to compile to some half-way-pre-compiled write-once-run-anywhere byte-code?\n\n[Serious question - any resemblance to Sun's Java PR in the 1990's is purely coincidence]\n\n\n\n ","aSentId": 9208,"answer": "&gt;\nSurely it'd be better to compile to some half-way-pre-compiled write-once-run-anywhere byte-code, now?\n\npNaCl?","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 9207,"question": "But why JS -- that seems like a very verbose bloated intermediate language that needs the overhead of rather complex parsing on the client.\n\nSurely it'd be better to compile to some half-way-pre-compiled write-once-run-anywhere byte-code?\n\n[Serious question - any resemblance to Sun's Java PR in the 1990's is purely coincidence]\n\n\n\n ","aSentId": 9210,"answer": "Of course it would be better. Now you do it. And by \"do it\" I mean make the big players include the new virtual machine in their browsers","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 9211,"question": "Of course it would be better. Now you do it. And by \"do it\" I mean make the big players include the new virtual machine in their browsers","aSentId": 9212,"answer": "The likely approach would be to compile to some form of bytecode, and then make a javascript shim that would interpret the bytecode from within javascript, or transpile to javascript. Then you wouldn't need browser support, just for browsers to add a fall-forward to just run the code directly in its bytecode form, similar to how asm.js works.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 9207,"question": "But why JS -- that seems like a very verbose bloated intermediate language that needs the overhead of rather complex parsing on the client.\n\nSurely it'd be better to compile to some half-way-pre-compiled write-once-run-anywhere byte-code?\n\n[Serious question - any resemblance to Sun's Java PR in the 1990's is purely coincidence]\n\n\n\n ","aSentId": 9214,"answer": "Because browsers.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 9219,"question": "This looks great!\n\nWhat I like about Scala developers:  No one will call this isomorphic Scala unless someone actually figures out how to truly make Scala isomorphic with JavaScript.\n\nWhat would be really interesting is if Scala.js implements something like FunScript's type-provider with macros so one can consume arbitrary JavaScript in Scala:  http://funscript.info/\n\nCORRECTION: FunScript consumes TypeScript, not JavaScript","aSentId": 9220,"answer": "You can already consume arbitrary JavaScript in Scala.js because of the Dynamic type. Consuming JavaScript is painless. So what do those type providers in FunScript do?\n\nBTW, took a look at that sample on their page and in Scala.js you can also use Future and scala-async, so bye, bye callback hell. \n\nAlso, what do you mean by isomorphic?","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 9221,"question": "You can already consume arbitrary JavaScript in Scala.js because of the Dynamic type. Consuming JavaScript is painless. So what do those type providers in FunScript do?\n\nBTW, took a look at that sample on their page and in Scala.js you can also use Future and scala-async, so bye, bye callback hell. \n\nAlso, what do you mean by isomorphic?","aSentId": 9222,"answer": "&gt; You can already consume arbitrary JavaScript in Scala.js because of the Dynamic type.\n\nThat's always a valid option.  \n\nType providers in F# basically generates types (Sort of like macros) from arbitrary external references.  In FunScript, you reference a TypeScript source (maybe via Url) and the FunScript will generate the appropriate F# types that will allow you to interface with a TypeScript library in a typed way.\n\nYou can use a resource like http://definitelytyped.org/ to find strongly typed definitions of existing libraries.\n\n| Also, what do you mean by isomorphic?\n\nI mean isomorphic as in an isomorphic function, which literally maps two different types in a non-leaky way.  In other words, you could be able to take a JavaScript AST, translate it to a Scala AST and map it back with no information loss.  (If it's even possible, it's way beyond me.)\n\nIt was basically a petty jab from me at the term \"isomorphic JavaScript\".  It bugs me because it dilutes a really good word that describes beauty of non-leaky 1-to-1 mappings.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 9223,"question": "&gt; You can already consume arbitrary JavaScript in Scala.js because of the Dynamic type.\n\nThat's always a valid option.  \n\nType providers in F# basically generates types (Sort of like macros) from arbitrary external references.  In FunScript, you reference a TypeScript source (maybe via Url) and the FunScript will generate the appropriate F# types that will allow you to interface with a TypeScript library in a typed way.\n\nYou can use a resource like http://definitelytyped.org/ to find strongly typed definitions of existing libraries.\n\n| Also, what do you mean by isomorphic?\n\nI mean isomorphic as in an isomorphic function, which literally maps two different types in a non-leaky way.  In other words, you could be able to take a JavaScript AST, translate it to a Scala AST and map it back with no information loss.  (If it's even possible, it's way beyond me.)\n\nIt was basically a petty jab from me at the term \"isomorphic JavaScript\".  It bugs me because it dilutes a really good word that describes beauty of non-leaky 1-to-1 mappings.","aSentId": 9224,"answer": "Yes, one could do that In Scala. I think nobody has written such a macro yet, because the Typescript definition files don't capture everything which would make up a great API in Scala.js.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 9225,"question": "Yes, one could do that In Scala. I think nobody has written such a macro yet, because the Typescript definition files don't capture everything which would make up a great API in Scala.js.","aSentId": 9226,"answer": "Exactly. However we do have a tool that translates, superficially, TypeScript definition files into Scala.js definition classes: https://github.com/sjrd/scala-js-ts-importer","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 9225,"question": "Yes, one could do that In Scala. I think nobody has written such a macro yet, because the Typescript definition files don't capture everything which would make up a great API in Scala.js.","aSentId": 9228,"answer": "I agree.  It's going to be a little harder to write the macro in the open source world because there are so many different ways you can annotate and infer types (or what's statically known) for JavaScript.  There are many competing standards, including AtScript, the closure compiler, TypeScript, and god knows what else I'm forgetting.\n\nWhat would be very nice would be:\n\n* A standard JavaScript compiler/analyzer that extracts inferred types, pre-conditions, post-conditions, whatever\n* A standard format so tools can consume this data","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 9230,"question": "Do we have good IDE's for Scala. Anybody used any of them?","aSentId": 9231,"answer": "IntelliJ works pretty well. You get all the things you'd expect (refactoring, quicks docs, code navigation, etc). I've noticed that it doesn't handle typeclasses very well. It will frequently say that my List typeclass instances are unused even though I'm calling traverse on the List, for instance. So the compiler is usually still the ultimate source of truth. ","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 9230,"question": "Do we have good IDE's for Scala. Anybody used any of them?","aSentId": 9233,"answer": "Emacs.\n\n/me ducks\n\nBut seriously - I still prefer it over just about any IDE for just about any language - because it's actually easier to integrate emacs with just about any testing framework: (save a file --- which emacs notices and automatically triggers compiling the project ---- emacs can notice if compilation succeeds which automatically triggers running unit tests -- and if a unit test fails, give a 2-key shortcut to jumping to the right spot in the source code for that test).\n\nAnd best of all -- it works the same way whether I'm using C or Ruby or Scala or (if my old college .el scripts still work) Fortran.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 9234,"question": "Emacs.\n\n/me ducks\n\nBut seriously - I still prefer it over just about any IDE for just about any language - because it's actually easier to integrate emacs with just about any testing framework: (save a file --- which emacs notices and automatically triggers compiling the project ---- emacs can notice if compilation succeeds which automatically triggers running unit tests -- and if a unit test fails, give a 2-key shortcut to jumping to the right spot in the source code for that test).\n\nAnd best of all -- it works the same way whether I'm using C or Ruby or Scala or (if my old college .el scripts still work) Fortran.","aSentId": 9235,"answer": "Don't forget Ensime! ","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 9234,"question": "Emacs.\n\n/me ducks\n\nBut seriously - I still prefer it over just about any IDE for just about any language - because it's actually easier to integrate emacs with just about any testing framework: (save a file --- which emacs notices and automatically triggers compiling the project ---- emacs can notice if compilation succeeds which automatically triggers running unit tests -- and if a unit test fails, give a 2-key shortcut to jumping to the right spot in the source code for that test).\n\nAnd best of all -- it works the same way whether I'm using C or Ruby or Scala or (if my old college .el scripts still work) Fortran.","aSentId": 9237,"answer": "I don't know why you should have to duck duck? I think people should have to duck when they claim that emacs isn't an IDE. ","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 9239,"question": "I think this is the best way to write web applications (including JavaScript) now.\n\nScala.js has better tooling, better dependency management, probably the largest ecosystem of all JavaScript alternatives and the best IDE support.","aSentId": 9240,"answer": "&gt; Scala.js has better tooling\n\nI really doubt that.  Scala IDE support is still a mess and Eclipse and Intellij still regularly show errors for valid Scala.  TypeScript and Dart (and probably others) are much better in this regard.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 9241,"question": "&gt; Scala.js has better tooling\n\nI really doubt that.  Scala IDE support is still a mess and Eclipse and Intellij still regularly show errors for valid Scala.  TypeScript and Dart (and probably others) are much better in this regard.","aSentId": 9242,"answer": "I didn't just make that up.\n\nI tried mutliple IDEs for JavaScript, TypeScript (including Microsoft's own offring here) and Dart before coming to that conclusion.\n\nI didn't actually give Scala.js a try first, because I thought it wasn't usable yet.\nAfter exhausting all other options I gace Scala.js a chance and it was a breath of fresh air. Things _just worked_.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 9243,"question": "I didn't just make that up.\n\nI tried mutliple IDEs for JavaScript, TypeScript (including Microsoft's own offring here) and Dart before coming to that conclusion.\n\nI didn't actually give Scala.js a try first, because I thought it wasn't usable yet.\nAfter exhausting all other options I gace Scala.js a chance and it was a breath of fresh air. Things _just worked_.","aSentId": 9244,"answer": "Have you tried Haxe?","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 9245,"question": "Have you tried Haxe?","aSentId": 9246,"answer": "No, didn't try Haxe.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 9241,"question": "&gt; Scala.js has better tooling\n\nI really doubt that.  Scala IDE support is still a mess and Eclipse and Intellij still regularly show errors for valid Scala.  TypeScript and Dart (and probably others) are much better in this regard.","aSentId": 9248,"answer": "&gt; Intellij still regularly show errors for valid Scala\n\nI don't think so, unless in few scenarios involving type projections or path dependent types. I wouldn't say \"regularly\", the experience is very smooth.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 9249,"question": "&gt; Intellij still regularly show errors for valid Scala\n\nI don't think so, unless in few scenarios involving type projections or path dependent types. I wouldn't say \"regularly\", the experience is very smooth.","aSentId": 9250,"answer": "When using Scalding, it doesn't seem to find the toTypedPipe implicit when moving to and from Grouped types. Eclipse shows it.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 9249,"question": "&gt; Intellij still regularly show errors for valid Scala\n\nI don't think so, unless in few scenarios involving type projections or path dependent types. I wouldn't say \"regularly\", the experience is very smooth.","aSentId": 9252,"answer": "Does Intellij's Scala plugin work properly for any of the Typelevel projects?  I haven't tried Spire recently, but it has never worked properly for me and I'm sure it's going to get worse with the Scala forks starting to add various features.  ","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 9253,"question": "Does Intellij's Scala plugin work properly for any of the Typelevel projects?  I haven't tried Spire recently, but it has never worked properly for me and I'm sure it's going to get worse with the Scala forks starting to add various features.  ","aSentId": 9254,"answer": "I use Scalaz and IntelliJ. It sometimes gets slow if you wildcard import the implicits, and it isn't the best at yelling at you if you're missing a typeclass instance in scope, but overall it works pretty fine. Enough for me to be productive at least. ","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 9255,"question": "I use Scalaz and IntelliJ. It sometimes gets slow if you wildcard import the implicits, and it isn't the best at yelling at you if you're missing a typeclass instance in scope, but overall it works pretty fine. Enough for me to be productive at least. ","aSentId": 9256,"answer": "I use Scalaz daily.  Start doing anything even remotely complicated with type lambdas, macros or monad transformers and Intellij and Eclipse will show errors for perfectly valid code.  ","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 9253,"question": "Does Intellij's Scala plugin work properly for any of the Typelevel projects?  I haven't tried Spire recently, but it has never worked properly for me and I'm sure it's going to get worse with the Scala forks starting to add various features.  ","aSentId": 9258,"answer": "I don't know honestly. Probably things like Shapeless could be the test to see how well the presentation compiler is. For my everyday projects I have no problem any longer with highlighting (except for mentioned type projections and dependent-types, but they are not so common)","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 9241,"question": "&gt; Scala.js has better tooling\n\nI really doubt that.  Scala IDE support is still a mess and Eclipse and Intellij still regularly show errors for valid Scala.  TypeScript and Dart (and probably others) are much better in this regard.","aSentId": 9260,"answer": "I have been using IntelliJ IDEA Ultimate with Scala for the last 2 years. It's one of the best IDEs available and doesn't have much competition. Other languages can only dream about support this awesome.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 9239,"question": "I think this is the best way to write web applications (including JavaScript) now.\n\nScala.js has better tooling, better dependency management, probably the largest ecosystem of all JavaScript alternatives and the best IDE support.","aSentId": 9262,"answer": "ClojureScript, Java, Dart.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 9264,"question": "is this real life","aSentId": 9265,"answer": "Is this just fantasy? Caught in a landslide, no escape from reality...","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 9266,"question": "Is this just fantasy? Caught in a landslide, no escape from reality...","aSentId": 9267,"answer": "Open your eyes, look up to the skies and see.\n\n","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 9268,"question": "Open your eyes, look up to the skies and see.\n\n","aSentId": 9269,"answer": "I'm just a poor dev, I need no sympathy","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 9270,"question": "I'm just a poor dev, I need no sympathy","aSentId": 9271,"answer": "Because I'm easy come, easy go","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 9272,"question": "Because I'm easy come, easy go","aSentId": 9273,"answer": "NYBBLE HI, NYBBLE LO","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 9274,"question": "NYBBLE HI, NYBBLE LO","aSentId": 9275,"answer": "Any way the endianness goes","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 9276,"question": "Any way the endianness goes","aSentId": 9277,"answer": "doesn't really matter to meee","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 9278,"question": "doesn't really matter to meee","aSentId": 9279,"answer": "Mama.... just killed a thread....","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 9280,"question": "Mama.... just killed a thread....","aSentId": 9281,"answer": "put a shitpost against its head","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 9282,"question": "put a shitpost against its head","aSentId": 9283,"answer": "gave a downvote, now it's dead..","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 9286,"question": "How do you debug the minified transpiled JS?\n\nEdit: Source maps, got it.","aSentId": 9287,"answer": "[Source maps](http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/)","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 9286,"question": "How do you debug the minified transpiled JS?\n\nEdit: Source maps, got it.","aSentId": 9289,"answer": "You enable Source Maps in your browser, and then you transparently step through your Scala right from your browser's debugger. All modern compile-to-JS languages support this.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 9286,"question": "How do you debug the minified transpiled JS?\n\nEdit: Source maps, got it.","aSentId": 9291,"answer": "I don't know about Scala.js, but ClojureScript provides source maps that trace back to the original ClojureScript source as opposed to compiled Js.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 9293,"question": "node.js was already purely functional. now with scala.js on top of node.js on top of modngodb3, mainstream functional programming will be mainstream because it's mainstream functional programming.\n\nerlang and haskell could not mainstreamize functional programming, but we all knew yes node.js can!\n\nthink about type systems of scala.js with awesome scalaz monad library. and you also get async io out of the box. you can totally reason about your io systems and massive big io data in terms of simple type symbols such as lambda and delta.\n\nbig systems written down as a single forumlaric type expression that fits in twitter means we can now step closer to secrets of universe and physics.","aSentId": 9294,"answer": "This reads like an answer to an interview question where the person tries to make up an answer rather than admitting that they don't know. That or it's generated by Markov chains.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 9295,"question": "This reads like an answer to an interview question where the person tries to make up an answer rather than admitting that they don't know. That or it's generated by Markov chains.","aSentId": 9296,"answer": "He didn't mention \"webscale\", so obviously he can't be trolling","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 9295,"question": "This reads like an answer to an interview question where the person tries to make up an answer rather than admitting that they don't know. That or it's generated by Markov chains.","aSentId": 9298,"answer": "So I should use Markov chains to answer interview questions.\n\nGold!","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 9295,"question": "This reads like an answer to an interview question where the person tries to make up an answer rather than admitting that they don't know. That or it's generated by Markov chains.","aSentId": 9300,"answer": "&gt; mainstreamize\n\n&gt; forumlaric\n\n*(stand's up)*\n\nSIR, YOU'RE HIRED!\n\n*(firm handshake)*\n","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 9293,"question": "node.js was already purely functional. now with scala.js on top of node.js on top of modngodb3, mainstream functional programming will be mainstream because it's mainstream functional programming.\n\nerlang and haskell could not mainstreamize functional programming, but we all knew yes node.js can!\n\nthink about type systems of scala.js with awesome scalaz monad library. and you also get async io out of the box. you can totally reason about your io systems and massive big io data in terms of simple type symbols such as lambda and delta.\n\nbig systems written down as a single forumlaric type expression that fits in twitter means we can now step closer to secrets of universe and physics.","aSentId": 9303,"answer": "I get that not everyone likes what /u/passwordissame  is doing; not liking it is fine. \n\nBut I do get sad every time people don't learn to recognize that they comment on every other post with \"webscale\" answers for the lulz. I love it. \n\nRES tag him, and you no longer have to worry if it's serious or sarcastic, because you'll just be able to tell that it's /u/passwordissame at their shenanigans again.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 9304,"question": "I get that not everyone likes what /u/passwordissame  is doing; not liking it is fine. \n\nBut I do get sad every time people don't learn to recognize that they comment on every other post with \"webscale\" answers for the lulz. I love it. \n\nRES tag him, and you no longer have to worry if it's serious or sarcastic, because you'll just be able to tell that it's /u/passwordissame at their shenanigans again.","aSentId": 9305,"answer": "I think it's kind of sad that the mods don't delete posts like that.  Inevitably there are a bunch of folks who try to engage, thus wasting their time.\n\nPeople will argue that if you ban trolls, they'll just make different accounts.  But the subs I've been on that actually *did* consistently ban them simply don't have trolls any more...\n\n(I also think people who run such accounts probably have mental health/personality disorder issues of some sort, which is a totally different type of sad.)","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 9306,"question": "I think it's kind of sad that the mods don't delete posts like that.  Inevitably there are a bunch of folks who try to engage, thus wasting their time.\n\nPeople will argue that if you ban trolls, they'll just make different accounts.  But the subs I've been on that actually *did* consistently ban them simply don't have trolls any more...\n\n(I also think people who run such accounts probably have mental health/personality disorder issues of some sort, which is a totally different type of sad.)","aSentId": 9307,"answer": "&gt; (I also think people who run such accounts probably have mental health/personality disorder issues of some sort, which is a totally different type of sad.)\n\nI disagree completely. I wouldn't call /u/passwordissame a \"troll\" in the modern sense - he's not trying to piss anyone off, he's just posting webscale comments. Sometimes he misses the mark, but sometimes they're fucking hilarious. I don't think that's worth a ban. He's not really harming anyone.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 9308,"question": "&gt; (I also think people who run such accounts probably have mental health/personality disorder issues of some sort, which is a totally different type of sad.)\n\nI disagree completely. I wouldn't call /u/passwordissame a \"troll\" in the modern sense - he's not trying to piss anyone off, he's just posting webscale comments. Sometimes he misses the mark, but sometimes they're fucking hilarious. I don't think that's worth a ban. He's not really harming anyone.","aSentId": 9309,"answer": "Not harming, but not adding value at all. ","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 9306,"question": "I think it's kind of sad that the mods don't delete posts like that.  Inevitably there are a bunch of folks who try to engage, thus wasting their time.\n\nPeople will argue that if you ban trolls, they'll just make different accounts.  But the subs I've been on that actually *did* consistently ban them simply don't have trolls any more...\n\n(I also think people who run such accounts probably have mental health/personality disorder issues of some sort, which is a totally different type of sad.)","aSentId": 9311,"answer": "You have a health/personality disorder.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 9293,"question": "node.js was already purely functional. now with scala.js on top of node.js on top of modngodb3, mainstream functional programming will be mainstream because it's mainstream functional programming.\n\nerlang and haskell could not mainstreamize functional programming, but we all knew yes node.js can!\n\nthink about type systems of scala.js with awesome scalaz monad library. and you also get async io out of the box. you can totally reason about your io systems and massive big io data in terms of simple type symbols such as lambda and delta.\n\nbig systems written down as a single forumlaric type expression that fits in twitter means we can now step closer to secrets of universe and physics.","aSentId": 9313,"answer": "can't tell if serious or sarcastic... ","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 9315,"question": "Oh boy! Can't wait for C.js to finally come out!","aSentId": 9316,"answer": "[emscripten](https://github.com/kripken/emscripten/wiki) already exists","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 9315,"question": "Oh boy! Can't wait for C.js to finally come out!","aSentId": 9318,"answer": "Well, there's [emscripten](http://emscripten.org).","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 9320,"question": "New IBM Watson APIs for speech, images, and more","aSentId": 9321,"answer": "Watson sees shoes everywhere :D","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 9320,"question": "New IBM Watson APIs for speech, images, and more","aSentId": 9323,"answer": "layoff damage control","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 9324,"question": "layoff damage control","aSentId": 9325,"answer": "You mean realigning with other strategic objectives while increasing shareholder value.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 9326,"question": "You mean realigning with other strategic objectives while increasing shareholder value.","aSentId": 9327,"answer": "I can't tell if this is an ironic post or if you are an IBM middle manager who actually believes this","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 9328,"question": "I can't tell if this is an ironic post or if you are an IBM middle manager who actually believes this","aSentId": 9329,"answer": "Yes.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 9328,"question": "I can't tell if this is an ironic post or if you are an IBM middle manager who actually believes this","aSentId": 9331,"answer": "He's taking an holistic approach whilst engaging intrinsic synergies in a worst-case scenario. FTW.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 9320,"question": "New IBM Watson APIs for speech, images, and more","aSentId": 9333,"answer": "Yay proprietary ML code!\n\nPay IBM for production....\n","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 9335,"question": "Don't mean to rain on your parade, but none of this stuff works very well. See the thread at HN for examples. Image classification Just. Doesn't. Work. At. All.\n\nSo IBM made a Jeopardy bot, and tried to convince everyone that it was something special. It's nothing more than a not-too-robust front-end to web search, that really doesn't translate or scale.","aSentId": 9336,"answer": "Mind giving examples? 2 out of 3 of the examples highlighted in the HN actually worked pretty well.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 9335,"question": "Don't mean to rain on your parade, but none of this stuff works very well. See the thread at HN for examples. Image classification Just. Doesn't. Work. At. All.\n\nSo IBM made a Jeopardy bot, and tried to convince everyone that it was something special. It's nothing more than a not-too-robust front-end to web search, that really doesn't translate or scale.","aSentId": 9338,"answer": "Also the API examples in the documentation are clunky and frankly suck ass. You can't quickly start using it, you have to parse exactly why they do everything. Watson seems like it's mostly a PR project, and there's not a lot of meat there.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 9340,"question": "TTS voice sounds the same quality as the one they used for the Jeopardy show.","aSentId": 9341,"answer": "Yes it is the same voice (as described in the blog). We will create new models and upgrade the quality later this year.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 9342,"question": "Yes it is the same voice (as described in the blog). We will create new models and upgrade the quality later this year.","aSentId": 9343,"answer": "Hey, sorry to bother you here, but I thought I'd ask anyway. \n\nI just want to be able to experiment with the watson APIs and don't really care about other bluemix services, my bluemix trial just expired and it says add credit card.\n\nIs there a way to play with the watson APIs completely for free without adding a credit card for bluemix? I just want to access the watson stuff from my own computer, not from bluemix instances or whatever. \n\nAll those services are there on the same page, bluemix stuff and watson, it's really confusing because it didn't seem watson stuff use the limited free bluemix \"credits\" (don't remember how it's called) but only has usage limits.\n\nI got to run like 3 queries and then got distracted with work and the trial expired :-\\","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 9344,"question": "Hey, sorry to bother you here, but I thought I'd ask anyway. \n\nI just want to be able to experiment with the watson APIs and don't really care about other bluemix services, my bluemix trial just expired and it says add credit card.\n\nIs there a way to play with the watson APIs completely for free without adding a credit card for bluemix? I just want to access the watson stuff from my own computer, not from bluemix instances or whatever. \n\nAll those services are there on the same page, bluemix stuff and watson, it's really confusing because it didn't seem watson stuff use the limited free bluemix \"credits\" (don't remember how it's called) but only has usage limits.\n\nI got to run like 3 queries and then got distracted with work and the trial expired :-\\","aSentId": 9345,"answer": "Right now you can use the Watson services for free. But you do need to go through BlueMix from a registration standpoint.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 9349,"question": "How Google Inbox shares 70% of its code across Android, iOS, and the Web","aSentId": 9350,"answer": "Is there any possibility of a tool that goes in the opposite direction?","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 9351,"question": "Is there any possibility of a tool that goes in the opposite direction?","aSentId": 9352,"answer": "Yes, that's what cross-compilers do.\n\n\\joke","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 9349,"question": "How Google Inbox shares 70% of its code across Android, iOS, and the Web","aSentId": 9354,"answer": "I've been down this road and generally you don't end up in a pleasant place. 70% code share is a great statistic on the surface, but it often amounts to an ugly dark side. \n\nThat is to say, any time savings you've gained by re-using code, is generally equal to the amount of time lost dealing with issues that come about from being an abstract world that wraps up multiple platforms. \n\nLet me break down a couple of points.\n\n**1)** Writing an app for multiple platforms has natural incompatibilities. Even putting aside code/API differences, good UI/UX practices are different in various situations and users can detect when something feels inconsistent and not native.\n\n**2)** It's often hard to take advantage of native features that exist on one individual platform and not the rest. Some times you can \"de-feature\", but others it's not as simple. It might be using a CollectionView differently, or handling animations.  \n\n**3)** Your code looks like throw back #ifdef. No matter what you do or how much you abstract things, you'll have code that looks like this:\n\n\n    if (core.isAndroid()) {\n        // Android does this differently, so we have to too\n        system.doItDifferently();\n    } else if (core.isIOS()) {\n        system.doItNormal();\n    }\n\n\n**4)** It may happen often, it may be rare, but at least once in your project you'll have a really odd bug that you can't explain and you can't figure out. You'll spend days if you're lucky, weeks if not, tracking it down. In the end, your code will be write, but the system that converts the environment abstractions into native code will do something you didn't expect or predict. If you're a GWT user you know exactly what I'm talking about.\n\n**DISCLAIMER:** Clearly I've never seen Google Inbox code. I'm just speaking from personal experience on the topic. My experiences in this area have taught my this level of code reuse is a facade. \n\n-------------\n\n**Edit: Since I don't have the time to respond to each of you, here ya go. Read it, don't read, I don't care. This was just some cautionary experience. I hope you go out and try to prove me wrong by spending years work on one of these projects.** \n\nWith regards to point #1. Yeap, I didn't read the article fully and this generally doesn't apply. But I will point out that the client is a slave to the server. Different UI needs can result in cascading effects reaching the DB. But generally this point is void.\n\nWith regards to point #2 it's not just UI features that it's hard to take advantage of. Lots of platforms have native low level components/backend components. Take for example iOS Core Data or Android's SQL. My point was all of these things are part of a large eco-system that the platform intends for you to use and have work togehter.\n\nWith regards to point #3, I didn't literally mean #ifdef. I meant that you would build objects/classes/structures/whatever to abstract large amounts of the code. This is obvious. But there will be times where someone get's lazy, is in a hurry or it's just not practical and you'll end up that that code block. I've seen these types of projects play out and that's my experience.\n\nWith regards to point #4, this point wasn't solely about GWT. I've seen this on modern mobile platforms where projects try to have \"one code base that works for iOS, Android, Windows\". I've also seen this more recently using crossrider trying to build write once browser extensions. \n","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 9355,"question": "I've been down this road and generally you don't end up in a pleasant place. 70% code share is a great statistic on the surface, but it often amounts to an ugly dark side. \n\nThat is to say, any time savings you've gained by re-using code, is generally equal to the amount of time lost dealing with issues that come about from being an abstract world that wraps up multiple platforms. \n\nLet me break down a couple of points.\n\n**1)** Writing an app for multiple platforms has natural incompatibilities. Even putting aside code/API differences, good UI/UX practices are different in various situations and users can detect when something feels inconsistent and not native.\n\n**2)** It's often hard to take advantage of native features that exist on one individual platform and not the rest. Some times you can \"de-feature\", but others it's not as simple. It might be using a CollectionView differently, or handling animations.  \n\n**3)** Your code looks like throw back #ifdef. No matter what you do or how much you abstract things, you'll have code that looks like this:\n\n\n    if (core.isAndroid()) {\n        // Android does this differently, so we have to too\n        system.doItDifferently();\n    } else if (core.isIOS()) {\n        system.doItNormal();\n    }\n\n\n**4)** It may happen often, it may be rare, but at least once in your project you'll have a really odd bug that you can't explain and you can't figure out. You'll spend days if you're lucky, weeks if not, tracking it down. In the end, your code will be write, but the system that converts the environment abstractions into native code will do something you didn't expect or predict. If you're a GWT user you know exactly what I'm talking about.\n\n**DISCLAIMER:** Clearly I've never seen Google Inbox code. I'm just speaking from personal experience on the topic. My experiences in this area have taught my this level of code reuse is a facade. \n\n-------------\n\n**Edit: Since I don't have the time to respond to each of you, here ya go. Read it, don't read, I don't care. This was just some cautionary experience. I hope you go out and try to prove me wrong by spending years work on one of these projects.** \n\nWith regards to point #1. Yeap, I didn't read the article fully and this generally doesn't apply. But I will point out that the client is a slave to the server. Different UI needs can result in cascading effects reaching the DB. But generally this point is void.\n\nWith regards to point #2 it's not just UI features that it's hard to take advantage of. Lots of platforms have native low level components/backend components. Take for example iOS Core Data or Android's SQL. My point was all of these things are part of a large eco-system that the platform intends for you to use and have work togehter.\n\nWith regards to point #3, I didn't literally mean #ifdef. I meant that you would build objects/classes/structures/whatever to abstract large amounts of the code. This is obvious. But there will be times where someone get's lazy, is in a hurry or it's just not practical and you'll end up that that code block. I've seen these types of projects play out and that's my experience.\n\nWith regards to point #4, this point wasn't solely about GWT. I've seen this on modern mobile platforms where projects try to have \"one code base that works for iOS, Android, Windows\". I've also seen this more recently using crossrider trying to build write once browser extensions. \n","aSentId": 9356,"answer": "Compared to what though? Having two completely separate code bases isn't ideal either. You've then got to duplicate features, bug fixes and automated tests between the two which is very costly. Sure, ideally, you'd have native interfaces for both apps but not everyone has the time, budget and experience for that.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 9357,"question": "Compared to what though? Having two completely separate code bases isn't ideal either. You've then got to duplicate features, bug fixes and automated tests between the two which is very costly. Sure, ideally, you'd have native interfaces for both apps but not everyone has the time, budget and experience for that.","aSentId": 9358,"answer": "I'd be willing to wager that of the companies that do, Google would be pretty high on the list.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 9359,"question": "I'd be willing to wager that of the companies that do, Google would be pretty high on the list.","aSentId": 9360,"answer": "Haha, fair point. If you're an independent developer or a startup though, having a native interface to begin with isn't always going to be worth the cost in my opinion.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 9361,"question": "Haha, fair point. If you're an independent developer or a startup though, having a native interface to begin with isn't always going to be worth the cost in my opinion.","aSentId": 9362,"answer": "If you want to make a serious (non-game) app, you need to use native UI components. Users can feel the difference. I can't think of any high quality app that doesn't do that.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 9363,"question": "If you want to make a serious (non-game) app, you need to use native UI components. Users can feel the difference. I can't think of any high quality app that doesn't do that.","aSentId": 9364,"answer": "I agree users can feel the difference but I don't think it's always important in my opinion. Many enterprise apps use PhoneGap/HTML5 apps for example: they're cost effective if you want to provide an Android, iOS and web app from a 95% shared code base and the functionality provided outstrips them not feeling completely native. Again, not saying a native UI isn't important but I see posts all the time that consider the UI above all else when sometimes this just isn't practical.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 9365,"question": "I agree users can feel the difference but I don't think it's always important in my opinion. Many enterprise apps use PhoneGap/HTML5 apps for example: they're cost effective if you want to provide an Android, iOS and web app from a 95% shared code base and the functionality provided outstrips them not feeling completely native. Again, not saying a native UI isn't important but I see posts all the time that consider the UI above all else when sometimes this just isn't practical.","aSentId": 9366,"answer": "Enterprise apps do it because no one gives a crap about the user experience in enterprise stuff. The app is counterintuitive, slow, and buggy? Tough shit, that's what the enterprise uses, so sick it up.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 9355,"question": "I've been down this road and generally you don't end up in a pleasant place. 70% code share is a great statistic on the surface, but it often amounts to an ugly dark side. \n\nThat is to say, any time savings you've gained by re-using code, is generally equal to the amount of time lost dealing with issues that come about from being an abstract world that wraps up multiple platforms. \n\nLet me break down a couple of points.\n\n**1)** Writing an app for multiple platforms has natural incompatibilities. Even putting aside code/API differences, good UI/UX practices are different in various situations and users can detect when something feels inconsistent and not native.\n\n**2)** It's often hard to take advantage of native features that exist on one individual platform and not the rest. Some times you can \"de-feature\", but others it's not as simple. It might be using a CollectionView differently, or handling animations.  \n\n**3)** Your code looks like throw back #ifdef. No matter what you do or how much you abstract things, you'll have code that looks like this:\n\n\n    if (core.isAndroid()) {\n        // Android does this differently, so we have to too\n        system.doItDifferently();\n    } else if (core.isIOS()) {\n        system.doItNormal();\n    }\n\n\n**4)** It may happen often, it may be rare, but at least once in your project you'll have a really odd bug that you can't explain and you can't figure out. You'll spend days if you're lucky, weeks if not, tracking it down. In the end, your code will be write, but the system that converts the environment abstractions into native code will do something you didn't expect or predict. If you're a GWT user you know exactly what I'm talking about.\n\n**DISCLAIMER:** Clearly I've never seen Google Inbox code. I'm just speaking from personal experience on the topic. My experiences in this area have taught my this level of code reuse is a facade. \n\n-------------\n\n**Edit: Since I don't have the time to respond to each of you, here ya go. Read it, don't read, I don't care. This was just some cautionary experience. I hope you go out and try to prove me wrong by spending years work on one of these projects.** \n\nWith regards to point #1. Yeap, I didn't read the article fully and this generally doesn't apply. But I will point out that the client is a slave to the server. Different UI needs can result in cascading effects reaching the DB. But generally this point is void.\n\nWith regards to point #2 it's not just UI features that it's hard to take advantage of. Lots of platforms have native low level components/backend components. Take for example iOS Core Data or Android's SQL. My point was all of these things are part of a large eco-system that the platform intends for you to use and have work togehter.\n\nWith regards to point #3, I didn't literally mean #ifdef. I meant that you would build objects/classes/structures/whatever to abstract large amounts of the code. This is obvious. But there will be times where someone get's lazy, is in a hurry or it's just not practical and you'll end up that that code block. I've seen these types of projects play out and that's my experience.\n\nWith regards to point #4, this point wasn't solely about GWT. I've seen this on modern mobile platforms where projects try to have \"one code base that works for iOS, Android, Windows\". I've also seen this more recently using crossrider trying to build write once browser extensions. \n","aSentId": 9368,"answer": "\\#1 and #2 refer to the UI, which they explicitly mention is NOT shared. They're talking about taking core network/logic libraries and cross-compiling. This is definitely an easier task, although I'd imagine you probably hit #3 and #4 (although I'd argue you can always run into #4 even without cross compiling :P).","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 9369,"question": "\\#1 and #2 refer to the UI, which they explicitly mention is NOT shared. They're talking about taking core network/logic libraries and cross-compiling. This is definitely an easier task, although I'd imagine you probably hit #3 and #4 (although I'd argue you can always run into #4 even without cross compiling :P).","aSentId": 9370,"answer": "TIL don't start posts in /r/programming with hash signs.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 9371,"question": "TIL don't start posts in /r/programming with hash signs.","aSentId": 9372,"answer": "It's everywhere on reddit, actually.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 9373,"question": "It's everywhere on reddit, actually.","aSentId": 9374,"answer": "Maybe it's part of the latest master stylesheet change, but the hash'd text was never so large.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 9375,"question": "Maybe it's part of the latest master stylesheet change, but the hash'd text was never so large.","aSentId": 9376,"answer": "Yes, they mentioned that they made it more useful, it used to be the same slightly larger for all header types except the bluetext. Now it's \n\n__USUAL BOLD__\n\n# ONE\n\n## TWO\n\n### THREE\n\n#### FOUR\n\n##### FIVE\n\n###### SIX\n\n####### SEVEN\n\n","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 9377,"question": "Yes, they mentioned that they made it more useful, it used to be the same slightly larger for all header types except the bluetext. Now it's \n\n__USUAL BOLD__\n\n# ONE\n\n## TWO\n\n### THREE\n\n#### FOUR\n\n##### FIVE\n\n###### SIX\n\n####### SEVEN\n\n","aSentId": 9378,"answer": "\"Useful\". As someone who was already running a 90% zoom for the whole domain, I think it's awful.\n\nBut yeah, thanks for the confirmation.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 9371,"question": "TIL don't start posts in /r/programming with hash signs.","aSentId": 9380,"answer": "#YOLO","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 9381,"question": "#YOLO","aSentId": 9382,"answer": "#IT WORKS!!!!","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 9371,"question": "TIL don't start posts in /r/programming with hash signs.","aSentId": 9384,"answer": "Oh man. I did not know this...","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 9385,"question": "Oh man. I did not know this...","aSentId": 9386,"answer": "At first, I just thought you were being a dick.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 9369,"question": "\\#1 and #2 refer to the UI, which they explicitly mention is NOT shared. They're talking about taking core network/logic libraries and cross-compiling. This is definitely an easier task, although I'd imagine you probably hit #3 and #4 (although I'd argue you can always run into #4 even without cross compiling :P).","aSentId": 9388,"answer": "My first thought, too was \"so almost every third line is platform abstraction\" which sounds decidedly less pleasant. \n\nHowever, seeing that it's just backend code, cross-language-compiled meands that almost 1/3^rd is UI, which sounds reasonable. \n\nThere's probably still a lot of extra work in getting debugging etc. to work nicely, and/or it requires devs to understand the mapping between native and actual source. But still, sounds good.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 9369,"question": "\\#1 and #2 refer to the UI, which they explicitly mention is NOT shared. They're talking about taking core network/logic libraries and cross-compiling. This is definitely an easier task, although I'd imagine you probably hit #3 and #4 (although I'd argue you can always run into #4 even without cross compiling :P).","aSentId": 9390,"answer": "Whoa, settle down there buddy.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 9391,"question": "Whoa, settle down there buddy.","aSentId": 9392,"answer": "#ITS JUST A HASHTAG IM NOT THAT MAD I SWEAR","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 9393,"question": "#ITS JUST A HASHTAG IM NOT THAT MAD I SWEAR","aSentId": 9394,"answer": "#justhashtagthings","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 9396,"question": "It seems you forgot to escape a #.","aSentId": 9397,"answer": "I had no idea. Fixed!","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 9396,"question": "It seems you forgot to escape a #.","aSentId": 9399,"answer": "Why should you have to?  This should be handled.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 9400,"question": "Why should you have to?  This should be handled.","aSentId": 9401,"answer": "There's this thing called markdown...","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 9355,"question": "I've been down this road and generally you don't end up in a pleasant place. 70% code share is a great statistic on the surface, but it often amounts to an ugly dark side. \n\nThat is to say, any time savings you've gained by re-using code, is generally equal to the amount of time lost dealing with issues that come about from being an abstract world that wraps up multiple platforms. \n\nLet me break down a couple of points.\n\n**1)** Writing an app for multiple platforms has natural incompatibilities. Even putting aside code/API differences, good UI/UX practices are different in various situations and users can detect when something feels inconsistent and not native.\n\n**2)** It's often hard to take advantage of native features that exist on one individual platform and not the rest. Some times you can \"de-feature\", but others it's not as simple. It might be using a CollectionView differently, or handling animations.  \n\n**3)** Your code looks like throw back #ifdef. No matter what you do or how much you abstract things, you'll have code that looks like this:\n\n\n    if (core.isAndroid()) {\n        // Android does this differently, so we have to too\n        system.doItDifferently();\n    } else if (core.isIOS()) {\n        system.doItNormal();\n    }\n\n\n**4)** It may happen often, it may be rare, but at least once in your project you'll have a really odd bug that you can't explain and you can't figure out. You'll spend days if you're lucky, weeks if not, tracking it down. In the end, your code will be write, but the system that converts the environment abstractions into native code will do something you didn't expect or predict. If you're a GWT user you know exactly what I'm talking about.\n\n**DISCLAIMER:** Clearly I've never seen Google Inbox code. I'm just speaking from personal experience on the topic. My experiences in this area have taught my this level of code reuse is a facade. \n\n-------------\n\n**Edit: Since I don't have the time to respond to each of you, here ya go. Read it, don't read, I don't care. This was just some cautionary experience. I hope you go out and try to prove me wrong by spending years work on one of these projects.** \n\nWith regards to point #1. Yeap, I didn't read the article fully and this generally doesn't apply. But I will point out that the client is a slave to the server. Different UI needs can result in cascading effects reaching the DB. But generally this point is void.\n\nWith regards to point #2 it's not just UI features that it's hard to take advantage of. Lots of platforms have native low level components/backend components. Take for example iOS Core Data or Android's SQL. My point was all of these things are part of a large eco-system that the platform intends for you to use and have work togehter.\n\nWith regards to point #3, I didn't literally mean #ifdef. I meant that you would build objects/classes/structures/whatever to abstract large amounts of the code. This is obvious. But there will be times where someone get's lazy, is in a hurry or it's just not practical and you'll end up that that code block. I've seen these types of projects play out and that's my experience.\n\nWith regards to point #4, this point wasn't solely about GWT. I've seen this on modern mobile platforms where projects try to have \"one code base that works for iOS, Android, Windows\". I've also seen this more recently using crossrider trying to build write once browser extensions. \n","aSentId": 9405,"answer": "You should not solve platform differences like you do in point #3. Its definitely not needed. Most abstractions are in the converter not in your actual codebase. And if you need different implementations you would have one interface with platform dependent implementations. You never do if's like you say. #ifdefs where ugly then, and they are ugly now. ","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 9407,"question": "&gt; 3) Your code looks like throw back #ifdef. No matter what you do or how much you abstract things, you'll have code that looks like this:\n&gt; \n&gt; \n&gt; \n&gt;      if (core.isAndroid()) {\n&gt;    \n&gt;         // Android does this differently, so we have to too\n&gt;     \n&gt;         system.doItDifferently();\n&gt; \n&gt;     } else if (core.isIOS()) {\n&gt; \n&gt;     system.doItNormal();\n&gt;     \n&gt;     }\n\nThere's a third way besides this and `#ifdef`, and that is to have a good interface/implementation split with different implementations as needed -- you *can* do it with C's `.h` and `.c` split, but its a lot of work compared to Ada which does it more naturally (in the sense that the interface/implementation is idiomatically split).","aSentId": 9408,"answer": "So does Go.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 9407,"question": "&gt; 3) Your code looks like throw back #ifdef. No matter what you do or how much you abstract things, you'll have code that looks like this:\n&gt; \n&gt; \n&gt; \n&gt;      if (core.isAndroid()) {\n&gt;    \n&gt;         // Android does this differently, so we have to too\n&gt;     \n&gt;         system.doItDifferently();\n&gt; \n&gt;     } else if (core.isIOS()) {\n&gt; \n&gt;     system.doItNormal();\n&gt;     \n&gt;     }\n\nThere's a third way besides this and `#ifdef`, and that is to have a good interface/implementation split with different implementations as needed -- you *can* do it with C's `.h` and `.c` split, but its a lot of work compared to Ada which does it more naturally (in the sense that the interface/implementation is idiomatically split).","aSentId": 9410,"answer": "You need more fake Internet points.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 9412,"question": "I don't think it's a pleasant place to go, but you got it wrong in basically all four points.\n\n1: The natural incompatibilities are not a problem, because they write native UIs for every platform they support. Their core code is Java, and is transpiled into Objective-C and Javascript as needed, and then bound by their native UI libraries to create the application for that platform. Any incompatibilities are the UI developers' fault, not the core platform code's fault.\n\n2: It's not hard to take advantage of native features, because, again, your applications *are* native - only the core code isn't. If the native platform has something that needs to plug into your core, you write an abstraction layer for it, and then the core only ever touches the abstraction layer. This is pretty fundamental Software Engineering, and anyone who has ever touched a portable library understands how these things work.\n\n3: The #ifdefs can exist... but are usually pretty rare in well abstracted code. The places where the #ifdefs tend to exist are just getting the machine-bits right - what's the size of this integer type, how big is a pointer, are we big or little endian, do we need this library on this platform, that sort of thing. After that, the core never knows any different.\n\n4: The debugging is rarely that bad for portable code, since the code almost certainly works the same in the code. What's more likely to be a debugging nightmare is that \"platform A's frobnitz() function returns OKAY when things are working, but platform B's mysteriously returns WHAT when things are working\" - it's the kind of thing that could and should be solved with documentation, but people often forget that platforms don't always work the same and that's when you get into trouble.\n\nI've worked on portable code bases for nearly my entire life as a software developer, and speaking from my experiences, it's the only way to ever code a durable application. Platforms change with the winds, and if your code is locked into one, you'll be kicking your own ass in a few years when your big customers say they're moving on.\n\nNow for my reason on why I don't think it's a pleasant place to go: Transpiling Java has got to be the most hellish thing I can imagine. Java's memory model is a complete foreign language outside of Java. It looks nothing like C's. It only vaguely smells like Javascript's. I can imagine from the notes in the article that this thing breaks almost any time they get a \"unique\" looking Java function, so they probably have to pick some coding pattern and stick really closely to it in order to get their transpiler not to vomit every time a new developer comes onboard the project. If there's *anywhere* that the wheels come off of this thing, it's gotta be there.","aSentId": 9413,"answer": "&gt; Java's memory model is a complete foreign language outside of Java... It only vaguely smells like Javascript's.\n\nBoth languages are garbage collected.  Why do these differences matter?","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 9415,"question": "I once did 3, then I looked at one of the cross platform libs I was using, copied the way it abstracted things and spend maybe an hour re factoring. 3 only applies to code grown so old and ugly that nobody would touch it out of fear of breaking things, as heartbleed has shown you don't want to have such code.\n\n","aSentId": 9416,"answer": "Is there a small example of what you're talking about you could point me to? In C and C++ I'm not sure how you could abstract this stuff without some #ifdefs. As an example, say you need to write a reasonably cross platform directory lister class. This is something I've had to work on for my game project at school. Currently I've not yet written the poisix implementation, but regardless, I don't see getting around needing #ifdefs to change what's contained in the class on a per platform basis as posix and Windows just do these things entirely differently. ","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 9417,"question": "Is there a small example of what you're talking about you could point me to? In C and C++ I'm not sure how you could abstract this stuff without some #ifdefs. As an example, say you need to write a reasonably cross platform directory lister class. This is something I've had to work on for my game project at school. Currently I've not yet written the poisix implementation, but regardless, I don't see getting around needing #ifdefs to change what's contained in the class on a per platform basis as posix and Windows just do these things entirely differently. ","aSentId": 9418,"answer": "You can end up with #ifdefs as part of your implementation. However the code using your abstraction should not have to deal with #ifdefs as long as it does not exceed the use cases you planed for.\n\n\n","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 9349,"question": "How Google Inbox shares 70% of its code across Android, iOS, and the Web","aSentId": 9427,"answer": "I've been using the Web Toolkit for many years.  It does some pretty great things but once you commit to it then it really locks you into using it.  I had considered ditching it a while back but realized I was way too deep with their (very nice) object serialization.  \n\nNo serious complaints other than the lock in, though.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 9428,"question": "I've been using the Web Toolkit for many years.  It does some pretty great things but once you commit to it then it really locks you into using it.  I had considered ditching it a while back but realized I was way too deep with their (very nice) object serialization.  \n\nNo serious complaints other than the lock in, though.","aSentId": 9429,"answer": "RequestFactory makes things too damn easy lol","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 9432,"question": "There are 3 things here: Java android code, java code being compiled to javascript for web via GWT, and Java code being compiled to objective-C. This article stupidly glosses over the java being compiled to javascript via GWT, which is also extremely important.  I love GWT and not having to write javascript code any more.\n\nIf you use GWT, you can then use something like PhoneGap to skip objective C compilation, and use the same codebase over all platforms, while having the performance benefits of GWT's compiler (it optimizes your code to be near native fast)","aSentId": 9433,"answer": "I found GWT too hard to maintain. I adopted a GWT project at work and no one is ever keen on fixing defects on those parts. ","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 9434,"question": "I found GWT too hard to maintain. I adopted a GWT project at work and no one is ever keen on fixing defects on those parts. ","aSentId": 9435,"answer": "it must've been a legacy project. in the early days gwt was fairly hard, but things are much better nowadays. i can't live without gwt.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 9437,"question": "Anyone knows something about Xamarin and how it's easy to implement a solution like this with it? Is it a mature technology?","aSentId": 9438,"answer": "Price is an obstacle. They price $999 per platform per year per developer. The insanity of triple \"per\" pricing. Enterprise license with hotfixes costs $1899 triple \"per\".\n\nTheir customer base is rather small, and so are their staff. Their bug tracker has a ton of unfixed bugs, either blissfully ignored by their developers or severely backlogged. They probably do their best, having invested millions of dollars.\n\nPutting that aside, the only things that you can use across the platforms are small. There's no unified wrapper API to just code once and run everywhere. You just have to be fluent in each platform API. The main advantage is being able to code in C# and reuse your existing C# algorithmic/utility/POCO code.\n\nIn all, Xarmin is not a way to skip over specific platform APIs. You will have to understand them thoroughly; however, you can code it all in C#. No need to learn Java or Objective C, although it's good if you can since you may find native samples/examples only in Java or Objective C.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 9437,"question": "Anyone knows something about Xamarin and how it's easy to implement a solution like this with it? Is it a mature technology?","aSentId": 9440,"answer": "Do some searching on this and other subreddits, but from what I've seen the feedback has been generally on the negative side.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 9442,"question": "Correct my naivety here, but isn't it *relatively* easy to share a large portion of your code between these kinds of platforms. I've never done android or iOS so I may be way off base. Put all your core logic in one place (web server) and expose the methods via an API. Maybe not 70% and there are obviously plenty of situations where you can't make a server call (like offline, or handling poor connection I guess) but I still think it is the simplest way to share business logic.","aSentId": 9443,"answer": "That's 70% of the client code. Server side code is obviously constant, and massive, but you simply can't go back to the server for every click (for both performance and offline reasons). That means you need a local data model, and that code is being written once and shared.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 9442,"question": "Correct my naivety here, but isn't it *relatively* easy to share a large portion of your code between these kinds of platforms. I've never done android or iOS so I may be way off base. Put all your core logic in one place (web server) and expose the methods via an API. Maybe not 70% and there are obviously plenty of situations where you can't make a server call (like offline, or handling poor connection I guess) but I still think it is the simplest way to share business logic.","aSentId": 9445,"answer": "But when you handle offline all the business logic goes from, server to device, unless you meant \"offline.\"","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 9446,"question": "But when you handle offline all the business logic goes from, server to device, unless you meant \"offline.\"","aSentId": 9447,"answer": "Like I said, I've never done phone dev before. Just a javascript junkie. My ignorant idea of handling offline in this case is some kind of local if/else where if offline == true do something else like queue it up. That queue up code would obviously have to be device specific, which is where we get into the non-shared stuff.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 9448,"question": "Like I said, I've never done phone dev before. Just a javascript junkie. My ignorant idea of handling offline in this case is some kind of local if/else where if offline == true do something else like queue it up. That queue up code would obviously have to be device specific, which is where we get into the non-shared stuff.","aSentId": 9449,"answer": "But when you say, remind me of this email when I get home, that isn't just a queue, it is the entire logic of storing and retrieving at the specified place or time. And it has to work even when the device has been rebooted.\n\nAnyway Google has done a really good job with the offline support, so good in fact it doesn't even seem to retrieve updates from while it's online until I tell it... I think something is wrong.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 9442,"question": "Correct my naivety here, but isn't it *relatively* easy to share a large portion of your code between these kinds of platforms. I've never done android or iOS so I may be way off base. Put all your core logic in one place (web server) and expose the methods via an API. Maybe not 70% and there are obviously plenty of situations where you can't make a server call (like offline, or handling poor connection I guess) but I still think it is the simplest way to share business logic.","aSentId": 9451,"answer": "There's HTML hybrid apps, which is good for simpler apps. \n\nYou can also use C++ to have code on both platforms, but not a lot of developers are capable of it. It's hard to learn, but not bad once you do","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 9454,"question": "Am I the only one who asked \"only 70 percent?\" ","aSentId": 9455,"answer": "I'm guessing that's all the backend of it. My guess would be that 30% of all the code would be for the ui of all three platforms. My guess would be that 90% of the code in each of these are the same and 10% is the ui. Across 3 platforms, that is 10% each, or 30%. That is how I am imagining it at least","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 9456,"question": "I'm guessing that's all the backend of it. My guess would be that 30% of all the code would be for the ui of all three platforms. My guess would be that 90% of the code in each of these are the same and 10% is the ui. Across 3 platforms, that is 10% each, or 30%. That is how I am imagining it at least","aSentId": 9457,"answer": "None of this is \"backend\", all of this is client code.\n\nThe 70% that's shared is all of the logic behind the UI, the networking, the storage, and such - and the 30% not shared is the actual native UI on each platform.\n","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 9458,"question": "None of this is \"backend\", all of this is client code.\n\nThe 70% that's shared is all of the logic behind the UI, the networking, the storage, and such - and the 30% not shared is the actual native UI on each platform.\n","aSentId": 9459,"answer": "That's what I was attempting to convey in my original response. I just couldn't get the words correct so I incorrectly used \"backend\"","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 9456,"question": "I'm guessing that's all the backend of it. My guess would be that 30% of all the code would be for the ui of all three platforms. My guess would be that 90% of the code in each of these are the same and 10% is the ui. Across 3 platforms, that is 10% each, or 30%. That is how I am imagining it at least","aSentId": 9461,"answer": "That would work for me if it is how they want to count it.  Or maybe the back end is really light...\n\nI know a number of games I've worked on twenty percent (of each final executable) is entirely too much to devote to each platform (of the final game). I figure Google should be even better than we were...   But then again how much code of gmail on an app?  Probably not much, the core of the processing should be on the server.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 9464,"question": "Google inbox is terrible. They should abandon it.","aSentId": 9465,"answer": "Why's that? I enjoy it.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 9466,"question": "Why's that? I enjoy it.","aSentId": 9467,"answer": "It's basically just a bad email app with all your reminders to get in the way.  I don't need to remind myself to read emaiis.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 9464,"question": "Google inbox is terrible. They should abandon it.","aSentId": 9469,"answer": "Fuck you. ","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 9473,"question": "Ten tips for wonderful bash productivity","aSentId": 9474,"answer": "Writes \"please don't make me use perl.\"\n\nUses awk.\n\nImagine this as one of those memes the younger generation likes to make.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 9473,"question": "Ten tips for wonderful bash productivity","aSentId": 9476,"answer": "A few optimizations for your scripts\n\n  1. sed -i '1iline to insert' path/to/file/you/want/to/change.txt\n  4. f=\\`mktemp -p ~/Dropbox\\` &amp;&amp; gvim $f\n  7. function col() { awk \"{print \\$$1}\" }\n  8. docker images | col 3 | xargs | sed '1d'","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 9477,"question": "A few optimizations for your scripts\n\n  1. sed -i '1iline to insert' path/to/file/you/want/to/change.txt\n  4. f=\\`mktemp -p ~/Dropbox\\` &amp;&amp; gvim $f\n  7. function col() { awk \"{print \\$$1}\" }\n  8. docker images | col 3 | xargs | sed '1d'","aSentId": 9478,"answer": "&gt;     f=`mktemp -p ~/Dropbox` &amp;&amp; gvim $f\n\nWhy not just `gvim $(mktemp -p ~/Dropbox)`?\n\nAlso a warning, `-p` and calling mktemp with no template or prefix isn't portable, it's GNU-only. Also no `-i` in POSIX sed, and BSD sed requires a parameter for `-i`.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 9477,"question": "A few optimizations for your scripts\n\n  1. sed -i '1iline to insert' path/to/file/you/want/to/change.txt\n  4. f=\\`mktemp -p ~/Dropbox\\` &amp;&amp; gvim $f\n  7. function col() { awk \"{print \\$$1}\" }\n  8. docker images | col 3 | xargs | sed '1d'","aSentId": 9480,"answer": "Oh juicy optimisations! Thanks!","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 9477,"question": "A few optimizations for your scripts\n\n  1. sed -i '1iline to insert' path/to/file/you/want/to/change.txt\n  4. f=\\`mktemp -p ~/Dropbox\\` &amp;&amp; gvim $f\n  7. function col() { awk \"{print \\$$1}\" }\n  8. docker images | col 3 | xargs | sed '1d'","aSentId": 9482,"answer": "FYI, you put the correct numbers when you typed this, but reddit's markdown formatter automatically made them 1-4","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 9473,"question": "Ten tips for wonderful bash productivity","aSentId": 9484,"answer": "Thanks for sharing. A few things you might want to add =)\n\nYou can use alias to, well `alias sc=scratch` for example.\n\nIf you have gnu tail you can skip first line with `tail -n +2`\n\nInstead of your col you could use `tr -s ' ' | cut -f x`\n\nEdit: grammar","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 9485,"question": "Thanks for sharing. A few things you might want to add =)\n\nYou can use alias to, well `alias sc=scratch` for example.\n\nIf you have gnu tail you can skip first line with `tail -n +2`\n\nInstead of your col you could use `tr -s ' ' | cut -f x`\n\nEdit: grammar","aSentId": 9486,"answer": "See there's always so many ways to do these manipulations. Love your suggestions, thanks!","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 9488,"question": "I just tried:\n\ngit status -s | awk '{print 2}'\n\noutput was \"2\"\n\n?","aSentId": 9489,"answer": "Hey well spotted! The formatting ate a dollar sign! It should be:\n\ngit status -s | awk '{print $2}'\n\nthank you!","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 9490,"question": "Hey well spotted! The formatting ate a dollar sign! It should be:\n\ngit status -s | awk '{print $2}'\n\nthank you!","aSentId": 9491,"answer": "That's much simpler than what I was using which is :\n\ngfilterstat () { git status -s | grep \"\\^.$1\" | sed -r 's/\\^...//'; }\n\nalthough my bash function allows me to specifically get only one status type like.\n\nCool thanks for sharing!\n\nEDIT: fixed forgetting to escape carets....","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 9492,"question": "That's much simpler than what I was using which is :\n\ngfilterstat () { git status -s | grep \"\\^.$1\" | sed -r 's/\\^...//'; }\n\nalthough my bash function allows me to specifically get only one status type like.\n\nCool thanks for sharing!\n\nEDIT: fixed forgetting to escape carets....","aSentId": 9493,"answer": "You need to escape your carets. Reddit thinks you're trying to make superscripts:\n\ngfilterstat () { git status -s | grep \"\\^.$1\" | sed -r 's/\\^...//'; }\n","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 9494,"question": "You need to escape your carets. Reddit thinks you're trying to make superscripts:\n\ngfilterstat () { git status -s | grep \"\\^.$1\" | sed -r 's/\\^...//'; }\n","aSentId": 9495,"answer": "Hah, thanks, yeah I posted it and walked away without looking at what it looked like.  Thanks.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 9497,"question": "As /u/usernameliteral has pointed out, most of these \"tips\" aren't bash-specific.\n\nAnd for those that are, [fish shell](http://fishshell.com/) offers the same functionality without any fancy configuration, in an easier-to-use package.  For example, \"bashmarking\" is as simple as pressing Alt+Left Arrow...","aSentId": 9498,"answer": "That's a very interesting looking shell. It seems similar to the rc shell from plan 9.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 9505,"question": "&gt;Add a line at the top of a file\n\nNot bash, sed\n\n&gt;Recursive global search and replace\n\nNot much bash (all he did was define a bash function), mostly find and sed\n\n&gt;Open a scratch file in vim and Dropbox\n\nAnother bash function that uses gvim, openssl, and tr\n\n&gt;Download a file following redirects, with https, security concerns\n\ncurl\n\n&gt;Extract a column from a tabular output (my most used **awk** trick)\n\nHe even says it in the title.\n\n&gt;Skip first x words in line\n\ncut\n\n&gt;Create your very own command package\n\nOkay, there's a bash function and a bash switch statement. (I actually use something like this for cd-ing to common dirs.\n\n\"Bash\" *does not* mean \"any combination of common CLI tools\".","aSentId": 9506,"answer": "It's not \"ten tips for bash\", it's \"ten tips for bash productivity\". They'll also increase your productivity in any text-based environment that has access to piping and gnu coreutils, but it's not wrong to say it'll increase bash productivity. ","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 9507,"question": "It's not \"ten tips for bash\", it's \"ten tips for bash productivity\". They'll also increase your productivity in any text-based environment that has access to piping and gnu coreutils, but it's not wrong to say it'll increase bash productivity. ","aSentId": 9508,"answer": "I will concede that it is not exactly untrue, but I maintain that it is misleading.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 9509,"question": "I will concede that it is not exactly untrue, but I maintain that it is misleading.","aSentId": 9510,"answer": "I disagree: most people interact with the coreutils exclusively through bash, or to a certain extent zsh. Further, there is no environment I know of that has bash and not the coreutils. Then, realize that much of a bash session is interacting with coreutils, and so the main way to become more productive in bash is to become more effective with the coreutils. \n\nHe could also have titled it \"tips for using coreutils\" but his title accurately describes the consequences of those tips. \n\nIf you're going to be whiny and pedantic about \"technically correct\" at least make sure you're technically correct. ","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 9511,"question": "I disagree: most people interact with the coreutils exclusively through bash, or to a certain extent zsh. Further, there is no environment I know of that has bash and not the coreutils. Then, realize that much of a bash session is interacting with coreutils, and so the main way to become more productive in bash is to become more effective with the coreutils. \n\nHe could also have titled it \"tips for using coreutils\" but his title accurately describes the consequences of those tips. \n\nIf you're going to be whiny and pedantic about \"technically correct\" at least make sure you're technically correct. ","aSentId": 9512,"answer": "As long as we're being technically correct, curl is not part of GNU coreutils (it's not even installed by default on some distros). :-) Also, I wasn't being pedantic, I genuinely thought that the article was actually about Bash when I read the title. It could easily have been an article about how to redirect other file descriptors than stdout (which many people don't know how to do), or using redirection instead of `cat`, or a lot of other stuff that's actually about Bash.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 9505,"question": "&gt;Add a line at the top of a file\n\nNot bash, sed\n\n&gt;Recursive global search and replace\n\nNot much bash (all he did was define a bash function), mostly find and sed\n\n&gt;Open a scratch file in vim and Dropbox\n\nAnother bash function that uses gvim, openssl, and tr\n\n&gt;Download a file following redirects, with https, security concerns\n\ncurl\n\n&gt;Extract a column from a tabular output (my most used **awk** trick)\n\nHe even says it in the title.\n\n&gt;Skip first x words in line\n\ncut\n\n&gt;Create your very own command package\n\nOkay, there's a bash function and a bash switch statement. (I actually use something like this for cd-ing to common dirs.\n\n\"Bash\" *does not* mean \"any combination of common CLI tools\".","aSentId": 9514,"answer": "I am curious about your use case of cd-ing to common directories and if perhaps it could be simplified using `$CDPATH`?","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 9505,"question": "&gt;Add a line at the top of a file\n\nNot bash, sed\n\n&gt;Recursive global search and replace\n\nNot much bash (all he did was define a bash function), mostly find and sed\n\n&gt;Open a scratch file in vim and Dropbox\n\nAnother bash function that uses gvim, openssl, and tr\n\n&gt;Download a file following redirects, with https, security concerns\n\ncurl\n\n&gt;Extract a column from a tabular output (my most used **awk** trick)\n\nHe even says it in the title.\n\n&gt;Skip first x words in line\n\ncut\n\n&gt;Create your very own command package\n\nOkay, there's a bash function and a bash switch statement. (I actually use something like this for cd-ing to common dirs.\n\n\"Bash\" *does not* mean \"any combination of common CLI tools\".","aSentId": 9516,"answer": "Fair point usernameliteral! I dig you username with regards to this comment btw ;).","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 9517,"question": "Fair point usernameliteral! I dig you username with regards to this comment btw ;).","aSentId": 9518,"answer": "My username was actually meant to mean a literal of the type username (like a string literal).\n\nBy the way, I did actually find the article useful (I'm going to replace the script I mentioned in my previous comment with the bashmarks script), I was just disappointed when I first read it because I had hoped it was about Bash, which I've been intending to become more comfortable with writing scripts for.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 9519,"question": "My username was actually meant to mean a literal of the type username (like a string literal).\n\nBy the way, I did actually find the article useful (I'm going to replace the script I mentioned in my previous comment with the bashmarks script), I was just disappointed when I first read it because I had hoped it was about Bash, which I've been intending to become more comfortable with writing scripts for.","aSentId": 9520,"answer": "No worries. I understand your remark and indeed I used 'bash tips' in a broad sense ... instead than a more precise 'useful coreutils tips'.\n\nIn any case in the turn of a few hours helpful redditors have rewritten my short functions and aliases in an even more elegant and compact form .. which I'll gladly steal!","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 9523,"question": "Nim on mobile via Cordova.","aSentId": 9524,"answer": "Posting links to your own page is cool on here?","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 9525,"question": "Posting links to your own page is cool on here?","aSentId": 9526,"answer": "I see nothing about it in the sidebar, so yes.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 9525,"question": "Posting links to your own page is cool on here?","aSentId": 9528,"answer": "Yep, just as long as you don't abuse it.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 9531,"question": "How to quickly transfer large amounts of data over the network","aSentId": 9532,"answer": "TL;DR: Use rsync. Unless you have several gigabytes to terabytes of data being regularly transferred, in which case set up GridFTP infrastructure, unless that isn't available to you, in which case use Globus Online or Aspera, unless you can't or won't use software that requires a license, in which case use bbcp (which will require significant tuning), unless you have extremely large directory trees, in which case use rsync.\n\nTL;DR for the TL;DR: use bbcp/bbftp/lftp/netcat for initial transfers, rsync for everything after that, fancy proprietary software for TB-scale transfers.\n\nEDIT: The article does give a nice overview of available software packages and how they operate, differences between them, and effects of various options, with benchmarks.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 9534,"question": "An introduction to webgl programming through key ideas","aSentId": 9535,"answer": "All!  I wanted to begin writing again and I thought perhaps there was a sizable audience of web developers who have heard about webgl but never dabbled personally.  I wrote this article hoping to help them gain some basic context for GPU programming and hopefully develop a mental model that would help then while learning it in more details.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 9538,"question": "How to write Binary Search","aSentId": 9539,"answer": "Alternate title: How to Necropost Like a Motherfucker.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 9541,"question": "Railway Oriented Programming","aSentId": 9542,"answer": "Wasn't this a long blog article?  I'd rather read that.  This stuff is pretty dense.  ","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 9543,"question": "Wasn't this a long blog article?  I'd rather read that.  This stuff is pretty dense.  ","aSentId": 9544,"answer": "Yup, [here](http://fsharpforfunandprofit.com/posts/recipe-part1/) and [here (contd)](http://fsharpforfunandprofit.com/posts/recipe-part2/). Looks like really nice article about `Either`, especially considering that F# doesn't have `Either` by default (`Choice#of#` does not count, it's clumsy). Although for validation I think that applicative would be nicer...\n\nAnyway, for anyone willing to actually include `Either` in their F# toolbox, personally I'd recommend porting [Scalaz `Either`](https://github.com/scalaz/scalaz/blob/scalaz-seven/core/src/main/scala/scalaz/Either.scala); at least that's what I did (I think I even have it somewhere on github), although I went 'lite' route and cut out a lot of methods and - obviously - typeclass instances from original version.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 9541,"question": "Railway Oriented Programming","aSentId": 9546,"answer": "I liked how he explained monads using railway tracks.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 9548,"question": "Matt Cutts: 10 Lessons Learned from the Early Days of Google","aSentId": 9549,"answer": "\n&gt;You would be amazed what a difference it makes to just tell someone \u201cI would like to do X.\u201d If you are manager, if someone wants to work on something they will work twice as hard.\n\nIt's a lot easier to do agree to X, when cash is pouring out of the faucets.  ","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 9548,"question": "Matt Cutts: 10 Lessons Learned from the Early Days of Google","aSentId": 9551,"answer": "The author of this article is one of the worst writers I've ever had the misfortune to read. I spend my days working with numerous colleagues for whom English is a second or third language, and all of them write well enough to make this individual look like a drooling idiot. Aside from the horrible prose, the lack of English mastery, and the inability to string together even a single idea into a coherent thought, this writer doesn't even seem to understand the topic he's writing about.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 9553,"question": "Some hints on building message processing applications","aSentId": 9554,"answer": "Hmm, what mechanism is used to cope with overloading? Do queues just \"back up\" in a cascade of failure back to the client?\n\n&gt; Our system processes the messages from tenths of thousands of devices\n\nI think that's 100x less than the author meant to write :)","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 9555,"question": "Hmm, what mechanism is used to cope with overloading? Do queues just \"back up\" in a cascade of failure back to the client?\n\n&gt; Our system processes the messages from tenths of thousands of devices\n\nI think that's 100x less than the author meant to write :)","aSentId": 9556,"answer": "All your eggs are in the queue basket.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 9561,"question": "Microsoft backs Java for cross-platform mobile apps","aSentId": 9562,"answer": "Kind of a backstab at mono.\n\nMiguel must be throwing chairs around by now.  ","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 9563,"question": "Kind of a backstab at mono.\n\nMiguel must be throwing chairs around by now.  ","aSentId": 9564,"answer": "I don't think this affects Xamarin that much anyways.\n\nLong time C# coders are clearly not interested in going back 15 years in time and write java. ewww\n\nThis targets java devs who are too stupid to understand C# code and/or too poor to pay $25 a month for a Xamarin license. \n\nAnyways I think this is a move to trick java people into gaining interest for Windows Phone / Universal app development.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 9566,"question": "Consider static typing","aSentId": 9567,"answer": "Interesting.\n\n* CPython may be about to add type annotations.\n* Ruby wants to add static features.\n* PHP has had type hinting for non-scalar types for some time now, is about to get return type declarations (already passed) and now wants to add type hinting for scalar types.\n\nIt's funny how dynamic languages seem to move towards a more static approach, and you could argue that the inverse is also happening; just like imperative languages have been adding functional features.\n\nHaving worked with modern PHP, non-scalar type hinting (i.e. interfaces, classes) is something that has changed my productivity and my sanity. Even though there is no enforcement at compilation time, because of lack of compilation of course, the runtime telling you \"that's not supposed to go there\" is of immense help when debugging. Not to mention code readability and maintainability. Couple this with the fantastic tooling that JetBrains provides via PhpStorm and you don't even have to run the code to know you done fucked up.\n\nSince I started working with C#, it's been clear to me that static typing is superior to dynamic typing. And no, PHP is not my only exposure to it, I've written my share of Python code; it's the same.\n\nTL;DR: Ruby folks, be happy if this happens","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 9568,"question": "Interesting.\n\n* CPython may be about to add type annotations.\n* Ruby wants to add static features.\n* PHP has had type hinting for non-scalar types for some time now, is about to get return type declarations (already passed) and now wants to add type hinting for scalar types.\n\nIt's funny how dynamic languages seem to move towards a more static approach, and you could argue that the inverse is also happening; just like imperative languages have been adding functional features.\n\nHaving worked with modern PHP, non-scalar type hinting (i.e. interfaces, classes) is something that has changed my productivity and my sanity. Even though there is no enforcement at compilation time, because of lack of compilation of course, the runtime telling you \"that's not supposed to go there\" is of immense help when debugging. Not to mention code readability and maintainability. Couple this with the fantastic tooling that JetBrains provides via PhpStorm and you don't even have to run the code to know you done fucked up.\n\nSince I started working with C#, it's been clear to me that static typing is superior to dynamic typing. And no, PHP is not my only exposure to it, I've written my share of Python code; it's the same.\n\nTL;DR: Ruby folks, be happy if this happens","aSentId": 9569,"answer": "&gt; It's funny how dynamic languages seem to move towards a more static approach, and you could argue that the inverse is also happening\n\nThe movement of dynamic languages to static is strong and pervasive, that is, once you start using it, huge chunks of your source code will start growing static annotations. The movement of static languages to dynamic is anemic, weak, and often used just for interacting with particular systems with some form of \"variant\" type or in some small subsystem that probably has something to do with serialization, where it is still ultimately just a convenience.\n\nAnd even _those_ movements would probably be better served by something like Go's interfaces.\n\nPersonally, I'm ready to call it... dynamic typing is wrong. It is an accident of history that statically-typed languages were so bad in the 90s that dynamic languages were an improvement, but the answer turns out to be better static typing, which we increasingly have.\n\nThat said, let me not be misunderstood; the slew of dynamically-typed languages in the 1990s and early 2000s _were_ improvements in many ways over their predecessors. I do not mean that as a begrudging concession or anything, they were legitimately important and useful developments. But ultimately, they misdiagnosed the root problem. I say this with all respect; I sit here in 2015 judging the efforts of those in 1999 with massive amounts of hindsight and experience using languages that didn't even exist back then. All respect to Python and Perl and Ruby and Javascript. I have built much functioning software with them over the years. However, I must still judge dynamic typing on the wrong side of history in the end. I am sure I will have some equally cogent criticism of the new crop languages such as Rust in 20 years, but alas, the only way to get there is to try them out.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 9570,"question": "&gt; It's funny how dynamic languages seem to move towards a more static approach, and you could argue that the inverse is also happening\n\nThe movement of dynamic languages to static is strong and pervasive, that is, once you start using it, huge chunks of your source code will start growing static annotations. The movement of static languages to dynamic is anemic, weak, and often used just for interacting with particular systems with some form of \"variant\" type or in some small subsystem that probably has something to do with serialization, where it is still ultimately just a convenience.\n\nAnd even _those_ movements would probably be better served by something like Go's interfaces.\n\nPersonally, I'm ready to call it... dynamic typing is wrong. It is an accident of history that statically-typed languages were so bad in the 90s that dynamic languages were an improvement, but the answer turns out to be better static typing, which we increasingly have.\n\nThat said, let me not be misunderstood; the slew of dynamically-typed languages in the 1990s and early 2000s _were_ improvements in many ways over their predecessors. I do not mean that as a begrudging concession or anything, they were legitimately important and useful developments. But ultimately, they misdiagnosed the root problem. I say this with all respect; I sit here in 2015 judging the efforts of those in 1999 with massive amounts of hindsight and experience using languages that didn't even exist back then. All respect to Python and Perl and Ruby and Javascript. I have built much functioning software with them over the years. However, I must still judge dynamic typing on the wrong side of history in the end. I am sure I will have some equally cogent criticism of the new crop languages such as Rust in 20 years, but alas, the only way to get there is to try them out.","aSentId": 9571,"answer": "As somebody whose main languages (Python, JavaScript, PHP) are dynamically typed, I have to wholeheartedly agree. Usually when people tell you \"you should try unit tests\", \"you should try functional programming\", \"you should try *X* methodology\" you dive right in and don't see the benefits right away because you're used to your old way of thinking and also because every one of those changes require you to learn certain idiosyncrasies that are inherent to them.\n\nThis is not my experience with static typing. The benefits presented itself almost instantly. When you are able to use a statically typed language with a good or even decent type system and good type inference, C# for example, justifying the use of a dynamically typed  languages becomes much, much more difficult.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 9570,"question": "&gt; It's funny how dynamic languages seem to move towards a more static approach, and you could argue that the inverse is also happening\n\nThe movement of dynamic languages to static is strong and pervasive, that is, once you start using it, huge chunks of your source code will start growing static annotations. The movement of static languages to dynamic is anemic, weak, and often used just for interacting with particular systems with some form of \"variant\" type or in some small subsystem that probably has something to do with serialization, where it is still ultimately just a convenience.\n\nAnd even _those_ movements would probably be better served by something like Go's interfaces.\n\nPersonally, I'm ready to call it... dynamic typing is wrong. It is an accident of history that statically-typed languages were so bad in the 90s that dynamic languages were an improvement, but the answer turns out to be better static typing, which we increasingly have.\n\nThat said, let me not be misunderstood; the slew of dynamically-typed languages in the 1990s and early 2000s _were_ improvements in many ways over their predecessors. I do not mean that as a begrudging concession or anything, they were legitimately important and useful developments. But ultimately, they misdiagnosed the root problem. I say this with all respect; I sit here in 2015 judging the efforts of those in 1999 with massive amounts of hindsight and experience using languages that didn't even exist back then. All respect to Python and Perl and Ruby and Javascript. I have built much functioning software with them over the years. However, I must still judge dynamic typing on the wrong side of history in the end. I am sure I will have some equally cogent criticism of the new crop languages such as Rust in 20 years, but alas, the only way to get there is to try them out.","aSentId": 9573,"answer": "I think you make 'dynamic going partially typed' sound like a failed concept, or at least far worse than reaching an equilibrium going the other way? And I don't really get that.\n\nAnd what do you mean when you say 'root problem' and misdiagnosis?\n\nI just want the best of both worlds: going from strong types to none and back as it pleases me.\nSubjectively I agree that sprinkling type hints doesn't feel right - in comparison using e.g. _auto_ in C++ &gt;= 11 was liberating; but that could also have been 'Stockholm syndrome' w.r.t. C++.\n\nBut I don't see two sides (in battle) anyway; just different choices. If it were a battle, then like any good battle [1], it would surely be raging since the stones ages of computing - and few (if any) of those ended with a clear winner, right?\n\n[1] to clarify: 'vim vs emacs', 'to collect garbage or not', etc.; a 'good battle' is an oxymoron.\n\nIt occurs to me that I may be overly critical because this (kind of) black and white argumentation got by me (for a moment); and then it makes me angry, because things are never that simple. But I shouldn't take that out on you.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 9568,"question": "Interesting.\n\n* CPython may be about to add type annotations.\n* Ruby wants to add static features.\n* PHP has had type hinting for non-scalar types for some time now, is about to get return type declarations (already passed) and now wants to add type hinting for scalar types.\n\nIt's funny how dynamic languages seem to move towards a more static approach, and you could argue that the inverse is also happening; just like imperative languages have been adding functional features.\n\nHaving worked with modern PHP, non-scalar type hinting (i.e. interfaces, classes) is something that has changed my productivity and my sanity. Even though there is no enforcement at compilation time, because of lack of compilation of course, the runtime telling you \"that's not supposed to go there\" is of immense help when debugging. Not to mention code readability and maintainability. Couple this with the fantastic tooling that JetBrains provides via PhpStorm and you don't even have to run the code to know you done fucked up.\n\nSince I started working with C#, it's been clear to me that static typing is superior to dynamic typing. And no, PHP is not my only exposure to it, I've written my share of Python code; it's the same.\n\nTL;DR: Ruby folks, be happy if this happens","aSentId": 9575,"answer": "I imagine that for most mainstream, general use, languages that are still in active development we will see more convergence towards some amalgamation of the best features of other languages. Outside of irrational fanboyism, most people want the languages they are using daily to be better, even if it means including features that are somewhat foreign, like closures, lambdas, etc, in a langauge like Java, or classes in JavaScript.\n\nI also expect another divergence when some new big thing is invented, like OO was back in the day, though I can't say what that is currently.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 9568,"question": "Interesting.\n\n* CPython may be about to add type annotations.\n* Ruby wants to add static features.\n* PHP has had type hinting for non-scalar types for some time now, is about to get return type declarations (already passed) and now wants to add type hinting for scalar types.\n\nIt's funny how dynamic languages seem to move towards a more static approach, and you could argue that the inverse is also happening; just like imperative languages have been adding functional features.\n\nHaving worked with modern PHP, non-scalar type hinting (i.e. interfaces, classes) is something that has changed my productivity and my sanity. Even though there is no enforcement at compilation time, because of lack of compilation of course, the runtime telling you \"that's not supposed to go there\" is of immense help when debugging. Not to mention code readability and maintainability. Couple this with the fantastic tooling that JetBrains provides via PhpStorm and you don't even have to run the code to know you done fucked up.\n\nSince I started working with C#, it's been clear to me that static typing is superior to dynamic typing. And no, PHP is not my only exposure to it, I've written my share of Python code; it's the same.\n\nTL;DR: Ruby folks, be happy if this happens","aSentId": 9577,"answer": "Visual Basic went down that road too. While never as dynamic as the ones you mentioned, it none the less slowly migrated towards more and more static enforcement.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 9579,"question": "Python has had annotations for &gt; 7 years now, there was just never any semantics, only syntax.","aSentId": 9580,"answer": "Are you sure? I pressume that means you can use them? I ask because in 4 years working with Python on and off I never came across a piece of working code that had type annotations that the interpreter would enforce ","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 9566,"question": "Consider static typing","aSentId": 9582,"answer": "I have never heard anyone calling untyped languages *unityped*. Every time I've come across the term *unityped* it has been used to describe dynamically typed languages. \n\nA dynamically typed language exposes a single type to the programmer, lets call it `T`, and every value is of this type and every method/function has the type `T* -&gt; T` (where `T*` denotes a list of parameters). Hence unityped.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 9583,"question": "I have never heard anyone calling untyped languages *unityped*. Every time I've come across the term *unityped* it has been used to describe dynamically typed languages. \n\nA dynamically typed language exposes a single type to the programmer, lets call it `T`, and every value is of this type and every method/function has the type `T* -&gt; T` (where `T*` denotes a list of parameters). Hence unityped.","aSentId": 9584,"answer": "Additionally, it's wrong in how it describes what the unitype is:\n\n&gt;  and aha, you fool, I tricked you, it\u2019s the empty piece of metadata!\n\nThe type we annotate everything with isn't the *empty* type, it's the universal type where you have a tagged union of literally every possible kind of value in the language.\n\nThat's why dynamic languages work - you always have access to the tag to figure out what you're actually dealing with.\n\nFor the most part, it's an argument that comes from type theorists, for whom type systems are by definition static.  Given that type theory predates compilers by about 50 years, that insistence is understandable, if not entirely useful.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 9585,"question": "Additionally, it's wrong in how it describes what the unitype is:\n\n&gt;  and aha, you fool, I tricked you, it\u2019s the empty piece of metadata!\n\nThe type we annotate everything with isn't the *empty* type, it's the universal type where you have a tagged union of literally every possible kind of value in the language.\n\nThat's why dynamic languages work - you always have access to the tag to figure out what you're actually dealing with.\n\nFor the most part, it's an argument that comes from type theorists, for whom type systems are by definition static.  Given that type theory predates compilers by about 50 years, that insistence is understandable, if not entirely useful.","aSentId": 9586,"answer": "&gt; That's why dynamic languages work - you always have access to the tag to figure out what you're actually dealing with.\n\nCounterexample: PHP.\n\nIf the above was true, then there wouldn't be issues with automatic conversion like the `pack`/`unpack` bugs.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 9587,"question": "&gt; That's why dynamic languages work - you always have access to the tag to figure out what you're actually dealing with.\n\nCounterexample: PHP.\n\nIf the above was true, then there wouldn't be issues with automatic conversion like the `pack`/`unpack` bugs.","aSentId": 9588,"answer": "Is that because PHP is a wonky-typed language? :-)","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 9589,"question": "Is that because PHP is a wonky-typed language? :-)","aSentId": 9590,"answer": "Ohh, I like that.  \nI'm going to have to us it.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 9583,"question": "I have never heard anyone calling untyped languages *unityped*. Every time I've come across the term *unityped* it has been used to describe dynamically typed languages. \n\nA dynamically typed language exposes a single type to the programmer, lets call it `T`, and every value is of this type and every method/function has the type `T* -&gt; T` (where `T*` denotes a list of parameters). Hence unityped.","aSentId": 9592,"answer": "I don't know if \"unityped\" is correct, but this:\n\n&gt; A dynamically typed language exposes a single type to the programmer, lets call it T, and every value is of this type \n\nis not true. Many dynamically typed languages are also statically typed, such as ObjC or Dart. Conversely many statically typed languages incorporate elements of dynamic typing, like C#. So it's not the case that all dynamically typed languages are unityped.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 9593,"question": "I don't know if \"unityped\" is correct, but this:\n\n&gt; A dynamically typed language exposes a single type to the programmer, lets call it T, and every value is of this type \n\nis not true. Many dynamically typed languages are also statically typed, such as ObjC or Dart. Conversely many statically typed languages incorporate elements of dynamic typing, like C#. So it's not the case that all dynamically typed languages are unityped.","aSentId": 9594,"answer": "This used to be the case. But sure, there are some exceptions.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 9566,"question": "Consider static typing","aSentId": 9596,"answer": "OK, now that I read the article...\n\n&gt;That\u2019s important because it would preserve some of the feel of duck typing;\n\nWhat exactly is holding one back from doing statical typed duck typing \u2013 except that it weakens the type system?\n\nIt's basically implicit interfaces, are there technical hurdles?","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 9597,"question": "OK, now that I read the article...\n\n&gt;That\u2019s important because it would preserve some of the feel of duck typing;\n\nWhat exactly is holding one back from doing statical typed duck typing \u2013 except that it weakens the type system?\n\nIt's basically implicit interfaces, are there technical hurdles?","aSentId": 9598,"answer": "&gt; What exactly is holding one back from doing statical typed duck typing \u2013 except that it weakens the type system?\n\nI'm not sure row typing really \"weakens\" record types in any meaningful sense.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 9599,"question": "&gt; What exactly is holding one back from doing statical typed duck typing \u2013 except that it weakens the type system?\n\nI'm not sure row typing really \"weakens\" record types in any meaningful sense.","aSentId": 9600,"answer": "&gt; I'm not sure row typing really \"weakens\" record types in any meaningful sense.\n\nSure it does.  \nLet's say that you're modeling a pair of coordinate-systems `[x,y]`, but you don't want to be able to interchange values of systems 1 and 2. (Say, perhaps, something like Battleship.)\n\n    generic\n    package Coords is\n        type Coordinate is record\n            X, Y : Integer;\n        end record;\n    end record Coords;\n\nInstantiating the above twice gives us two separate and distinct types, duck-typing would mean that these types are interchangeable, thus showing how the type-system is weakened.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 9601,"question": "&gt; I'm not sure row typing really \"weakens\" record types in any meaningful sense.\n\nSure it does.  \nLet's say that you're modeling a pair of coordinate-systems `[x,y]`, but you don't want to be able to interchange values of systems 1 and 2. (Say, perhaps, something like Battleship.)\n\n    generic\n    package Coords is\n        type Coordinate is record\n            X, Y : Integer;\n        end record;\n    end record Coords;\n\nInstantiating the above twice gives us two separate and distinct types, duck-typing would mean that these types are interchangeable, thus showing how the type-system is weakened.","aSentId": 9602,"answer": "&gt; Let's say that you're modeling a pair of coordinate-systems [x,y], but you don't want to be able to interchange values of systems 1 and 2. (Say, perhaps, something like Battleship.)\n\n 1. Your particular example is a failure of abstraction, and not row typing. If you want types X and Y to be distinct despite having the same or similar representations, you have to *hide* those details. The fact that hiding is the default on OO does not make OO \"stronger\", just different.\n\n 2. \"Strength\" has no formal definition, so I can just as easily argue that row typing permits me to express *more* functions than a non-row typed language, and thus is \"stronger\" (similar to how System F is \"stronger\" than the simply typed lambda calculus). For instance, many subtyping patterns have translations into row typing which cannot be expressed in other ways. Row typing can properly type transparent proxies, for instance.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 9603,"question": "&gt; Let's say that you're modeling a pair of coordinate-systems [x,y], but you don't want to be able to interchange values of systems 1 and 2. (Say, perhaps, something like Battleship.)\n\n 1. Your particular example is a failure of abstraction, and not row typing. If you want types X and Y to be distinct despite having the same or similar representations, you have to *hide* those details. The fact that hiding is the default on OO does not make OO \"stronger\", just different.\n\n 2. \"Strength\" has no formal definition, so I can just as easily argue that row typing permits me to express *more* functions than a non-row typed language, and thus is \"stronger\" (similar to how System F is \"stronger\" than the simply typed lambda calculus). For instance, many subtyping patterns have translations into row typing which cannot be expressed in other ways. Row typing can properly type transparent proxies, for instance.","aSentId": 9604,"answer": "&gt; If you want types X and Y to be distinct despite having the same or similar representations, you have to hide those details.\n\nExcept `X` and `Y` *aren't* types, they're components of the record which \"`Coordinate`\" is defined to be. As I said, \"instantiating the above twice gives us two separate and distinct types\" and would be achieved like this:\n\n    With Coords;\n    Package Example is\n    \n        Package System_1 is new Coords;\n        Package System_2 is new Coords;\n    \n    End Example;\n\nPackage Example instantiates two instances of Coords, both of which have the type `Coordinate` -- however, `System_1.Coordinate` is not interchangeable with `System_2.Coordinate`.\n\n&gt; If you want types X and Y to be distinct despite having the same or similar representations, you have to hide those details. The fact that hiding is the default on OO does not make OO \"stronger\", just different.\n\nHiding the implementation is not needed to ensure the strength [read integrity] of the type-system, as shown above.\n\n\n","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 9605,"question": "&gt; If you want types X and Y to be distinct despite having the same or similar representations, you have to hide those details.\n\nExcept `X` and `Y` *aren't* types, they're components of the record which \"`Coordinate`\" is defined to be. As I said, \"instantiating the above twice gives us two separate and distinct types\" and would be achieved like this:\n\n    With Coords;\n    Package Example is\n    \n        Package System_1 is new Coords;\n        Package System_2 is new Coords;\n    \n    End Example;\n\nPackage Example instantiates two instances of Coords, both of which have the type `Coordinate` -- however, `System_1.Coordinate` is not interchangeable with `System_2.Coordinate`.\n\n&gt; If you want types X and Y to be distinct despite having the same or similar representations, you have to hide those details. The fact that hiding is the default on OO does not make OO \"stronger\", just different.\n\nHiding the implementation is not needed to ensure the strength [read integrity] of the type-system, as shown above.\n\n\n","aSentId": 9606,"answer": "&gt; Except X and Y aren't types\n\nI wasn't referring to the properties of the component, I was referring to any X and Y types. Unfortunate name clash. Substitute T0 and T1 for X and Y in my previous post.\n\n&gt; Package Example instantiates two instances of Coords, both of which have the type Coordinate -- however, System_1.Coordinate is not interchangeable with System_2.Coordinate.\n\nMy point was that if they are not interchangeable, then they should have different types. The whole point of types is to make illegal states unrepresentable.\n\nYou can even share the same implementation by using what's commonly known as \"phantom types\", and instantiating the component with different phantom types for those that shouldn't be interchangeable.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 9607,"question": "&gt; Except X and Y aren't types\n\nI wasn't referring to the properties of the component, I was referring to any X and Y types. Unfortunate name clash. Substitute T0 and T1 for X and Y in my previous post.\n\n&gt; Package Example instantiates two instances of Coords, both of which have the type Coordinate -- however, System_1.Coordinate is not interchangeable with System_2.Coordinate.\n\nMy point was that if they are not interchangeable, then they should have different types. The whole point of types is to make illegal states unrepresentable.\n\nYou can even share the same implementation by using what's commonly known as \"phantom types\", and instantiating the component with different phantom types for those that shouldn't be interchangeable.","aSentId": 9608,"answer": "&gt; My point was that if they are not interchangeable, then they should have different types. The whole point of types is to make illegal states unrepresentable.\n\nYes, but that's not the *only* point -- the other point is to restrict operations. To wit, consider the following:\n\n    Function Example return Float is\n    \n       Type Fahrenheit is delta 0.01 range 0.0..1000.0;\n       Type Celsius    is delta 0.01 range 0.0..1000.0;\n       \n       A : Fahrenheit:= 0.0;\n       B : Celsius:= 128.0;\n    Begin\n      Return Float( A + B ); -- Will not compile: A and B are not compatible.\n    End Example;\n\nThis shows how it can be very useful to have two otherwise identical types be different: it can prevent the unintentional mixing of incompatible values.\n\n&gt; You can even share the same implementation by using what's commonly known as \"phantom types\", and instantiating the component with different phantom types for those that shouldn't be interchangeable.\n\nYou do realize that what you're describing is exactly what happened with the generic instantiation, right? -- Two packages, identical in form, come to exist (`System_1` and `System_2`), as they derive from the same source (`Coords`), this [abstract] source defines a particular type, so the actual instances define the actual type for themselves.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 9609,"question": "&gt; My point was that if they are not interchangeable, then they should have different types. The whole point of types is to make illegal states unrepresentable.\n\nYes, but that's not the *only* point -- the other point is to restrict operations. To wit, consider the following:\n\n    Function Example return Float is\n    \n       Type Fahrenheit is delta 0.01 range 0.0..1000.0;\n       Type Celsius    is delta 0.01 range 0.0..1000.0;\n       \n       A : Fahrenheit:= 0.0;\n       B : Celsius:= 128.0;\n    Begin\n      Return Float( A + B ); -- Will not compile: A and B are not compatible.\n    End Example;\n\nThis shows how it can be very useful to have two otherwise identical types be different: it can prevent the unintentional mixing of incompatible values.\n\n&gt; You can even share the same implementation by using what's commonly known as \"phantom types\", and instantiating the component with different phantom types for those that shouldn't be interchangeable.\n\nYou do realize that what you're describing is exactly what happened with the generic instantiation, right? -- Two packages, identical in form, come to exist (`System_1` and `System_2`), as they derive from the same source (`Coords`), this [abstract] source defines a particular type, so the actual instances define the actual type for themselves.","aSentId": 9610,"answer": "&gt; This shows how it can be very useful to have two otherwise identical types be different: it can prevent the unintentional mixing of incompatible values.\n\nThey aren't identical types though. The type declarations you list basically declare new abstract types, so the actual representations are irrelevant.\n\nIn any case, I'm not sure precisely on what we're disagreeing. In the most general sense, a type system rules out invalid expressions, which we seem to agree on. Your original post said that row types make the type system \"weaker\", but admitting more programs doesn't intrinsically make a type system \"weaker\".\n\n&gt; You do realize that what you're describing is exactly what happened with the generic instantiation, right?\n\nNot really, because it's been more than ten years since I did any hobby programming in Ada! I'm not even sure if Ada could support phantom types.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 9599,"question": "&gt; What exactly is holding one back from doing statical typed duck typing \u2013 except that it weakens the type system?\n\nI'm not sure row typing really \"weakens\" record types in any meaningful sense.","aSentId": 9612,"answer": "OK, imagine you have a function like\n\n    string giveVehicleName (ducktyped vehicle) {\n        return vehicle.toString();\n    }\n\nThere is explicit ducktyping here, btw.\n\nIf your languages base object \u2013 given there is one \u2013 has a toString() method basically every object goes in there.\n\nOf course, that's one thing being taken into account.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 9613,"question": "OK, imagine you have a function like\n\n    string giveVehicleName (ducktyped vehicle) {\n        return vehicle.toString();\n    }\n\nThere is explicit ducktyping here, btw.\n\nIf your languages base object \u2013 given there is one \u2013 has a toString() method basically every object goes in there.\n\nOf course, that's one thing being taken into account.","aSentId": 9614,"answer": "I assumed by \"statically typed duck typing\" that you meant \"row typing\", since that's usually what's meant.\n\nSo your example would look something like this:\n\n    string giveVehicleName&lt;T&gt;(T{toString:()-&gt;string} vehicle)\n    {\n        return vehicle.toString();\n    }\n\nSo it's statically known that T has a toString method, without having to lift it to some common base type shared by all inherited classes. This is what \"row typing\" gets you.\n\nThis is arguably a \"stronger\" type system than the usual Java/C# system using interfaces, subtypes, etc.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 9615,"question": "I assumed by \"statically typed duck typing\" that you meant \"row typing\", since that's usually what's meant.\n\nSo your example would look something like this:\n\n    string giveVehicleName&lt;T&gt;(T{toString:()-&gt;string} vehicle)\n    {\n        return vehicle.toString();\n    }\n\nSo it's statically known that T has a toString method, without having to lift it to some common base type shared by all inherited classes. This is what \"row typing\" gets you.\n\nThis is arguably a \"stronger\" type system than the usual Java/C# system using interfaces, subtypes, etc.","aSentId": 9616,"answer": "That's kind of what I mean.\n\nBut why stronger? It allows more and shouldn't that mean weaker?\n\nAlso, why is there &lt;T&gt; in the function name?","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 9617,"question": "That's kind of what I mean.\n\nBut why stronger? It allows more and shouldn't that mean weaker?\n\nAlso, why is there &lt;T&gt; in the function name?","aSentId": 9618,"answer": "&gt; But why stronger? It allows more and shouldn't that mean weaker?\n\nUniversal quantification allows more functions. Would you consider System F stronger or weaker than the simply typed lambda calculus? The former admits more programs than the latter, but is generally considered to be quite \"strong\".\n\nThere is no canonical meaning for \"strength\" of a type system, which why rigourous discussions never use that term. At best, we can use it informally to mean \"captures more detail about a program's semantics\".\n\n&gt; Also, why is there &lt;T&gt; in the function name?\n\nThat's meant to be a row variable for objects. I admit it's not perfectly clear what row typing should look like in C-like languages since it's never been done!","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 9619,"question": "&gt; But why stronger? It allows more and shouldn't that mean weaker?\n\nUniversal quantification allows more functions. Would you consider System F stronger or weaker than the simply typed lambda calculus? The former admits more programs than the latter, but is generally considered to be quite \"strong\".\n\nThere is no canonical meaning for \"strength\" of a type system, which why rigourous discussions never use that term. At best, we can use it informally to mean \"captures more detail about a program's semantics\".\n\n&gt; Also, why is there &lt;T&gt; in the function name?\n\nThat's meant to be a row variable for objects. I admit it's not perfectly clear what row typing should look like in C-like languages since it's never been done!","aSentId": 9620,"answer": "&gt; There is no canonical meaning for \"strength\" of a type system, which why rigourous discussions never use that term. At best, we can use it informally to mean \"captures more detail about a program's semantics\".\n\nOK.\n\nWhat I meant is that allows for more things to slip into the function accidentally.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 9597,"question": "OK, now that I read the article...\n\n&gt;That\u2019s important because it would preserve some of the feel of duck typing;\n\nWhat exactly is holding one back from doing statical typed duck typing \u2013 except that it weakens the type system?\n\nIt's basically implicit interfaces, are there technical hurdles?","aSentId": 9622,"answer": "you can think of them as HasA typeclass. Type check would work sort of, but you cannot generate efficient code.\n\n    def f(x):\n        return x.foo\n\n    \ntype of f would be: `forall T that HasA .foo of type A, T -&gt; A`. And think about 100 different structs where slot for `foo` is at different offset. You need to generate different versions of f and dispatch correct f possibly at runtime. Or make each object have slot access table, and each member access will incur additional table lookup.\n\nGoing back to type system, verbosity of HasA alone can be a turn off, especially when you want to reason about your program in terms of simple type expressions.\n\n","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 9623,"question": "you can think of them as HasA typeclass. Type check would work sort of, but you cannot generate efficient code.\n\n    def f(x):\n        return x.foo\n\n    \ntype of f would be: `forall T that HasA .foo of type A, T -&gt; A`. And think about 100 different structs where slot for `foo` is at different offset. You need to generate different versions of f and dispatch correct f possibly at runtime. Or make each object have slot access table, and each member access will incur additional table lookup.\n\nGoing back to type system, verbosity of HasA alone can be a turn off, especially when you want to reason about your program in terms of simple type expressions.\n\n","aSentId": 9624,"answer": "There's some discussion in the Haskell community about whether to add direct support for this functionality at all (it actually already works in GHC, but it requires quasiquoting and some other not-so-nice stuff) and how to do it well.\n\nThe summary seems to be that you can get away with the following type:\n\n    f :: Has foo t =&gt; t -&gt; a\n\nYou don't need the extra information that foo returns an a because you've already got that via type inference at the call site. The compiler then transforms this expression (like it does for all type classes) into a single function that takes a dictionary holding the functions for a given type t along with the other arguments to the function. The compiler then inserts the correct dictionary at the call site based on type inference.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 9623,"question": "you can think of them as HasA typeclass. Type check would work sort of, but you cannot generate efficient code.\n\n    def f(x):\n        return x.foo\n\n    \ntype of f would be: `forall T that HasA .foo of type A, T -&gt; A`. And think about 100 different structs where slot for `foo` is at different offset. You need to generate different versions of f and dispatch correct f possibly at runtime. Or make each object have slot access table, and each member access will incur additional table lookup.\n\nGoing back to type system, verbosity of HasA alone can be a turn off, especially when you want to reason about your program in terms of simple type expressions.\n\n","aSentId": 9626,"answer": "Can't this be done as part of the statical AST analysis before running and JITting the program? Or would this take too much time in non-trivial program sizes?","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 9627,"question": "Can't this be done as part of the statical AST analysis before running and JITting the program? Or would this take too much time in non-trivial program sizes?","aSentId": 9628,"answer": "Julia does that. I haven't written anything too huge, but I don't think it's a problem.","corpus": "reddit"},{"docID": "t5_2fwo","qSentId": 9597,"question": "OK, now that I read the article...\n\n&gt;That\u2019s important because it would preserve some of the feel of duck typing;\n\nWhat exactly is holding one back from doing statical typed duck typing \u2013 except that it weakens the type system?\n\nIt's basically implicit interfaces, are there technical hurdles?","aSentId": 9630,"answer": "If I'm reading what you're asking correctly, Go has it already, which the article discusses above that portion. There aren't any significant technical hurdles I'm aware of.","corpus": "reddit"}]